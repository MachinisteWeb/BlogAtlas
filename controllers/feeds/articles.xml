<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Quelques #ID et beaucoup de .CLASS]]></title>
        <description><![CDATA[Ce blog est une compilation d'articles sur le développement JavaScript Front-end jQuery, Back-end Node.js ou développement web en général.]]></description>
        <link>http://localhost:7776</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Mon, 03 Apr 2017 14:28:25 GMT</lastBuildDate>
        <atom:link href="http://localhost:7776/feeds/articles.xml" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Bruno Lesieur]]></author>
        <pubDate>Mon, 03 Apr 2017 14:28:25 GMT</pubDate>
        <copyright><![CDATA[2012-2014 Bruno Lesieur]]></copyright>
        <language><![CDATA[fr]]></language>
        <managingEditor><![CDATA[Bruno Lesieur]]></managingEditor>
        <webMaster><![CDATA[Bruno Lesieur]]></webMaster>
        <ttl>60</ttl>
        <item>
            <title><![CDATA[Vue.js vs React vs Angular vs les autres MVVM]]></title>
            <description><![CDATA[<p>Vue.js est un framework JavaScript client progressif permettant de créer, maintenir et évoluer des interfaces utilisateurs en liant les données utilisées entre la Vue et le Model. C&#39;est une alternative sérieuse à React, Angular et les autres frameworks MVVM (Modèle Vue VueModèle).</p>
<p><img src="./media/images/upload/vue.png" alt="Vue.js"></p>
<p>J&#39;ai eut l&#39;occasion d&#39;<a href="https://blog.lesieur.name/liste-des-cartes-munchkin-editions-francaises/">essayer Vue.js dans sa version 1</a> et son extrême simplicité et flexibilité m&#39;a séduite. À l’instar de <a href="http://haeresis.github.io/NodeAtlas/" title="NodeAtlas">NodeAtlas</a>, sa puissance vient de ses fonctionnalités intégrables de manière évolutives et versatiles ; on peut tout aussi bien utiliser <a href="https://vuejs.org/" title="Vue.js Version 2">Vue</a> simplement sur le formulaire d&#39;une page ou à plus grande échelle avec des composants et du routage à travers l&#39;architecture d&#39;un site complet.</p>
<p>Cependant, là où en version 1, <a href="https://vuejs.org/" title="Vue.js Version 2">Vue</a> paraissait une alternative séduisante à <a href="https://angularjs.org/" title="Angular version 1">AngularJS</a> (aka Angular 1) ou <a href="http://knockoutjs.com/" title="Knockout">Knockout</a>, dans sa version 2 il devient de plus une alternative sérieuse à <a href="https://angular.io/" title="Angular version 2">Angular</a> (aka Angular 2), <a href="https://facebook.github.io/react/" title="React">React</a> et les autres frameworks MVVM tant sur le plan des fonctionnalités que des performances.</p>
<p><strong>Pour faire simple —si vous débarquez dans le monde des framework JavaScript client MVVM et que vous ne savez pas quoi choisir— vous devriez choisir <a href="https://vuejs.org/" title="Vue.js Version 2">Vue</a> ! Quoi qu&#39;il arrive, il sera un choix pertinent pour les cas d&#39;utilisation que vous en ferrez.</strong></p>
<p>Nous allons dans cet article :</p>
<ol>
<li>rapidement exposé pourquoi vous devriez utiliser <a href="https://vuejs.org/" title="Vue.js Version 2">Vue</a> en lieu et place de <a href="https://angular.io/" title="Angular version 2">Angular</a> ou <a href="https://facebook.github.io/react/" title="React">React</a> dès maintenant et </li>
<li>traduire des explications approfondies à propos des différences entre <a href="https://vuejs.org/" title="Vue.js Version 2">Vue</a> et les autres frameworks.</li>
</ol>
<h2 id="tl-dr-pourquoi-vue-js-">tl;dr - Pourquoi Vue.js ?</h2>
<p>Rapidement, <a href="https://vuejs.org/" title="Vue.js Version 2">Vue</a> version 2 c&#39;est de :</p>
<ul>
<li>la <strong>Performance</strong> : un Dom Virtuel comme <a href="https://facebook.github.io/react/" title="React">React</a> pour augmenter sa réactivité à un taux de performance inégalable.</li>
<li>la <strong>Versatilité</strong> : une manipulation des Vues avec des directives <ul>
<li>comme <a href="https://angularjs.org/" title="Angular version 1">AngularJS</a> compatibles avec une utilisation SEO directement dans des templates ou </li>
<li>comme <a href="https://facebook.github.io/react/" title="React">React</a> directement dans des chaines JavaScript littérales et même avec JSX.</li>
</ul>
</li>
<li>la <strong>Simpliticé</strong> : une utilisation simple et indépendante comme c&#39;est le cas pour <a href="https://angularjs.org/" title="Angular version 1">AngularJS</a> ou <a href="http://knockoutjs.com/" title="Knockout">Knockout</a>.</li>
<li>la <strong>Robustesse</strong> : une utilisation complexe et structuré comme c&#39;est le cas pour <a href="https://angular.io/" title="Angular version 2">Angular</a> ou <a href="https://facebook.github.io/react/" title="React">React</a>.</li>
<li>l&#39;<strong>Évolutivité</strong> : une compatibilité entre version 1 et version 2 très proche là où <a href="https://angularjs.org/" title="Angular version 1">AngularJS</a> vs <a href="https://angular.io/" title="Angular version 2">Angular</a> sont difficilement compatibles.</li>
<li>la <strong>Complémentarité</strong> : un modèle de gestion des états à l’instar des couples <a href="https://facebook.github.io/react/" title="React">React</a>/<a href="http://redux.js.org/" title="Redux">Redux</a> nous avons <a href="https://vuejs.org/" title="Vue.js Version 2">Vue</a>/<a href="http://vuex.vuejs.org/en/intro.html" title="Vuex">Vuex</a>.</li>
<li>la <strong>Mobilité</strong> : Un activateur de rendu de code mobile natif sur iOS et Android pour <a href="https://vuejs.org/" title="Vue.js Version 2">Vue</a> avec <a href="https://alibaba.github.io/weex/" title="Weex">Weex</a> comme <a href="https://facebook.github.io/react-native/" title="ReactNative">ReactNative</a> l&#39;est pour <a href="https://facebook.github.io/react/" title="React">React</a>.</li>
<li>la <strong>Maintenabilité</strong> : <a href="https://vuejs.org/" title="Vue.js Version 2">Vue</a> vient avec tout un set d&#39;outil lui permettant d&#39;être déboguer comme <a href="https://facebook.github.io/react/" title="React">React</a> ou <a href="https://angular.io/" title="Angular version 2">Angular</a>.</li>
</ul>
<h2 id="vue-js-comparaison-avec-les-autres-frameworks">Vue.js : comparaison avec les autres Frameworks</h2>
<blockquote>
<p>Cette partie va être la traduction du long et très intéressant billet de <a href="https://vuejs.org/" title="Vue.js Version 2">Vue</a> à propos de ses principales différences et ressemblances avec ses concurrants. Ainsi à partir d&#39;ici, là suite de cette page va être la <a href="https://vuejs.org/v2/guide/comparison.html">traduction française de cette page en date du 15/11/2016</a> pour la version 2 de <a href="https://vuejs.org/" title="Vue.js Version 2">Vue</a>, les propos hors de cet encart ne sont donc plus les miens pour ce qui va suivre.</p>
</blockquote>
<p>« C&#39;est définitivement la page du guide la plus difficile à écrire, mais nous avons le sentiment que c&#39;est important. Fortes sont les chances pour que, vous ayez des problèmes à résoudre et que vous utilisiez une autre librairie pour les résoudre. Vous êtes ici parce que vous voulez savoir si Vue peut résoudre vos problèmes spécifiques encore mieux. C&#39;est la réponse que nous espérons vous apporter.</p>
<p>Nous allons également essayer d&#39;être objectif. En tant que mainteneurs, nous aimons énormément Vue. Il y a tellement de problèmes que nous pensons pouvoir être résolu bien mieux avec nous que nul part ailleurs. Si vous ne pouvez pas croire ça, nous allons travailler là dessus. Nous voulons être juste et précis. Les autres librairies offres des avantages significatifs, comme React et son vaste écosystème de rendu alternatif ou le support de Knockout des navigateurs jusqu&#39;à IE6 ; nous allons essayer de prendre en compte cela correctement.</p>
<p>Nous apprécierions également <strong>votre</strong> aide pour garder ce document à jour car le monde de JavaScript bouge rapidement ! Si vous remarquez quelque chose de faux ou quelque chose qui ne semble pas tout à fait être juste, faites le nous savoir en <a href="https://github.com/vuejs/vuejs.org/issues/new?title=Inaccuracy+in+comparisons+guide">ouvrant un ticket</a>.</p>
<h2 id="react">React</h2>
<p>React et Vue ont beaucoup en commun. Tous les deux :</p>
<ul>
<li>utilisent un DOM virtuel</li>
<li>fournissent des composants de vue réactifs et composables</li>
<li>reste concentrés sur le cœur de métier, en déléguant le routage et la gestion d&#39;état à des librairies connexes.</li>
</ul>
<p>Ayant un champ d&#39;action similaire, nous avons passer plus de temps à affiner cette comparaison que les autres. Nous voulons être sure non seulement de nos précisions techniques, mais aussi de leur justesse. Nous soulignons que React éclipse Vue, par exemple dans la richesse de son écosystème et l&#39;abondance de ses rendus customisables.</p>
<p>Ceci étant dit, il est inévitable que la comparaison va paraître biaisée entre Vue et les utilisateurs de React, tant les sujets explorés tendent à la subjectivité. Nous reconnaissons l’existence de goût différent en matière d&#39;implémentation technique, et cette comparaison va principalement avoir pour but de décrire en quoi vous pourriez potentiellement préférer Vue si vos préférences coïncides avec les nôtres.</p>
<p>La communauté React <a href="https://github.com/vuejs/vuejs.org/issues/364">a été sollicitée</a> pour nous aider à atteindre cette justesse, avec des remerciements spéciaux à Dan Abramov de l&#39;équipe React. Il a été extrêmement généreux en accordant son temps et son expertise pour nous aider à remanier ce document jusqu&#39;à ce que le résultat final <a href="https://github.com/vuejs/vuejs.org/issues/364#issuecomment-244575740">nous convienne</a> à tous les deux.</p>
<h3 id="profiles-de-performance">Profiles de performance</h3>
<p>Dans tous les scénarios de cas réel que nous avons pu tester, Vue surpasse React avec une bonne marge. Si vos sourcils viennent tout juste de se relever, lisez plus loin. Nous allons décortiquer pourquoi (et même inclure un benchmark développé en collaboration avec l&#39;équipe de React).</p>
<h4 id="performance-de-rendu">Performance de rendu</h4>
<p>Quand on rend une UI, la manipulation du DOM est en général l&#39;opération la plus coûteuse et malheureusement, aucune librairie ne peut rendre ces opérations plus rapides. Le mieux que nous puissions faire est :</p>
<ol>
<li>Minimiser le nombre de changement nécessaire dans le DOM. React et Vue utilisent tous les deux un DOM virtuel pour accomplir cela et les deux implémentations fonctionnent aussi bien l&#39;une que l&#39;autre.</li>
<li>Et par dessus cela (en pure calcules JavaScript), il est également possible de manipuler le DOM. C&#39;est là que Vue et React sont différents.</li>
</ol>
<p>JavaScript est mis à contribution directement pour calculer les opérations nécessaire sur le DOM. Vue et React utilisent un DOM virtuel pour parvenir à cela, mais l&#39;implémentation virtuelle de Vue (un fork de <a href="https://github.com/snabbdom/snabbdom">snabbdom</a>) est moins lourde en poids et utilise moins de ressources que l&#39;implémentation de React.</p>
<p>Vue comme React offre également des composants fonctionnels, qui sont sans états et sans instanciations - et donc, qui requiert moins de ressources. Quand ils sont utilisés dans des situations où la performance est critique, Vue est une fois de nouveau plus rapide. Pour démontrer cela, nous avons créé un simple <a href="https://github.com/chrisvfritz/vue-render-performance-comparisons">projet de benchmark</a> qui fait le rendu de 10000 list items 100 fois. Nous vous encourageons à essayer cela vous-même, sachant que le résultat varie en fonction de la machine et du navigateur utilisé — et en réalité, il varie même entre chaque exécution du fait de la nature des moteurs JavaScript.</p>
<p>Si vous n&#39;en avez pas le courage, voici ci-dessous les résultats d&#39;une des exécutions avec Chrome 52 sur un MacBook Air 2014. Pour être clair, chacun des benchmarks a été exécuté de manière successive 29 fois, et nous affichons ci-dessous les meilleurs résultats d&#39;exécution :</p>
<table>
<thead>
<tr>
<th></th>
<th>Vue</th>
<th>React</th>
</tr>
</thead>
<tbody>
<tr>
<td>Plus rapide</td>
<td>23ms</td>
<td>63ms</td>
</tr>
<tr>
<td>Médianne</td>
<td>42ms</td>
<td>81ms</td>
</tr>
<tr>
<td>Moyenne</td>
<td>51ms</td>
<td>94ms</td>
</tr>
<tr>
<td>95th Perc.</td>
<td>73ms</td>
<td>164ms</td>
</tr>
<tr>
<td>Plus lent</td>
<td>343ms</td>
<td>453ms</td>
</tr>
</tbody>
</table>
<h4 id="performance-de-mise-jour">Performance de mise à jour</h4>
<p>Avec React, quand l&#39;état d&#39;un composant change, cela enclenche de nouveau le rendu de tous les sous-composants inclues, en commençant par le composant racine. Pour empêcher le re-rendu des composants enfants, vous devez implémenter <samp>shouldComponentUpdate</samp> partout et utilisez des structures de donnée immuable. Dans Vue, les dépendances d&#39;un composant dépendants sont automatiquement suivi, ainsi le système sait précisément quels composants ont besoin d&#39;être re-rendu.</p>
<p>Cela signifie que les mises à jour dans un Vue basique seront plus rapide que celles d&#39;un React basique, et grâce au rendu performant de Vue, même un React pleinement optimisé est plus lent qu&#39;un Vue basique.</p>
<h4 id="en-d-veloppement">En développement</h4>
<p>Alors que la performance en production est la métrique la plus importante car directement en corrélation avec l&#39;expérience de l&#39;utilisateur final, la performance en développement est tout aussi importante car associée à l&#39;expérience du développeur.</p>
<p>Vue et React restent assez rapide en développement pour les applications les plus standard. Cependant, quand vous avez besoin d&#39;un tôt de rafraîchissement par frame pour de la visualisation de données ou l&#39;animation, nous avons vu des cas ou Vue supportait 10 frames par seconde en développement là ou React ne supportait que 1 frame par seconde.</p>
<p>Cela est dû au lourdes vérifications invariantes faites par React en mode développement, cela aide à l&#39;obtention d&#39;excellant warning et messages d&#39;erreur. Nous sommes d&#39;accord pour dire que cela est aussi important pour Vue, mais nous avons essayer de garder un œil sur la performance pendant que nous implémentions ces vérifications.</p>
<h3 id="html-amp-css">HTML &amp; CSS</h3>
<p>Dans React, tout n&#39;est que JavaScript, cela paraît simple et élégant — jusqu&#39;à ce que vous creusiez plus profondément. La malheureuse réalité c&#39;est que cela ré-invente le concept de HTML et CSS sans JavaScript, et, alors que cela résout certains problèmes du modèle traditionnel, cela peut en créer d&#39;autres. Dans Vue, nous préférons embrasser les technologies du web et se placer au dessus d&#39;elles. Pour vous montrer ce que cela signifie, nous allons nous plonger dans plusieurs exemples.</p>
<h4 id="jsx-vs-template">JSX vs Template</h4>
<p>Avec React, tous les composants expriment leur UI à travers leurs fonctions de rendu en utilisant JSX, une syntaxe déclarative comme du XML qui fonctionne au sein de JavaScript. En voici un exemple ici, <a href="https://github.com/vuejs/vuejs.org/issues/364#issuecomment-244582684">vérifier par la communauté React</a>.</p>
<pre class="prettyprint linenums"><code class="lang-js">render () {
    let { items } = this.props
    let children
    if (items.length &gt; 0) {
        children = (
            &lt;ul&gt;
                {items.map(item =&gt;
                      &lt;li key={item.id}&gt;{item.name}&lt;/li&gt;
                )}
              &lt;/ul&gt;
        )
      } else {
        children = &lt;p&gt;No items found.&lt;/p&gt;
      }
      return (
        &lt;div className=&#39;list-container&#39;&gt;
              {children}
        &lt;/div&gt;
      )
}
</code></pre>
<p>Les fonctions de rendu de JSX ont quelques avantages :</p>
<ul>
<li>Vous pouvez utiliser le pouvoir d&#39;un langage de programmation complet (JavaScript) pour créer vos vues.</li>
<li>Les outils d&#39;aide (ex : analyse des erreurs, vérifications de typage, auto-complétion...) pour JSX sont en bien des points plus avancés que ce qui est actuellement disponible dans les templates de Vue.</li>
</ul>
<p>Dans Vue, nous avons également des <a href="https://vuejs.org/v2/guide/render-function.html">fonctions de rendu</a> et même <a href="https://vuejs.org/v2/guide/render-function.html#JSX">un support de JSX</a>, car parfois, nous avons besoin de cette puissance. Cependant, pour une expérience par défaut nous offrons les templates comme une alternative simple :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;template&gt;
    &lt;div class=&quot;list-container&quot;&gt;
        &lt;ul v-if=&quot;items.length&quot;&gt;
            &lt;li v-for=&quot;item in items&quot;&gt;
                {{ item.name }}
              &lt;/li&gt;
        &lt;/ul&gt;
        &lt;p v-else&gt;No items found.&lt;/p&gt;
    &lt;/div&gt;
&lt;/template&gt;
</code></pre>
<p>Les quelques avantages sont ici :</p>
<ul>
<li>Moins d&#39;implémentations et décisions de style sont faites lors de l&#39;écriture du template</li>
<li>Un template est toujours déclaratif</li>
<li>Tout HTML valide est un template valide</li>
<li>Cela ce lit plus comme de l&#39;anglais (ex : for each item in items)</li>
<li>Une version avancée de JavaScript n&#39;est pas requise ce qui améliore la lisibilité</li>
</ul>
<p>Ce n&#39;est pas seulement plus facile pour le développeur de les écrire, c&#39;est également plus facile pour les designers et développeurs moins expérimentés de comprendre et de contribuer au code.</p>
<p>Un autre bénéfice des templates respectant le HTML est que vous pouvez utiliser des préprocesseur comme Pug (plus connu comme Jade) pour créer vos templates Vue :</p>
<pre class="prettyprint linenums"><code class="lang-jade">div.list-container
    ul(v-if=&quot;items.length&quot;)
        li(v-for=&quot;item in items&quot;) {{ item.name }}
    p(v-else) No items found.
</code></pre>
<h4 id="css-embarqu-dans-les-composants">CSS embarqué dans les Composants</h4>
<p>À moins que vous ne répartissiez les composants dans plusieurs fichiers (par exemple avec <a href="https://github.com/gajus/react-css-modules">CSS Modules</a>), l&#39;implémentation CSS dans React est souvent faites via une solution CSS-dans-JS. Il y a beaucoup de solutions en compétition, chacune avec leurs propres mises en garde à respecter. Un problème commun a ces fonctionnalités est que les états de survoles, les media queries, et les pseudo-selectors demandent de lourdes dépendances pour ré-inventer ce que le CSS fait déjà — ou alors ne sont pas supportés. S&#39;il n&#39;est pas optimisé avec précaution, le CSS-dans-JS peut aussi introduire des problèmes d&#39;exécutions complexes en terme de performance. Plus important encore, cela dévie de l&#39;expérience première offerte par du CSS standard.</p>
<p>Vue d&#39;un autre côté, donne l&#39;accès complet au CSS à l&#39;intérieur d&#39;un <a href="https://vuejs.org/v2/guide/single-file-components.html">simple fichier composant</a> :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;style scoped&gt;
    @media (min-width: 250px) {
        .list-container:hover {
            background: orange;
        }
    }
&lt;/style&gt;
</code></pre>
<p>L&#39;attribut optionnel <samp>scoped</samp> encapsule automatiquement ce CSS dans votre composant en ajoutant un unique attribut (comme par exemple <samp>data-v-21e5b78</samp>) à l&#39;élément et compile <samp>.list-container:hover</samp> en tant que <samp>.list-container[data-v-21e5b78]:hover</samp>.</p>
<p>Si vous êtes déjà familier avec les Modules CSS, les fichier de composant Vue on également un <a href="http://vue-loader.vuejs.org/en/features/css-modules.html">support first-class pour cela</a>.</p>
<p>Finalement, juste comme en HTML, vous avez également l&#39;option d&#39;écrire votre CSS en utilisant n&#39;importe quel préprocesseurs (ou post processeurs) que vous souhaitez, vous permettant de tirer parti des bibliothèques existantes dans ces écosystèmes. Vous pouvez aussi effectuer des opérations centrés sur le design comme la manipulation de couleur durant votre processus de build, au lieux d&#39;importer des librairies JavaScript spécialisées qui vont augmenter le poids de votre build et complexifier votre application.</p>
<h3 id="-volutivit-">Évolutivité</h3>
<h4 id="am-lioration-progressive">Amélioration progressive</h4>
<p>Pour de large application, Vue et React offrent des solutions de routage robustes. La communauté React a également été réellement innovante en matière de solutions de gestion d&#39;état (ex : Flux/Redux). Ces modèles de gestion d&#39;état et <a href="https://github.com/egoist/revue">même Redux lui-même</a> peuvent être facilement intégrés dans une application Vue. En fait, Vue a même poussé ce modèle un cran plus loin avec <a href="https://github.com/vuejs/vuex">Vuex</a>, une solution de gestion d&#39;état inspiré par Elm qui s&#39;intègre profondément dans Vue et qui, nous pensons, offre une expérience de développement supérieure.</p>
<p>Une autre importante différence entre ces offres est que les librairies accompagnant la solution de gestion d&#39;état et de routage (parmi <a href="https://github.com/vuejs">d&#39;autres concernées</a>) sont toutes officiellement supportées et gardées à jour avec le cœur de la librairie. React préfère à la place choisir de laisser cette partie à la communauté, créant un écosystème plus fragmenté. Devenu plus populaire avec le temps, l&#39;écosystème de React est considérablement plus riche que celui de Vue.</p>
<p>Pour finir, Vus offre un <a href="https://github.com/vuejs/vue-cli">outil de génération de projet</a> qui rend facile de commencer un nouveau projet en utilisant le système de build de votre choix, incluant <a href="https://github.com/vuejs-templates/webpack">Webpack</a>, <a href="https://github.com/vuejs-templates/browserify">Browserify</a>, ou même sans <a href="https://github.com/vuejs-templates/simple">système de build</a>. React fait aussi des progrès de ce côté là avec <a href="https://github.com/facebookincubator/create-react-app">create-react-app</a>, mais a pour le moment quelque limitations :</p>
<ul>
<li>Il ne permet aucune configuration durant la génération du projet, là où les templates de projet Vue permettent l&#39;utilisation de customisation à la sauce Yeoman.</li>
<li>Il n&#39;offre qu&#39;un seul template pour vous permettre de créer une application en une seule page, là où Vue offre une large variété de template pour différents objectifs et système de build.</li>
<li>Il ne permet pas la génération de projets depuis des templates fait par les utilisateurs, ce qui peut être particulièrement utile aux environnements d&#39;entreprises avec des conventions pré-établies.</li>
</ul>
<p>Il est important de noter que beaucoup de ses limitations sont des choix d&#39;architecture intentionnels pris par l&#39;équipe de create-react-app et a également ses avantages. Par exemple, aussi longtemps que vos besoins de projet seront vraiment simple vous n&#39;aurez jamais besoin de « eject » pour customiser votre processus de build, vous serez capable de le mettre à jour avec des dépendances. Vous pouvez en lire plus à propos de <a href="https://github.com/facebookincubator/create-react-app#philosophy">la différence de philosophie ici</a>.</p>
<h4 id="utilisation-minimale">Utilisation minimale</h4>
<p>React est renommé pour sa courbe d&#39;apprentissage abrupte. Avant de commencer, vous devez en savoir plus à propos de JSX et probablement de ES2015+, puisque beaucoup d&#39;exemple React utilisent la syntaxe de classe. Vous devez également apprendre ce qu&#39;il faut à propos des système de build, car bien que vous puissiez techniquement utiliser le compilateur Babel live fourni dans votre navigateur, cela n&#39;est absolument pas envisageable en production.</p>
<p>Alors que Vue peut-être augmenter pour être l&#39;égale de React, sinon mieux, il est également possible d&#39;en utiliser simplement l&#39;essence juste comme le fait jQuery.</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>Ainsi vous pouvez commencer à écrire du code Vue même avec la version minifiée sans vous sentir coupable ou vous souciez des problèmes de performance.</p>
<p>Puisque vous n&#39;avez pas besoin d&#39;en savoir plus à propos de JSX et de ES2015, ou des systèmes de build pour commencer à travailler avec Vue, il faut généralement moins d&#39;un jour à un développeur pour lire <a href="https://vuejs.org/v2/guide/">le guide</a> et en savoir assez sur la construction d&#39;applications complexes.</p>
<h3 id="rendu-natif">Rendu natif</h3>
<p>ReactNavive vous permet d&#39;écrire pour créer un rendu natif pour les applications iOS et Android en utilisant le même modèle de composant que React. Cela est génial pour un développeur, vous permettant d&#39;appliquer vos connaissances d&#39;un framework sur de multiple plateformes. De ce côté, Vue a une collaboration officielle avec <a href="https://alibaba.github.io/weex/">Weex</a>, un framework de développement d&#39;UI multi-lateforme développé par le groupe Alibaba, qui utilise Vue en tant que framework JavaScript d&#39;exécution. Cela signifie qu&#39;avec Weex, vous pouvez utiliser les même syntaxe de composant Vue pour qu&#39;il ne soit pas uniquement rendable sur un navigateur, mais également nativement sur iOS ou Android !</p>
<p>Actuellement, Weex est toujours activement en développement et n&#39;a été testé aussi mûrement que ReactNative, mais sont développement est piloté en fonction des besoins d&#39;un large e-commerce mondiale, et l&#39;équipe de Vue est aussi en étroite collaboration avec l&#39;équipe de Weex pour assurer la meilleure expérience pour les développeurs de Vue.</p>
<h3 id="avec-mobx">Avec MobX</h3>
<p>MobX est devenu populaire dans la communauté React et utilise actuellement un système de réactivité identique à Vue. Dans une certaine mesure, le flux de travail React + MobX peut être considéré comme plus verbeux que Vue. Donc si vous utilisez cette combinaison et qu&#39;elle vous plait, l&#39;étape suivante la plus probable et logique est d&#39;utiliser Vue. »</p>
<h2 id="angular-1">Angular 1</h2>
<p>Beaucoup de la syntaxe de Vue ressemble à celle de Angular (ex : <samp>v-if</samp> vs <samp>ng-if</samp>). Cela est dû au fait qu&#39;il y a un certain nombre de chose bien faites dans Angular et que cela a été une source d&#39;inspiration pour Vue vraiment tôt dans son développement. Il y a également un certain nombre de problème qu&#39;à ammener Angular cependant, c&#39;est là que Vue tente d&#39;offrir des améliorations significatives.</p>
<h3 id="complexit-">Complexité</h3>
<p>Vue est bien plus simple que Angular 1, autant en terms d&#39;API que de d&#39;architecture. En apprendre assez pour créer une application complexe prend généralement moins d&#39;un jour, là où ce n&#39;est pas vrai avec Angular 1</p>
<h3 id="flexibilit-et-modularit-">Flexibilité et Modularité</h3>
<p>Angular 1 impose fortement la manière dont votre application doit être structurée, là où Vue offre une solution plus flexible, modulaire. Cela premet de rendre Vue plus adaptable à une large variété de projets, bien que nous reconnaissons également qu&#39;il peut être utile de prendre des décisions pour vous, ainsi vous avez juste à commencer à coder.</p>
<p>C&#39;est pourquoi nous offrons un <a href="https://github.com/vuejs-templates/webpack">template Webpack</a> qui peut être mis en place en quelques minutes, vous mettant à disposition diversent fonctionalités comme un module de rechargement à chaud, de la recherche d&#39;erreur de code, de l&#39;extraction de CSS, et bien plus.</p>
<h3 id="liaison-de-donn-e">Liaison de donnée</h3>
<p>Angular 1 utilise la liaisons de donnée à double sens dans ses scopes, là où vu force une liaison de donnée dans un seul sens entre ses composants. Cela rend le flux de donnée plus facile pour travailler avec des applications complexes.</p>
<h3 id="directives-vs-components">Directives vs Components</h3>
<p>Vus a une séparation clair entre les directives et les composants. Les directives sont des manipulations d&#39;encapsulation de DOM uniquement, tandis que les composants sont des unités auto-sufissante contenant leur propre vue et logique de donnée. Dans Angular, il y a beaucoup de confusion entre les deux.</p>
<h3 id="performance">Performance</h3>
<p>Vue a de meilleure performance et est plus, bien plus optimisé car il ne fait pas de vérification à l&#39;aveugle. Angular 1 devient lent quand il y a un grand nombre de watchers, car chaque fois que quelque chose change dans le scope, tous les watchers ont besoin de ré-évaluer de nouveau. Aussi, le cycle de vérification doit être exécuter de multiple fois pour être sur que tous les watchers surveillent des données « à jour ». Les utilisateur d&#39;Angular ont parfois recourt a des techniques esoterique pour contourner le cyle de vérification, et dans beaucoup de situations, il n&#39;y a simplement pas de moyen d&#39;optimiser un scope avec trop de watchers.</p>
<p>Vue ne souffre pas de tout ça grâce à l&#39;utilisation du système transparent de dépendance de surveillance avec une mise en pile asynchrone — tous les changements se déclenchent indépendamment à moins qu&#39;ils aient des relations de dépendance explicites.</p>
<p>De façon intéressante, il y a quelque similitudes dans la manière dont Angular 2 et Vue abordent ces problèmes de Angular 1.</p>
<h2 id="angular-2">Angular 2</h2>
<p>Nous avons une section dédiée à Angular 2 car c&#39;est un framework complètement nouveau. Par exemple, les fonctionnalités du système de first-class composant et beaucoup d&#39;autres détailles de l&#39;implémentation on été complètement ré-écrit. L&#39;API à également radicalement changée.</p>
<h3 id="typescript">TypeScript</h3>
<p>Alors que Angular 1 pouvait être utilisé pour de petite applications, Angular 2 a changé de point de vue pour faciliter la réalisation de large applications d&#39;entreprise. Une conséquence de cela, est qu&#39;il requière TypeScript, qui peut être réellement utile au développeurs qui désirent du typage fort comme c&#39;est le cas avec Java ou C#.</p>
<p>Vue est aussi bien fourni pour l&#39;<a href="https://github.com/vuejs/awesome-vue#enterprise-usage">environnement d&#39;entreprise</a> et peut également être utilisé avec TypeScript via notre <a href="https://github.com/vuejs/vue/tree/dev/types">typage officiel</a> et les <a href="https://github.com/itsFrank/vue-typescript">décorateurs des utilisateurs</a>, bien que ce soit définitivement une option dans notre cas.</p>
<h3 id="taille-et-performance">Taille et Performance</h3>
<p>En terme de performance, les deux frameworks sont exceptionnellement rapides et il n&#39;y a pas assez de données de cas réelles pour ce faire une idée tranchée. Cependant, si vous êtes déterminez à comparer des valeurs, Vue 2.0 semble devant Angular 2 selon le <a href="http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html">benchmark de cette partie tierce</a>.</p>
<p>D&#39;une taille raisonnable, Angular 2 avec sa compilation hors-ligne et le retrait de fonctionalités non utilisés est capable d&#39;offrir une taille considérablement basse. Un Vue 2.0 avec la totalité des fonctionnalités compilées inclus (23kb) est toujours plus léger que le bare-bone exemple de Angular 2 (50kb). Notons que la taille d&#39;une app Angular 2 est petite grâce au retrait des fonctionnalités non utilisées qui enlève le code des fonctionnalités qui ne sont pas utilisées. Il va donc éventuellement encore plus grossir à mesure que vous importez et utilisez plus de fonctionnalités du framework.</p>
<h3 id="flexibilit-">Flexibilité</h3>
<p>Vue est moins contraignant que Angular 2, offrant un support officiel pour une variété de système de build, avec aucune restrictions sur la manière dont vous devez structurer votre application. Beaucoup de développeur apprécie cette liberté, quand d&#39;autres préfères avoir seulement une seule bonne route pour créer une application.</p>
<h3 id="courbe-d-apprentissage">Courbe d&#39;apprentissage</h3>
<p>Pour commercer avec Vue, tout ce dont vous avez besoin sont des connaissances en HTML et ES5 JavaScript (c-à-d JavaScript de base). Avec ces compétences de base, vous pouvez commencer à construire des applications complexes sans perdre des jours à lire <a href="https://vuejs.org/v2/guide/">la documentation</a>.</p>
<p>La courbe d&#39;apprentissage de Angular 2 est plus raide. Même sans TypeScript, le <a href="https://angular.io/docs/js/latest/quickstart.html">Guide de démarrage rapide</a> commence avec une app qui utilise ES2015 JavaScript, npm avec 18 dépendances, 4 fichiers, et plus de 3000 mots pour expliquer le fonctionnement global — juste pour dire Hello World. Il ne serait donc pas exagéré de dire que le <a href="https://jsfiddle.net/chrisvfritz/50wL7mdz/">Hello World de Vue</a> est bien plus simple. Il est si simple, qu&#39;il n&#39;est pas nécessaire de consacrer une page dédiée dans le guide pour ça.</p>
<h2 id="ember">Ember</h2>
<p>Ember est un framework plein de fonctionalités qui a été construit pour être hautement dogmatique. Il fournit beaucoup de conventions et une fois que vous êtes assez familié avec elles, il vous rend réellement productif. Cependant cela signifie que la courbe d&#39;apprentissage est élevée et souffre de flexibilité. CC&#39;est un compromis lorsque vous essayez de choisir entre un cadre opiniâtre et une bibliothèque avec un ensemble d&#39;outils mal couplés qui travaillent ensemble. Ces dernièrer vous offre la liberté mais également vous laisse prendre plus de décisions d&#39;architecture.</p>
<p>Cela dit, il serait problement plus judicieux de faire une comparaison entre le coeur de Vue et le système de templating d&#39;Ember et les couches de modèles objecs :</p>
<ul>
<li>Vue fournit une réactivité discrète sur des objets plainement JavaScript et des propriétés calculées automatiquement. Dans Ember, vous devez encapsuler tout dans des objets Ember et manuellement déclarer toutes les dépendances entre les propriétés carculées.</li>
</ul>
<p>La syntaxe des template de Vue exploite toute la puissance des expressions JavaScript alos que les expressions Handlebars et les aides à la syntaxe sont intentionnellement limité en comparaison.</p>
<p>Côté performance, Vue surpasse Ember avec une bonne avance, même après la dernière mise à jour du moteur Glimmer dans Ember 2.0. Vue regroupe les mises à jour, alors que dans Ember, vous devez gérer manuellement les boucles d&#39;exécution dans des situations critiques.</p>
<h2 id="knockout">Knockout</h2>
<p>Knockout fut un pionnier en MVVM et son espace de suivi de dépendence et son système réactif est vraiment très similaire à Vue. C&#39;est son <a href="http://knockoutjs.com/documentation/browser-support.html">support des navigateurs</a> qui est vraiment impressionnant considérant tout ce qu&#39;il permet de faire avec un support jusqu&#39;à IE6 ! Vue d&#39;un autre côté ne supporte que IE9+.</p>
<p>Avec le temps cependant, le développement de Knockout a ralenti et il commence a se montrer un peu agé. Par exemple, son système de composant manque d&#39;un ensemble complet d&#39;accroche au cycle de vie et même si c&#39;est un cas d&#39;utilisation commun, l&#39;interface pour passer des composants enfants à un composant est quelque peut maladroit en comparaison de Vue.</p>
<p>Il semble aussi y avoir une différence de philosophie dans le design des APIs et cela peut être démontrer en étudiant comment chacun gére la création <a href="https://gist.github.com/chrisvfritz/9e5f2d6826af00fcbace7be8f6dccb89">d&#39;une simple todo list</a>. C&#39;est définitivement quelque chose de subjectif, mais beaucoup considère l&#39;API de Vue moins complexe et mieux structurée.</p>
<h2 id="polymer">Polymer</h2>
<p>Polymer est encore un projet sponsorisé par Google et est également une source d&#39;inspiration pour Vue. Les composants de Vue peuvent être grosso modo comparés à ceux des éléments personnalisés de Polymer et les deux fournissent un style de développement vraiment similaire. La plus grosse différence est que Polymer est construit au dessus des dernières fonctionnalités de Composant Web et requière donc des polyfills complexes pour fonctionner (avec des performances dégradées) dans les navigateurs qui ne supportent pas ses fonctionnalités nativement. Par contraste, Vue fonctionne sans aucunes dépendances dans tous les navigateurs après IE9.</p>
<p>Dans Polymer 1.0, l&#39;équipe a également créé un système de liaison de donnée vraiment limité pour compenser les performances. Par exemple, la seule expression supportée dans les templates Polymer sont les négations booléennes et l&#39;appel de simples méthodes. Son implémentation des propriétés calculées n&#39;est pas non plus très flexible.</p>
<p>Les éléments personnalisés sont créé dans des fichiers HTML, avec comme limite du JavaScript et CSS natif (et les fonctionnalités supportés par les navigateurs actuelles). En comparaison, les fichiers de composant unique de Vue vous permettent facilement d&#39;utiliser ES2015+ et n&#39;importe quel préprocesseur CSS de votre choix.</p>
<p>Quand vous déployez en production, Polymer recommande de tout charger à la volé avec des imports HTML, en s&#39;appuyant sur l&#39;implémentation dans les navigateurs de la spec, et du support de HTTP/2 côté client et côté serveur. Cela peut ne pas être possible en fonction de l&#39;audience ciblée ou de l&#39;environnement serveur. Au cas où vous ne souhaiteriez pas cela, vous pouvez utiliser un outil appelé Vulcanizer pour empaqueter vos éléments Polymer. De ce côté, Vue peut combiner ses fonctionnalité de composant async avec la fonctionnalité de découp de code de Webpack pour facilement découper des parties de l&#39;application empaqueter pour du chargement lazy-load. Cela assure l&#39;entière compatibilité avec les vieux navigateurs en conservant une excellente performance de chargement.</p>
<h2 id="riot">Riot</h2>
<p>Riot 2.0 fournit un modèle de développement basé sur les composants similaire (cela est appelé un « tag » dans Riot), avec une minimal mais magnifique API. Riot et Vue partage beaucoup en matière de philosophie d&#39;architecture. Cependant, bien qu&#39;il soit un peu plus lourd que Riot, Vue offre beaucoup d&#39;avantages significatifs :</p>
<ul>
<li>Un vrai rendu conditionnel. Riot rend tous ses noeuds simplement en affichant et masquant la structure.</li>
<li>Un système de route bien plus puissant. Le routage de l&#39;API Riot est vraiment minimal.</li>
<li>Plus d&#39;outil de support mûre. Vue fournit un support officiel pour <a href="https://github.com/vuejs/vue-loader">Webpack</a> et <a href="https://github.com/vuejs/vueify">Browserify</a>, là où Riot utilise sa communauté pour un système d&#39;intégration de build.</li>
<li><a href="https://vuejs.org/v2/guide/transitions.html">Les effets de transitions</a>. Riot n&#39;en a pas.</li>
<li>Meilleures performances. <a href="https://github.com/vuejs/vuejs.org/issues/346">Malgré ses dires</a> d&#39;utilisation d&#39;un DOM virtuel, Riot utilise en fait un système de vérification à l&#39;aveugle souffrant des mêmes problèmes de performances que Angular 1. »</li>
</ul>
<blockquote>
<p>Si vous trouvez un contre sens où une mise à jour d&#39;une partie de cette article que vous souhaiteriez partager, n&#39;hésitez pas à le signaler dans les commentaires.</p>
</blockquote>
]]></description>
            <link>http://localhost:7776vuejs-versus-angular-versus-react-versus-les-autres-mvvm/</link>
            <guid isPermaLink="false">582af36766270c792a24409a</guid>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Traduction]]></category>
            <category><![CDATA[Angular.js]]></category>
            <category><![CDATA[Vue.js]]></category>
            <category><![CDATA[Ressources]]></category>
            <category><![CDATA[Développement Web]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Tue, 15 Nov 2016 09:37:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Éviter le détournement de clic par iFrame de votre site]]></title>
            <description><![CDATA[<p>J&#39;en vois déjà venir d&#39;assez loin : « les iFrames c&#39;est old school ». Ça me rappel l&#39;époque ou les Frames « c&#39;était old school ». Pour les gars du fond, une iFrame permet d&#39;insérer dans la page courante d&#39;un site le contenu complet d&#39;une autre page. Et si vous ne vous y intéressez plus car vous n&#39;en voyez pas l&#39;intérêt, sachez que d&#39;autres peuvent le voir.</p>
<p>Effectivement, vous n&#39;êtes pas à l&#39;abri de retrouver une page de votre site dans l&#39;iFrame d&#39;un autre site. À partir de là, pas mal de scénarios sont envisageables ; du moins dérangeant comme la solicitiation de votre serveur à chaque fois que la page du site embarquant votre page est réclamée aux plus génants comme le <a href="https://fr.wikipedia.org/wiki/D%C3%A9tournement_de_clic">détournement de clic</a> (clickjacking).</p>
<h2 id="contenu-d-un-site-distant-dans-une-iframe">Contenu d&#39;un site distant dans une iFrame</h2>
<p>Pour illustrer le cas de figure par défault (on ne demande rien de précis au serveur contre les iFrames), nous allons utiliser le simple code suivant qui va embarquer une page de <a href="https://fr.wikipedia.org/wiki/Wikip%C3%A9dia:Accueil_principal">Wikipedia</a> :</p>
<p><strong>HTML</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;iframe src=&quot;https://fr.wikipedia.org/wiki/Wikip%C3%A9dia:Accueil_principal&quot; width=&quot;100%&quot; height=&quot;200px&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
</code></pre>
<p><strong>Résultat</strong></p>
<blockquote>
<iframe src="https://fr.wikipedia.org/wiki/Wikip%C3%A9dia:Accueil_principal" width="100%" height="200px" scrolling="no"></iframe>

</blockquote>
<p>Cela signifie qu&#39;à chaque fois que vous lirez cet article, des requêtes seront faites aux serveurs hébergeant Wikipedia pour l&#39;afficher dans cette page. Pas très génant (sauf si le site en question n&#39;a pas une bande passante illimité par mois).</p>
<h3 id="petit-exemple-de-d-tournement-de-clic">Petit exemple de détournement de clic</h3>
<p>Avec le changement de code suivant, nous allons nous amuser à modifier la page. Nous allons voir facilement en haut à gauche le texte « WikiMOI HA HA ! » et cliquer dessus reviendra sur cet article. Mais on pourrait tout aussi bien vous faire croire que vous allez faire un don à Wikipedia...</p>
<p>Pour voir cela, il faudra au préalable cliquer sur « Tricher ! ».</p>
<p><strong>HTML</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;button&gt;Tricher !&lt;/button&gt;
&lt;div&gt;WikiMOI&lt;br&gt;HA HA !&lt;/div&gt;
&lt;iframe src=&quot;https://fr.wikipedia.org/wiki/Wikip%C3%A9dia:Accueil_principal&quot; width=&quot;100%&quot; height=&quot;200px&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
</code></pre>
<p><strong>CSS</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">div {
    display: none;
}
.fake {
    width: 100%;
    height: 100%;
    overflow: hidden;
    position: fixed;
    top: 0;
    left: 0;
}
.fake-div {
    display: block;
    position: fixed;
    width: 160px;
    top: 119px;
    left: 2px;
    z-index: 1001;
    background-color: #f6f6f6;
    text-align: center;
    font-weight: bold;
    color: #f00;
    font-family: arial;
    font-size: 20px;
    cursor: pointer;
}
</code></pre>
<p><strong>JS</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">// Mettre en place la triche.
document.getElementsByTagName(&quot;button&quot;)[0].addEventListener(&quot;click&quot;, function () {
    document.getElementsByTagName(&quot;iframe&quot;)[0].classList.add(&quot;fake&quot;);
    document.getElementsByTagName(&quot;div&quot;)[0].classList.add(&quot;fake-div&quot;);
});
// Détournement de clique !!! (Ici on revient en arrière)
document.getElementsByTagName(&quot;div&quot;)[0].addEventListener(&quot;click&quot;, function () {
    document.getElementsByTagName(&quot;iframe&quot;)[0].classList.remove(&quot;fake&quot;);
    document.getElementsByTagName(&quot;div&quot;)[0].classList.remove(&quot;fake-div&quot;);
});
</code></pre>
<p><strong>Résultat</strong></p>
<p><strong>Cliquez sur le bouton « Tricher ! »</strong></p>
<blockquote>
<p><button class="example-button">Tricher !</button></p>
<p><div class="example-div">WikiMOI<br>HA HA !</div></p>
<iframe class="example-iframe" src="https://fr.wikipedia.org/wiki/Wikip%C3%A9dia:Accueil_principal" width="100%" height="200px" scrolling="no"></iframe>

</blockquote>
<p>On constate assez facilement que permettre l&#39;affichage de votre site par d&#39;autre site peut poser problème si vous n&#39;avez pas confiance en ces sites.</p>
<h2 id="x-frame-options-afficher-votre-site-dans-une-iframe">X-Frame-Options : afficher votre site dans une iFrame</h2>
<p>Pour décider vous même quels sont les sites qui vont pouvoir ou non afficher une de vos pages dans une iFrame, vous aller pouvoir utiliser l&#39;en-tête HTTP <samp>X-Frame-Options</samp> (<a href="https://datatracker.ietf.org/doc/rfc7034/">RFC 7034</a>).</p>
<p><samp>X-Frame-Options</samp> est une en-tête HTTP, ce qui signifie qu&#39;il se trouvera dans la réponse HTTP du serveur quand celui-ci répondra à la requête d&#39;un navigateur pour afficher une page.</p>
<p>Donc, dans le cas précédent, c&#39;est au site Wikipedia d&#39;ajouter cette en-tête sur ses pages pour que, si elles sont réclamées dans une iFrame, celles-ci ne puissent pas s&#39;afficher.</p>
<h3 id="valeurs-de-x-frame-options">Valeurs de X-Frame-Options</h3>
<p>Les deux options de base sont <samp>SAMEORIGIN</samp> et <samp>DENY</samp> et sont supportées par :</p>
<ul>
<li>Google Chrome 4+</li>
<li>Internet Explorer 8+</li>
<li>Safari 4+</li>
<li>Mozilla Firefox 3.6+</li>
</ul>
<p>Il existe une troisième option <samp>ALLOW-FROM</samp> qui permet de choisir exactement qui peut ou non afficher le contenu. Voyons cela en détail.</p>
<h4 id="sameorigin">SAMEORIGIN</h4>
<p>L&#39;en-tête suivante <samp>X-Frame-Options: SAMEORIGIN</samp> ajouter aux en-têtes HTTP d&#39;une réponse de page va autoriser celle-ci à être affichée dans une iFrame uniquement si la page l&#39;appelant se trouve sur le même nom de domaine. Dans notre cas précédent, si Wikipédia utilisait cette en-tête, seule une page de Wikipedia pourrait l&#39;afficher dans une iFrame et aucun autre site.</p>
<h4 id="deny">DENY</h4>
<p>L&#39;en-tête suivante <samp>X-Frame-Options: DENY</samp> ajouter aux en-têtes HTTP d&#39;une réponse de page est rédibitoire. Elle signifie que peut importe qui demande à afficher la page dans une iFrame, celle-ci ne s&#39;affichera pas, même si elle appartient au même domaine.</p>
<h4 id="allow-from">ALLOW-FROM</h4>
<p>L&#39;en-tête suivante <samp>X-Frame-Options: ALLOW-FROM www.domain.com</samp> ajouter aux en-têtes HTTP d&#39;une réponse de page va autoriser celle-ci à être affichée dans une iFrame du site <samp>www.domain.com</samp>. Cela est effectivement le cas pour mon blog.</p>
<p><img src="media/images/upload/x-frame-options.jpg" alt="Exemple sur ce Blog"></p>
<p>Si vous vérifiez les en-têtes HTTP de la réponse de <a href="https://blog.lesieur.name/nodeatlas-le-framework-nodejs-mvc2-oriente-front-end/">l&#39;article « NodeAtlas, le Framework JavaScript MVC(2), SEO et W3C compliant »</a>, vous constaterez qu&#39;il y a bien une en-tête HTTP <samp>X-Frame-Options: ALLOW-FROM https://www.lesieur.name/</samp> ce qui permet à <a href="https://www.lesieur.name/node-atlas/">la page de présentation de NodeAtlas</a> de mon portfolio de l&#39;afficher dans une iFrame.</p>
<h3 id="les-navigateurs-refusent-l-affichage">Les navigateurs refusent l&#39;affichage</h3>
<p>Comprenez bien que ce mécanisme fonctionne car les navigateurs ont pour ordre de ne pas afficher un contenu dans une iFrame s&#39;ils ne trouvent pas l&#39;en-tête HTTP <samp>X-Frame-Options</samp> autorisant l&#39;affichage de se contenu (ou aucune en-tête <samp>X-Frame-Options</samp>). Cela est donc une sécurité pour le client final en ce qui concerne le détournement de clic mais pas pour la charge serveur puisque quoi qu&#39;il arrive, il répondra au navigateur.</p>
<h3 id="diff-rent-comportement-par-navigateur">Différent comportement par navigateur</h3>
<p>À titre d&#39;exemple, Firefox n&#39;affichera rien mais indiquera dans la console le soucis alors que Edge affichera un message comme celui-ci : « Nous ne pouvons pas afficher ce contenu dans un cadre ».</p>
<h2 id="content-security-policy-et-webkit">Content-Security-Policy et Webkit</h2>
<p>Cependant <samp>ALLOW-FROM</samp> n&#39;est pas reconnue par Webkit ce qui conduit à l&#39;erreur suivante <samp>Invalid &#39;X-Frame-Options&#39; header encountered when loading &#39;www.domain.com/example&#39;: &#39;ALLOW-FROM www.domain.com&#39; is not a recognized directive. The header will be ignored.</samp> et donc autorise l&#39;affichage de l&#39;iFrame par tout le monde.</p>
<p>Il faut dans ce cas se tourner vers l&#39;en-tête HTTP <samp>Content-Security-Policy: frame-ancestors www.domain.com</samp> pour qu&#39;un mécanisme similaire fonctionne.</p>
<h2 id="exemple-d-utilisation-avec-nodeatlas">Exemple d&#39;utilisation avec NodeAtlas</h2>
<p>Vous pouvez bien entendu utiliser ses en-têtes avec Apache, nginx ou directement dans votre code PHP, Ruby, etc.</p>
<p>Nous allons voir ici comment cela se traduit en JavaScript côté serveur avec le module npm <a href="https://www.npmjs.com/package/node-atlas">node-atlas</a> de <a href="https://nodejs.org/">Node.js</a>.</p>
<p><a href="https://node-atlas.js.org/">NodeAtlas</a> est un Framework JavaScript MVC(2) côté serveur vous permettant de créer des sites évolutifs, SEO-compliant et W3C-compliant. À ce titre il peut également utiliser les mécanismes précédemment cités, voici comment :</p>
<h3 id="par-page-avec-le-webconfig">Par page, avec le webconfig</h3>
<p><strong>webconfig.json</strong> par exemple</p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;routes&quot;: {
        &quot;/&quot;: {    
            &quot;view&quot;: &quot;index.htm&quot;,
            &quot;headers&quot;: {
                &quot;X-Frame-Origins&quot;: &quot;ALLOW-FROM www.lesieur.name&quot;,
                &quot;Content-Security-Policy&quot;: &quot;frame-ancestors www.lesieur.name&quot;
            }
        }
    }
}
</code></pre>
<h3 id="tout-le-site-avec-le-webconfig">Tout le site, avec le webconfig</h3>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;headers&quot;: {
        &quot;X-Frame-Origins&quot;: &quot;ALLOW-FROM www.lesieur.name&quot;,
        &quot;Content-Security-Policy&quot;: &quot;frame-ancestors www.lesieur.name&quot;
    }
    &quot;routes&quot;: {
        &quot;/&quot;: &quot;index.htm&quot;
    }
}
</code></pre>
<h3 id="par-page-avec-le-contr-leur-sp-cifique">Par page, avec le contrôleur spécifique</h3>
<p><strong>controllers/index.js</strong> par exemple</p>
<pre class="prettyprint linenums"><code class="lang-js">exports.changeVariation = function (params, next) {
    var variation = params.variation,
        response = params.response;

    response.setHeader(&quot;X-Frame-Options&quot;, &quot;ALLOW-FROM www.lesieur.name&quot;);
    response.setHeader(&quot;Content-Security-Policy&quot;, &quot;frame-ancestors www.lesieur.name&quot;);

    next(variation);
};
</code></pre>
<h3 id="tout-le-site-avec-le-contr-leur-commun">Tout le site, avec le contrôleur commun</h3>
<p><strong>controllers/common.js</strong> par exemple</p>
<pre class="prettyprint linenums"><code class="lang-js">exports.setConfigurations = function (next) {
    var NA = this;

    NA.httpServer.use(function (request, response, next) {
        response.setHeader(&quot;X-Frame-Options&quot;, &quot;ALLOW-FROM www.lesieur.name&quot;);
        response.setHeader(&quot;Content-Security-Policy&quot;, &quot;frame-ancestors www.lesieur.name&quot;);
        next();
    });

    next();
};
</code></pre>
]]></description>
            <link>http://localhost:7776manager-les-iframes-sortantes-de-votre-site/</link>
            <guid isPermaLink="false">58218758e24e70605a985109</guid>
            <category><![CDATA[NodeAtlas]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Navigateurs]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[Node.js]]></category>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <category><![CDATA[JavaScript]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Tue, 08 Nov 2016 10:05:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Comprendre et utiliser Git avec vos projets]]></title>
            <description><![CDATA[<p>Si vous découvrez le système de gestion de version Git et que vous l&#39;utilisez seul, occasionnellement, etc. il existe peut être encore beaucoup de zone d&#39;ombre dans son utilisation et dans la totalité des possibilités que le système offre.</p>
<p>C&#39;est également mon cas et tout le long de mon amélioration continue à l&#39;utilisation de Git, je vais maintenir cet « aide-mémoire ». Il résumera le fonctionnement de Git au sein d&#39;une branche dans un premier temps, et le fonctionnement de Git à travers diverses branches dans un second temps.</p>
<blockquote>
<p>Si vous ne connaissez vraiment pas grand chose à GIT n&#39;ésitez pas à lire : <a href="https://git-scm.com/book/fr/v2/D%C3%A9marrage-rapide-%C3%80-propos-de-la-gestion-de-version">Démarrage rapide de GIT</a> et particulièrement :</p>
<ul>
<li><a href="https://git-scm.com/book/fr/v2/D%C3%A9marrage-rapide-%C3%80-propos-de-la-gestion-de-version">À propos de la gestion de version</a> et</li>
<li><a href="https://git-scm.com/book/fr/v2/D%C3%A9marrage-rapide-Rudiments-de-Git">Rudiments de Git</a></li>
</ul>
</blockquote>
<h2 id="projet-git-au-sein-d-une-branche">Projet Git au sein d&#39;une branche</h2>
<p>Avant de commencer, il me semble important de se rappeler que Git copie l&#39;intégralité d&#39;un Repository (Dépôt) en local et que la majorité des actions effectués seront locals. Recherche, changement de version, changement de branche, tout sera très rapide !</p>
<p>Voici un schéma interactif de toutes les interactions dans le système de gestion de version de Git, vous pourrez aisément constater les actions en local bien plus nombreuse que les autres. Cliquez sur un élément pour accéder à son descriptif ci-après.</p>
<div class="transport">
  <div class="commit-complete" data-id="commit-a">
    <span>commit -a</span>
  </div>
  <div class="add" data-id="add">
    <span>add</span>
  </div>
  <div class="commit" data-id="commit">
    <span>commit</span>
  </div>
  <div class="push" data-id="push">
    <span>push</span>
  </div>
  <div class="pull" data-id="pull-r-">
    <span>pull [-r]</span>
  </div>
  <div class="fetch" data-id="fetch">
    <span>fetch</span>
  </div>
  <div class="merge" data-id="merge-ou-rebase">
    <span>merge <em>or</em> rebase</span>
  </div>
  <div class="checkout-head" data-id="checkout">
    <span>checkout HEAD</span>
  </div>
  <div class="checkout" data-id="checkout">
    <span>checkout</span>
  </div>
  <div class="reset" data-id="reset">
    <span>reset</span>
  </div>
  <div class="reset-complete" data-id="reset">
    <span>reset</span>
  </div>
  <div class="diff-head" data-id="status-ou-diff">
    <span>diff HEAD</span>
  </div>
  <div class="diff" data-id="status-ou-diff">
    <span>diff</span>
  </div>
  <div class="before-workspace"></div>
  <div class="workspace">
    <div class="local">Local</div>
    <div class="workspace-box" data-id="workspace"><br>      <span>Workspace</span>
    </div>
  </div>
  <div class="index">
    <div class="index-box" data-id="index"><br>      <span>Index</span>
    </div>
  </div>
  <div class="local-repository">
    <div class="internet">Internet</div>
    <div class="local-box" data-id="local-repository"><br>      <span>Local Repository</span>
    </div>
  </div>
  <div class="remote-repository">
    <div class="remote-box" data-id="remote-repository"><br>      <span>Remote Repository</span>
    </div>
  </div>
</div>

<h3 id="workspace">Workspace</h3>
<p>Le <strong>Workspace</strong> ou <strong>Working Tree</strong> ou <strong>Working Directory</strong> (<strong>Espace de travail</strong>) est une extraction unique d&#39;une version du projet à partir de laquelle vous pouvez travailler. Ce dossier est stocké sur votre machine. Les fichiers ici sont soit identique au dernier instantané enregistré dans le Local Repository soit à l&#39;état « Modifié ».</p>
<h3 id="index">Index</h3>
<p>L&#39;<strong>Index</strong> ou <strong>Staging Area</strong> correspond à la liste complète des fichiers présents physiquement dans votre Workspace qui on été déclarés comme faisant parti du prochain instantané que vous allez effectuer. Il est donc possible qu&#39;un fichier présent dans le Workspace ne soit pas présent dans l&#39;Index si vous ne l&#39;avez pas ajouté. Les fichiers indexé sont dans un état « Indexé ».</p>
<h3 id="local-repository">Local Repository</h3>
<p>Le <strong>Local Repository</strong> (<strong>Dépôt local</strong>) est le dossier <samp>.git</samp> stocké dans votre Workspace, c&#39;est une copie totale et sur votre machine du Remote Repository dans lequel vous aller stocker vos instantanés du projet. C&#39;est un « clone » du Local Repository et les fichiers ici sont dans un état « Validé ».</p>
<h3 id="remote-repository">Remote Repository</h3>
<p>Le <strong>Remote Repository</strong> (<strong>Dépôt distant</strong>) est le dossier dans lequel est stocké le projet sur le serveur et faisant office de référant. Vous ne pouvez pas directement modifier ses fichiers. C&#39;est la référence lorsque vous « cloné » un projet sur votre environnement.</p>
<h3 id="add">add</h3>
<p>Utiliser <samp>add</samp> permet d&#39;ajouter des fichiers présent dans votre Workspace à l&#39;Index en prévisions d&#39;une monté sur les Repository. Chaque fichier passe donc de l&#39;état « Modifié » à « Indexé ».</p>
<h3 id="reset">reset</h3>
<p>Utiliser <samp>reset</samp> permet de retirer des fichiers de l&#39;Index ou annulé un commit au Local Repository tout en conservant (ou non) les modifications faites. Pour annuler les modifications faites tout en laissant les Index et Local Repository en place il faut utilister <samp>revert</samp>.</p>
<h3 id="commit">commit</h3>
<p>Utiliser <samp>commit</samp> permet de déposer l&#39;intégralité des fichiers de votre Index dans le Local Repository sous un nouveau instantané. Chaque fichier passe donc d&#39; « Indexé » à « Validé ».</p>
<h3 id="commit-a">commit -a</h3>
<p>Utiliser <samp>commit -a</samp> pour ajouter automatiquement la totalité des nouveaux fichiers à l&#39;Index puis les pousser dans le Local Repository.</p>
<h3 id="push">push</h3>
<p>Utiliser <samp>push</samp> pour aligner l&#39;intégralité des fichiers du Local Repository sur le Remote Repository.</p>
<h3 id="fetch">fetch</h3>
<p>Utiliser <samp>fetch</samp> pour aligner l&#39;intégralité des fichiers du Remote Repository avec votre Local Repository.</p>
<h3 id="merge-ou-rebase">merge ou rebase</h3>
<p>Utiliser <samp>merge</samp> pour ré-aligner les modifications présentent entre vos instantanés de votre Local Repository avec ceux rapatrier du Remote Repository (pour plus d&#39;information sur la différence entre <samp>merge</samp> et <samp>rebase</samp> <a href="http://labs.excilys.com/2012/02/28/preparez-vous-a-reecrire-lhistoire-avec-git-rebase/">voir ici</a>).</p>
<h3 id="pull-r-">pull [-r]</h3>
<p>Utiliser <samp>pull</samp> ré-aligne les modifications présentent entre le Remote Repository et votre Local Repository. En cas de conflit, l&#39;action <samp>fetch</samp> aura été effectuée et vous devrez résoudre les conflits et utiliser <samp>merge</samp> vous même.</p>
<h3 id="checkout">checkout</h3>
<p>Utiliser <samp>checkout</samp> permet d&#39;aligner son Workspace avec un des instantané versionné du Local Repository (en déplaçant le <samp>HEAD</samp>) ou des fichiers de l&#39;Index.</p>
<h3 id="status-ou-diff">status ou diff</h3>
<p>Utiliser <samp>status</samp> ou <samp>diff</samp> permet de comparer vos fichiers du Workspace avec celle de l&#39;Index ou du Local Repository. Vous pouvez ainsi voir ce qui a changé dans un comparateur de version.</p>
<h3 id="stash">stash</h3>
<p>Utiliser <samp>stash</samp> pour sauvegarder l&#39;état de votre Workspace et votre Index afin de ne pas perdre votre travail lors d&#39;un <samp>checkout</samp>, cela vous permet de ne pas <samp>commit</samp> un travail à moitié fini.</p>
<blockquote>
<p>Pour en savoir plus, vous pouvez lire <a href="https://git-scm.com/book/fr/v2/Les-bases-de-Git-D%C3%A9marrer-un-d%C3%A9p%C3%B4t-Git">Les Bases de GIT</a> et plus particulièrement :</p>
<ul>
<li><a href="https://git-scm.com/book/fr/v2/Les-bases-de-Git-Enregistrer-des-modifications-dans-le-d%C3%A9p%C3%B4t">Enregistrer des modifications dans le dépôt</a> et</li>
<li><a href="https://git-scm.com/book/fr/v2/Les-bases-de-Git-Travailler-avec-des-d%C3%A9p%C3%B4ts-distants">Travailler avec des dépôts distants</a></li>
</ul>
</blockquote>
<h2 id="projet-git-sur-plusieurs-branches">Projet Git sur plusieurs branches</h2>
<p>Comme créer une branche ne revient qu&#39;à créer des aiguillages de commit, cette opération est très rapide. Il ne faut donc pas hésiter à le faire ! Je vous propose ici une structure de travail avec plusieurs branches pour un projet afin de vous organiser en équipe.</p>
<p>Il me semble que <a href="https://blogs.endjin.com/2015/01/using-smartgit-to-follow-the-gitflow-branching-and-workflow-model/">la structure proposée par SmartGit</a> est pertinente aussi vais-je la décrire juste après ce schéma.</p>
<p><img src="media/images/upload/GitFlowworkflow_thumb2.png" alt="Model à plusieurs Branches"></p>
<p>Le but d&#39;une branche et sa position dans l&#39;avancement du travail sur le projet depuis le développement jusqu&#39;au livrable doit être indiqué dans son nom, c&#39;est pourquoi nous utiliserons les noms suivants :</p>
<ul>
<li><strong>release/{branch name}</strong> – chaque livrable est associé à une branche correspondant à une version final de l&#39;application.</li>
<li><strong>master</strong> – une branche permanente comme référence correspondant à la version définitive des modifications entre chaque version de l&#39;application. Elle correspond donc à chaque instant à la dernière version de l&#39;application.</li>
<li><strong>develop</strong> – une branche permanente contenant l&#39;avancement de l&#39;application dans son ensemble au file des versions, avec des branches de fonctionnalités créer à partir de cette version et reversé dedans.</li>
<li><strong>feature/{branch name}</strong> – chaque fonctionnalité correspond au travail sur un sujet particulier (ex: un bugfix, une nouvelle fonctionnalité...).</li>
<li><strong>hotfix/{branch name}</strong> – des branches pour s&#39;occuper des fixes urgent à apporter qui seront prioritairement reversé dans le <samp>master</samp> puis reversé dans la <samp>develop</samp> en attendant de finir dans le prochain livrable.</li>
</ul>
<blockquote>
<p>Pour en savoir plus, vous pouvez lire <a href="https://git-scm.com/book/fr/v2/Les-branches-avec-Git-Les-branches-en-bref">Les Branches avec GIT</a>.
et plus particulièrement :</p>
<ul>
<li><a href="https://git-scm.com/book/fr/v2/Les-branches-avec-Git-Branches-et-fusions%C2%A0%3A-les-bases">Branches et fusions</a> et</li>
<li><a href="https://git-scm.com/book/fr/v2/Les-branches-avec-Git-Rebaser-Rebasing">Rebaser</a></li>
</ul>
</blockquote>
]]></description>
            <link>http://localhost:7776comprendre-et-utiliser-git-avec-vos-projets/</link>
            <guid isPermaLink="false">5819fd2a99480e4e24e3d0cd</guid>
            <category><![CDATA[Git]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[Ressources]]></category>
            <category><![CDATA[Outils]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Wed, 02 Nov 2016 09:50:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Créer et maintenir des maquettes HTML avec NodeAtlas]]></title>
            <description><![CDATA[<p><em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em> est une application multi-os écrite en <a href="http://nodejs.org/" title="Node.js is a platform built on Chrome&#39;s JavaScript runtime easily building fast, scalable network applications.">Node.js</a> qui va vous permettre de créer, modifier et maintenir tout un ensemble de maquette HTML. Ces maquettes HTML pourront ensuite être validées par le client, et ré-utilisées totalement ou en partie par les développeurs Back-end quelque soit leurs technologies. Ces maquettes HTML pourront également servir de site stand-alone fonctionnant sans serveur ou avec un simple serveur HTTP pour créer des documentations <a href="http://usejsdoc.org/">JSDoc</a> ou autre comme pour <a href="https://github.com/" title="GitHub is where people build software. More than 15 million people use GitHub to discover, fork, and contribute to over 38 million projects.">GitHub</a> par exemple. C&#39;est ce que nous allons voir dans cet article.</p>
<p>Mais <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em> permet également de faire tourner des sites web complet, performant et rapide tel que le site sur lequel vous être entrain de lire cet article.</p>
<blockquote>
<p><em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em> est designé pour :</p>
<ul>
<li><a href="https://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/">Les débutants en JavaScript qui souhaitent se mettre au Node.js rapidement</a>.</li>
<li><strong>Les experts Front-end, en leur permettant de créer des sites web ou des maquettes HTML de qualité</strong>.</li>
<li>Les experts en développement web et/ou JavaScript en leur permettant de créer des sites web et applications JavaScript à hautes performances serveurs.</li>
</ul>
</blockquote>
<h2 id="pourquoi-">Pourquoi ?</h2>
<ol>
<li>Remplacer le travail initialement fait avec des wireframes par une création en HTML avec l&#39;aide de CSS de wireframing ou de bootstraping. Plus besoin de créer un ama de documents de wireframe, et le travail est directement prêt pour l&#39;étape de design. Vous pouvez ensuite soumettre vos « Wireframes Live » au client.</li>
<li>Remplacer le travail initialement fait avec Photoshop directement à partir de l&#39;étape de wireframing avec des CSS pour le design et diverses images. Plus besoin de transférer des amas de PSD ; tout est mutualisé et la moindre partie n&#39;est pas dupliquée. Vous pouvez ensuite soumettre vos maquettes au client. Le design est intégrable pour l&#39;étape suivante puisqu&#39;il tourne déjà.</li>
<li>Pouvoir fournir à des Intégrateurs, qu&#39;ils travail avec PHP, Java, .NET, Ruby, Node.js etc. des assets HTML directement exploitables et intégrables. Ils pourront ré-utiliser des morceaux de code, voir la totalité des maquettes dans le site qui va être créé.</li>
<li>Transformer ces maquettes HTML à destination des Back-end directement en site web qui tournera avec <a href="http://nodejs.org/" title="Node.js is a platform built on Chrome&#39;s JavaScript runtime easily building fast, scalable network applications.">Node.js</a> sous le module <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em> qui, en plus de créer des maquettes, fait tourner des sites web.</li>
</ol>
<h2 id="installer-et-prendre-en-main-nodeatlas">Installer et prendre en main NodeAtlas</h2>
<p>Vous pouvez vous familiariser avec les bases de la création de <em>Vue</em> et de <em>Route</em> grâce à l&#39;article « <a href="https://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/">Des sites web Node.js pour les débutants en JavaScript avec NodeAtlas</a> » afin de mieux appréhender cet article.</p>
<p>Pour la suite de ce billet, nous allons travailler sur un exemple concret : le site de présentation de <em><a href="https://node-atlas.js.org/">NodeAtlas</a></em> ! Ce site est hébergé sur un espace mis en place par <a href="https://github.com/" title="GitHub is where people build software. More than 15 million people use GitHub to discover, fork, and contribute to over 38 million projects.">GitHub</a> capable de faire tourner des pages HTML simples. Nous allons donc ici voir :</p>
<ul>
<li>comment maintenir plusieurs pages HTML de documentation sans redondance de code et générer son site « serverless »,</li>
<li>comment créer ses pages avec comme source d&#39;origine le <a href="https://github.com/Haeresis/NodeAtlas/blob/gh-pages/v1.x/README.fr.md">README.md</a> du projet,</li>
<li>comment créer une architecture HTML/CSS/JS Vanilla en s&#39;appuyant sur <a href="https://blog.lesieur.name/conventions-html-css-js-et-architecture-front-end/">des conventions de nommage établies</a>,</li>
<li>comment compresser la totalité du contenu pour des performances optimales côté client.</li>
</ul>
<h2 id="g-n-rer-des-maquettes-partir-de-pages-lives">Générer des maquettes à partir de pages lives</h2>
<p>Le but de la manœuvre va être le suivant : nous allons créer un site web qui tourne en <samp>localhost</samp> le temps du développement. Une fois que celui-ci nous conviendra, nous utiliserons la commande <samp>--generate</samp> du CLI <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em> afin de créer tout le panel de page HTML correspondant initialement au site que nous avons développé. Ses pages seront consultables sans serveur ou avec n&#39;importe quel serveur HTTP simple (Pas de node.exe, pas de php.exe, etc.).</p>
<h3 id="structure-initiale-du-site">Structure initiale du site</h3>
<p>Comme toujours, tout débute avec le fichier <samp>webconfig.json</samp> dans votre projet de travail que nous allons ici nommer <samp>nodeatlas-website</samp>.</p>
<p>Ce fichier va donc être ajouté avec d&#39;autres fichiers de démarrage à l&#39;architecture suivante :</p>
<pre class="prettyprint linenums"><code>dist/
nodeatlas-website/
├─ views/
│  ├─ content.htm
│  └─ partials/
│      ├─ content.htm
│      ├─ head.htm
│      ├─ header.htm
│      └─ foot.htm
├─ variations/
│  └─ common.json
└─ webconfig.json
</code></pre><p>Vous remarquerez également la présence du dossier <samp>dist</samp> pour « distribution » au même niveau. C&#39;est là que nos maquettes seront générées.</p>
<p>Nous allons exposer ci-après le contenu du site avec la configuration suivante :</p>
<p><strong>webconfig.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;languageCode&quot;: &quot;fr&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/&quot;,
    &quot;htmlGenerationBeforeResponse&quot;: true,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: &quot;content.htm&quot;
    }
}
</code></pre>
<p>et les vues suivantes :</p>
<p><strong>views/partials/head.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;!-- `languageCode` renvoi &quot;fr&quot; dans notre cas. --&gt;
&lt;html lang=&quot;&lt;?= languageCode ?&gt;&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;NodeAtlas&lt;/title&gt;

        &lt;!-- `urlBasePath` renvoi &quot;http://localhost&quot; dans notre cas quand un serveur tourne. --&gt;
        &lt;!-- `urlBasePath` renvoi `` dans une page générée à la racine, il renvoit `..` pour un fichier généré dans un sous, `../..` pour un sous-sous-dossier, etc. --&gt;
        &lt;base href=&quot;&lt;?= urlBasePath ?&gt;/&quot; /&gt;

        &lt;meta name=&quot;description&quot; content=&quot;NodeAtlas est un Framework JavaScript MVC(2) côté serveur.&quot; /&gt;
        &lt;meta name=&quot;geo.placename&quot; content=&quot;Annecy, Haute-Savoie, France&quot; /&gt;

        &lt;meta name=&quot;robots&quot; content=&quot;index, follow&quot; /&gt;

        &lt;!--[if IE]&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no&quot; /&gt;&lt;![endif]--&gt;
        &lt;!--[if !IE]&gt;&lt;!--&gt;&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no&quot; /&gt;&lt;!--&lt;![endif]--&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;layout&quot;&gt;
            &lt;noscript class=&quot;no-js cmpt&quot;&gt;
                &lt;div class=&quot;no-js--inner&quot;&gt;
                    &lt;p&gt;Le JavaScript n&#39;est pas activé.&lt;/p&gt;
                &lt;/div&gt;
            &lt;/noscript&gt;
</code></pre>
<p><strong>views/partials/header.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">            &lt;header class=&quot;header cmpt&quot;&gt;
                &lt;div class=&quot;header--inner&quot;&gt;
                    &lt;div class=&quot;header--title&quot;&gt;
                        &lt;h1&gt;NodeAtlas&lt;/h1&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/header&gt;
</code></pre>
<p><strong>views/partials/content.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">            &lt;article class=&quot;content cmpt&quot;&gt;
                &lt;div class=&quot;content--inner&quot;&gt;
                    &lt;?- common.content ?&gt;
                &lt;/div&gt;
            &lt;/article&gt;
</code></pre>
<p><strong>views/partials/foot.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>views/content.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;?- include(&quot;partials/head.htm&quot;) ?&gt;
&lt;?- include(&quot;partials/header.htm&quot;) ?&gt;
&lt;?- include(&quot;partials/content.htm&quot;) ?&gt;
&lt;?- include(&quot;partials/foot.htm&quot;) ?&gt;
</code></pre>
<p>alimentés par le fichier de variation commun suivant :</p>
<p><strong>variations/common.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">{
    &quot;content&quot;: &quot;Contenu pour la documentation.&quot;
}
</code></pre>
<p>En installant <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em> en mode global avec la commande <samp>npm install -g node-atlas</samp>, nous pouvons l&#39;utiliser en temps que CLI à la ligne de commande. C&#39;est ce que nous allons faire dans cet article.</p>
<p>Lançons donc notre site qui pour le moment ne contient qu&#39;une page à l&#39;adresse : <samp>http://localhost/index.html</samp>. En ouvrant un invité de commande depuis le dossier <samp>nodeatlas-website</samp> (Ctrl + Shitf + Clique droit dans une zone vide de l&#39;explorateur), tapez la commande suivante :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse index.html
</code></pre><p>Notre page affiche donc « Contenu pour la documentation. » à l&#39;adresse <samp>http://localhost/index.html</samp>.</p>
<h3 id="g-n-ration-de-maquettes">Génération de maquettes</h3>
<p>Vous remarquerez dans votre console que le message « HTML : The file « <location-of-project>\dist\index.html » was generated ! ». Si vous vous rendez dans le dossier <samp>dist</samp>, vous remarquerez qu&#39;un fichier <samp>index.html</samp> vous y attend. Si vous l&#39;ouvrez depuis votre gestionnaire de fichier, vous remarquerez que le fichier tourne sans serveur web (dans mon cas avec Chrome, et mon OS, l&#39;adresse est <samp>file:///C:/nodejs/example/dist/index.html</samp>).</p>
<p>Cela est possible grâce aux paramètres de webconfig <samp>serverlessRelativePath</samp> avec <samp>../dist/</samp> pour informer <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em> de l&#39;endroit où les maquettes seront générées et <samp>htmlGenerationBeforeResponse</samp> pour que la génération se fasse après chaque consultation de page sur <samp>localhost</samp>.</p>
<p>Il est possible de ne pas générer la « distribution » page par page après chaque consultation mais en une seule fois avec une seule commande. Commencez par couper votre instance en coupant le site (Ctrl + C dans l&#39;invité de commande) puis supprimez l&#39;intégralité du contenu de <samp>dist</samp>.</p>
<p>Lancez alors la commande :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --generate
</code></pre><p>et vous pourrez de nouveau consulter une page <samp>index.html</samp> dans le dossier <samp>dist</samp>.</p>
<h3 id="alimenter-dynamiquement-le-webconfig">Alimenter dynamiquement le webconfig</h3>
<p>En fait, <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em> n&#39;utilise pas les valeurs de route du <samp>webconfig.json</samp> tel quel mais construit une copie de celui-ci pour tourner. Cela signifie que l&#39;on peut ajouter dynamiquement des routes depuis la partie contrôleur avant le lancement du serveur. Nous allons donc dans un premier temps, ajouter un contrôleur commun <samp>common.json</samp> à notre configuration et en profiter pour mettre en place « l&#39;index des maquettes » ; très utile quand on créé des maquettes avec <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em>,</p>
<pre class="prettyprint linenums"><code>{
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;fr&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/&quot;,
    &quot;htmlGenerationBeforeResponse&quot;: true,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;content.htm&quot;
        }
    }
}
</code></pre><p>et ajouter ce fichier à notre arborescence :</p>
<pre class="prettyprint linenums"><code>...
nodeatlas-website/
┊┉
├─ controllers/
│  └─ common.js
┊┉
</code></pre><p>avec le contenu suivant :</p>
<pre class="prettyprint linenums"><code class="lang-js">// On se connecte a NodeAtlas au moment ou celui-ci configure les routes.
exports.setRoutes = function (next) {

    // On récupère l&#39;instance de NodeAtlas en cours.
    var NA = this,

        // Et nous récupérons les routes en provenance du webconfig...
        route = NA.webconfig.routes;

    // ...pour ajouter la route &quot;/content.html&quot; à la liste de nos routes.
    route[&quot;/content.html&quot;] = &quot;content.htm&quot;;

    // On redonne la main à NodeAtlas pour la suite.
    next();    
};
</code></pre>
<p>Il ne nous reste plus qu&#39;à tester cela avec la commande suivante :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse
</code></pre><p>Vous arriverez sur la page « Index of Webconfig&#39;s Routes » mise en place. Vous pourrez accéder d&#39;ici aux pages <samp>http://localhost/index.html</samp> ou <samp>http://localhost/content.html</samp> avec le contenu « Contenu pour la documentation. ». Vous constaterez également leurs présence dans le dossier <samp>dist</samp>, toujours grâce à <samp>htmlGenerationBeforeResponse</samp>.</p>
<h3 id="injecter-le-contenu-d-un-fichier-externe">Injecter le contenu d&#39;un fichier externe</h3>
<p>Nous allons à présent injecter le contenu du <a href="https://github.com/Haeresis/NodeAtlas/blob/gh-pages/v1.x/README.fr.md">README.md</a> de <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em> que vous <a href="https://raw.githubusercontent.com/Haeresis/NodeAtlas/gh-pages/v1.x/README.fr.md">pouvez télécharger ici</a>. Ce contenu est initialement rédigé en <em><a href="https://fr.wikipedia.org/wiki/Markdown">Markdown</a></em> or nous le voulons en « Hyper-Text <strong>Markup</strong> Language ». Nous allons donc utiliser également un module npm additionel, le module <samp>marked</samp> pour transformer le contenu du <a href="https://raw.githubusercontent.com/Haeresis/NodeAtlas/gh-pages/v1.x/README.fr.md">README.md</a> en HTML.</p>
<p>Nous obtenons donc le nouveau fichier dans l&#39;arborescence :</p>
<pre class="prettyprint linenums"><code>...
nodeatlas-website/
┊┉
├─ README.md
┊┉
</code></pre><p>Pour ajouter <samp>marked</samp> à notre environnement, utilisez un invité de commande et lancez la commande :</p>
<pre class="prettyprint linenums"><code>&gt; npm install -g marked
</code></pre><p>cela nous permet de ne pas piéger le module dans le projet. Une autre solution serait de créer un <samp>package.json</samp> et de lister tous les modules utilisés par ce projet, mais nous verrons cela dans le prochain billet.</p>
<p>Modifions à présent le fichier <samp>controllers/common.js</samp> comme suit :</p>
<p><strong>controllers/common.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">// On se place au niveau du chargement des modules NodeAtlas, et on ajoute le notre.
exports.setModules = function () {

    // On récupère l&#39;instance de NodeAtlas en cours.
    var NA = this;

    // On ajoute le module `marked`. Il va être cherché
    // dans le dossier `node_modules` local (qui n&#39;existe pas)
    // puis finalement cherché dans les modules installés de manière
    // globale (-g) et le trouver. Il va être chargé.
    NA.modules.marked = require(&quot;marked&quot;);
};

exports.setRoutes = function (next) {
    var NA = this,
        route = NA.webconfig.routes;

    route[&quot;/content.html&quot;] = &quot;content.htm&quot;;

    next();    
};

// On se place au niveau de la création de la Response HTTP suite à la Request HTTP d&#39;une route.
// Cette partie sera exécutée quelque soit la route demandée car elle est dans le fichier commun.
exports.changeVariation = function (params, next) {

    // On récupère l&#39;instance de NodeAtlas en cours.
    var NA = this,

        // On récupère le module interne `fs` qui va nous permettre de lire des fichiers.
        fs = NA.modules.fs,

        // On récupère le module externe `marked` que l&#39;on va utiliser depuis le moteur NodeAtlas.
        marked = NA.modules.marked,

        // On récupère les variations compilées spécifiquement pour une route, 
        // demandée par une requête. C&#39;est pour cela qu&#39;elles proviennent du
        // paramètre `params` et non de l&#39;objet `NA`.
        variation = params.variation;

    // On récupère le contenu de `README.md` en `utf-8`. 
    // Celui-ci sera dans la variable `content`.
    fs.readFile(&quot;README.md&quot;, &quot;utf-8&quot;, function (err, content) {
        // En cas d&#39;erreur...
        if (err) {
            // ...on passe tout de suite au chargement de la page,
            // sans le contenu du fichier.
            return next(variation);
        }

        // On surcharge la valeur de `content` en provenance du fichier `variations/common.json`
        // par celle de la variable `content` en retour de la lecture du fichier. On transforme
        // son contenu de `Markdown` à `HTML`.
        variation.common.content = marked(content);

        // On redonne la main à NodeAtlas pour la suite en passant les modifications.
        next(variation);
    });
};
</code></pre>
<p>En coupant le site (Ctrl + C dans l&#39;invité de commande) et en le lançant de nouveau avec :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse
</code></pre><p><em>Note : si le message <samp>Error: Cannot find module &#39;marked&#39;</samp> apparaît, c&#39;est que la variable <samp>NODE_PATH</samp> n&#39;est pas configurée sur votre environnement. C&#39;est elle qui explique où trouver les modules globaux. Dans ce cas, sur Windows, faites un clique droit sur « Ce PC » ou (« Ordinateur ») dans l&#39;Explorateur de fichier et allez dans « Propriétés » puis dans « Paramètres système avancés » puis dans « Variables d&#39;environnement... » puis dans « Variable utilisateur pour... » puis cliquez sur « Nouvelle... ». Ajoutez <samp>NODE_PATH</samp> dans « Nom de la variable » et <samp>%USERPROFILE%\AppData\Roaming\npm\node_modules</samp> dans « Valeur de la variable ». Cliquez sur « Ok » pour fermer chaque fenêtre. Fermez votre invité de commande et r&#39;ouvrez s&#39;en un. Tout devrait être en ordre.</em></p>
<p>Vous serez à même de lire le README.md à l&#39;adresse <samp>http://localhost/index.html</samp> ou à l&#39;adresse <samp>http://localhost/content.html</samp> (et dans le dossier <samp>dist</samp>).</p>
<blockquote>
<p><samp>setModules</samp>, <samp>setRoutes</samp> et <samp>changeVariation</samp></p>
<p>Vous aurez remarqué que ces trois fonctions ne fonctionnent pas exactement de la même manière. La première est simple, la seconde nécéssite l&#39;appel de la callback <samp>next</samp> et la dernière en plus, doit passer à cette callback la variable <samp>variation</samp>. Nous allons expliquer trois concepts associés à leurs utilisation :</p>
<ul>
<li><p><samp>setModules</samp> intervient au niveau du chargement des modules de NodeAtlas. Le module NodeAtlas est récupérable via <samp>this</samp> dans cette fonction. <samp>this</samp> est lié au moteur et toute modification de celui-ci dans un <samp>exports</samp> est répercuté dans le moteur. Cela signifie qu&#39;en ajoutant des modules, ils se retrouvent utilisable aux autres endroit à travers tout le moteur. Puisque cette zone est dédiée uniquement à charger les <samp>require</samp>, et que les <samp>require</samp> se chargent de manière <strong>synchrone</strong>, on sait que le moteur ne reprend pas la main avant que tout soit chargé. Il n&#39;y a pas de nécéssité de callback donc.</p>
</li>
<li><p><samp>setRoutes</samp> intervient juste avant le chargement des routes, mais quand le moteur est complètement opérationnel. La nature de ce qu&#39;on va faire ici fait que les actions peuvent être <strong>asynchrone</strong>s. Il est donc important d&#39;attendre le retour des fonctions asynchrones avant de rendre la main au moteur et démarrer le serveur. Pour être sur que, par exemple, toutes les routes ont bien finies d&#39;être chargées avant la suite du processus, on glisse la fonction <samp>next</samp> dans le retour de la fonction asynchrone.</p>
</li>
<li><p><samp>changeVariation</samp> intervient à chaque fois que le client fait une requête au serveur NodeAtlas, durant la création de la réponse juste avant la phase de compilation des vues. Comme le contenu de <samp>params</samp> (et donc <samp>params.variation</samp>) est unique à chaque réponse, il ne peut pas être placé dans le <samp>this</samp> (qui représente ici, toujours le moteur NodeAtlas global) sinon les valeurs s&#39;écraseraient les unes les autres à chaque requête concurrante : c&#39;est pour cela qu&#39;il est passé en premier paramètre. Une fois les modifications faites, il est nécessaire de les ré-injecter dans le moteur en premier paramètre de la callback <samp>next</samp>.</p>
</li>
</ul>
<p><em>Note : en réalité, le premier paramètre de la callback <samp>next</samp> est optionnel pour <samp>changeVariation</samp> car <samp>params.variation</samp> est un objet passé par référence mais obligatoire pour <samp>changeDom</samp> car <samp>params.dom</samp> est une string passé en tant que variable.</em></p>
</blockquote>
<h3 id="cr-er-des-fragments-de-contenu-partir-du-readme-md">Créer des fragments de contenu à partir du README.md</h3>
<p>Bien sur, il n&#39;y a pas d&#39;utilité à ajouter la page <samp>http://localhost/content.html</samp> car elle est actuellement identique à la <samp>http://localhost/index.html</samp>. </p>
<p>Ce que nous allons faire : c&#39;est créer un ensemble de pages générées à partir du <a href="https://raw.githubusercontent.com/Haeresis/NodeAtlas/gh-pages/v1.x/README.fr.md">README.md</a> directement dans des fichiers accessibles côté Front et côté Back. Nous allons décider que chaque <samp>&lt;h2&gt;</samp> et ce qui le suit sera le contenu d&#39;un fichier. Et chaque fichier sera injecté dans la vue <samp>views/content.htm</samp> pour créer une page derrière une route dynamiquement. Voyons plutôt.</p>
<p>Les fragments HTML seront donc créer dans <samp>assets/content/</samp>.</p>
<pre class="prettyprint linenums"><code>...
nodeatlas-website/
┊┉
├─ assets/
│  └─ content/
┊┉
</code></pre><p>Dans un premier temps, nous allons lire le <a href="https://raw.githubusercontent.com/Haeresis/NodeAtlas/gh-pages/v1.x/README.fr.md">README.md</a> avant que le serveur soit lancé pour créer les fichiers nécessaires puis les ajouter à la liste des routes.</p>
<p><strong>controllers/common.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">exports.setModules = function () {
    var NA = this;
    NA.modules.marked = require(&quot;marked&quot;);
};

exports.setRoutes = function (next) {
    var NA = this,
        fs = NA.modules.fs,

        // On utilise de quoi manipuler le DOM côté serveur (jQuery-like).
        cheerio = NA.modules.cheerio,

        // On permet de gérer une callback synchrone à la fin de
        // plusieurs appels asynchrones (en parallèle).
        async = NA.modules.async,
        marked = NA.modules.marked,
        route = NA.webconfig.routes;

    fs.readFile(&quot;README.md&quot;, &quot;utf-8&quot;, function (err, content) {
        if (err) {
            return next();
        }

        // On récupère la version HTML du README.md.
        var dom = marked(content),

            // On transforme la string Response en DOM.
            $ = cheerio.load(dom, { decodeEntities: false }),

            // On prépare la liste des actions asynchrones dans un tableau.
            allRoutes = [];

        // Pour chaque H2 dans la sortie du README.md.
        $(&quot;h2&quot;).each(function () {

            // On récupère le titre.
            var $title = $(this);

            // On ajoute au tableau les instructions...
            allRoutes.push(function (nextRoute) {

                // ...de créer un fichier, dont le nom est l&#39;id généré par `marked`
                // à partir du H2 et dont le contenu
                // est les autres balises jusqu&#39;au H2 suivant.
                fs.writeFile(&quot;assets/content/&quot; + $title.attr(&quot;id&quot;) + &quot;.htm&quot;, $title + $title.nextUntil(&quot;h2&quot;), function () {

                    // On ajoute la route qui correspondra au chargement du fichier généré.
                    route[&quot;/&quot; + $title.attr(&quot;id&quot;) + &quot;.html&quot;] = &quot;content.htm&quot;;

                    // Et on passe à la suite.
                    nextRoute();
                });
            });
        });

        // On utilise async pour créer les fichiers de manière
        // asynchrone, peu importe l&#39;ordre de création. Mais quand
        // tout est créé...
        async.parallel(allRoutes, function() {

            // ...on rend la main à NodeAtlas.
            next();
        });
    });   
};

exports.changeVariation = function (params, next) {
    var NA = this,
        fs = NA.modules.fs,
        variation = params.variation;

    // Pour chaque route créée, on lit le fichier HTML généré correspondant...
    fs.readFile(&quot;assets/content/&quot; + variation.currentRoute.replace(&quot;.html&quot;, &quot;.htm&quot;), &quot;utf-8&quot;, function (err, content) {
        if (err) {
            return next(variation);
        }

        // ... et on met son contenu dans la variable
        // utilisée dans la vue.
        variation.common.content = content;

        next(variation);
    });
};
</code></pre>
<p>En coupant le site et en le lançant de nouveau avec :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse
</code></pre><p>Vous pourrez voir la liste complète des pages sur l&#39;index <samp>http://localhost/</samp> et constater qu&#39;au fur et à mesure que vous consultez les autres pages, celles-ci apparaissent dans <samp>dist</samp>. Vous pourrez également remarquer que nos fragments sont bien tous présent dans le dossier <samp>nodeatlas-website/assets/content/</samp>.</p>
<p>En coupant le site et en lançant la commande :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --generate
</code></pre><p>vous remarquerez que non seulement la totalité des pages se retrouve dans le dossier <samp>dist</samp>, mais que en plus le dossier <samp>content/</samp> et tout son contenu a été copié également. Ce mécanisme permet d&#39;automatiquement rapatrier les futurs fichiers publiques dans la « distribution » lors de la génération, en conservant la même arborescence de fichier.</p>
<h3 id="utilisation-de-contr-leurs-sp-cifiques">Utilisation de contrôleurs spécifiques</h3>
<p>Nous allons ensuite récupérer la table des matières pour la placer derrière le chemin <samp>http://localhost/index.html</samp>. Nous allons toujours travailler dans <samp>changeVariation</samp>, cependant le mécanisme de chargement sera différent en fonction qu&#39;il soit injecté dans <samp>views/index.htm</samp> ou dans <samp>views/content.htm</samp>. C&#39;est pourquoi nous allons créer deux contrôleurs spécifiques pour ses deux fichiers, et déplacer le contenu de <samp>changeVariation</samp> en provenance de <samp>controllers/common.js</samp> vers ces deux fichiers.</p>
<p>Notre nouvelles arborescences est donc :</p>
<pre class="prettyprint linenums"><code>dist/
nodeatlas-website/
├─ assets/
│  └─ content/
├─ controllers/
│  ├─ common.js
│  ├─ content.js
│  └─ index.js
├─ views/
│  ├─ content.htm
│  └─ partials/
│     ├─ content.htm
│     ├─ head.htm
│     ├─ header.htm
│     └─ foot.htm
├─ variations/
│  └─ common.json
├─ webconfig.json
└─ README.md
</code></pre><p>avec le webconfig suivant :</p>
<pre class="prettyprint linenums"><code>{
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;fr&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;content.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    }
}
</code></pre><p>et avec les trois nouveaux fichiers suivant :</p>
<p><strong>controllers/common.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">exports.setModules = function () {
    var NA = this;

    NA.modules.marked = require(&quot;marked&quot;);
};

exports.setRoutes = function (next) {
    var NA = this,
        fs = NA.modules.fs,
        cheerio = NA.modules.cheerio,
        async = NA.modules.async,
        marked = NA.modules.marked,
        route = NA.webconfig.routes;

    // On va ré-aligner la manière dont les ids sont générés.
    // Cela va nous servir d&#39;ancre/lien unique pour le nom des fichiers, des urls et des ids,
    // ainsi il n&#39;y aura pas de lien mort.
    function toUrl(text) {
        return text.toLowerCase().replace(/&#39;| |\(|\)|\/|\!|\?|,|\&amp;|\;|\[|\]|\%/g, &quot;-&quot;).replace(/-+/g, &quot;-&quot;).replace(/^-/g, &quot;&quot;).replace(/-$/g, &quot;&quot;);
    }

    fs.readFile(&quot;README.md&quot;, &quot;utf-8&quot;, function (err, content) {
        if (err) {
            return next();
        }

        var dom = marked(content),
            $ = cheerio.load(dom, { decodeEntities: false }),
            allRoutes = [],

            // On déclare la futur fonction de création du menu.
            menu,

            // On choisit la partie du `README.md` que l&#39;on va utiliser comme page d&#39;index.
            key = &quot;table-des-matières&quot;;

        // On coordonnonne la manière dont les titres sont transformé en id...
        $(&quot;h2, h3&quot;).each(function () {
            var $title = $(this);

            // ...en changeant les deltas.
            $title.attr(&quot;id&quot;, toUrl($title.text()));
        });

        // On récupère la table des matières, 
        // et on l&#39;enregistre à part dans un autre fichier.
        $(&quot;h3[id=&quot; + key + &quot;]&quot;).each(function () {
            var $title = $(this),
                $toc = $title.next();

            // On transforme toutes les ancres H2 du menu...
            $toc.find(&quot;&gt; li&quot;).each(function () {
                var $sublink = $(this),
                    $subtitle = $sublink.find(&quot;&gt; a&quot;),

                    // On transforme tous les titres...
                    url = encodeURIComponent(toUrl($subtitle.text())) + &quot;.html&quot;;

                // ...en liens correctes.
                $subtitle.attr(&quot;href&quot;, url);

                // Et on réoriente toutes les ancres H3 du menu...
                $sublink.find(&quot;&gt; ul &gt; li&quot;).each(function () {
                    var $sublink = $(this),
                        $subtitle = $sublink.find(&quot;&gt; a&quot;);

                    // ...vers les bonnes adresses avec une bonne ancre.
                    $subtitle.attr(&quot;href&quot;, url + &quot;#&quot; + encodeURIComponent(toUrl($subtitle.text())));

                    // On efface l&#39;entrée `table des matières` de la table des matières.
                    if (toUrl($subtitle.text()) === key) {
                        $sublink.remove();
                    }
                });
            });

            // On créer une fonction pour créer le fichier à part qui servira pour le menu global.
            menu = function (next) {
                fs.writeFile(&quot;assets/content/index.htm&quot;, $title + $toc, function () {

                    // On retire le menu de la source pour l&#39;enregistrement ultérieur.
                    $toc.remove();
                    $title.remove();

                    // On passera à la suite.
                    next();
                });
            };

        });

        $(&quot;h2&quot;).each(function () {
            var $title = $(this);

            allRoutes.push(function (nextRoute) {
                fs.writeFile(&quot;assets/content/&quot; + encodeURIComponent($title.attr(&quot;id&quot;)) + &quot;.htm&quot;, $title + $title.nextUntil(&quot;h2&quot;), function () {
                    // On ajoute le contrôleur pour les pages dynamiques.
                    route[&quot;/&quot; + encodeURIComponent($title.attr(&quot;id&quot;)) + &quot;.html&quot;] = {
                        &quot;view&quot;: &quot;content.htm&quot;,
                        &quot;controller&quot;: &quot;content.js&quot;
                    };

                    nextRoute();
                });
            });
        });

        // On créer le fichier du menu...
        menu(function () {  

            // ...puis tous les autres fichiers dans le désordre...     
            async.parallel(allRoutes, function() {

                // ... puis on rend la main à NodeAtlas.
                next();
            });
        });
    });   
};
</code></pre>
<p><strong>controllers/content.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">exports.changeVariation = function (params, next) {
    var NA = this,
        fs = NA.modules.fs,
        variation = params.variation;

    fs.readFile(&quot;assets/content/&quot; + variation.currentRoute.replace(&quot;.html&quot;, &quot;.htm&quot;), &quot;utf-8&quot;, function (err, content) {
        if (err) {
            return next(variation);
        }

        variation.common.content = content;
        next(variation);
    });
};
</code></pre>
<p><strong>controllers/index.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">exports.changeVariation = function (params, next) {
    var NA = this,
        fs = NA.modules.fs,
        variation = params.variation;

    // Avec pour le moment la différence que le fichier choisit
    // est le fichier `index.htm`.
    fs.readFile(&quot;assets/content/index.htm&quot;, &quot;utf-8&quot;, function (err, content) {
        if (err) {
            return next(variation);
        }

        variation.common.content = content;
        next(variation);
    });
};
</code></pre>
<p>Vous constaterez alors après avoir complètement effacé le contenu de <samp>dist</samp> qu&#39;avec l&#39;utilisation, depuis <samp>nodeatlas-website</samp>, de :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse
</code></pre><p>Nous retrouverons à l&#39;index la totalité de la table des matières. Nous pourrons constater que la page qui contenait la table des matières (actuellement <samp>http://localhost/avant-propos.html</samp>) en est maintenant dépourvu.</p>
<p>En ce qui concerne le dossier <samp>dist</samp>, vous aurez peut-être remarqué que nous avons retiré du webconfig le paramètre <samp>htmlGenerationBeforeResponse</samp> ? C&#39;est pourquoi plus rien n&#39;y est généré. Cependant vous pouvez toujours couper le serveur web, lancer la commande,</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --generate
</code></pre><p>et constater que tous nos fichiers sont de retour !</p>
<h3 id="changer-de-page-sans-rechargement">Changer de page, sans rechargement</h3>
<p>Vous vous êtes peut-être demandé pourquoi nous avons créé des fragments HTML dans des fichiers accessibles côté client (dossier <samp>content/</samp>) ? C&#39;est pour pouvoir en injecter le contenu dynamiquement côté client avec des requêtes AJAX ! Grâce à la fonction <samp>history.pushState</samp>, nous allons changer l&#39;url de la page courante et injecter son nouveau contenu sans rafraîchir la page. Cela signifie donc que :</p>
<ul>
<li>Si un robot réclame une page, comme il ne navigue pas par l&#39;interface du site et donc sans JavaScript, il la réclamera toujours avec une requête HTTP et recevra donc une réponse complète avec du HTML prêt à être indexé.</li>
<li>Si un visiteur réclame la page, le JavaScript prendra la main et les liens deviendront des actions permettant de rapatrier les fragments correspondant et de mettre à jour la page sans la recharger.</li>
</ul>
<p>Bien sur qui dit demande AJAX dit qu&#39;un simple serveur web devra héberger votre maquette (comme c&#39;est le cas pour <a href="https://github.com/" title="GitHub is where people build software. More than 15 million people use GitHub to discover, fork, and contribute to over 38 million projects.">GitHub</a>). Quand le site sera seulement consulté par le système de fichier, les pages se rechargeront simplement comme c&#39;est le cas actuellement.</p>
<p>Pour réaliser cela nous allons ajouter un fichier JavaScript commun côté client :</p>
<pre class="prettyprint linenums"><code>nodeatlas-website/
┊┉
├─ assets/
│  ┊┉
│  ├─ javascript/
│  │  └─ common.js
│  ┊┉
┊┉
</code></pre><p>puis l&#39;ajouter dans le pied de page de nos vues :</p>
<p><strong>views/partials/foot.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">            &lt;!-- Injection du fichier en provenance de `assets/javascript/common.js` --&gt;
            &lt;script src=&quot;javascript/common.js&quot;&gt;&lt;/script&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Nous allons également créer un menu global dans lequel nous allons catégoriser les pages crées depuis le <a href="https://raw.githubusercontent.com/Haeresis/NodeAtlas/gh-pages/v1.x/README.fr.md">README.md</a>.</p>
<p><strong>views/partials/navigation.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">            &lt;nav class=&quot;navigation cmpt&quot;&gt;
                &lt;div class=&quot;navigation--inner&quot;&gt;
                    &lt;div class=&quot;navigation--home&quot;&gt;
                        &lt;a href=&quot;index.html&quot; title=&quot;Accueil&quot;&gt;Accueil&lt;/a&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;navigation--menu&quot;&gt;
                        &lt;ul&gt;
                            &lt;li&gt;
                                &lt;a href=&quot;avant-propos.html&quot;&gt;Présentation&lt;/a&gt;
                                &lt;ul&gt;
                                    &lt;li&gt;
                                        &lt;a href=&quot;installation.html&quot;&gt;Installation&lt;/a&gt;
                                    &lt;/li&gt;
                                    &lt;li&gt;
                                        &lt;a href=&quot;commencer-avec-nodeatlas.html&quot;&gt;Démarrage rapide&lt;/a&gt;
                                    &lt;/li&gt;
                                &lt;/ul&gt;
                            &lt;/li&gt;
                            &lt;li&gt;
                                &lt;a href=&quot;partie-view-et-template.html&quot;&gt;View et Template&lt;/a&gt;
                            &lt;/li&gt;
                            &lt;li&gt;
                                &lt;a href=&quot;partie-controller-et-model.html&quot;&gt;Controller et Model&lt;/a&gt;
                            &lt;/li&gt;
                            &lt;li&gt;
                                &lt;a href=&quot;pour-aller-plus-loin.html&quot;&gt;Route et Plus&lt;/a&gt;
                                &lt;ul&gt;
                                    &lt;li&gt;
                                        &lt;a href=&quot;api-nodeatlas-comme-module-npm.html&quot;&gt;API&lt;/a&gt;
                                    &lt;/li&gt;
                                    &lt;li&gt;
                                        &lt;a href=&quot;cli-commandes-de-lancement.html&quot;&gt;CLI&lt;/a&gt;
                                    &lt;/li&gt;
                                    &lt;li&gt;
                                        &lt;a href=&quot;nodeatlas-comme-simple-serveur-web.html&quot;&gt;Simple Serveur&lt;/a&gt;
                                    &lt;/li&gt;
                                    &lt;li&gt;
                                        &lt;a href=&quot;environnement-de-d%C3%A9veloppement.html&quot;&gt;Développement&lt;/a&gt;
                                    &lt;/li&gt;
                                    &lt;li&gt;
                                        &lt;a href=&quot;environnement-de-production.html&quot;&gt;Production&lt;/a&gt;
                                    &lt;/li&gt;
                                &lt;/ul&gt;
                            &lt;/li&gt;
                            &lt;li&gt;
                                &lt;a href=&quot;plus-sur-nodeatlas.html&quot;&gt;Et les autres ?&lt;/a&gt;
                            &lt;/li&gt;
                        &lt;/ul&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/nav&gt;
</code></pre>
<p><strong>views/content.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;?- include(&quot;partials/head.htm&quot;) ?&gt;
&lt;?- include(&quot;partials/header.htm&quot;) ?&gt;

&lt;!-- Ajout de la navigation globale. --&gt;
&lt;?- include(&quot;partials/navigation.htm&quot;) ?&gt;
&lt;?- include(&quot;partials/content.htm&quot;) ?&gt;
&lt;?- include(&quot;partials/foot.htm&quot;) ?&gt;
</code></pre>
<p>Nous allons enfin ajouter le contenu du fichier JavaScript commun :</p>
<p><strong>assets/javascript/common.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">// On récupère tous les liens du menu.
var links = document.querySelectorAll(&quot;.navigation a&quot;),

    // On se créer une fonction « type » pour faire des appels AJAX
    xhrRequest = function(url, next) {

        // Création d&#39;un objet d&#39;appel AJAX.
        var request = new XMLHttpRequest();

        // Pour un appel en GET à l&#39;url &lt;url&gt;.
        request.open(&quot;GET&quot;, url, true);

        // Envoi de la requête
        request.send();

        // Si la requête atteind sa cible.
        request.addEventListener(&quot;load&quot;, function () {

            // Si la réponse fournit est invalide...
            if (request.status &lt; 200 &amp;&amp; request.status &gt;= 400) {

                // ...on retourne une erreur.
                return next(new Error(&quot;We reached our target server, but it returned an error.&quot;));
            }

            // Sinon on renvoi la réponse à la callback.
            next(null, request.responseText);
        });

        // Si la requête n&#39;obtient pas de réponse ou une mauvaise réponse.
        request.addEventListener(&quot;error&quot;, function () {
            return next(new Error(&quot;There was a connection error of some sort.&quot;));
        });
    };

// Au chargement de la page, tous les liens du menu...
[].forEach.call(links, function (link) {

    // ...deviennent cliquable...
    link.addEventListener(&quot;click&quot;, function (e) {

        // et basé sul l&#39;adresse du lien, on récupère le nom du fichier.
        var urn = link.getAttribute(&quot;href&quot;).replace(&quot;.html&quot;, &quot;&quot;);

        // On empèche la page de suivre le lien initial.
        e.preventDefault();

        // On réclame le fragment nécéssaire à l&#39;affichage de notre nouvelle page.
        xhrRequest(&quot;content/&quot; + encodeURIComponent(urn) + &quot;.htm&quot;, function (err, response) {
            if (err) {
              return err;
            }

            // On ajoute une nouvelle page dans l&#39;historique,
            // et on s&#39;y déplace (paramètre trois)
            // en laissant l&#39;urn comme information (premier paramètre)
            // utilisable pour le retour en arrière.
            history.pushState(urn, null, &quot;/&quot; + urn + &quot;.html&quot;);

            // Et on injecte la response dans la page principale.
            document.getElementsByClassName(&quot;content--inner&quot;)[0].innerHTML = response;
        });
    });
});

// À chaque fois que l&#39;on réclamera un retour en arrière (comme le bouton back du navigateur)
window.addEventListener(&quot;popstate&quot;, function (e) {

    // On consultera l&#39;url passée comme référence pour ramener ce contenu...
    if (e.state) {

        // ... en AJAX...
        xhrRequest(&quot;content/&quot; + encodeURIComponent(e.state) + &quot;.htm&quot;, function (err, response) {
            if (err) {
              return err;
            }

            // et l&#39;injecter dans la page principale.
            document.getElementsByClassName(&quot;content--inner&quot;)[0].innerHTML = response;
        });

    // Cependant s&#39;il n&#39;y a pas d&#39;état,
    // c&#39;est que nous somme arrivé à la page 
    // d&#39;origine et que l&#39;on souhaite retourner sur le site
    // qui avait précédé notre arrivé sur le site.
    } else {
        history.back();
    }
});
</code></pre>
<p>Lancez le serveur :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse
</code></pre><p>Vous constaterez alors en vous rendant à l&#39;adresse <samp>http://localhost/index.html</samp> que naviguer à travers les pages via votre menu ne recharge plus la page et que, après avoir navigué à travers plusieurs page, le bouton « retour » vous ramène également aux pages précédentes sans rechargement. Vous pourrez réellement vous en assurez dans le panneau « Network » (F12) de votre navigateur en voyant que ce sont bien des requêtes « xhr ».</p>
<p>Nous allons maintenant générer la maquette :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --generate
</code></pre><p>Et en ouvrant le fichier <samp>dist\index.html</samp> par votre système de fichier, vous vous rendrez compte que les pages ne changent plus. Dans votre console (F12) vous pourrez voir l&#39;erreur suivante (sous Chrome) : « XMLHttpRequest cannot load <filepath>. ». Cela est normal car il faut un serveur web pour répondre aux requêtes AJAX.</p>
<p>Nous allons donc modifier le script pour qu&#39;il ne génère pas d&#39;erreur et aille sur la page souhaitée normalement (en rechargeant la page) si l&#39;AJAX n&#39;est pas géré.</p>
<p><strong>assets/javascript/common.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">var links = document.querySelectorAll(&quot;.navigation a&quot;),
    xhrRequest = function(url, next) {
        var request = new XMLHttpRequest();

        // Vérifier que l&#39;objet request peut envoyer une requête AJAX.
        if (location.protocol !== &quot;file:&quot;) {
            request.open(&quot;GET&quot;, url, true);
            request.send();
        } else {
            return next(new Error(&quot;Impossible to use AJAX in file system mode.&quot;));
        }

        request.addEventListener(&quot;load&quot;, function () {
            if (request.status &lt; 200 &amp;&amp; request.status &gt;= 400) {
                return next(new Error(&quot;The server was reached, but with no correct response.&quot;));
            }
            next(null, request.responseText);
        });

        request.addEventListener(&quot;error&quot;, function () {
            return next(new Error(&quot;The server is unreachable.&quot;));
        });
    },

    // Fonction utilisée si les requêtes AJAX ne fonctionnent pas.
    xhrFallback = function (url) {
        // On atteint l&#39;url normalement.
        location.href = encodeURIComponent(url) + &quot;.html&quot;;
    };


[].forEach.call(links, function (link) {
    link.addEventListener(&quot;click&quot;, function (e) {
        var urn = link.getAttribute(&quot;href&quot;).replace(&quot;.html&quot;, &quot;&quot;);
        e.preventDefault();
        xhrRequest(&quot;content/&quot; + encodeURIComponent(urn) + &quot;.htm&quot;, function (err, response) {
            if (err) {

                // On stop la fonction.
                return xhrFallback(urn);
            }

            history.pushState(urn, null, &quot;/&quot; + urn + &quot;.html&quot;);

            document.getElementsByClassName(&quot;content--inner&quot;)[0].innerHTML = response;
        });
    });
});

window.addEventListener(&quot;popstate&quot;, function (e) {
    if (e.state) {
        xhrRequest(&quot;content/&quot; + encodeURIComponent(e.state) + &quot;.htm&quot;, function (err, response) {
            if (err) {

                // On stop la fonction.
                return xhrFallback(e.state);
            }

            document.getElementsByClassName(&quot;content--inner&quot;)[0].innerHTML = response;
        });
    } else {
        history.back();
    }
});
</code></pre>
<p>À présent, en relançant la génération de la maquette, vous pourrez, même par le système de fichier, naviguer entre vos pages qui cette fois se chargeront totalement.</p>
<h3 id="simple-serveur-web">Simple Serveur Web</h3>
<p>Sachez que <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em> aussi sait faire tourner un simple serveur web pour tester vos maquettes en local tel qu&#39;elles seront lues une fois sur un serveur (dans notre exemple, sur <a href="https://github.com/" title="GitHub is where people build software. More than 15 million people use GitHub to discover, fork, and contribute to over 38 million projects.">GitHub</a>). Il vous suffit de vous positionner dans le dossier <samp>dist/</samp> et de lancer la commande :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse index.html
</code></pre><p>ou (si le port 80 est déjà utilisé)</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse index.html --httpPort 3000
</code></pre><h3 id="g-n-ration-multilingue">Génération multilingue</h3>
<p>Nous allons à présent créer la version « internationale » de la documentation. Pour cela nous allons suivre les étapes suivantes :</p>
<ul>
<li>Créer un webconfig spécifique à la version internationale.</li>
<li>Ramener le <a href="https://raw.githubusercontent.com/Haeresis/NodeAtlas/gh-pages/v1.x/README.en.md">README.md</a> international.</li>
<li>Mettre l&#39;accès au <a href="https://raw.githubusercontent.com/Haeresis/NodeAtlas/gh-pages/v1.x/README.en.md">README.md</a>) dans une variable de webconfig.</li>
<li>Mettre les textes de l&#39;applications dans le fichier de variation commun.</li>
</ul>
<p>Il va être question d&#39;obtenir la version française du site dans <samp>dist</samp> et la version internationale dans le sous-répertoire <samp>dist\english</samp> ce qui nécessite l&#39;utilisation de la propriété de webconfig <samp>urlRelativeSubPath</samp>.</p>
<p>Notre nouvelle arborescence va donc être la suivante pour <samp>dist</samp> :</p>
<pre class="prettyprint linenums"><code>dist/
└─ english/
</code></pre><p>et pour <samp>nodeatlas-website</samp></p>
<pre class="prettyprint linenums"><code>nodeatlas-website/
├─ assets/
│  ├─ content/
│  │  └─ english/
│  └─ javascript/
│     └─ common.js
├─ controllers/
│  ├─ common.js
│  ├─ content.js
│  └─ index.js
├─ views/
│  ├─ content.htm
│  └─ partials/
│     ├─ content.htm
│     ├─ head.htm
│     ├─ navigation.htm
│     ├─ header.htm
│     └─ foot.htm
├─ variations/
│  ├─ common.json
│  └─ en
│     └─ common.json
├─ webconfig.json
├─ webconfig.en.json
├─ README.md
└─ README.en.md
</code></pre><p>Créez donc le nouveau dossier <samp>assets/content/english/</samp> pour accueillir les fragments AJAX de la version internationale.</p>
<p>Avec notre nouveau <samp>nodeatlas-website\README.en.md</samp> <a href="[README.md](https://raw.githubusercontent.com/Haeresis/NodeAtlas/gh-pages/v1.x/README.en.md">récupérrable ici</a>) (changez le nom du fichier).</p>
<p>Nos deux webconfigs vont être les suivants,</p>
<p>pour la version française :</p>
<p><strong>webconfig.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;fr&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;content.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    },
    &quot;_readme&quot;: &quot;README.md&quot;,
    &quot;_content&quot;: &quot;content/&quot;,
    &quot;_toc&quot;: &quot;table-des-matières&quot;
}
</code></pre>
<p>et la version internationale :</p>
<p><strong>webconfig.en.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;en&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/english/&quot;,
    &quot;urlRelativeSubPath&quot;: &quot;english&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;content.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    },
    &quot;_readme&quot;: &quot;README.en.md&quot;,
    &quot;_content&quot;: &quot;content/english/&quot;,
    &quot;_toc&quot;: &quot;table-of-contents&quot;
}
</code></pre>
<p>Nous allons nous servir de <samp>_readme</samp>, <samp>_toc</samp>, et de <samp>_content</samp> dans le code, dans les fichiers suivant :</p>
<p><strong>controllers/common.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">exports.setModules = function () {
    var NA = this;

    NA.modules.marked = require(&quot;marked&quot;);
};

exports.setRoutes = function (next) {
    var NA = this,
        fs = NA.modules.fs,
        cheerio = NA.modules.cheerio,
        async = NA.modules.async,
        marked = NA.modules.marked,
        route = NA.webconfig.routes;

    function toUrl(text) {
        return text.toLowerCase().replace(/&#39;| |\(|\)|\/|\!|\?|,|\&amp;|\;|\[|\]|\%/g, &quot;-&quot;).replace(/-+/g, &quot;-&quot;).replace(/^-/g, &quot;&quot;).replace(/-$/g, &quot;&quot;);
    }

    // On remplace le « README.md » par sa valeur dans le webconfig.
    fs.readFile(NA.webconfig._readme, &quot;utf-8&quot;, function (err, content) {
        if (err) {
            return next();
        }

        var dom = marked(content),
            $ = cheerio.load(dom, { decodeEntities: false }),
            allRoutes = [],
            menu,

            // On remplace « table des matières » par sa valeur dans le webconfig.
            key = NA.webconfig._toc;

        $(&quot;h2, h3&quot;).each(function () {
            var $title = $(this);

            $title.attr(&quot;id&quot;, toUrl($title.text()));
        });

        $(&quot;h3[id=&quot; + key + &quot;]&quot;).each(function () {
            var $title = $(this),
                $toc = $title.next();

            $toc.find(&quot;&gt; li&quot;).each(function () {
                var $sublink = $(this),
                    $subtitle = $sublink.find(&quot;&gt; a&quot;),
                    url = encodeURIComponent(toUrl($subtitle.text())) + &quot;.html&quot;;

                $subtitle.attr(&quot;href&quot;, url);

                $sublink.find(&quot;&gt; ul &gt; li&quot;).each(function () {
                    var $sublink = $(this),
                        $subtitle = $sublink.find(&quot;&gt; a&quot;);

                    $subtitle.attr(&quot;href&quot;, url + &quot;#&quot; + encodeURIComponent(toUrl($subtitle.text())));

                    if (toUrl($subtitle.text()) === key) {
                        $sublink.remove();
                    }
                });
            });

            menu = function (next) {

                // On remplace « assets/content/ » par sa valeur dans le webconfig.
                fs.writeFile(&quot;assets/&quot; + NA.webconfig._content + &quot;index.htm&quot;, $title + $toc, function () {
                    $toc.remove();
                    $title.remove();

                    next();
                });
            };

        });

        $(&quot;h2&quot;).each(function () {
            var $title = $(this);

            allRoutes.push(function (nextRoute) {

                // On remplace « assets/content/ » par sa valeur dans le webconfig.
                fs.writeFile(&quot;assets/&quot; + NA.webconfig._content + encodeURIComponent($title.attr(&quot;id&quot;)) + &quot;.htm&quot;, $title + $title.nextUntil(&quot;h2&quot;), function () {
                    route[&quot;/&quot; + encodeURIComponent($title.attr(&quot;id&quot;)) + &quot;.html&quot;] = {
                        &quot;view&quot;: &quot;content.htm&quot;,
                        &quot;controller&quot;: &quot;content.js&quot;
                    };

                    nextRoute();
                });
            });
        });

        menu(function () {     
            async.parallel(allRoutes, function() {
                next();
            });
        });
    });   
};
</code></pre>
<p><strong>controllers/content.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">exports.changeVariation = function (params, next) {
    var NA = this,
        fs = NA.modules.fs,
        variation = params.variation;

    // On remplace « assets/content/ » par sa valeur dans le webconfig.
    fs.readFile(&quot;assets/&quot; + NA.webconfig._content + variation.currentRoute.replace(&quot;.html&quot;, &quot;.htm&quot;), &quot;utf-8&quot;, function (err, content) {
        if (err) {
            return next(variation);
        }

        variation.common.content = content;
        next(variation);
    });
};
</code></pre>
<p><strong>controllers/index.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">exports.changeVariation = function (params, next) {
    var NA = this,
        fs = NA.modules.fs,
        variation = params.variation;

    // On remplace « assets/content/ » par sa valeur dans le webconfig.
    fs.readFile(&quot;assets/&quot; + NA.webconfig._content + &quot;index.htm&quot;, &quot;utf-8&quot;, function (err, content) {
        if (err) {
            return next(variation);
        }

        variation.common.content = content;
        next(variation);
    });
};
</code></pre>
<p>puis nous allons augmenter le fichier de variation original :</p>
<p><strong>variations/common.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;title&quot;: &quot;NodeAtlas&quot;,
    &quot;content&quot;: &quot;Contenu pour la documentation.&quot;,
    &quot;noJs&quot;: &quot;Le JavaScript n&#39;est pas activé.&quot;,
    &quot;home&quot;: {
        &quot;title&quot;: &quot;Accueil&quot;,
        &quot;url&quot;: &quot;index.html&quot;
    },
    &quot;lang&quot;: {
        &quot;title&quot;: &quot;English&quot;,
        &quot;url&quot;: &quot;english/index.html&quot;
    },
    &quot;menu&quot;: [{
        &quot;title&quot;: &quot;Présentation&quot;,
        &quot;url&quot;: &quot;avant-propos.html&quot;,
        &quot;menu&quot;: [{
            &quot;title&quot;: &quot;Installation&quot;,
            &quot;url&quot;: &quot;installation.html&quot;
        }, {
            &quot;title&quot;: &quot;Démarrage rapide&quot;,
            &quot;url&quot;: &quot;commencer-avec-nodeatlas.html&quot;
        }]
    }, {
        &quot;title&quot;: &quot;View et Template&quot;,
        &quot;url&quot;: &quot;partie-view-et-template.html&quot;
    }, {
        &quot;title&quot;: &quot;Controller et Model&quot;,
        &quot;url&quot;: &quot;partie-controller-et-model.html&quot;
    }, {
        &quot;title&quot;: &quot;Route et Plus&quot;,
        &quot;url&quot;: &quot;pour-aller-plus-loin.html&quot;,
        &quot;menu&quot;: [{
            &quot;title&quot;: &quot;API&quot;,
            &quot;url&quot;: &quot;api-nodeatlas-comme-module-npm.html&quot;
        }, {
            &quot;title&quot;: &quot;CLI&quot;,
            &quot;url&quot;: &quot;cli-commandes-de-lancement.html&quot;
        }, {
            &quot;title&quot;: &quot;Simple Serveur&quot;,
            &quot;url&quot;: &quot;nodeatlas-comme-simple-serveur-web.html&quot;
        }, {
            &quot;title&quot;: &quot;Développement&quot;,
            &quot;url&quot;: &quot;environnement-de-d%C3%A9veloppement.html&quot;
        }, {
            &quot;title&quot;: &quot;Production&quot;,
            &quot;url&quot;: &quot;environnement-de-production.html&quot;
        }]
    }, {
        &quot;title&quot;: &quot;Et les autres ?&quot;,
        &quot;url&quot;: &quot;plus-sur-nodeatlas.html&quot;
    }]
}
</code></pre>
<p>et créer sa version internationale :</p>
<p><strong>variations/en/common.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;title&quot;: &quot;NodeAtlas&quot;,
    &quot;content&quot;: &quot;Content for documentation.&quot;,
    &quot;noJs&quot;: &quot;No JavaScript enabled.&quot;,
    &quot;home&quot;: {
        &quot;title&quot;: &quot;Home&quot;,
        &quot;url&quot;: &quot;index.html&quot;
    },
    &quot;lang&quot;: {
        &quot;title&quot;: &quot;Français&quot;,
        &quot;url&quot;: &quot;../index.html&quot;
    },
    &quot;menu&quot;: [{
        &quot;title&quot;: &quot;Overview&quot;,
        &quot;url&quot;: &quot;overview.html&quot;,
        &quot;menu&quot;: [{
            &quot;title&quot;: &quot;Installing&quot;,
            &quot;url&quot;: &quot;installing.html&quot;
        }, {
            &quot;title&quot;: &quot;Get Started&quot;,
            &quot;url&quot;: &quot;start-with-nodeatlas.html&quot;
        }]
    }, {
        &quot;title&quot;: &quot;View and Template&quot;,
        &quot;url&quot;: &quot;view-and-template-part.html&quot;
    }, {
        &quot;title&quot;: &quot;Controller and Model&quot;,
        &quot;url&quot;: &quot;controller-and-model-part.html&quot;
    }, {
        &quot;title&quot;: &quot;Route and More&quot;,
        &quot;url&quot;: &quot;more-features.html&quot;,
        &quot;menu&quot;: [{
            &quot;title&quot;: &quot;API&quot;,
            &quot;url&quot;: &quot;api-nodeatlas-as-npm-module.html&quot;
        }, {
            &quot;title&quot;: &quot;CLI&quot;,
            &quot;url&quot;: &quot;cli-running-commands.html&quot;
        }, {
            &quot;title&quot;: &quot;Simple Server&quot;,
            &quot;url&quot;: &quot;nodeatlas-as-a-simple-web-server.html&quot;
        }, {
            &quot;title&quot;: &quot;Development&quot;,
            &quot;url&quot;: &quot;development-environment.html&quot;
        }, {
            &quot;title&quot;: &quot;Production&quot;,
            &quot;url&quot;: &quot;production-environment.html&quot;
        }]
    }, {
        &quot;title&quot;: &quot;And others?&quot;,
        &quot;url&quot;: &quot;more-about-nodeatlas.html&quot;
    }]
}
</code></pre>
<p>pour pouvoir changer les fichiers de vue partielle suivants :</p>
<p><strong>views/partials/head.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;&lt;?= languageCode ?&gt;&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;NodeAtlas&lt;/title&gt;

        &lt;base href=&quot;&lt;?= urlBasePath ?&gt;/&quot; /&gt;

        &lt;meta name=&quot;description&quot; content=&quot;NodeAtlas est un Framework JavaScript MVC(2) côté serveur.&quot; /&gt;
        &lt;meta name=&quot;geo.placename&quot; content=&quot;Annecy, Haute-Savoie, France&quot; /&gt;

        &lt;meta name=&quot;robots&quot; content=&quot;index, follow&quot; /&gt;

        &lt;!--[if IE]&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no&quot; /&gt;&lt;![endif]--&gt;
        &lt;!--[if !IE]&gt;&lt;!--&gt;&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no&quot; /&gt;&lt;!--&lt;![endif]--&gt;
    &lt;/head&gt;

    &lt;!-- On place dans `data-content` le chemin vers les fragments HTML. --&gt;
    &lt;!-- On place dans `data-subpath` le chemin vers le sous répertoire de la version internationale. --&gt;
    &lt;body data-content=&quot;&lt;?= webconfig._content ?&gt;&quot; data-subpath=&quot;&lt;?= webconfig.urlRelativeSubPath ?&gt;&quot;&gt;
        &lt;div class=&quot;layout&quot;&gt;
            &lt;noscript class=&quot;no-js cmpt&quot;&gt;
                &lt;div class=&quot;no-js--inner&quot;&gt;

                    &lt;!-- Le message annonçant l&#39;activation du JS est multilangue. --&gt;
                    &lt;p&gt;&lt;?- common.noJs ?&gt;&lt;/p&gt;
                &lt;/div&gt;
            &lt;/noscript&gt;
</code></pre>
<p><strong>views/partials/header.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">            &lt;header class=&quot;header cmpt&quot;&gt;
                &lt;div class=&quot;header--inner&quot;&gt;
                    &lt;div class=&quot;header--title&quot;&gt;

                        &lt;!-- Le titre du site. --&gt;
                        &lt;h1&gt;&lt;?- common.title ?&gt;&lt;/h1&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/header&gt;
</code></pre>
<p><strong>views/partials/navigation.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">            &lt;nav class=&quot;navigation cmpt&quot;&gt;
                &lt;div class=&quot;navigation--inner&quot;&gt;
                    &lt;div class=&quot;navigation--lang&quot;&gt;
                        &lt;a href=&quot;&lt;?= common.lang.url ?&gt;&quot; title=&quot;&lt;?= common.lang.title ?&gt;&quot;&gt;&lt;?- common.lang.title ?&gt;&lt;/a&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;navigation--home&quot;&gt;
                        &lt;a href=&quot;&lt;?= common.home.url ?&gt;&quot; title=&quot;&lt;?= common.home.title ?&gt;&quot;&gt;&lt;?- common.home.title ?&gt;&lt;/a&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;navigation--menu&quot;&gt;
                        &lt;ul&gt;
                            &lt;? for (var i = 0; i &lt; common.menu.length; i++) { ?&gt;
                            &lt;li&gt;
                                &lt;a href=&quot;&lt;?= common.menu[i].url ?&gt;&quot; title=&quot;&lt;?= common.menu[i].title ?&gt;&quot;&gt;&lt;?- common.menu[i].title ?&gt;&lt;/a&gt;
                                &lt;? if (common.menu[i].menu) { ?&gt;
                                &lt;ul&gt;
                                    &lt;? for (var j = 0; j &lt; common.menu[i].menu.length; j++) { ?&gt;
                                    &lt;li&gt;
                                        &lt;a href=&quot;&lt;?= common.menu[i].menu[j].url ?&gt;&quot; title=&quot;&lt;?= common.menu[i].menu[j].title ?&gt;&quot;&gt;&lt;?- common.menu[i].menu[j].title ?&gt;&lt;/a&gt;
                                    &lt;/li&gt;
                                    &lt;? } ?&gt;
                                &lt;/ul&gt;
                                &lt;? } ?&gt;
                            &lt;/li&gt;
                            &lt;? } ?&gt;
                        &lt;/ul&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/nav&gt;
</code></pre>
<p>Nous pouvons à présent grâce à <samp>data-content</samp> dans le <samp>&lt;body&gt;</samp> choisir les fragments français ou internationaux dans le JavaScript client grâce à la modification suivante :</p>
<p><strong>assets/javascript/common.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-javascript">// On retire le lien pour changer de version (.navigation--lang)
// En sélectionnant que la home et le menu.
var links = document.querySelectorAll(&quot;.navigation--home a, .navigation--menu a&quot;),

    // On va chercher le chemin correcte jusqu&#39;au fichier.
    fragmentPath = document.body.getAttribute(&quot;data-content&quot;),

    // On récupère le sous répertoire si celui-ci existe (version anglaise).
    urlRelativeSubPath = document.body.getAttribute(&quot;data-subpath&quot;),
    xhrRequest = function(url, next) {
        var request = new XMLHttpRequest();

        if (location.protocol !== &quot;file:&quot;) {
            request.open(&quot;GET&quot;, url, true);
            request.send();
        } else {
            return next(new Error(&quot;Impossible d&#39;utiliser AJAX par simple ouverture de fichier.&quot;));
        }

        request.addEventListener(&quot;load&quot;, function () {
            if (request.status &lt; 200 &amp;&amp; request.status &gt;= 400) {
                return next(new Error(&quot;Le serveur a été atteind mais à renvoyé une erreur.&quot;));
            }
            next(null, request.responseText);
        });

        request.addEventListener(&quot;error&quot;, function () {
            return next(new Error(&quot;Le serveur n&#39;a pas pu être atteind.&quot;));
        });
    },
    xhrFallback = function (url) {
        location.href = encodeURIComponent(url) + &quot;.html&quot;;
    };


[].forEach.call(links, function (link) {
    link.addEventListener(&quot;click&quot;, function (e) {
        var urn = link.getAttribute(&quot;href&quot;).replace(&quot;.html&quot;, &quot;&quot;);
        e.preventDefault();

        // Et on injecte le chemin pour les liens.
        xhrRequest(fragmentPath + encodeURIComponent(urn) + &quot;.htm&quot;, function (err, response) {
            if (err) {
                return xhrFallback(urn);
            }

            // Et on injecte le sous répertoire pour les liens.
            history.pushState(urn, null, urlRelativeSubPath + &quot;/&quot; + urn + &quot;.html&quot;);

            document.getElementsByClassName(&quot;content--inner&quot;)[0].innerHTML = response;
        });
    });
});

window.addEventListener(&quot;popstate&quot;, function (e) {
    if (e.state) {

        // Et on injecte le chemin pour les liens.
        xhrRequest(fragmentPath + encodeURIComponent(e.state) + &quot;.htm&quot;, function (err, response) {
            if (err) {
                return xhrFallback(e.state);
            }

            document.getElementsByClassName(&quot;content--inner&quot;)[0].innerHTML = response;
        });
    } else {
        history.back();
    }
});
</code></pre>
<p>Nous pouvons à présent faire tourner la version française avec la commande :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse
</code></pre><p>ou la version internationale avec la commande :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse --webconfig webconfig.en.json
</code></pre><p>Vous constaterez que le lien pour changer de version pointe sur des pages inexistantes puisque chaque version ne fait tourner que sa langue. Cependant, en générant les fichiers français avec :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --generate
</code></pre><p>puis les fichiers anglais avec :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --generate --webconfig webconfig.en.json
</code></pre><p>vous pourrez, en vous rendant dans <samp>dist</samp> simuler un serveur web avec</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse index.html
</code></pre><p>et constater que toutes les versions sont accessibles derrière tous les liens.</p>
<p>Après avoir mis en place de quoi maintenir et générer notre documentation à partir du README.md du projet, il est temps de nous attaquer à la partie visuelle de ce site. Mais arrêtons nous un instant pour automatiser le processus de génération des sites !</p>
<h3 id="g-n-ration-avec-l-api-nodeatlas">Génération avec l&#39;API NodeAtlas</h3>
<p>Nous venons de voir qu&#39;il y a plusieurs étapes pour générer notre documentation. Il faut :</p>
<ul>
<li>Générer la version française.</li>
<li>Générer la version internationale.</li>
<li>Lancer le site généré en localhost pour vérification.</li>
</ul>
<p>Nous allons créer un fichier JavaScript dans le dossier <samp>nodeatlas-website</samp> qui va nous permettre de faire les trois en une seule fois. Le voici :</p>
<p><strong>generate-website.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">// On récupère l&#39;API NodeAtlas.
var nodeAtlas = require(&quot;node-atlas&quot;),

    // On créé une instance pour générer la version française.
    versionFrench = new nodeAtlas(),

    // On créé une instance pour générer la version internationale.
    versionEnglish = new nodeAtlas(),

    // On créé une instance pour faire tourner le site générer.
    versionTest = new nodeAtlas();

// On paramètre la version française.
versionFrench.init({
    &quot;generate&quot;: true

// On explique ce qu&#39;il ce passe après la création de la version française.
}).generated(function() {

    // On paramètre la version internationale.
    versionEnglish.init({
        &quot;generate&quot;: true,
        &quot;webconfig&quot;: &quot;webconfig.en.json&quot;

    // On explique ce qu&#39;il ce passe après la création de la version internationale.
    }).generated(function() {

        // On paramètre la version de test.
        versionTest.init({
            &quot;browse&quot;: &quot;index.html&quot;,
            &quot;directory&quot;: &quot;../dist/&quot;

        // On lance le site de Test.
        }).start();

    // On lance la génération internationale.
    }).start();

// On lance la génération française.
}).start();
</code></pre>
<p>Et nous lançons la commande suivante depuis le dossier <samp>nodeatlas-website</samp> :</p>
<pre class="prettyprint linenums"><code>&gt; node generate-website.js
</code></pre><p>Nous faisons tourner la version serverless de nos fichiers avec un simple serveur web équivalent de ce que donnera le site une fois sur <a href="https://github.com/" title="GitHub is where people build software. More than 15 million people use GitHub to discover, fork, and contribute to over 38 million projects.">GitHub</a>.</p>
<p><em>Note : sous Windows, en renommant <samp>generate-website.js</samp> en <samp>generate-website.na</samp> et en expliquant que les fichiers <samp>.na</samp> s&#39;ouvrent avec <samp>node.exe</samp> on peut se passer de la commande précédente et simplement double cliquer sur <samp>generate-website.na</samp> pour lancer la procédure !</em></p>
<h2 id="travailler-avec-des-fichiers-less-et-stylus">Travailler avec des fichiers Less et Stylus</h2>
<p>Nous allons à présent mettre en place tous les fichiers client qui vont permettre d&#39;habiller notre documentation et de permettre à l&#39;utilisateur d&#39;intéragir avec. Nous allons suivre l&#39;<a href="https://blog.lesieur.name/conventions-html-css-js-et-architecture-front-end/">architecture et les normes indiqués ici</a> pour cela. Nous parlons donc ici des fichiers CSS ainsi que des fichiers JavaScript. </p>
<h3 id="mise-en-place-des-css-et-des-js">Mise en place des CSS et des JS</h3>
<p>Jusqu&#39;à présent, nous avons travaillé avec le fichier <samp>javascript/common.js</samp>. Nous allons ajouter à cela, un fichier JavaScript par composant effectif dans le HTML. Nous allons également créer un équivalent de chaque composant en CSS et un fichier commun <samp>stylesheets/common.css</samp>. Nous obtenons donc la nouvelle arborescence suivante :</p>
<pre class="prettyprint linenums"><code>nodeatlas-website/
┊┉
├─ assets/
│  ┊┉
│  ├─ javascript/
│  │  ├─ common.js
│  │  ├─ cmpt.header.js
│  │  ├─ cmpt.navigation.js
│  │  └─ cmpt.content.js
│  └─ stylesheets/
│     ├─ common.css
│     ├─ cmpt.header.css
│     ├─ cmpt.navigation.css
│     └─ cmpt.content.css
┊┉
</code></pre><p>Nous allons inclure ces fichiers en pied de la balise <samp>head</samp> pour les CSS et en pied de <samp>body</samp> pour les JS.</p>
<p><strong>views/partials/head.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;&lt;?= languageCode ?&gt;&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;NodeAtlas&lt;/title&gt;

        &lt;base href=&quot;&lt;?= urlBasePath ?&gt;/&quot; /&gt;

        &lt;meta name=&quot;description&quot; content=&quot;NodeAtlas est un Framework JavaScript MVC(2) côté serveur.&quot; /&gt;
        &lt;meta name=&quot;geo.placename&quot; content=&quot;Annecy, Haute-Savoie, France&quot; /&gt;

        &lt;meta name=&quot;robots&quot; content=&quot;index, follow&quot; /&gt;

        &lt;!--[if IE]&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no&quot; /&gt;&lt;![endif]--&gt;
        &lt;!--[if !IE]&gt;&lt;!--&gt;&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no&quot; /&gt;&lt;!--&lt;![endif]--&gt;

        &lt;!-- Inclusion des fichiers CSS --&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;stylesheets/common.css&quot;&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;stylesheets/cmpt.header.css&quot;&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;stylesheets/cmpt.navigation.css&quot;&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;stylesheets/cmpt.content.css&quot;&gt;
    &lt;/head&gt;
    &lt;body data-content=&quot;&lt;?= webconfig._content ?&gt;&quot; data-subpath=&quot;&lt;?= webconfig.urlRelativeSubPath ?&gt;&quot;&gt;
        &lt;div class=&quot;layout&quot;&gt;
            &lt;noscript class=&quot;no-js cmpt&quot;&gt;
                &lt;div class=&quot;no-js--inner&quot;&gt;
                    &lt;p&gt;&lt;?- common.noJs ?&gt;&lt;/p&gt;
                &lt;/div&gt;
            &lt;/noscript&gt;
</code></pre>
<p><strong>views/partials/foot.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">            &lt;!-- Inclusion des fichiers JS --&gt;
            &lt;script src=&quot;javascript/cmpt.header.js&quot;&gt;&lt;/script&gt;
            &lt;script src=&quot;javascript/cmpt.navigation.js&quot;&gt;&lt;/script&gt;
            &lt;script src=&quot;javascript/cmpt.content.js&quot;&gt;&lt;/script&gt;
            &lt;script src=&quot;javascript/common.js&quot;&gt;&lt;/script&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Voici un contenu provisoire que nous allons attribuer à chacun des fichiers CSS :</p>
<p><strong>assets/stylesheets/common.css</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">* {
    font-weight: bold;
}
</code></pre>
<p><strong>assets/stylesheets/cmpt.header.css</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">.header {
    color: red;
}
</code></pre>
<p><strong>assets/stylesheets/cmpt.navigation.css</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">.navigation,
.navigation a {
    color: green;
}
</code></pre>
<p><strong>assets/stylesheets/cmpt.content.css</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">.content,
.content a {
    color: orange;
}
</code></pre>
<p>ainsi que le contenu des fichiers JavaScript suivant :</p>
<p><strong>assets/javascript/common.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">// On se créer (ou surcharge) les namespaces (existant ou non).
// Un namespace globale au site que l&#39;on nomme `website`.
var website = window.website || {};

// Un namespace réservé aux composants que l&#39;on nomme `website.component`.
website.component = website.component || {};

// On encapsule les mécanismes des fonctions globales 
// pour éviter la collision de variable.
// `publics` est ici l&#39;équivalent de `website`.
(function (publics) {

    // On fait de `xhrRequest` une fonction globale `website.xhrRequest`.
    publics.xhrRequest = function(url, next) {
        var request = new XMLHttpRequest();

        if (location.protocol !== &quot;file:&quot;) {
            request.open(&quot;GET&quot;, url, true);
            request.send();
        } else {
            return next(new Error(&quot;Impossible to use AJAX in file system mode.&quot;));
        }

        request.addEventListener(&quot;load&quot;, function () {
            if (request.status &lt; 200 &amp;&amp; request.status &gt;= 400) {
                return next(new Error(&quot;The server was reached, but with no correct response.&quot;));
            }
            next(null, request.responseText);
        });

        request.addEventListener(&quot;error&quot;, function () {
            return next(new Error(&quot;The server is unreachable.&quot;));
        });
    };

    // On fait de `xhrFallback` une fonction globale `website.xhrFallback`.
    publics.xhrFallback = function (url) {
        location.href = encodeURIComponent(url) + &quot;.html&quot;;
    };

    // On créer une fonction d&#39;initialisation pour tout le site.
    // Qui va charger tous les composants.
    publics.init = function () {
        var links = document.querySelectorAll(&quot;.navigation--home a, .navigation--menu a&quot;),
            fragmentPath = document.body.getAttribute(&quot;data-content&quot;),
            urlRelativeSubPath = document.body.getAttribute(&quot;data-subpath&quot;);

        // On charge chaque comportement de composant.
        (new website.component.Header()).init();
        (new website.component.Navigation()).init();
        (new website.component.Content()).init(links, fragmentPath, urlRelativeSubPath);     
    };

// On passe l&#39;objet website pour l&#39;alimenter avec des fonctions globales.
}(website));

website.init();
</code></pre>
<p><strong>assets/javascript/cmpt.header.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">// On se créer (ou surcharge) les namespaces (existant ou non).
var website = window.website || {};
website.component = website.component || {};

// On créer un constructeur Header pour les composants `.header`.
website.component.Header = function () {
    var publics = this;

    publics.name = &quot;header&quot;;

    publics.init = function () {};
};
</code></pre>
<p><strong>assets/javascript/cmpt.navigation.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">// On se créer (ou surcharge) les namespaces (existant ou non).
var website = window.website || {};
website.component = website.component || {};

// On créer un constructeur Navigation pour les composants `.navigation`.
website.component.Navigation = function () {
    var publics = this;

    publics.name = &quot;navigation&quot;;

    publics.init = function () {};
};
</code></pre>
<p><strong>assets/javascript/cmpt.content.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">// On se créer (ou surcharge) les namespaces (existant ou non).
var website = window.website || {};
website.component = website.component || {};

// On créer un constructeur Content pour les composants `.content`.
website.component.Content = function () {
    var publics = this;

    publics.name = &quot;content&quot;;

    // On créer une fonction d&#39;instance `updateContentByClick` 
    // en passant en paramètre le nécessaire pour qu&#39;elle fonctionne.
    publics.updateContentByClick = function (links, fragmentPath, urlRelativeSubPath) {
        [].forEach.call(links, function (link) {
            link.addEventListener(&quot;click&quot;, function (e) {
                var urn = link.getAttribute(&quot;href&quot;).replace(&quot;.html&quot;, &quot;&quot;);
                e.preventDefault();

                website.xhrRequest(fragmentPath + encodeURIComponent(urn) + &quot;.htm&quot;, function (err, response) {
                    if (err) {
                        return website.xhrFallback(urn);
                    }

                    history.pushState(urn, null, urlRelativeSubPath + &quot;/&quot; + urn + &quot;.html&quot;);

                    // On se sert d&#39;un nom de classe dynamique et publique pour le changer en cas de besoin.
                    document.getElementsByClassName(publics.name + &quot;--inner&quot;)[0].innerHTML = response;
                });
            });
        });
    };

    // On créer une fonction d&#39;instance `updateContentByHistoryBack`.
    publics.updateContentByHistoryBack = function () {
        window.addEventListener(&quot;popstate&quot;, function (e) {
            if (e.state) {
                website.xhrRequest(&quot;content/&quot; + encodeURIComponent(e.state) + &quot;.htm&quot;, function (err, response) {
                    if (err) {
                        return website.xhrFallback(e.state);
                    }

                    // On se sert d&#39;un nom de classe dynamique et publique pour le changer en cas de besoin.
                    document.getElementsByClassName(publics.name + &quot;--inner&quot;)[0].innerHTML = response;
                });
            } else {
                history.back();
            }
        });
    };

    // On créer une fonction d&#39;initialisation pour la classe, un raccourci.
    // Et on l&#39;alimente et execute toutes les fonctions utiles.
    publics.init = function (links, fragmentPath, urlRelativeSubPath) {
        publics.updateContentByClick(links, fragmentPath, urlRelativeSubPath);
        publics.updateContentByHistoryBack();
    };
};
</code></pre>
<p>Puis, en faisant tourner le projet français depuis <samp>nodeatlas-website</samp> :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse index.html
</code></pre><p>Nous constatons dans l&#39;onglet « Network » (F12) que les fichiers en questions sont bien chargés (8 requêtes plus celle de la page en elle-même).</p>
<p><img src="media/images/upload/network-files.jpg" alt="Tous les fichiers chargés"></p>
<h3 id="preprocesseur-css-stylus-transparent">Preprocesseur CSS Stylus transparent</h3>
<p>Nous allons à présent expliquer comment utiliser les préprocesseurs avec <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em>. Le fonctionnement avec <a href="http://lesscss.org/">Less</a> est exactement le même mais nous allons ici voir cela avec <a href="http://stylus-lang.com/">Stylus</a>.</p>
<p>Il va être question ici d&#39;activer Stylus dans nos webconfigs comme ceci :</p>
<p><strong>webconfig.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;enableStylus&quot;: true,
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;fr&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;content.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    },
    &quot;_readme&quot;: &quot;README.md&quot;,
    &quot;_content&quot;: &quot;content/&quot;,
    &quot;_toc&quot;: &quot;table-des-matières&quot;
}
</code></pre>
<p>et comme cela :</p>
<p><strong>webconfig.en.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;enableStylus&quot;: true,
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;en&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/english/&quot;,
    &quot;urlRelativeSubPath&quot;: &quot;english&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;content.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    },
    &quot;_readme&quot;: &quot;README.en.md&quot;,
    &quot;_content&quot;: &quot;content/english/&quot;,
    &quot;_toc&quot;: &quot;table-of-contents&quot;
}
</code></pre>
<p>En fait avec <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em>, l&#39;utilisation de Less ou Stylus est totalement transparente pendant la phase de développement. Il suffit de renommer tous vos <samp>.css</samp> en <samp>.styl</samp> (ou <samp>.less</samp> pour Less) et le moteur se chargera, à chaque fois qu&#39;un fichier <samp>.css</samp> sera demander, de compiler sa version <samp>.styl</samp> en CSS et d&#39;en renvoyer son résultat <samp>.css</samp>. Cela signifie que du point de vu de vos fichiers HTML, c&#39;est toujours des <samp>.css</samp> que vous réclamez.</p>
<p>Nous allons changer tous nos fichiers CSS en fichier Stylus (avec la syntaxe qui va bien). Nous allons également pour l&#39;occasion créer un fichier de variables que nous allons pouvoir inclure dans chaque fichier pour profiter de fonctions communes. Cela nous donne maintenant :</p>
<pre class="prettyprint linenums"><code>nodeatlas-website/
┊┉
├─ assets/
│  ┊┉
│  └─ stylesheets/
│     ├─ variables.styl
│     ├─ common.styl
│     ├─ cmpt.header.styl
│     ├─ cmpt.navigation.styl
│     └─ cmpt.content.styl
┊┉
</code></pre><p>avec les contenus provisoires suivants :</p>
<p><strong>assets/stylesheets/variables.styl</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">make-color(my-color)
    color my-color;
    border 1px solid my-color
    padding: 10px;
    margin: 10px
    -webkit-border-radius 4px
            border-radius 4px
</code></pre>
<p><strong>assets/stylesheets/common.styl</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">@import &quot;variables&quot;

*
    font-weight bold
</code></pre>
<p><strong>assets/stylesheets/cmpt.header.styl</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">@import &quot;variables&quot;

.header
    make-color red
</code></pre>
<p><strong>assets/stylesheets/cmpt.navigation.styl</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">@import &quot;variables&quot;

.navigation
    make-color green

    a
        color green
</code></pre>
<p><strong>assets/stylesheets/cmpt.content.styl</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">@import &quot;variables&quot;

.content
    make-color orange

    a
        color orange
</code></pre>
<p>Puis, en faisant tourner le projet français depuis <samp>nodeatlas-website</samp> :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse index.html
</code></pre><p>vous pourrez ainsi constater les CSS générés dans votre dossier <samp>assets/stylesheets/</samp>.</p>
<h3 id="preprocesseur-css-stylus-la-g-n-ration">Preprocesseur CSS Stylus à la Génération</h3>
<p>La transparence nécessite que le fichier <samp>.css</samp> soit réclamé en HTTP pour que le serveur le transforme. Cependant, pour mettre à jour vos fichiers Stylus lors de l&#39;appel de <samp>--generate</samp> (sans donc faire démarrer le serveur), il va falloir référencer les fichiers que vous souhaitez compiler en CSS dans le webconfig.</p>
<p>Ainsi en changeant nos deux webconfigs comme suit, cela sera possible lors de l&#39;appel de notre fichier <samp>generate-website.js</samp> par exemple.</p>
<p><strong>webconfig.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;enableStylus&quot;: {
        &quot;stylus&quot;: [
            &quot;stylesheets/common.styl&quot;,
            &quot;stylesheets/cmpt.header.styl&quot;,
            &quot;stylesheets/cmpt.navigation.styl&quot;,
            &quot;stylesheets/cmpt.content.styl&quot;
        ]
    },
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;fr&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;content.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    },
    &quot;_readme&quot;: &quot;README.md&quot;,
    &quot;_content&quot;: &quot;content/&quot;,
    &quot;_toc&quot;: &quot;table-des-matières&quot;
}
</code></pre>
<p><strong>webconfig.en.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;enableStylus&quot;: {
        &quot;stylus&quot;: [
            &quot;stylesheets/common.styl&quot;,
            &quot;stylesheets/cmpt.header.styl&quot;,
            &quot;stylesheets/cmpt.navigation.styl&quot;,
            &quot;stylesheets/cmpt.content.styl&quot;
        ]
    },
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;en&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/english/&quot;,
    &quot;urlRelativeSubPath&quot;: &quot;english&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;content.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    },
    &quot;_readme&quot;: &quot;README.en.md&quot;,
    &quot;_content&quot;: &quot;content/english/&quot;,
    &quot;_toc&quot;: &quot;table-of-contents&quot;
}
</code></pre>
<p>Effacer vos fichiers <samp>.css</samp> de <samp>assets/stylesheets/</samp> et lancez la commande :</p>
<pre class="prettyprint linenums"><code>&gt; node generate-website.js
</code></pre><p>Vous verrez que les fichiers de travail dans <samp>nodeatlas-website</samp> contiennent bien les fichiers <samp>.css</samp> compilés à partir des <samp>.styl</samp> et que dans <samp>dist</samp> les fichiers CSS sont également bien présent. Un jeu d&#39;enfant !</p>
<h3 id="et-less-">Et Less ?</h3>
<p>Vous pouvez faire exactement la même chose avec Less. Il vous suffit de changer toutes les appelations <samp>.styl</samp> en <samp>.less</samp> et <samp>enableStylus</samp> en <samp>enableLess</samp> (et <samp>stylus</samp> en <samp>less</samp> dedans). Bien entendu, la syntaxe des fichiers sera donc celle de Less.</p>
<p>Et en bonus, les deux peuvent fonctionner ensemble ! Le moteur cherche des <samp>.styl</samp> et des <samp>.less</samp> en même temps.</p>
<h2 id="minifier-obfusquer-et-optimiser-les-css-js-et-images">Minifier, Obfusquer et Optimiser les CSS, JS et Images</h2>
<p>Pour des soucis de performance, bien que nous allions travailler dans la version originale de chaque fichier, la sortie produite devra être optimisée et par conséquent illisible. Tout ce processus habituellement fait à la main avec divers outils ou encore automatisé avec un coup de pousse, par exemple, de <a href="http://gulpjs.com/">gulp</a> est automatique dans <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em> avec l&#39;aide du webconfig.</p>
<h3 id="minifier-les-fichiers-css">Minifier les fichiers CSS</h3>
<p>Dans un premier temps, nous allons minifier et placer dans un seul fichier le contenu CSS de notre site. Nous allons donc créer un Bundle spécifique aux Stylesheets en donnant à une clé un tableau d&#39;élément. La clé représente le chemin de sortie et chaque élément représente un fichier d&#39;entré :</p>
<p><strong>webconfig.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;stylesheetsBundlesBeforeResponse&quot;: true,
    &quot;bundles&quot;: {
        &quot;stylesheets&quot;: {
            &quot;stylesheets/common.min.css&quot;: [
                &quot;stylesheets/common.css&quot;,
                &quot;stylesheets/cmpt.header.css&quot;,
                &quot;stylesheets/cmpt.navigation.css&quot;,
                &quot;stylesheets/cmpt.content.css&quot;
            ]
        }
    },
    &quot;enableStylus&quot;: {
        &quot;stylus&quot;: [
            &quot;stylesheets/common.styl&quot;,
            &quot;stylesheets/cmpt.header.styl&quot;,
            &quot;stylesheets/cmpt.navigation.styl&quot;,
            &quot;stylesheets/cmpt.content.styl&quot;
        ]
    },
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;fr&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;content.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    },
    &quot;_readme&quot;: &quot;README.md&quot;,
    &quot;_content&quot;: &quot;content/&quot;,
    &quot;_toc&quot;: &quot;table-des-matières&quot;
}
</code></pre>
<p><strong>webconfig.en.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;stylesheetsBundlesBeforeResponse&quot;: true,
    &quot;bundles&quot;: {
        &quot;stylesheets&quot;: {
            &quot;stylesheets/common.min.css&quot;: [
                &quot;stylesheets/common.css&quot;,
                &quot;stylesheets/cmpt.header.css&quot;,
                &quot;stylesheets/cmpt.navigation.css&quot;,
                &quot;stylesheets/cmpt.content.css&quot;
            ]
        }
    },
    &quot;enableStylus&quot;: {
        &quot;stylus&quot;: [
            &quot;stylesheets/common.styl&quot;,
            &quot;stylesheets/cmpt.header.styl&quot;,
            &quot;stylesheets/cmpt.navigation.styl&quot;,
            &quot;stylesheets/cmpt.content.styl&quot;
        ]
    },
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;en&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/english/&quot;,
    &quot;urlRelativeSubPath&quot;: &quot;english&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;content.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    },
    &quot;_readme&quot;: &quot;README.en.md&quot;,
    &quot;_content&quot;: &quot;content/english/&quot;,
    &quot;_toc&quot;: &quot;table-of-contents&quot;
}
</code></pre>
<p>Enfin, grâce à <samp>stylesheetsBundlesBeforeResponse</samp>, nous allons obtenir des fichiers CSS à jour et compilé après chaque chargement de page. Il ne nous reste donc plus qu&#39;à demander la version minifiée des CSS plutôt que les fichiers d&#39;origines :</p>
<p><strong>views/partials/head.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;&lt;?= languageCode ?&gt;&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;NodeAtlas&lt;/title&gt;

        &lt;base href=&quot;&lt;?= urlBasePath ?&gt;/&quot; /&gt;

        &lt;meta name=&quot;description&quot; content=&quot;NodeAtlas est un Framework JavaScript MVC(2) côté serveur.&quot; /&gt;
        &lt;meta name=&quot;geo.placename&quot; content=&quot;Annecy, Haute-Savoie, France&quot; /&gt;

        &lt;meta name=&quot;robots&quot; content=&quot;index, follow&quot; /&gt;

        &lt;!--[if IE]&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no&quot; /&gt;&lt;![endif]--&gt;
        &lt;!--[if !IE]&gt;&lt;!--&gt;&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no&quot; /&gt;&lt;!--&lt;![endif]--&gt;

        &lt;!-- Inclusion du fichiers minifié de tous les CSS. --&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;stylesheets/common.min.css&quot;&gt;
    &lt;/head&gt;
    &lt;body data-content=&quot;&lt;?= webconfig._content ?&gt;&quot; data-subpath=&quot;&lt;?= webconfig.urlRelativeSubPath ?&gt;&quot;&gt;
        &lt;div class=&quot;layout&quot;&gt;
            &lt;noscript class=&quot;no-js cmpt&quot;&gt;
                &lt;div class=&quot;no-js--inner&quot;&gt;
                    &lt;p&gt;&lt;?- common.noJs ?&gt;&lt;/p&gt;
                &lt;/div&gt;
            &lt;/noscript&gt;
</code></pre>
<p>Lançons donc depuis le dossier <samp>nodeatlas-website</samp> la commande :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse index.html
</code></pre><p>et constatons que tout est en order : compilation des Stylus vers les CSS, minification des <samp>.css</samp> vers le <samp>.min.css</samp> avant chaque affichage de page.</p>
<p>La génération avec</p>
<pre class="prettyprint linenums"><code>&gt; node generate-website.js
</code></pre><p>fonctionne également.</p>
<h3 id="offusquer-les-javascript">Offusquer les JavaScript</h3>
<p>Attardons nous à présent sur les JavaScript. Nous allons offusquer et placer dans un seul fichier le contenu JavaScript de notre site. Nous allons donc ajouter un Bundle spécifique aux JavaScript en donnant à une clé un tableau d&#39;élément. La clé représente le chemin de sortie et chaque élément représente un fichier d&#39;entré :</p>
<p><strong>webconfig.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;stylesheetsBundlesBeforeResponse&quot;: true,
    &quot;javascriptBundlesBeforeResponse&quot;: true,
    &quot;bundles&quot;: {
        &quot;stylesheets&quot;: {
            &quot;stylesheets/common.min.css&quot;: [
                &quot;stylesheets/common.css&quot;,
                &quot;stylesheets/cmpt.header.css&quot;,
                &quot;stylesheets/cmpt.navigation.css&quot;,
                &quot;stylesheets/cmpt.content.css&quot;
            ]
        },
        &quot;javascript&quot;: {
            &quot;javascript/common.min.js&quot;: [
                &quot;javascript/cmpt.header.js&quot;,
                &quot;javascript/cmpt.navigation.js&quot;,
                &quot;javascript/cmpt.content.js&quot;,
                &quot;javascript/common.js&quot;
            ]
        }
    },
    &quot;enableStylus&quot;: {
        &quot;stylus&quot;: [
            &quot;stylesheets/common.styl&quot;,
            &quot;stylesheets/cmpt.header.styl&quot;,
            &quot;stylesheets/cmpt.navigation.styl&quot;,
            &quot;stylesheets/cmpt.content.styl&quot;
        ]
    },
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;fr&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;content.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    },
    &quot;_readme&quot;: &quot;README.md&quot;,
    &quot;_content&quot;: &quot;content/&quot;,
    &quot;_toc&quot;: &quot;table-des-matières&quot;
}
</code></pre>
<p><strong>webconfig.en.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;stylesheetsBundlesBeforeResponse&quot;: true,
    &quot;javascriptBundlesBeforeResponse&quot;: true,
    &quot;bundles&quot;: {
        &quot;stylesheets&quot;: {
            &quot;stylesheets/common.min.css&quot;: [
                &quot;stylesheets/common.css&quot;,
                &quot;stylesheets/cmpt.header.css&quot;,
                &quot;stylesheets/cmpt.navigation.css&quot;,
                &quot;stylesheets/cmpt.content.css&quot;
            ]
        },
        &quot;javascript&quot;: {
            &quot;javascript/common.min.js&quot;: [
                &quot;javascript/cmpt.header.js&quot;,
                &quot;javascript/cmpt.navigation.js&quot;,
                &quot;javascript/cmpt.content.js&quot;,
                &quot;javascript/common.js&quot;
            ]
        }
    },
    &quot;enableStylus&quot;: {
        &quot;stylus&quot;: [
            &quot;stylesheets/common.styl&quot;,
            &quot;stylesheets/cmpt.header.styl&quot;,
            &quot;stylesheets/cmpt.navigation.styl&quot;,
            &quot;stylesheets/cmpt.content.styl&quot;
        ]
    },
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;en&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/english/&quot;,
    &quot;urlRelativeSubPath&quot;: &quot;english&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;content.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    },
    &quot;_readme&quot;: &quot;README.en.md&quot;,
    &quot;_content&quot;: &quot;content/english/&quot;,
    &quot;_toc&quot;: &quot;table-of-contents&quot;
}
</code></pre>
<p>Comme précédemment, grâce à <samp>javascriptBundlesBeforeResponse</samp>, nous allons obtenir des fichiers JavaScript à jour et compilés après chaque chargement de page. Il ne nous reste donc plus qu&#39;à demander la version minifiée des JavaScript plutôt que les fichiers d&#39;origines :</p>
<p><strong>views/partials/foot.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">            &lt;!-- Inclusion du fichiers minifié de tous les JavaScript. --&gt;
            &lt;script src=&quot;javascript/common.min.js&quot;&gt;&lt;/script&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Lançons donc depuis le dossier <samp>nodeatlas-website</samp> la commande :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse index.html
</code></pre><p>et constatons que l&#39;offuscation des <samp>.js</samp> vers le <samp>.min.js</samp> avant chaque affichage de page.</p>
<p>La génération avec</p>
<pre class="prettyprint linenums"><code>&gt; node generate-website.js
</code></pre><p>fonctionne tout autant.</p>
<h3 id="optimiser-vos-images">Optimiser vos Images</h3>
<p>Passons maintenant à l&#39;optimisation d&#39;image. <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em> propose une optimisation sans perte pour obtenir les images les moins lourdes en conservant une qualité égale. Vous pourrez à souhait utiliser d&#39;autre module npm pour faire bien plus.</p>
<p>Dans un premier temps, nous allons <a href="https://github.com/Haeresis/NodeAtlas/blob/gh-pages/media/images/ex-logo-node-atlas.png">ajouter l&#39;image suivante au projet</a> et vous pourrez <a href="https://raw.githubusercontent.com/Haeresis/NodeAtlas/gh-pages/media/images/ex-logo-node-atlas.png">la télécharger ici</a>.</p>
<p>Ce qui nous donne la nouvelle arborescence complète suivante :</p>
<pre class="prettyprint linenums"><code>dist/
└─ english/
nodeatlas-website/
├─ assets/
│  ├─ media/
│  │  └─ images/
│  │     └─ ex-logo-node-atlas.png
│  ├─ content/
│  │  └─ english/
│  ├─ javascript/
│  │  ├─ common.js
│  │  ├─ cmpt.header.js
│  │  ├─ cmpt.navigation.js
│  │  └─ cmpt.content.js
│  └─ stylesheets/
│     ├─ common.css
│     ├─ cmpt.header.css
│     ├─ cmpt.navigation.css
│     └─ cmpt.content.css
├─ controllers/
│  ├─ common.js
│  ├─ content.js
│  └─ index.js
├─ views/
│  ├─ content.htm
│  └─ partials/
│     ├─ content.htm
│     ├─ head.htm
│     ├─ navigation.htm
│     ├─ header.htm
│     └─ foot.htm
├─ variations/
│  └─ common.json
│     └─ en
│        └─ common.json
├─ webconfig.json
├─ webconfig.en.json
├─ README.md
└─ README.en.md
</code></pre><p>et les nouveaux fichiers de variations et vues suivants :</p>
<p><strong>variations/common.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;title&quot;: {
        &quot;alt&quot;: &quot;NodeAtlas&quot;,
        &quot;src&quot;: &quot;media/images/ex-logo-node-atlas.png&quot;
    },
    &quot;content&quot;: &quot;Contenu pour la documentation.&quot;,
    &quot;noJs&quot;: &quot;Le JavaScript n&#39;est pas activé.&quot;,
    &quot;home&quot;: {
        &quot;title&quot;: &quot;Accueil&quot;,
        &quot;url&quot;: &quot;index.html&quot;
    },
    &quot;lang&quot;: {
        &quot;title&quot;: &quot;English&quot;,
        &quot;url&quot;: &quot;english/index.html&quot;
    },
    &quot;menu&quot;: [{
        &quot;title&quot;: &quot;Présentation&quot;,
        &quot;url&quot;: &quot;avant-propos.html&quot;,
        &quot;menu&quot;: [{
            &quot;title&quot;: &quot;Installation&quot;,
            &quot;url&quot;: &quot;installation.html&quot;
        }, {
            &quot;title&quot;: &quot;Démarrage rapide&quot;,
            &quot;url&quot;: &quot;commencer-avec-nodeatlas.html&quot;
        }]
    }, {
        &quot;title&quot;: &quot;View et Template&quot;,
        &quot;url&quot;: &quot;partie-view-et-template.html&quot;
    }, {
        &quot;title&quot;: &quot;Controller et Model&quot;,
        &quot;url&quot;: &quot;partie-controller-et-model.html&quot;
    }, {
        &quot;title&quot;: &quot;Route et Plus&quot;,
        &quot;url&quot;: &quot;pour-aller-plus-loin.html&quot;,
        &quot;menu&quot;: [{
            &quot;title&quot;: &quot;API&quot;,
            &quot;url&quot;: &quot;api-nodeatlas-comme-module-npm.html&quot;
        }, {
            &quot;title&quot;: &quot;CLI&quot;,
            &quot;url&quot;: &quot;cli-commandes-de-lancement.html&quot;
        }, {
            &quot;title&quot;: &quot;Simple Serveur&quot;,
            &quot;url&quot;: &quot;nodeatlas-comme-simple-serveur-web.html&quot;
        }, {
            &quot;title&quot;: &quot;Développement&quot;,
            &quot;url&quot;: &quot;environnement-de-d%C3%A9veloppement.html&quot;
        }, {
            &quot;title&quot;: &quot;Production&quot;,
            &quot;url&quot;: &quot;environnement-de-production.html&quot;
        }]
    }, {
        &quot;title&quot;: &quot;Et les autres ?&quot;,
        &quot;url&quot;: &quot;plus-sur-nodeatlas.html&quot;
    }]
}
</code></pre>
<p><strong>variations/en/common.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;title&quot;: {
        &quot;alt&quot;: &quot;NodeAtlas&quot;,
        &quot;src&quot;: &quot;media/images/ex-logo-node-atlas.png&quot;
    },
    &quot;content&quot;: &quot;Content for documentation.&quot;,
    &quot;noJs&quot;: &quot;No JavaScript enabled.&quot;,
    &quot;home&quot;: {
        &quot;title&quot;: &quot;Home&quot;,
        &quot;url&quot;: &quot;index.html&quot;
    },
    &quot;lang&quot;: {
        &quot;title&quot;: &quot;Français&quot;,
        &quot;url&quot;: &quot;../index.html&quot;
    },
    &quot;menu&quot;: [{
        &quot;title&quot;: &quot;Overview&quot;,
        &quot;url&quot;: &quot;overview.html&quot;,
        &quot;menu&quot;: [{
            &quot;title&quot;: &quot;Installing&quot;,
            &quot;url&quot;: &quot;installing.html&quot;
        }, {
            &quot;title&quot;: &quot;Get Started&quot;,
            &quot;url&quot;: &quot;start-with-nodeatlas.html&quot;
        }]
    }, {
        &quot;title&quot;: &quot;View and Template&quot;,
        &quot;url&quot;: &quot;view-and-template-part.html&quot;
    }, {
        &quot;title&quot;: &quot;Controller and Model&quot;,
        &quot;url&quot;: &quot;controller-and-model-part.html&quot;
    }, {
        &quot;title&quot;: &quot;Route and More&quot;,
        &quot;url&quot;: &quot;more-features.html&quot;,
        &quot;menu&quot;: [{
            &quot;title&quot;: &quot;API&quot;,
            &quot;url&quot;: &quot;api-nodeatlas-as-npm-module.html&quot;
        }, {
            &quot;title&quot;: &quot;CLI&quot;,
            &quot;url&quot;: &quot;cli-running-commands.html&quot;
        }, {
            &quot;title&quot;: &quot;Simple Server&quot;,
            &quot;url&quot;: &quot;nodeatlas-as-a-simple-web-server.html&quot;
        }, {
            &quot;title&quot;: &quot;Development&quot;,
            &quot;url&quot;: &quot;development-environment.html&quot;
        }, {
            &quot;title&quot;: &quot;Production&quot;,
            &quot;url&quot;: &quot;production-environment.html&quot;
        }]
    }, {
        &quot;title&quot;: &quot;And others?&quot;,
        &quot;url&quot;: &quot;more-about-nodeatlas.html&quot;
    }]
}
</code></pre>
<p><strong>views/partials/header.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">            &lt;header class=&quot;header cmpt&quot;&gt;
                &lt;div class=&quot;header--inner&quot;&gt;
                    &lt;div class=&quot;header--title&quot;&gt;

                        &lt;!-- Remplacement du texte par l&#39;image. --&gt;
                        &lt;h1&gt;&lt;img src=&quot;&lt;?= common.title.src ?&gt;&quot; alt=&quot;&lt;?= common.title.alt ?&gt;&quot;&gt;&lt;/h1&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/header&gt;
</code></pre>
<p>Optimisons à présent notre image <samp>media/images/ex-logo-node-atlas.png</samp> :</p>
<p><strong>webconfig.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;imagesOptimizationsBeforeResponse&quot;: true,
    &quot;stylesheetsBundlesBeforeResponse&quot;: true,
    &quot;javascriptBundlesBeforeResponse&quot;: true,
    &quot;optimizations&quot;: {
        &quot;images&quot;: {
            &quot;media/images/ex-logo-node-atlas.png&quot;: &quot;media/images/min/&quot;
        }
    },
    &quot;bundles&quot;: {
        &quot;stylesheets&quot;: {
            &quot;stylesheets/common.min.css&quot;: [
                &quot;stylesheets/common.css&quot;,
                &quot;stylesheets/cmpt.header.css&quot;,
                &quot;stylesheets/cmpt.navigation.css&quot;,
                &quot;stylesheets/cmpt.content.css&quot;
            ]
        },
        &quot;javascript&quot;: {
            &quot;javascript/common.min.js&quot;: [
                &quot;javascript/cmpt.header.js&quot;,
                &quot;javascript/cmpt.navigation.js&quot;,
                &quot;javascript/cmpt.content.js&quot;,
                &quot;javascript/common.js&quot;
            ]
        }
    },
    &quot;enableStylus&quot;: {
        &quot;stylus&quot;: [
            &quot;stylesheets/common.styl&quot;,
            &quot;stylesheets/cmpt.header.styl&quot;,
            &quot;stylesheets/cmpt.navigation.styl&quot;,
            &quot;stylesheets/cmpt.content.styl&quot;
        ]
    },
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;fr&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;content.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    },
    &quot;_readme&quot;: &quot;README.md&quot;,
    &quot;_content&quot;: &quot;content/&quot;,
    &quot;_toc&quot;: &quot;table-des-matières&quot;
}
</code></pre>
<p><strong>webconfig.en.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;imagesOptimizationsBeforeResponse&quot;: true,
    &quot;stylesheetsBundlesBeforeResponse&quot;: true,
    &quot;javascriptBundlesBeforeResponse&quot;: true,
    &quot;optimizations&quot;: {
        &quot;images&quot;: {
            &quot;media/images/ex-logo-node-atlas.png&quot;: &quot;media/images/min/&quot;
        }
    },
    &quot;bundles&quot;: {
        &quot;stylesheets&quot;: {
            &quot;stylesheets/common.min.css&quot;: [
                &quot;stylesheets/common.css&quot;,
                &quot;stylesheets/cmpt.header.css&quot;,
                &quot;stylesheets/cmpt.navigation.css&quot;,
                &quot;stylesheets/cmpt.content.css&quot;
            ]
        },
        &quot;javascript&quot;: {
            &quot;javascript/common.min.js&quot;: [
                &quot;javascript/cmpt.header.js&quot;,
                &quot;javascript/cmpt.navigation.js&quot;,
                &quot;javascript/cmpt.content.js&quot;,
                &quot;javascript/common.js&quot;
            ]
        }
    },
    &quot;enableStylus&quot;: {
        &quot;stylus&quot;: [
            &quot;stylesheets/common.styl&quot;,
            &quot;stylesheets/cmpt.header.styl&quot;,
            &quot;stylesheets/cmpt.navigation.styl&quot;,
            &quot;stylesheets/cmpt.content.styl&quot;
        ]
    },
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;en&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/english/&quot;,
    &quot;urlRelativeSubPath&quot;: &quot;english&quot;,
    &quot;routes&quot;: {
        &quot;/index.html&quot;: {
            &quot;view&quot;: &quot;content.htm&quot;,
            &quot;controller&quot;: &quot;index.js&quot;
        }
    },
    &quot;_readme&quot;: &quot;README.en.md&quot;,
    &quot;_content&quot;: &quot;content/english/&quot;,
    &quot;_toc&quot;: &quot;table-of-contents&quot;
}
</code></pre>
<p>Comme précédemment, grâce à <samp>imagesOptimizationsBeforeResponse</samp>, nous allons obtenir des images optimisées après chaque chargement de page. Il ne nous reste donc plus qu&#39;à demander la version optimisées des images plutôt que les images d&#39;origines :</p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;title&quot;: {
        &quot;alt&quot;: &quot;NodeAtlas&quot;,
        &quot;src&quot;: &quot;media/images/min/ex-logo-node-atlas.png&quot;
    },
    &quot;content&quot;: &quot;Contenu pour la documentation.&quot;,
    &quot;noJs&quot;: &quot;Le JavaScript n&#39;est pas activé.&quot;,
    &quot;home&quot;: {
        &quot;title&quot;: &quot;Accueil&quot;,
        &quot;url&quot;: &quot;index.html&quot;
    },
    &quot;lang&quot;: {
        &quot;title&quot;: &quot;English&quot;,
        &quot;url&quot;: &quot;english/index.html&quot;
    },
    &quot;menu&quot;: [{
        &quot;title&quot;: &quot;Présentation&quot;,
        &quot;url&quot;: &quot;avant-propos.html&quot;,
        &quot;menu&quot;: [{
            &quot;title&quot;: &quot;Installation&quot;,
            &quot;url&quot;: &quot;installation.html&quot;
        }, {
            &quot;title&quot;: &quot;Démarrage rapide&quot;,
            &quot;url&quot;: &quot;commencer-avec-nodeatlas.html&quot;
        }]
    }, {
        &quot;title&quot;: &quot;View et Template&quot;,
        &quot;url&quot;: &quot;partie-view-et-template.html&quot;
    }, {
        &quot;title&quot;: &quot;Controller et Model&quot;,
        &quot;url&quot;: &quot;partie-controller-et-model.html&quot;
    }, {
        &quot;title&quot;: &quot;Route et Plus&quot;,
        &quot;url&quot;: &quot;pour-aller-plus-loin.html&quot;,
        &quot;menu&quot;: [{
            &quot;title&quot;: &quot;API&quot;,
            &quot;url&quot;: &quot;api-nodeatlas-comme-module-npm.html&quot;
        }, {
            &quot;title&quot;: &quot;CLI&quot;,
            &quot;url&quot;: &quot;cli-commandes-de-lancement.html&quot;
        }, {
            &quot;title&quot;: &quot;Simple Serveur&quot;,
            &quot;url&quot;: &quot;nodeatlas-comme-simple-serveur-web.html&quot;
        }, {
            &quot;title&quot;: &quot;Développement&quot;,
            &quot;url&quot;: &quot;environnement-de-d%C3%A9veloppement.html&quot;
        }, {
            &quot;title&quot;: &quot;Production&quot;,
            &quot;url&quot;: &quot;environnement-de-production.html&quot;
        }]
    }, {
        &quot;title&quot;: &quot;Et les autres ?&quot;,
        &quot;url&quot;: &quot;plus-sur-nodeatlas.html&quot;
    }]
}
</code></pre>
<p><strong>variations/en/common.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;title&quot;: {
        &quot;alt&quot;: &quot;NodeAtlas&quot;,
        &quot;src&quot;: &quot;media/images/min/ex-logo-node-atlas.png&quot;
    },
    &quot;content&quot;: &quot;Content for documentation.&quot;,
    &quot;noJs&quot;: &quot;No JavaScript enabled.&quot;,
    &quot;home&quot;: {
        &quot;title&quot;: &quot;Home&quot;,
        &quot;url&quot;: &quot;index.html&quot;
    },
    &quot;lang&quot;: {
        &quot;title&quot;: &quot;Français&quot;,
        &quot;url&quot;: &quot;../index.html&quot;
    },
    &quot;menu&quot;: [{
        &quot;title&quot;: &quot;Overview&quot;,
        &quot;url&quot;: &quot;overview.html&quot;,
        &quot;menu&quot;: [{
            &quot;title&quot;: &quot;Installing&quot;,
            &quot;url&quot;: &quot;installing.html&quot;
        }, {
            &quot;title&quot;: &quot;Get Started&quot;,
            &quot;url&quot;: &quot;start-with-nodeatlas.html&quot;
        }]
    }, {
        &quot;title&quot;: &quot;View and Template&quot;,
        &quot;url&quot;: &quot;view-and-template-part.html&quot;
    }, {
        &quot;title&quot;: &quot;Controller and Model&quot;,
        &quot;url&quot;: &quot;controller-and-model-part.html&quot;
    }, {
        &quot;title&quot;: &quot;Route and More&quot;,
        &quot;url&quot;: &quot;more-features.html&quot;,
        &quot;menu&quot;: [{
            &quot;title&quot;: &quot;API&quot;,
            &quot;url&quot;: &quot;api-nodeatlas-as-npm-module.html&quot;
        }, {
            &quot;title&quot;: &quot;CLI&quot;,
            &quot;url&quot;: &quot;cli-running-commands.html&quot;
        }, {
            &quot;title&quot;: &quot;Simple Server&quot;,
            &quot;url&quot;: &quot;nodeatlas-as-a-simple-web-server.html&quot;
        }, {
            &quot;title&quot;: &quot;Development&quot;,
            &quot;url&quot;: &quot;development-environment.html&quot;
        }, {
            &quot;title&quot;: &quot;Production&quot;,
            &quot;url&quot;: &quot;production-environment.html&quot;
        }]
    }, {
        &quot;title&quot;: &quot;And others?&quot;,
        &quot;url&quot;: &quot;more-about-nodeatlas.html&quot;
    }]
}
</code></pre>
<p>Lançons donc depuis le dossier <samp>nodeatlas-website</samp> la commande :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse index.html
</code></pre><p>et constatons que l&#39;optimisation des <samp>media/images</samp> vers le <samp>media/images/min/</samp> avant chaque affichage de page.</p>
<p>La génération avec</p>
<pre class="prettyprint linenums"><code>&gt; node generate-website.js
</code></pre><p>fonctionne tout autant.</p>
<h3 id="webconfig-avec-fichiers-partag-s">Webconfig avec fichiers partagés</h3>
<p>Ce qui est génant avec nos précédents exemples, c&#39;est que pour quelques valeurs différentes, nous devons maintenir deux webconfigs avec énormément d&#39;options. Nous allons voir ici comment simplement déporter les configurations dans des fichiers différents afin de ne pas avoir de redondance de configuration. Ainsi nos deux webconfigs <samp>webconfig.json</samp> et <samp>webconfig.en.json</samp> deviennent :</p>
<p><strong>webconfig.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;imagesOptimizationsBeforeResponse&quot;: true,
    &quot;stylesheetsBundlesBeforeResponse&quot;: true,
    &quot;javascriptBundlesBeforeResponse&quot;: true,
    &quot;optimizations&quot;: &quot;optimizations.json&quot;,
    &quot;bundles&quot;: &quot;bundles.json&quot;,
    &quot;enableStylus&quot;: &quot;stylus.json&quot;,
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;fr&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/&quot;,
    &quot;routes&quot;: &quot;routes.json&quot;,
    &quot;_readme&quot;: &quot;README.md&quot;,
    &quot;_content&quot;: &quot;content/&quot;,
    &quot;_toc&quot;: &quot;table-des-matières&quot;
}
</code></pre>
<p><strong>webconfig.en.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;imagesOptimizationsBeforeResponse&quot;: true,
    &quot;stylesheetsBundlesBeforeResponse&quot;: true,
    &quot;javascriptBundlesBeforeResponse&quot;: true,
    &quot;optimizations&quot;: &quot;optimizations.json&quot;,
    &quot;bundles&quot;: &quot;bundles.json&quot;,
    &quot;enableStylus&quot;: &quot;stylus.json&quot;,
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;en&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/english/&quot;,
    &quot;urlRelativeSubPath&quot;: &quot;english&quot;,
    &quot;routes&quot;: &quot;routes.json&quot;,
    &quot;_readme&quot;: &quot;README.en.md&quot;,
    &quot;_content&quot;: &quot;content/english/&quot;,
    &quot;_toc&quot;: &quot;table-of-contents&quot;
}
</code></pre>
<p>Avec les nouveaux fichiers suivants :</p>
<p><strong>optimizations.json</strong></p>
<pre class="prettyprint linenums"><code>{
    &quot;images&quot;: {
        &quot;media/images/logo-node-atlas.png&quot;: &quot;media/images/min/&quot;
    }
}
</code></pre><p><strong>bundles.json</strong></p>
<pre class="prettyprint linenums"><code>{
    &quot;stylesheets&quot;: {
        &quot;stylesheets/common.min.css&quot;: [
            &quot;stylesheets/common.css&quot;,
            &quot;stylesheets/cmpt.header.css&quot;,
            &quot;stylesheets/cmpt.navigation.css&quot;,
            &quot;stylesheets/cmpt.content.css&quot;
        ]
    },
    &quot;javascript&quot;: {
        &quot;javascript/common.min.js&quot;: [
            &quot;javascript/cmpt.header.js&quot;,
            &quot;javascript/cmpt.navigation.js&quot;,
            &quot;javascript/cmpt.content.js&quot;,
            &quot;javascript/common.js&quot;
        ]
    }
}
</code></pre><p><strong>stylus.json</strong></p>
<pre class="prettyprint linenums"><code>{
    &quot;stylus&quot;: [
        &quot;stylesheets/common.styl&quot;,
        &quot;stylesheets/cmpt.header.styl&quot;,
        &quot;stylesheets/cmpt.navigation.styl&quot;,
        &quot;stylesheets/cmpt.content.styl&quot;
    ]
}
</code></pre><p><strong>routes.json</strong></p>
<pre class="prettyprint linenums"><code>{
    &quot;/index.html&quot;: {
        &quot;view&quot;: &quot;content.htm&quot;,
        &quot;controller&quot;: &quot;index.js&quot;
    }
}
</code></pre><p>donnant donc le nouvel ensemble de fichier suivant :</p>
<pre class="prettyprint linenums"><code>nodeatlas-website/
┊┉
├─ webconfig.json
├─ webconfig.en.json
├─ optimizations.json
├─ bundles.json
├─ stylus.json
├─ routes.json
├─ README.md
├─ README.en.md
┊┉
</code></pre><p>Lançons donc depuis le dossier <samp>nodeatlas-website</samp> la commande :</p>
<pre class="prettyprint linenums"><code>&gt; nodeatlas --browse index.html
</code></pre><p>et constatons que la génération avec</p>
<pre class="prettyprint linenums"><code>&gt; node generate-website.js
</code></pre><p>fonctionne toujours.</p>
<h3 id="webconfig-diff-rent-en-d-veloppement-et-production">Webconfig différent en développement et production</h3>
<p>Vous aurez probablement remarqué que depuis les ajouts des mécanismes pour optimiser le code, les temps de réponse sont devenus plus lent. C&#39;est parceque toutes l&#39;optimisation se refait au chargement de chaque page. Nous allons voir ici comment :</p>
<ul>
<li>Développer avec les fichiers originaux sans mécanisme d&#39;optimisation.</li>
<li>Générer une version finale des fichiers optimisés.</li>
</ul>
<p>Pour cela nous allons utiliser différents webconfigs.</p>
<h4 id="version-d-veloppement">Version Développement</h4>
<p>Tout d&#39;abord arrêtons d&#39;utiliser l&#39;optimisation après chaque chargement de page et n&#39;utilisons pas d&#39;instruction pour la minification et l&#39;optimisation. Nous allons créer une variable pour indiquer que la version actuelle n&#39;utilisera pas les fichiers minifiés.</p>
<p>Ensuite, nous allons également utiliser la propritété <samp>httpPort</samp> pour faire tourner nos deux versions côte à côte. Nous allons aussi utiliser une variable pour indiquer derrière quel port va tourner l&#39;autre langue pour chaque webconfig.</p>
<p><strong>webconfig.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;httpPort&quot;: 7777,
    &quot;enableStylus&quot;: &quot;stylus.json&quot;,
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;fr&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;routes&quot;: &quot;routes.json&quot;,
    &quot;_readme&quot;: &quot;README.md&quot;,
    &quot;_content&quot;: &quot;content/&quot;,
    &quot;_toc&quot;: &quot;table-des-matières&quot;,
    &quot;_otherPort&quot;: 7778,
    &quot;_min&quot;: &quot;&quot;
}
</code></pre>
<p><strong>webconfig.en.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;httpPort&quot;: 7778,
    &quot;enableStylus&quot;: &quot;stylus.json&quot;,
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;en&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;urlRelativeSubPath&quot;: &quot;english&quot;,
    &quot;routes&quot;: &quot;routes.json&quot;,
    &quot;_readme&quot;: &quot;README.en.md&quot;,
    &quot;_content&quot;: &quot;content/english/&quot;,
    &quot;_toc&quot;: &quot;table-of-contents&quot;,
    &quot;_otherPort&quot;: 7777,
    &quot;_min&quot;: &quot;&quot;
}
</code></pre>
<p>Nous allons également modifier conditionnellement les vues suivantes pour qu&#39;elles affichent les fichiers de travail avec ses webconfigs et les fichiers de productions avec les webconfigs de génération que nous allons créer plus loin.</p>
<p><strong>views/partials/head.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;&lt;?= languageCode ?&gt;&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;NodeAtlas&lt;/title&gt;

        &lt;base href=&quot;&lt;?= urlBasePath ?&gt;/&quot; /&gt;

        &lt;meta name=&quot;description&quot; content=&quot;NodeAtlas est un Framework JavaScript MVC(2) côté serveur.&quot; /&gt;
        &lt;meta name=&quot;geo.placename&quot; content=&quot;Annecy, Haute-Savoie, France&quot; /&gt;

        &lt;meta name=&quot;robots&quot; content=&quot;index, follow&quot; /&gt;

        &lt;!--[if IE]&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no&quot; /&gt;&lt;![endif]--&gt;
        &lt;!--[if !IE]&gt;&lt;!--&gt;&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, user-scalable=no&quot; /&gt;&lt;!--&lt;![endif]--&gt;

        &lt;!-- Inclusion du fichiers minifié après génération. --&gt;
        &lt;? if (webconfig._min) { ?&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;stylesheets/common.min.css&quot;&gt;

        &lt;!-- Inclusion du fichiers standar pendant le développement. --&gt;
        &lt;? } else { ?&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;stylesheets/common.css&quot;&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;stylesheets/cmpt.header.css&quot;&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;stylesheets/cmpt.navigation.css&quot;&gt;
        &lt;link rel=&quot;stylesheet&quot; href=&quot;stylesheets/cmpt.content.css&quot;&gt;
        &lt;? }  ?&gt;
    &lt;/head&gt;
    &lt;body data-content=&quot;&lt;?= webconfig._content ?&gt;&quot; data-subpath=&quot;&lt;?= webconfig.urlRelativeSubPath ?&gt;&quot;&gt;
        &lt;div class=&quot;layout&quot;&gt;
            &lt;noscript class=&quot;no-js cmpt&quot;&gt;
                &lt;div class=&quot;no-js--inner&quot;&gt;
                    &lt;p&gt;&lt;?- common.noJs ?&gt;&lt;/p&gt;
                &lt;/div&gt;
            &lt;/noscript&gt;
</code></pre>
<p><strong>views/partials/foot.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">            &lt;!-- Inclusion du fichiers minifié après génération. --&gt;
            &lt;? if (webconfig._min) { ?&gt;
            &lt;script src=&quot;javascript/common.min.js&quot;&gt;&lt;/script&gt;

            &lt;!-- Inclusion du fichiers standar pendant le développement. --&gt;
            &lt;? } else { ?&gt;
            &lt;script src=&quot;javascript/cmpt.header.js&quot;&gt;&lt;/script&gt;
            &lt;script src=&quot;javascript/cmpt.navigation.js&quot;&gt;&lt;/script&gt;
            &lt;script src=&quot;javascript/cmpt.content.js&quot;&gt;&lt;/script&gt;
            &lt;script src=&quot;javascript/common.js&quot;&gt;&lt;/script&gt;
            &lt;? }  ?&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>views/partials/header.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">            &lt;header class=&quot;header cmpt&quot;&gt;
                &lt;div class=&quot;header--inner&quot;&gt;
                    &lt;div class=&quot;header--title&quot;&gt;

                        &lt;!-- On utilise la version non minifiée en local. --&gt;
                        &lt;h1&gt;&lt;img src=&quot;&lt;?= (!webconfig._min) ? common.title.src.replace(webconfig._min, &quot;&quot;) : common.title.src ?&gt;&quot; alt=&quot;&lt;?= common.title.alt ?&gt;&quot;&gt;&lt;/h1&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/header&gt;
</code></pre>
<p><strong>views/partials/navigation.htm</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">            &lt;nav class=&quot;navigation cmpt&quot;&gt;
                &lt;div class=&quot;navigation--inner&quot;&gt;
                    &lt;div class=&quot;navigation--lang&quot;&gt;

                        &lt;!-- On ajoute la base si le site est en développement, en attribuant le port de l&#39;autre version. --&gt;
                        &lt;a href=&quot;&lt;?= (!webconfig._min) ? urlBasePath.replace(webconfig.httpPort, webconfig._otherPort) : &#39;&#39; ?&gt;/&lt;?= common.lang.url ?&gt;&quot; title=&quot;&lt;?= common.lang.title ?&gt;&quot;&gt;&lt;?- common.lang.title ?&gt;&lt;/a&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;navigation--home&quot;&gt;
                        &lt;a href=&quot;&lt;?= common.home.url ?&gt;&quot; title=&quot;&lt;?= common.home.title ?&gt;&quot;&gt;&lt;?- common.home.title ?&gt;&lt;/a&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;navigation--menu&quot;&gt;
                        &lt;ul&gt;
                            &lt;? for (var i = 0; i &lt; common.menu.length; i++) { ?&gt;
                            &lt;li&gt;
                                &lt;a href=&quot;&lt;?= common.menu[i].url ?&gt;&quot; title=&quot;&lt;?= common.menu[i].title ?&gt;&quot;&gt;&lt;?- common.menu[i].title ?&gt;&lt;/a&gt;
                                &lt;? if (common.menu[i].menu) { ?&gt;
                                &lt;ul&gt;
                                    &lt;? for (var j = 0; j &lt; common.menu[i].menu.length; j++) { ?&gt;
                                    &lt;li&gt;
                                        &lt;a href=&quot;&lt;?= common.menu[i].menu[j].url ?&gt;&quot; title=&quot;&lt;?= common.menu[i].menu[j].title ?&gt;&quot;&gt;&lt;?- common.menu[i].menu[j].title ?&gt;&lt;/a&gt;
                                    &lt;/li&gt;
                                    &lt;? } ?&gt;
                                &lt;/ul&gt;
                                &lt;? } ?&gt;
                            &lt;/li&gt;
                            &lt;? } ?&gt;
                        &lt;/ul&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/nav&gt;
</code></pre>
<p>Et pour lancer les deux versions en même temps, nous allons créer un fichier <samp>develop-website.js</samp> :</p>
<p><strong>develop-website.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">// On récupère l&#39;API NodeAtlas.
var nodeAtlas = require(&quot;node-atlas&quot;),

    // On créé une instance pour générer la version française.
    versionFrench = new nodeAtlas(),

    // On créé une instance pour générer la version internationale.
    versionEnglish = new nodeAtlas();

// On paramètre la version française et on la lance.
versionFrench.run({
    &quot;browse&quot;: true
});

// On paramètre la version internationale et on la lance.
versionEnglish.run({
    &quot;webconfig&quot;: &quot;webconfig.en.json&quot;
});
</code></pre>
<p>Et nous lançons la commande suivante depuis le dossier <samp>nodeatlas-website</samp> :</p>
<pre class="prettyprint linenums"><code>&gt; node develop-website.js
</code></pre><p>Nous faisons tourner la version française et internationale de développement de nos fichiers aux adresses <samp>http://localhost:7777/</samp> et <samp>http://localhost:7778/english/</samp>.</p>
<p><em>Note : sous Windows, en renommant <samp>develop-website.js</samp> en <samp>develop-website.na</samp> et en expliquant que les fichiers <samp>.na</samp> s&#39;ouvrent avec <samp>node.exe</samp> on peut se passer de la commande précédente et simplement double cliquer sur <samp>develop-website.na</samp> pour lancer la procédure !</em></p>
<h4 id="version-production">Version Production</h4>
<p>Nous allons maintenant créer les webconfigs de génération qui eux vont bien avoir les Bundles et les Optimizations, qui utiliseront la variable <samp>_min</samp> du webconfig à <samp>true</samp> et qui seront derrière un unique site. Voyez plutôt :</p>
<p><strong>webconfig.generate.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;optimizations&quot;: &quot;optimizations.json&quot;,
    &quot;bundles&quot;: &quot;bundles.json&quot;,
    &quot;enableStylus&quot;: &quot;stylus.json&quot;,
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;fr&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/&quot;,
    &quot;routes&quot;: &quot;routes.json&quot;,
    &quot;_readme&quot;: &quot;README.md&quot;,
    &quot;_content&quot;: &quot;content/&quot;,
    &quot;_toc&quot;: &quot;table-des-matières&quot;,
    &quot;_min&quot;: true
}
</code></pre>
<p><strong>webconfig.generate.en.json</strong></p>
<pre class="prettyprint linenums"><code class="lang-json">{
    &quot;optimizations&quot;: &quot;optimizations.json&quot;,
    &quot;bundles&quot;: &quot;bundles.json&quot;,
    &quot;enableStylus&quot;: &quot;stylus.json&quot;,
    &quot;enableIndex&quot;: true,
    &quot;languageCode&quot;: &quot;en&quot;,
    &quot;commonController&quot;: &quot;common.js&quot;,
    &quot;commonVariation&quot;: &quot;common.json&quot;,
    &quot;serverlessRelativePath&quot;: &quot;../dist/english/&quot;,
    &quot;urlRelativeSubPath&quot;: &quot;english&quot;,
    &quot;routes&quot;: &quot;routes.json&quot;,
    &quot;_readme&quot;: &quot;README.en.md&quot;,
    &quot;_content&quot;: &quot;content/english/&quot;,
    &quot;_toc&quot;: &quot;table-of-contents&quot;,
    &quot;_min&quot;: true
}
</code></pre>
<p>Nous allons à présent modifier le fichier <samp>generate-website.js</samp> pour qu&#39;ils utilisent ces nouveaux webconfigs :</p>
<p><strong>generate-website.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">var nodeAtlas = require(&quot;node-atlas&quot;),
    versionFrench = new nodeAtlas(),
    versionEnglish = new nodeAtlas(),
    versionTest = new nodeAtlas();

versionFrench.init({
    &quot;generate&quot;: true,

    // Nouveau webconfig français pour la génération.
    &quot;webconfig&quot;: &quot;webconfig.generate.json&quot;
}).generated(function() {
    versionEnglish.init({
        &quot;generate&quot;: true,

        // Nouveau webconfig international pour la génération.
        &quot;webconfig&quot;: &quot;webconfig.generate.en.json&quot;
    }).generated(function() {
        versionTest.init({
            &quot;browse&quot;: &quot;index.html&quot;,
            &quot;directory&quot;: &quot;../dist/&quot;
        }).start();
    }).start();
}).start();
</code></pre>
<p>Finissons par lancer la commande suivante depuis le dossier <samp>nodeatlas-website</samp> :</p>
<pre class="prettyprint linenums"><code>&gt; node generate-website.js
</code></pre><p>Et profitons de notre site complet, prêt à être placé sur <a href="https://github.com/" title="GitHub is where people build software. More than 15 million people use GitHub to discover, fork, and contribute to over 38 million projects.">Github</a> depuis le dossier <samp>dist</samp>. Il suffit maintenant de faire du dossier <samp>dist</samp> un dépôt local de <samp>https://github.com/Haeresis/NodeAtlas/tree/gh-pages</samp> de <a href="https://github.com/" title="GitHub is where people build software. More than 15 million people use GitHub to discover, fork, and contribute to over 38 million projects.">Github</a> et le tour est joué !</p>
<h3 id="processus-de-mise-en-production">Processus de mise en production</h3>
<p>Pour résumer nous utilisons donc :</p>
<ul>
<li>Pour développer (depuis <samp>nodeatlas-website</samp>),</li>
</ul>
<pre class="prettyprint linenums"><code>&gt; node develop-website.js
</code></pre><ul>
<li>Pour tester la version de production en local (depuis <samp>nodeatlas-website</samp>),</li>
</ul>
<pre class="prettyprint linenums"><code>&gt; node generate-website.js
</code></pre><ul>
<li>Pour monter le site sur <a href="https://github.com/" title="GitHub is where people build software. More than 15 million people use GitHub to discover, fork, and contribute to over 38 million projects.">GitHub</a> (depuis <samp>dist/</samp>),</li>
</ul>
<p><em>Ensemble de commande GIT.</em></p>
<p><strong><a href="https://blog.lesieur.name/media/scripts/upload/nodeatlas-website.zip">Vous pouvez récupérer l&#39;intégralité du code de cet article dans cette archive pour tester</a>.</strong></p>
<h2 id="d-autres-bonnes-pratiques">D&#39;autres bonnes pratiques</h2>
<p>Vous trouverez d&#39;autres fonctionnalités de <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em> sur <a href="https://node-atlas.js.org/">le site officiel de NodeAtlas</a> en attendant la rédaction du dernier article dédié :</p>
<ul>
<li>aux développeur Back-end ou JavaScript en étendant le fonctionnement de <em><a href="https://www.npmjs.com/package/node-atlas/" title="Create MVC2 or Front-end-based websites easily.">NodeAtlas</a></em> aux parties <em>Contrôleur</em> et <em>Modèle</em> avec une utilisations des <em>Websockets</em> pour les actions en temps réel ainsi qu&#39;un tour des accès aux diverses bases de données.</li>
</ul>
]]></description>
            <link>http://localhost:7776creer-et-maintenir-des-maquettes-html-avec-node-atlas/</link>
            <guid isPermaLink="false">544a4724ac53204337fa2e0e</guid>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[Back-end]]></category>
            <category><![CDATA[Ressources]]></category>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[NodeAtlas]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Stylus]]></category>
            <category><![CDATA[Node.js]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Mon, 31 Oct 2016 12:33:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Séparations et mise en application des rôles du HTML / CSS / JavaScript]]></title>
            <description><![CDATA[<p>Cet article fait office de conventions d&#39;architecture d&#39;un site web orienté composant pour la partie frontale, peu importe la technologie d&#39;implémentation finale, de manière à ce que le code soit valide, performant et maintenable par des Front-end Developers, des Back-end Developers ainsi que des Content Fillers (Pousseurs de Contenu). Ces techniques étant en constantes évolution, et les problématiques évoluant au fur et à mesure de mes itérations créatives, cet article est voué à se compléter et changer.</p>
<h2 id="pr-sentation-globale-des-r-les">Présentation globale des rôles</h2>
<h3 id="html">HTML</h3>
<p>Le HTML est le centre de tout. C&#39;est lui qui doit <strong>présenter le contenu</strong>, qui est la clé de voûte de tout site web. Il doit être au service du contenu et non à celui du design (visuel). Le site web doit être valide et respecter les normes W3C en fonction de son DocType et être le plus cohérent à travers tout le site. Ce qui doit justifier son changement est un apport/une modification de contenu. Il est le lien entre le travail des Front-end Developers, des Back-end Developers ainsi que des Content Fillers et doit bouger le moins possible quand il est question de changement de design.</p>
<p>Il y a 3 types de fragment HTML :</p>
<ul>
<li>Les <strong>Gabarits de page</strong> (ou Layouts, ou Templates ou encore Grids) : ils représentent la structure globale d&#39;une page qui doit accueillir des Composants.</li>
<li>Les <strong>Composants</strong> (ou Modules, ou Views ou encore Items Template) : ils représentent une partie auto-suffisante à elle-même, traitant du même type de Contenu et l&#39;organisant hiérarchiquement.</li>
<li>Les <strong>Contenus</strong> (ou Contents, ou Datas) : ils représentent les données a exposées au visiteur et pour lequel le site web existe. Elles sont sémantiquement parsemées de balise HTML et sont les zones qui proviennent généralement de fichier externe (HTML, Markdown, JSON, etc.) ou de base de donnée (SQL, NoSQL, etc.).</li>
</ul>
<p><strong>Exemple de Layout, Composants et Contenus</strong></p>
<div class="ex-layout">
    <div class="ex-component">
        <div class="ex-subcomponent" style="width: calc(50% + 24px);">
            <div class="ex-data">
                titre
            </div>
        </div>
        <div class="ex-subcomponent" style="width: calc(50% + 24px);">
            <div class="ex-data">
                menu (liste)
            </div>
        </div>
    </div>
    <div class="ex-component">
        <div class="ex-data">
            titre
        </div>
        <div class="ex-data">
            paragraphes
        </div>
        <div class="ex-data">
            bouton
        </div>
    </div>
    <div class="ex-sublayout">
        <div class="ex-component" style="width: calc(33.33333333% - 24px);">
            <div class="ex-data">
                ...
            </div>
        </div>
        <div class="ex-component" style="width: calc(33.33333333% - 24px);">
            <div class="ex-data">
                ...
            </div>
        </div>
        <div class="ex-component" style="width: calc(33.33333333% - 24px);">
            <div class="ex-data">
                ...
            </div>
        </div>
    </div>
    <div class="ex-component"></div>
    <div class="ex-sublayout">
        <div class="ex-component" style="width: calc(33.33333333% - 24px);"></div>
        <div class="ex-sublayout" style="width: calc(66.66666666% + 24px);">
            <div class="ex-component" style="width: calc(25% - 24px);"></div>
            <div class="ex-component" style="width: calc(25% - 24px);"></div>
            <div class="ex-component" style="width: calc(25% - 24px);"></div>
            <div class="ex-component" style="width: calc(25% - 24px);"></div>
        </div>
    </div>
    <div class="ex-component"></div>
    <div class="ex-sublayout">
        <div class="ex-component" style="width: calc(50% - 24px);">
            <div class="ex-data">
                paragraphe
            </div>
        </div>
        <div class="ex-component" style="width: calc(50% - 24px);">
            <div class="ex-data">
                partage (liste)
            </div>
        </div>
    </div>
</div>



<h3 id="css">CSS</h3>
<p>Le CSS est ce qui s&#39;occupe d&#39;<strong>habiller graphiquement</strong> le site web. Il est totalement invisible pour les Back-end Developers et Content Fillers. Ils ne doivent jamais mettre les mains dans des fichiers CSS, Less, Stylus, etc. Cependant, les classes sur lesquels ils s’appuient demande à être documentées.</p>
<p>Il y a 2 types d&#39;approche en CSS :</p>
<ul>
<li><p><strong>CSS-Driven</strong>, avec l&#39;utilisation des sélecteurs CSS ciblant le HTML. Elles s&#39;appliquent en premier lieu sur les Composants mais également sur les Gabarits. Elles ne doivent jamais être utilisées dans du Contenu. Le CSS-Driven est décrit, par exemple, avec BEM. Une documentation des états ou variations possibles des Gabarits et Composants doit être fourni aux Back-end Developers.</p>
</li>
<li><p><strong>HTML-Driven</strong>, avec l&#39;utilisation de Patrons de classe (Class Pattern). Ils s&#39;appliquent en premier lieu sur les Contenus (et possiblement sur les Layouts). Ils ne doivent jamais être utilisé dans des Composants. Le HTML-Driven est décrit par exemple avec OOCSS (Bootstrap, Semantic-UI, etc.) et une documentation de l&#39;utilisation des Patrons de classe doit être fourni aux Content Fillers.</p>
</li>
</ul>
<p><strong>Exemple CSS-Driven</strong></p>
<p><div class="ex-component" style="width: calc(60% - 24px);">
    .<strong>user-profile</strong> <span style="opacity: 0.66;">(facultatif: <strong>.as-popup</strong>, <strong>.is-opened</strong>)</span>
    <div class="ex-subcomponent" style="margin: 12px;width: calc(100% - 24px);">
        .user-profile--<strong>avatar</strong>
    </div>
    <div class="ex-subcomponent" style="margin: 12px;width: calc(100% - 24px);">
        .user-profile--<strong>information</strong>
    </div>
</div></p>
<p><div class="ex-css" style="width: calc(40% - 24px);">
    <strong>Défini dans la CSS</strong><br>
    Le composant <strong>user-profile</strong> a un <em>fond vert</em>. Le sous-composant <strong>avatar</strong> est à <em>gauche</em>. Le sous-composant <strong>information</strong> est à <em>droite</em>. <span style="opacity: 0.66">Avec la variation <strong>as-popup</strong> le composant est une <em>popup caché</em>. Avec l&#39;état <strong>is-opened</strong> le composant est <em>visible</em>.</span>
</div></p>
<hr class="invisible">

<p><strong>Exemple HTML-Driven</strong></p>
<p><div class="ex-css" style="width: calc(60% - 24px);">
    <div class="ex-data">img <strong>.img-responsive</strong></div>
    <div class="ex-data">p <strong>.lead</strong></div>
    <div class="ex-data">a <strong>.btn.btn-default</strong></div>
</div></p>
<p><div class="ex-css" style="width: calc(40% - 24px);">
    <strong>Appliqué sur le HTML,</strong><br>
    Le patron <strong>img-responsive</strong> rend l&#39;image <em>adaptable à son containeur</em>. Le patron <strong>lead</strong> met <em>en avant</em> le texte. Le patron <strong>btn</strong> transforme le lien en <em>bouton</em> et le patron <strong>btn-default</strong> lui donne un <em>skin</em> par défaut.</span>
</div></p>
<hr class="invisible">


<h3 id="javascript">JavaScript</h3>
<p>Les JavaScript s&#39;occupent, en partie, de <strong>rendre dynamique</strong> votre site web notamment en permettant les intéractions entre l&#39;utilisateur et celui-ci. Les JavaScript doivent, tout comme les feuilles de style être séparés du code HTML faisant office de template. Ils se placent soit avant, soit après le contenu de <samp>&lt;body&gt;</samp> en fonction de leur nature.</p>
<ul>
<li><p>Les <strong>Avants DOM</strong> (ou Bootstraper), sont les fichiers qui se placent en haut des pages HTML. Ils n&#39;interagissent pas avec le DOM mais évitent le <a href="https://fr.wikipedia.org/wiki/FOUC">phénomène de FOUC</a>. Ils sont peu nombreux et doivent être le plus léger possible car ils bloquent l&#39;affichage de la page. On aura, par exemple, Modernizr ou encore RequireJS pour les librairies ou Angular ou Aurelia pour les frameworks destinés aux applications web qui injectent le DOM côté client. Placer un fichier ici avec les propriétés <samp>defer</samp> ou <samp>async</samp> revient à les placer dans la partie <strong>Après DOM</strong>.</p>
</li>
<li><p>Les <strong>Après DOM</strong> (ou DOM Ready) :</p>
<ul>
<li>Les <strong>Communs</strong>, ils sont chargés sur chaque page et sont :<ul>
<li>Le fichier principaux du site (ou <strong>Common</strong>, ou Main, ou App). Ils représentent l&#39;unique point de démarrage du code qui va tourner dans toute votre page courante et également le code utilisé sur les Class Patterns.</li>
<li>Les librairies externes (ou <strong>External</strong>), comme jQuery, qui sont utilisées à travers toutes les pages (possiblement amené depuis des CDN).</li>
</ul>
</li>
<li>Les <strong>spécifiques</strong>, ils sont chargés uniquement sur des pages dédiées :<ul>
<li>Le fichier principal de la page (ou <strong>Specific</strong>), habituellement rattachés à un Gabarit. Il est lancé par le Common en fonction du Gabarit trouvé.</li>
<li>Les <strong>Composants</strong> (ou Class ou Interface), habituellement rattachés à un Composant HTML. Ils sont lancés par le Specific en fonction des Composants trouvés (ou par le Common si l&#39;on se passe des Specifics, notamment pour les petits sites).</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="r-le-et-utilisation-du-html">Rôle et Utilisation du HTML</h2>
<h3 id="les-gabarits">Les Gabarits</h3>
<ul>
<li><p>Les Gabarits de page (Layouts) incluent exclusivement des Composants. Ils ne doivent jamais inclure directement du Contenu. Un Gabarit est composé de plusieurs Zone d’atterrissage (PlaceHolder).</p>
</li>
<li><p>Un même Gabarit peut être utilisé avec quelques différences entre deux rendus de page donc, dans ce cas, une Variation de classe (Class Variation) avec <samp>with-*</samp> est utile. Nous verrons ça plus loin.</p>
</li>
</ul>
<p>Voici des exemples de Gabarit :</p>
<h4 id="avec-un-placeholder-unique">Avec un Placeholder Unique</h4>
<p>Qui pourra servir de Gabarit standard pour toutes pages simples.</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;head&gt;
    &lt;!-- Common CSS file declaration --&gt;
&lt;/head&gt;
&lt;body class=&quot;&lt;name-of-layout&gt;&quot;&gt;
    &lt;!-- Boot JS file (modernizr, require, etc.) --&gt;
    &lt;div class=&quot;layout&quot;&gt;
        &lt;!-- List of Components --&gt;
    &lt;/div&gt;
    &lt;!-- Common JS file declaration --&gt;
&lt;/body&gt;
</code></pre>
<p><em>Note : Dans ce cas, <samp>class=&quot;&lt;name-of-layout&gt;&quot;</samp> n&#39;est pas requis puisqu&#39;il n&#39;y a qu&#39;un seul PlaceHolder pour tout.</em></p>
<h4 id="avec-de-multiples-placeholders">Avec de Multiples PlaceHolders</h4>
<p>Qui servira pour les dispositions les plus complexes.</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;head&gt;
    &lt;!-- Common CSS file declaration --&gt;
&lt;/head&gt;
&lt;body class=&quot;&lt;name-of-layout&gt;&quot;&gt;
    &lt;!-- Boot JS file (modernizr, require, etc.) --&gt;
    &lt;div class=&quot;layout&quot;&gt;
        &lt;div class=&quot;area for-header&quot;&gt;
            &lt;!-- List of Components --&gt;
        &lt;/div&gt;
        &lt;div class=&quot;area for-overview&quot;&gt;
            &lt;div class=&quot;part for-content&quot;&gt;
                &lt;!-- List of Components --&gt;
            &lt;/div&gt;
            &lt;div class=&quot;part for-aside&quot;&gt;
                &lt;!-- List of Components --&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;area for-footer&quot;&gt;
            &lt;!-- List of Components --&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Common JS file declaration --&gt;
&lt;/body&gt;
</code></pre>
<p><em>Note : Dans ce cas, <samp>class=&quot;&lt;name-of-layout&gt;&quot;</samp> est obligatoire pour appliquer du CSS différemment sur chaque Zone (area/part) en fonction du Gabarit.</em></p>
<h4 id="placeholders-multiples-avec-class-patterns">Placeholders Multiples avec Class Patterns</h4>
<p>Comme par exemple la Grille de Bootstrap.</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;head&gt;
    &lt;!-- Common CSS file declaration --&gt;
&lt;/head&gt;
&lt;body class=&quot;&lt;name-of-layout&gt;&quot;&gt;
    &lt;!-- Boot JS file (modernizr, require, etc.) declaration --&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;!-- List of Components --&gt;
        &lt;/div&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;div class=&quot;col-xs-12 col-sm-8&quot;&gt;
                &lt;!-- List of Components --&gt;
            &lt;/div&gt;
            &lt;div class=&quot;col-xs-12 col-sm-4&quot;&gt;
                &lt;!-- List of Components --&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;!-- List of Components --&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Common JS file declaration --&gt;
&lt;/body&gt;
</code></pre>
<p><em>Note : Dans ce cas, <samp>class=&quot;&lt;name-of-layout&gt;&quot;</samp> n&#39;est pas obligatoire pour les CSS mais le sera pour le JavaScript qui doit pouvoir différencier (au besoin) un Gabarit d&#39;un autre.</em></p>
<h3 id="les-composants">Les Composants</h3>
<ul>
<li><p>Les Composants —composés de plusieurs Sous-Partie (Subcomponent)— sont inclus dans les PlaceHolders et peuvent eux-même inclure des Composants (c&#39;est le cas des composants de type « Composant de composant »).</p>
</li>
<li><p>Les Composants incluent des Contenus mais n&#39;incluent jamais directement des Patrons de conception en dehors de ses zones de contenu.</p>
</li>
<li><p>Les Composants peuvent être incluent plus d&#39;une fois dans de même Gabarit et également plus d&#39;une fois dans le même PlaceHolder.</p>
</li>
</ul>
<p><strong>Les Variations de classe</strong></p>
<ul>
<li>Un Composant peut-être utilisé dans différent contexte d&#39;affichage et avec différent comportement, donc, pour chaque alternative une Variation de classe <samp>as-*</samp> est utilisée.</li>
<li>Un Composant (ou une Sous-Partie) peuvent avoir différent états, donc, pour chaque état, une Variation de classe <samp>is-*</samp> ou <samp>has-*</samp> est utilisée.</li>
<li>Parce que un Composant peut-être trouvé plus d&#39;une fois dans un même PlaceHolder, une Variation de classe <samp>for-*</samp> peut-être utilisée pour différencier les mêmes composants les uns des autres.</li>
</ul>
<p>Nous reparlerons des trois précédents points plus loin.</p>
<p>Exemple de Composant</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;!-- Specific CSS file declaration --&gt;
&lt;section class=&quot;&lt;name-of-component&gt; ui&quot;&gt;
    &lt;div class=&quot;&lt;name-of-component&gt;--inner&quot;&gt;
        &lt;h1&gt;&lt;!-- Contents --&gt;&lt;/h1&gt;
        &lt;div class=&quot;&lt;name-of-component&gt;--image&quot;&gt;
            &lt;!-- Contents --&gt;
        &lt;/div&gt;
        &lt;div class=&quot;&lt;name-of-component&gt;--text&quot;&gt;
            &lt;!-- Contents --&gt;
        &lt;/div&gt;
        &lt;aside class=&quot;&lt;name-of-component&gt;--ads&quot;&gt;
            &lt;ul class=&quot;&lt;name-of-component&gt;--list&quot;&gt;
                &lt;li class=&quot;&lt;name-of-component&gt;--item&quot;&gt;
                    &lt;!-- Contents --&gt;
                &lt;/li&gt;
                &lt;li class=&quot;&lt;name-of-component&gt;--item&quot;&gt;
                    &lt;!-- Contents --&gt;
                &lt;/li&gt;
                &lt;li class=&quot;&lt;name-of-component&gt;--item&quot;&gt;
                    &lt;!-- Contents --&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
        &lt;/aside&gt;
    &lt;/div&gt;
&lt;/section&gt;
&lt;!-- Specific JS file declaration --&gt;
</code></pre>
<p><strong>Les <samp>--</samp> indique une Sous-Partie du même Composant. Il est possible de créer autant de sous profondeur de Sous-Partie que souhaité.</strong></p>
<p><em>Note : Un Composant doit avoir au moins deux balises HTML imbriquées pour le représenter afin de pouvoir être totalement habillé avec du CSS de toutes les manières possible. <a href="http://codepen.io/Haeresis/pen/bdXymY">Voir ce CodePen</a> (<samp>.&lt;name-of-component&gt;--inner</samp> est juste nommé <samp>.ui</samp>).</em></p>
<h4 id="boucler-sur-eux-m-me">Boucler sur eux même</h4>
<p>Un composant peut boucler sur lui même afin d’apparaître comme une liste ou de lier son contenu à une liste d&#39;élément en base de donnée. Un <samp>&lt;ul&gt;</samp> est grandement recommandé dans ce cas puisque chaque item est censé être identique dans sa structure de Composant (mais pas forcément de Contenu).</p>
<p>Exemple de Composant</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;!-- Specific CSS file declaration --&gt;
&lt;section class=&quot;&lt;name-of-component&gt; ui&quot;&gt;
    &lt;div class=&quot;&lt;name-of-component&gt;--inner&quot;&gt;
        &lt;ul class=&quot;&lt;name-of-component&gt;--multiple&quot;&gt;
            &lt;!-- start loop --&gt;
            &lt;li class=&quot;&lt;name-of-component&gt;--single&quot;&gt;
                &lt;h1&gt;&lt;!-- Contents --&gt;&lt;/h1&gt;
                &lt;!-- All HTML Here --&gt;
            &lt;/li&gt;
            &lt;!-- some items --&gt;
            &lt;li class=&quot;&lt;name-of-component&gt;--single&quot;&gt;
                &lt;h1&gt;&lt;!-- Contents --&gt;&lt;/h1&gt;
                &lt;!-- All HTML Here --&gt;
            &lt;/li&gt;
            &lt;!-- some items --&gt;
            &lt;li class=&quot;&lt;name-of-component&gt;--single&quot;&gt;
                &lt;h1&gt;&lt;!-- Contents --&gt;&lt;/h1&gt;
                &lt;!-- All HTML Here --&gt;
            &lt;/li&gt;
            &lt;!-- end loop --&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/section&gt;
&lt;!-- Specific JS file declaration --&gt;
</code></pre>
<h3 id="les-contenus">Les Contenus</h3>
<p>Les Contenus se trouvent uniquement dans les Composants, dans les zones de contenu. Seul les Patrons de conception (Class Pattern) doivent être utilisés dans ses parties et documentés pour être également à la disposition des Content Filler. C&#39;est par exemple le cas de <a href="http://getbootstrap.com/css/">Bootstrap</a>.</p>
<p>Il y a donc cinq zones de Contenu dans ce Composant</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;section class=&quot;article ui&quot;&gt;
    &lt;div class=&quot;article--inner&quot;&gt;
        &lt;div class=&quot;article--text&quot;&gt;
            &lt;h2&gt;&lt;!-- Content A Title --&gt;&lt;/h2&gt;
            &lt;!-- Contents A Text --&gt;
            &lt;div class=&quot;article--others&quot;&gt;
                &lt;ul class=&quot;article--others--list&quot;&gt;
                    &lt;li class=&quot;article--others--item&quot;&gt;
                        &lt;!-- Content B Image --&gt;
                        &lt;div class=&quot;article--others--text&quot;&gt;
                            &lt;h2&gt;&lt;!-- Contents B Title --&gt;&lt;/h2&gt;
                            &lt;!-- Content B Text --&gt;
                        &lt;/div&gt;
                    &lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/section&gt;
</code></pre>
<p>Les Contenus sont par exemple :</p>
<p><em>Content A Title</em></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;span class=&quot;text-large reversed&quot;&gt;I&#39;am the&lt;br&gt;Main Title&lt;/span&gt;
</code></pre>
<p><em>Content A Text</em></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;h2 class=&quot;text-center&quot;&gt;I&#39;am a Subtitle&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Lorem ipsum dolor sit amet&lt;/li&gt;
    &lt;li&gt;Lorem ipsum dolor sit amet&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p><em>Content B Image</em></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;img src=&quot;source.png&quot; alt=&quot;I&#39;am the Image Description&quot; class=&quot;img-responsive&quot;&gt;
</code></pre>
<p><em>Content B Title</em></p>
<pre class="prettyprint linenums"><code class="lang-html">I&#39;am an other Article
</code></pre>
<p><em>Content A Text</em></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;/p&gt;
&lt;p&gt;&lt;button class=&quot;btn btn-hugh&quot;&gt;See more&lt;/button&gt;&lt;/p&gt;
</code></pre>
<h3 id="variation-de-classe">Variation de classe</h3>
<p>Il y a beaucoup de prefixe de classe utilisés pour les variations de classe, en voici leur définition.</p>
<ul>
<li><p><samp>as-*</samp> : défini un comportement alternatif ou un rendu alternatif pour un Composant ou une Sous-Partie de composant. <em>Exemple: <samp>class=&quot;&lt;name-of-component&gt; as-popup&quot;</samp> peut signifier que le Composant standard <samp>&lt;name-of-component&gt;</samp> est affiché cette fois comme une popup. Ainsi en JavaScript, la classe <samp>.as-popup</samp> la possibilité d&#39;afficher ou de masquer le Composant.</em></p>
</li>
<li><p><samp>with-*</samp> : défini un comportement alternatif ou un rendu alternatif pour un Gabarit. <em>Exemple: <samp>class=&quot;&lt;name-of-layout&gt; with-ads&quot;</samp> peut signifier qu&#39;un Background publicitaire peut-être affiché dans cette configuration.</em></p>
</li>
<li><p><samp>is-*</samp> : défini un état alternatif sur un Composant ou une Sous-Partie de composant. <em>Exemple: <samp>class=&quot;&lt;name-of-component&gt; is-opened&quot;</samp> peut signifier que le Composant <samp>&lt;name-of-component&gt;</samp> est actuellement ouvert et visible. Ainsi en JavaScript, l&#39;action du clique sur une zone précise peut enlever la classe <samp>.is-opened</samp> et par conséquent fermer le Composant.</em></p>
</li>
<li><p><samp>has-*</samp> : défini un état alternatif sur un Composant ou une Sous-Partie de composant. <em>Exemple: <samp>class=&quot;&lt;name-of-component&gt; has-more-one-item&quot;</samp> peut signifier que le Composant <samp>&lt;name-of-component&gt;</samp> contient au moins deux éléments et qu&#39;il doit s&#39;afficher comme une liste.</em></p>
</li>
<li><p><samp>for-*</samp> : défini un id sur un Composant parce que si un Composant est utilisé plus d&#39;une fois dans le même Placeholder, il est important d&#39;avoir une classe différente pour les différencier au besoin. <em>Exemple: <samp>class=&quot;&lt;name-of-component&gt; for-article&quot;</samp> peut signifier que le Composant est utilisé pour afficher du texte faisant office de contenu principale et <samp>class=&quot;&lt;name-of-component&gt; for-aside&quot;</samp> peut signifier tout autre chose.</em></p>
</li>
<li><p><samp>to-*</samp> : défini une étape d&#39;attente en début de changement d&#39;état pour manager une animation. <em>Exemple: <samp>class=&quot;&lt;name-of-component&gt; to-open&quot;</samp> peut signifier que <samp>&lt;name-of-component&gt;</samp> est en état d&#39;ouverture depuis son état fermé vers son état ouvert et qu&#39;il faut démarrer une augmentation de l&#39;opacité. Quand l&#39;animation est fini, le <samp>is-*</samp> peut-être mis.</em> <a href="http://codepen.io/Haeresis/pen/OyoOEV">Un exemple ici</a>.</p>
</li>
<li><p><samp>from-*</samp> : défini une étape d&#39;attente pour manager une animation du retour à l&#39;état initial. <em>Exemple: <samp>class=&quot;&lt;name-of-component&gt; from-open&quot;</samp> peut signifier que le Composant <samp>&lt;name-of-component&gt;</samp> va être fermé et qu&#39;il est temps de diminuer l&#39;opacité de l&#39;élément. Quand l&#39;animation est finie, les classes <samp>is-*</samp> et <samp>from-*</samp> sont retirées.</em> <a href="http://codepen.io/Haeresis/pen/OyoOEV">Un exemple ici</a>.</p>
</li>
</ul>
<p><strong>Toutes les Variations de classe doivent être documentées pour être utilisable par les Back-end.</strong></p>
<h3 id="lire-et-comprendre-le-nommage-du-dom">Lire et comprendre le nommage du DOM</h3>
<ul>
<li>Si vous voyez une classe sur <samp>body</samp> sans les autres prefix, C&#39;est un nom de Gabarit.</li>
<li>Si vous voyez une classe immédiatement suivit de la classe <samp>.ui</samp> et sans les autres prefix, C&#39;est un nom de composant.</li>
<li>Si vous voyez une classe finissant par <samp>*--multiple</samp> et <samp>*--single</samp> cela concerne un composant répétable.</li>
<li>Si vous voyez une classe contenant des <samp>--</samp>, c&#39;est une Sous-Partie de composant.</li>
<li>Si vous voyez une classe avec le préfixe <samp>.as-</samp>, c&#39;est un rendu et/ou un comportement alternatif sur un Composant par rapport à l&#39;état standard.</li>
<li>Si vous voyez une classe avec le préfixe <samp>.with-</samp>, c&#39;est un rendu et/ou un comportement alternatif sur un Gabarit par rapport à l&#39;état standard.</li>
<li>Si vous voyez une classe avec le préfixe <samp>.is-</samp>, c&#39;est la description d&#39;un état de Composant ou Sous-Partie de composant alternatif.</li>
<li>Si vous voyez une classe avec le préfixe <samp>.has-</samp>, c&#39;est la description d&#39;un état de Composant ou Sous-Partie de composant alternatif.</li>
<li>Si vous voyez une classe avec le préfixe <samp>.for-</samp>, c&#39;est pour un rendu ou comportement spécifique sur une unique version d&#39;un Composant.</li>
<li>Si vous voyez une classe avec le préfixe <samp>.to-</samp>, c&#39;est un état de transition vers un autre état.</li>
<li>Si vous voyez une classe avec le préfixe <samp>.from-</samp>, c&#39;est un état de transition de retour à l&#39;état initial.</li>
<li>Si vous ne voyez aucune des classes listées avant, c&#39;est un Patron de conception.</li>
</ul>
<h3 id="choisir-la-s-mantique-de-vos-balise">Choisir la Sémantique de vos balise</h3>
<p>Il n&#39;y au plus qu&#39;un seul <samp>&lt;header&gt;</samp> et <samp>&lt;footer&gt;</samp> sous le <samp>&lt;body&gt;</samp>. Le <samp>&lt;h1&gt;</samp> principale ce trouve également dans cette partie. Sous le <samp>&lt;body&gt;</samp> il y a une hiérarchie de <samp>&lt;h1-h6&gt;</samp> avec un unique <samp>&lt;h1&gt;</samp> jusqu&#39;à ce que vous trouviez une balise :</p>
<ul>
<li><samp>&lt;section&gt;</samp>,</li>
<li><samp>&lt;article&gt;</samp>,</li>
<li><samp>&lt;nav&gt;</samp> ou</li>
<li><samp>&lt;aside&gt;</samp>.</li>
</ul>
<p>Chacune de ces balises arrête la propagation de la hierarchie <samp>&lt;h1-h6&gt;</samp> des balises parente et commence leur propre hiérarchie de <samp>&lt;h1-h6&gt;</samp> (avec seulement un <samp>&lt;h1&gt;</samp>). Chacune de ces balises peuvent aussi avoir leur propre <samp>&lt;header&gt;</samp> et <samp>&lt;footer&gt;</samp>.</p>
<p>De manière à pouvoir rendre déplaçable et réutilisable chaque Composant, nous avons deux manières d&#39;organiser notre structure.</p>
<h4 id="s-mantique-sur-le-gabarit">Sémantique sur le Gabarit</h4>
<p>Ici on place <samp>&lt;section&gt;</samp>, <samp>&lt;article&gt;</samp>, <samp>&lt;nav&gt;</samp> et <samp>&lt;aside&gt;</samp> sur le Gabarit dans les aires réservées des PlaceHolder. Mais dans ce cas, seul des Composants commençant par des <samp>&lt;div&gt;</samp> peuvent être insérés.</p>
<p><strong>Layout</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;body class=&quot;products&quot;&gt;
    &lt;div class=&quot;layout&quot;&gt;
        &lt;section class=&quot;area for-overview&quot;&gt;
            &lt;!-- One Component Here --&gt;
        &lt;/section&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p><strong>Component</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;div class=&quot;product ui&quot;&gt;
    &lt;div class=&quot;product--inner&quot;&gt;
        &lt;header&gt;&lt;!-- Content Title --&gt;&lt;/header&gt;
        &lt;!-- Content Text --&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>Contents</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;h1&gt;A product&lt;/h1&gt;
</code></pre>
<pre class="prettyprint linenums"><code class="lang-html">&lt;h2&gt;Subtitle&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit.&lt;/p&gt;
</code></pre>
<h4 id="s-mantique-dans-le-composant">Sémantique dans le Composant</h4>
<p>Ici on place <samp>&lt;section&gt;</samp>, <samp>&lt;article&gt;</samp>, <samp>&lt;nav&gt;</samp> et <samp>&lt;aside&gt;</samp> sur le Composant. Dans ce cas, un Composant ne peuvent pas être utilisé dans un autre type que celui pour lequel il est destiné.</p>
<p><strong>Layout</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;body class=&quot;products&quot;&gt;
    &lt;div class=&quot;layout&quot;&gt;
        &lt;div class=&quot;area for-overview&quot;&gt;
            &lt;!-- Multiple Component Here --&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p><strong>Component</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;section class=&quot;product ui&quot;&gt;
    &lt;div class=&quot;product--inner&quot;&gt;
        &lt;header&gt;&lt;!-- Content Title --&gt;&lt;/header&gt;
        &lt;!-- Content Text --&gt;
    &lt;/div&gt;
&lt;/section&gt;
</code></pre>
<p><strong>Contents</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;h1&gt;A product&lt;/h1&gt;
</code></pre>
<pre class="prettyprint linenums"><code class="lang-html">&lt;h2&gt;Subtitle&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit.&lt;/p&gt;
</code></pre>
<h4 id="gommer-les-inconv-nient-des-deux-approches">Gommer les inconvénient des deux approches</h4>
<p><a href="https://blog.lesieur.name/conventions-html-et-css-orientes-composants/#des-components-r-ellement-d-pla-able-partout">Vous trouverez dans cet article des pistes et une solution exemple pour embarquer le type du Composant sur lui-même tout en pouvant en changer en fonction de vos envies</a>.</p>
<h3 id="comment-cr-er-des-emails-correctes-">Comment créer des Emails correctes ?</h3>
<p>Pour permettre à vos emails HTML d&#39;être lisible dans la plupard des clients mail, il est nécessaire de ne les réaliser qu&#39;avec du HTML4 et d&#39;utiliser des attributs HTML (voir des balises) à la place des attributs <samp>style</samp>.</p>
<p>N&#39;utiliser pas non plus de <samp>&lt;div&gt;</samp> brut utilisez une cascade de <samp>&lt;table&gt;</samp>, <samp>&lt;tr&gt;</samp>, <samp>&lt;td&gt;</samp> etc.</p>
<p>Par exemple, n&#39;utilisez pas <samp>&lt;div style=&quot;text-align: center&quot;&gt;</samp> mais <samp>&lt;center&gt;</samp>. Pour créer une version HTML5 de vos emails HTML4 pour le web, vous pouvez les transformer automatiquement avec <a href="https://github.com/Haeresis">NodeAtlas</a> par exemple.</p>
<h2 id="r-le-et-utilisation-du-css">Rôle et Utilisation du CSS</h2>
<h3 id="la-sp-cificit-des-s-lecteurs">La Spécificité des Sélecteurs</h3>
<p>C&#39;est l&#39;aspect le plus fondamental du fonctionnement CSS et c&#39;est celui qui pause le plus problème. Parceque les règles CSS sont comme des Variables Globales Mutables en JavaScript, car une propriété :</p>
<ul>
<li>Peut <strong>être redéfini</strong>.</li>
<li>Il y a un <strong>Niveau de Spécifité</strong> pour chaque sélecteur (voir <a href="https://www.w3.org/TR/css3-selectors/#specificity">les règles</a>). En cas de spécificité égale sur deux règles s&#39;appliquant sur le même élément : c&#39;est la place des lignes qui compte.</li>
<li>L&#39;<strong>Ordre</strong> de la CSS a une importance.</li>
</ul>
<p><strong>Exemple</strong></p>
<table>
<thead>
<tr>
<th>Sélecteur</th>
<th style="text-align:right">Spécificité</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><samp>*</samp></td>
<td style="text-align:right">0.0.0.0</td>
<td>tout</td>
</tr>
<tr>
<td><samp>li</samp></td>
<td style="text-align:right">0.0.0.1</td>
<td>tag</td>
</tr>
<tr>
<td><samp>ul li</samp></td>
<td style="text-align:right">0.0.0.2</td>
<td>tag + tag</td>
</tr>
<tr>
<td><samp>li::first-letter</samp></td>
<td style="text-align:right">0.0.0.2</td>
<td>tag + pseudo-element</td>
</tr>
<tr>
<td><samp>ul li div</samp></td>
<td style="text-align:right">0.0.0.3</td>
<td>tag+ tag + tag</td>
</tr>
<tr>
<td><samp>.teal</samp></td>
<td style="text-align:right">0.0.1.0</td>
<td>class .</td>
</tr>
<tr>
<td><samp>li:nth-child(1)</samp></td>
<td style="text-align:right">0.0.1.1</td>
<td>pseudo-class . tag</td>
</tr>
<tr>
<td><samp>ul + *[rel=up] li</samp></td>
<td style="text-align:right">0.0.1.2</td>
<td>all + attribut . tag + tag</td>
</tr>
<tr>
<td><samp>li.red.level</samp></td>
<td style="text-align:right">0.0.2.1</td>
<td>class + class . tag</td>
</tr>
<tr>
<td><samp>ul.blue ol li.blue</samp></td>
<td style="text-align:right">0.0.2.3</td>
<td>class + class . tag + tag + tag</td>
</tr>
<tr>
<td><samp>li.orange.orange.level</samp></td>
<td style="text-align:right">0.0.3.1</td>
<td>class + class + class . tag</td>
</tr>
<tr>
<td><samp>#my-id</samp></td>
<td style="text-align:right">0.1.0.0</td>
<td>id . .</td>
</tr>
<tr>
<td><samp>#my-id.teal</samp></td>
<td style="text-align:right">0.1.1.0</td>
<td>id . class</td>
</tr>
<tr>
<td><samp>#my-id.teal</samp></td>
<td style="text-align:right">1.1.0.0</td>
<td><strong>inline</strong> . id .</td>
</tr>
</tbody>
</table>
<p><a href="http://codepen.io/Haeresis/pen/oLzdaR">Voir des exemples Live</a></p>
<p>Et si le mot clé <samp>!important</samp> est ajouté à la fin de n&#39;importe quelle valeur de propriété elle passe devant toute autre. Soyez prudent en l&#39;utilisant (<a href="http://codepen.io/Haeresis/pen/JYRLgr">voici un cas d&#39;utilisation justifié</a>).</p>
<p>Vous pouvez <a href="https://specificity.keegan.st/">voir la spécificiter des sélecteurs grace à cet outil</a>.</p>
<h3 id="deux-approches-d-utilisation-du-css">Deux approches d&#39;utilisation du CSS</h3>
<p>Il y a deux façons d&#39;appliquer des styles CSS sur du HTML. La manière CSS-Driven ou piloté par la feuille de style ou la manière HTML-Driven ou piloté par les Classes dans les balises HTML.</p>
<p><strong>CSS-Driven</strong></p>
<p>Nous avons une structure HTML figée. Nous nommons tous les éléments de notre structure</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;section class=&quot;&lt;name-of-component&gt; ui&quot;&gt;
    &lt;div class=&quot;&lt;name-of-component&gt;--inner&quot;&gt;
        &lt;div class=&quot;&lt;name-of-component&gt;--text&quot;&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/section&gt;
</code></pre>
<p>pour pouvoir y faire référence depuis la feuille CSS. C&#39;est une approche type BEM.</p>
<pre class="prettyprint linenums"><code class="lang-css">.&lt;name-of-component&gt;--inner {
    font-weight: bold;
}
</code></pre>
<p>Nous venons d&#39;habiller une partie HTML.</p>
<p><strong>HTML-Driven</strong></p>
<p>Nous avons une feuille CSS figée. Nous nommons nos règles de manière à créer des Patrons de conception (Class Pattern)</p>
<pre class="prettyprint linenums"><code class="lang-css">.bold {
    font-weight: bold;
}
</code></pre>
<p>de manière à pouvoir les appliquer comme on le souhaite sur une structure HTML éditable.</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;p class=&quot;bold&quot;&gt;Lorem ipsum&lt;/p&gt;
</code></pre>
<p>Nous avons créer le Patron de conception <samp>.bold</samp>.</p>
<h4 id="comment-appliquer-chaque-approche-">Comment appliquer chaque approche ?</h4>
<p>Le plus important est de ne jamais enfermer les composants HTML dans des « Pattern emprisonnant » car vous ne pourrez pas l&#39;habiller avec du sens dans un autre contexte.</p>
<p>D&#39;un autre côté, parceque les Content Fillers ne doivent jamais toucher au fichier CSS, il est important de leur créer des Patrons de conception pour le contenu. Sachez que via des balises <samp>&lt;style&gt;</samp> ou attribut <samp>style</samp> il est tout à fait acceptable qu&#39;un Content Filler altère de l&#39;affichage <strong>dans une zone de contenu</strong>.</p>
<p>Pour finir, pour les Gabarits de page, les deux approches sont envisageable, cela dépend se si votre système gère plus facilement le changement de Gabarit (Layout) ou le changement de CSS si vous souhaitez utiliser différentes grilles.</p>
<h3 id="less-stylus-vous-aide-utiliser-bootstrap">Less/Stylus vous aide à utiliser Bootstrap</h3>
<p>Votre meilleur ami pour la maintenance des feuilles CSS et pour garder votre HTML le plus clair possible est <a href="http://lesscss.org/">Less</a> ou encore <a href="http://stylus-lang.com/">Stylus</a>.</p>
<p>Il est possible de manager les deux avec <a href="https://www.npmjs.com/package/node-atlas">NodeAtlas</a> avec ses simples <samp>webconfig.json</samp></p>
<pre class="prettyprint linenums"><code>{
    &quot;enableLess&quot;: true,
    &quot;assetsRelativePath&quot;: &quot;/&quot;
}
</code></pre><p>ou</p>
<pre class="prettyprint linenums"><code>{
    &quot;enableStylus&quot;: true,
    &quot;assetsRelativePath&quot;: &quot;/&quot;
}
</code></pre><p>placés à la racine de votre dossier de site. Et avec la commande CLI <samp>nodeatlas --browse</samp>.</p>
<h4 id="exemple-de-less-pour-les-gabarits-composants-et-contenus">Exemple de Less pour les Gabarits, Composants et Contenus</h4>
<p>Dans le but d&#39;habiller le HTML suivant :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;section class=&quot;follow-me ui &lt;!-- Variation Class --&gt;&quot;&gt;
    &lt;div class=&quot;follow-me--inner&quot;&gt;
        &lt;div class=&quot;follow-me--image&quot;&gt;
            &lt;!-- Content Image --&gt;
        &lt;/div&gt;
        &lt;div class=&quot;follow-me--text&quot;&gt;
            &lt;!-- Content Text --&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/section&gt;
</code></pre>
<p>vous pourrez utiliser l&#39;implémentation Less suivante dans le fichier <samp>component.follow-me.less</samp> :</p>
<pre class="prettyprint linenums"><code class="lang-less">/* Import Bootstrap Class Pattern. */
@import (reference) &#39;bootstrap/bootstrap.less&#39;;

/* Import your own Class Pattern. */
@import (reference) &#39;common.less&#39;;

/* Name your Component. */
@componentName: e(&#39;.follow-me&#39;);

/* Outer Wrapper Design. */
@{componentName} {

    /* Initial State. */
    display: none;

    /* Opened State. */
    &amp;.is-opened {
        display: block;
    }

    /* Clickable State. */
    &amp;.is-closable {
        cursor: pointer;
    }

    /* ... */

    /* Overload of Class Pattern for this Component. */
    .arrowed {
        /* ... */
        span {
            /* ... */
        }
    }
    .gap {
        /* ... */
    }

    /* Inner Wrapper Design. */
    &amp;--inner {
        /* ... */
    }

    /* Subcomponent Design. */

    &amp;--image {
        .make-md-col(4);
        /* ... */
    }

    &amp;--text {
        .make-md-col(8);
        /* ... */
    }

    &amp;--close,
    /* Custom Component Class Pattern usable into Content part. */
    .close {
        /* ... */
    }

    /* Variation of this Component. */
    &amp;.as-v1 {
        @{componentName}--inner {
            background-color: #da5daf;
        }
        @{componentName}--text {
            border: 1px solid #85214d;
        }
        /* ... */
    }
    &amp;.as-v2 {
        @{componentName}--inner {
            background-color: #80a837;
        }
        @{componentName}--text {
            border: 1px solid #3e6618;
        }
        /* ... */
    }
    &amp;.as-v3 {
        @{componentName}--inner {
            background-color: #ed9364;
        }
        @{componentName}--text {
            border: 1px solid #d6401c;
        }
        /* ... */
    }
}
</code></pre>
<p>et avec ce fichier <samp>common.less</samp> par exemple</p>
<pre class="prettyprint linenums"><code class="lang-less">/* Same design on all browser. */
@import &#39;helpers/normalize.less&#39;;

/* Use icones. */
@import &#39;font-awesome/font-awesome-regular.less&#39;;

/* Bootstrap Lib. */
@import (reference) &#39;bootstrap/bootstrap.less&#39;;

/* Font Awesome Lib. */
@import (reference) &#39;font-awesome/font-awesome.less&#39;;

/* Use more Font. */
@import (css) &#39;https://fonts.googleapis.com/css?family=Muli&#39;;

/* Just import Bootstrap Class Pattern you needed. */
.text-center {
    .text-center;
}
.text-left {
    .text-left;
}
.text-right {
    .text-right;
}
.img-responsive {
    .img-responsive;
    display: inline-block;
}

/* Your own Class Pattern for Content. */
.arrowed {
    /* ... */
    span {
        /* ... */
    }
}
.gap {
    /* ... */
}

/* Your Layout Implementation */
.products {
    &amp;.for-overview {
        .make-sm-col(8);
    }
    &amp;.for-aside {
        .make-sm-col(4);
    }
}

/* ... */
</code></pre>
<h3 id="inclusion-par-r-f-rence">Inclusion par Référence</h3>
<p>Pour Less, si vous importez en utilisant <samp>@import (reference)</samp> au lieu de simplement utiliser <samp>@import</samp> vous génèrerez dans le fichier de sortie uniquement le fragment de CSS souhaité en provenance de votre liste de Patron de conception. Par exemple avec la librairie Bootsrtap, vous pouvez importer tous les Patrons <samp>col-XX-YY</samp> par exemple. <a href="https://blog.lesieur.name/bootstrap-lisibilite-proprete-performance-optimisation-c-est-possible/">Cela peut grandement alléger vos feuilles CSS</a>.</p>
<h3 id="la-sp-cificit-d-un-s-lecteur-ne-doit-pas-tre-trop-lourde">La spécificité d&#39;un sélecteur ne doit pas être trop lourde</h3>
<h4 id="s-lectionner-directement-la-cible">Sélectionner directement la cible</h4>
<p>Vous devez accéder à un élément par sa classe :</p>
<pre class="prettyprint linenums"><code class="lang-less">@{componentName} {
    &amp;--others--item {
        /* Apply style */
    }
}
// CSS
// .article--others--item { /* Apply style */ }
</code></pre>
<h4 id="s-lectionner-un-seul-l-ment-sans-classe-par-s-lecteur">Sélectionner un seul élément sans classe par sélecteur</h4>
<p>Il est possible qu&#39;il y ai des éléments sans classes dans les Composants ou Sous-composants. Il devrait être permi de ne faire référence qu&#39;à un, et un seul élément.</p>
<p>Ceci est autorisé</p>
<pre class="prettyprint linenums"><code class="lang-less">@{componentName} {
    &amp;--others--item {
        a {
            /* Apply style */
        }
        span {
            /* Apply style */
        }
    }
}
// CSS
// .article--others--item a { /* Apply style */ }
// .article--others--item span { /* Apply style */ }
</code></pre>
<p>mais ceci n&#39;est PAS autorisé...</p>
<pre class="prettyprint linenums"><code class="lang-less">@{componentName} {
    &amp;--others--item {
        a {
            /* Apply style */
            span {
                /* Apply style */
            }
        }
    }
}
// CSS
// .article--others--item a { /* Apply style */ }
// .article--others--item a span { /* Apply style */ } // Too specified selector.
</code></pre>
<p>C&#39;est mal. Vous devez ajouter dans ce cas des classes sur vos éléments pour directement pouvoir intéragir avec eux.</p>
<pre class="prettyprint linenums"><code class="lang-less">@{componentName} {
    &amp;--others--item--span {
        /* Apply style */
    }
}
// CSS
// .article--others--item--span { /* Apply style */ }
</code></pre>
<p>ou (un élément sans classe autorisé)</p>
<pre class="prettyprint linenums"><code class="lang-less">@{componentName} {
    &amp;--others--item {
        span {
            /* Apply style */
        }
    }
}
// CSS
// .article--others--item--link span { /* Apply style */ }
</code></pre>
<h4 id="ajouter-des-variations-de-classe-pour-changer-le-design">Ajouter des Variations de classe pour changer le design</h4>
<p>Vous pouvez améliorer la précision de la sélection en utilisant une Variation de classe.</p>
<p>Sur un Composant</p>
<pre class="prettyprint linenums"><code class="lang-less">@{componentName} {
    &amp;.is-opened {
        /* Apply style */
    }
}
// CSS
// .article.is-opened { /* Apply style */ }
</code></pre>
<p>ou un Sous-Composant</p>
<pre class="prettyprint linenums"><code class="lang-less">.is-opened {
    @{componentName}--others--item--link  {
        span {
            /* Apply style */
        }
    }
}
// CSS
// .is-opened .article--others--item--link span { /* Apply style */ }
</code></pre>
<p><em>Note : Le code ci-dessous produit la même sortie que celui au dessus.</em></p>
<pre class="prettyprint linenums"><code class="lang-less">.is-opened {
    @{componentName} {
        &amp;--others
            &amp;--item
                &amp;--link {
                    span {
                        /* Apply style */
                    }
                }
            }
        }
    }
}
// CSS
// .is-opened .article--others--item--link span { /* Apply style */ }
</code></pre>
<p><em>La règle est la suivante : écrire en une seule ligne les composantes du sélecteur si il n&#39;y a aucun sous-élément voisin utilisant le même chemin à référencer, sinon créer un nouveau sous bloque comme ci-dessous</em></p>
<pre class="prettyprint linenums"><code class="lang-less">.is-opened {
    @{componentName}--others--item {
        &amp;--image  {
            /* A new sibling Subcomponent */
        }
        &amp;--link  {
            span {
                /* Apply style */
            }
        }
    }
}
// CSS
// .is-opened .article--others--item--image { /* A new sibling Subcomponent */ }
// .is-opened .article--others--item--link span { /* Apply style */ }
</code></pre>
<h2 id="r-le-et-utilisation-du-js">Rôle et Utilisation du JS</h2>
<p>Dans le but de produire du code performant et maintenable, vous devriez passer à travers un outil comme JSLint et obtenir une sortie sans erreur. Si vous utilisez Sublim Text, vous pouvez installer <a href="https://github.com/devdoc/SublimeLinter-jslint">SublimeLinter-contrib-jslint</a> pour éviter toute mauvaise pratique.</p>
<h3 id="r-gles-et-patterns">Règles et Patterns</h3>
<h4 id="-viter-la-surchauffe-de-cerveau-brain-overload-">Éviter la surchauffe de cerveau (Brain Overload)</h4>
<p>Pour commencer, observer autant que possible les règles suivantes :</p>
<ul>
<li>Un fichier ne doit pas dépasser les 1000 lignes (commentaires inclus).</li>
<li>Une fonction ne doit pas dépasser les 100 lignes (commentaires inclus).</li>
<li>La complexité d&#39;une fonction ne doit pas dépasser 10 <a href="http://jshint.com/">Tester la Complexité</a>.</li>
<li>Il ne doit pas y avoir plus de 3 niveaux de if/else/swich/try/etc. sans qu&#39;on ai recours à une fonction.</li>
</ul>
<h4 id="d-clarer-tout-ce-que-vous-utilisez-dans-la-page-et-son-usage">Déclarer tout ce que vous utilisez dans la page, et son usage</h4>
<p>Dans tous les fichiers JavaScript Client, toutes les variables doivent être explicitement déclarée, même si vous savez que l&#39;exécuteur JavaScript connait cette valeur par défaut ou qu&#39;un autre fichier l&#39;a déjà défini. Il est important de savoir ce qui va être utilisé à travers le fichier et de permettre le plus possible de pouvoir vous passer d&#39;un ordre précis dans l&#39;exécution des fichiers.</p>
<p><strong>Exemple</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">/* jslint browser: true */
/* global $ */

// Define your usage of global object.
var website = website || {},

    // Define your usage of `jQuery window` shortcut for this file.
    $window = $window || $(window);

// Define your usage of `website.component` namespace.
website.components = website.components || {};
</code></pre>
<p>Observez que seulement un <samp>var</samp> est déclaré au sommet de chaque fonction, pas plus. Si vous définissez vos variables dans le Champ lexical globale (Global Scope), attachez les à <samp>window</samp> ou définissez les dans le <samp>var</samp> global de votre fichier.</p>
<p>Le Namespace global <samp>website</samp> va contenir tout le code JavaScript de votre site web. N&#39;hésitez pas à utiliser <samp>app</samp> ou encore <samp>application</samp> si c&#39;est une application web et non pas une simple page.</p>
<h4 id="utiliser-des-closure-pour-garder-le-champ-lexical-global-propre">Utiliser des Closure pour garder le champ lexical global propre</h4>
<p>Le code ci-dessus est défini dans le Champ lexical global. Si vous écrivez du code dans un fichier, n&#39;écrivez jamais directement dans le Champ lexical global. Il y a deux manière de garder le Champ lexical global propre.</p>
<h5 id="avec-une-closure-statique-anonyme">Avec une Closure Statique Anonyme</h5>
<p>Si le code n&#39;a pas besoin d&#39;être instancié, faites juste comme ci-après. C&#39;est le cas des controllers comme <samp>common.js</samp>.</p>
<pre class="prettyprint linenums"><code class="lang-js">// Create a closure to scope all variables or function invisible from global scope.
(function () {
    &quot;use strict&quot;;

    var iAmAPrivateVariable_ForPublicExpositon = &quot;&quot;,
        iAmAPrivateVariable = &quot;&quot;;

    // No accessible in global scope.
    iAmAPrivateVariable = &quot;i am only accessible in this closure&quot;;

    // Accessible to global scope with `website.iAmAPublicVariable`.
    website.iAmAPublicVariable = iAmAPrivateVariable_ForPublicExpositon;
}());
</code></pre>
<p>ou exposé votre variable publique quand vous créer la Closure (ici <samp>website</samp> est publique et <samp>publics</samp> n&#39;est accessible que dans la closure).</p>
<pre class="prettyprint linenums"><code class="lang-js">// Pass an alias of `website` named `publics` only in this closure.
(function (publics) {
    &quot;use strict&quot;;

    var privates = {};

    // Private Example
    privates.addClassIsLoaded = function (view) {
        view.classList.add(&quot;is-loaded&quot;);
    }

    // Public Example
    publics.loadComponents = function () {
        /* See this part later */
    };

}(website));
</code></pre>
<h5 id="avec-new-class">Avec new Class</h5>
<p>S&#39;il est important que le code puisse être instancié en fonction d&#39;un contexte donné, créer une Classe est le mieux. Pour ne pas polluer le Champ lexical global, attachez la Class à un Namespace comme <samp>website.components</samp>.</p>
<pre class="prettyprint linenums"><code class="lang-js">window.website = window.website || {};
website.components = website.components || {};

// Create a Class for define JavaScript behavior of `&lt;div class=&quot;lightbox&quot;&gt;&lt;/div&gt;`.
website.components.Lightbox = function callee(selector) {
    &quot;use strict&quot;;

    // Create private namespace for instanciable function (publics)
    // and inner function (privates).
    var publics = this,
        statics = callee.prototype,
        privates = {};

    // Count number of instance for Lightbox.
    statics.nbrOfInstance = (statics.nbrOfInstance) ? statics.nbrOfInstance + 1 : 1;
    callee.nbrOfInstance = statics.nbrOfInstance;

    // Define the selector by default for the HTML view of this Class.
    publics.selector = selector || &quot;.information&quot;;

    // Define all stuff to manage lightbox.
    privates.openLightbox = function () { /* ... */ };
    privates.moveLightbox = function () { /* ... */ };
    privates.closeLightbox = function () { /* ... */ };

    // Define a function to launch all mandatory behavior when a HTML view is parsed.
    publics.init = function () {

        // Set all function you want use to initialization.
        privates.openLightbox();
        privates.moveLightbox();
        privates.closeLightbox();
    };
};
website.components.Lightbox.nbrOfInstance = 0;
</code></pre>
<p>Et initialisez tous les <samp>&lt;div class=&quot;lightbox&quot;&gt;&lt;/div&gt;</samp></p>
<pre class="prettyprint linenums"><code class="lang-js">var Lightbox = website.components.Lightbox;
(new Lightbox()).init();
</code></pre>
<p>ou initialisez tous les <samp>&lt;div class=&quot;popup&quot;&gt;&lt;/div&gt;</samp></p>
<pre class="prettyprint linenums"><code class="lang-js">var Lightbox = website.components.Lightbox;
(new Lightbox(&quot;.popup&quot;)).init();
</code></pre>
<p>ou initialisez <samp>&lt;div class=&quot;ads&quot;&gt;&lt;/div&gt;</samp></p>
<pre class="prettyprint linenums"><code class="lang-js">var Lightbox = website.components.Lightbox,
    lightbox = new Lightbox();
lightbox.selector = &quot;ads&quot;;
lightbox.init();
</code></pre>
<p>ou comptez le nombre d&#39;instance avec</p>
<pre class="prettyprint linenums"><code class="lang-js">var Lightbox = website.components.Lightbox,
    lightbox = new Lightbox();
Lightbox.nbrOfInstance; // 4
lightbox.nbrOfInstance; // 4
</code></pre>
<p>ou créer une fonction tierce...</p>
<pre class="prettyprint linenums"><code class="lang-js">// This code is a focus on `website.loadComponents()` defined above.
publics.loadComponents = function () {
    var i, currentComponent, currentViews;

    // Loop on all components
    for (i in website.components) {

        // Never forgot to use `hasOwnProperty` to not display other thing that personal object key.
        if (website.components.hasOwnProperty(i)) {

            // Work on current Component.
            currentComponent = new website.components[i]();

            // Obtain all `&lt;div class=&quot;&lt;currentComponent.selector&gt;&quot;&gt;&lt;/div&gt;`
            currentViews = document.querySelectorAll(currentComponent.selector + &quot;:not(.is-opened)&quot;);
            if (currentViews.length &gt; 0) {

                // Initialize Component.
                allComponentsInstance.push(currentComponent.init());

                // Tag this component as already initialize.
                [].forEach.call(currentViews, addClassIsLoaded); // see before for &quot;addClassIsLoaded&quot; definition.
            }
        }
    }
};
</code></pre>
<p>...pour charger tous les composants que vous avez créer de cette manière :</p>
<pre class="prettyprint linenums"><code>website.loadComponents();
</code></pre><p>Et si plutard, vous souhaitez ajouter <samp>&lt;div class=&quot;lightbox&quot;&gt;&lt;/div&gt;</samp> au DOM par XMLHttpRequest (Ajax), vous serez capable d&#39;appliquer le JavaScript suivant :</p>
<pre class="prettyprint linenums"><code class="lang-js">var Lightbox = website.components.Lightbox;
(new Lightbox(&quot;.information:not(.is-loaded)&quot;)).init();
</code></pre>
<p>et de charger dès lors tous les composants (non déjà chargé) avec :</p>
<pre class="prettyprint linenums"><code class="lang-js">website.loadComponents();
</code></pre>
<h4 id="use-strict">Use Strict</h4>
<p>Le Champ lexical global (Global Scope) est une zone sauvage ou toutes les variables vont entrer en conflit ainsi la moindre chose décraré dans un Champ lexical dédié (Closure) est une bonne chose. C&#39;est le but des fonctions anonyme comme :</p>
<pre class="prettyprint linenums"><code class="lang-js">(function () {
    &quot;use strict&quot;;

    // ...
}())
</code></pre>
<p>mais pourquoi utiliser le « strict mode » avec <samp>&quot;use strict&quot;;</samp> ?</p>
<p>Les exécuteurs JavaScript acceptent toute sorte de manière d&#39;écrire du JavaScript ainsi que du code qui n&#39;a pas été standardisé, du code déprécié ou du code non optimisé dans le but de supporter du code JavaScript ancien. Pour ne pas permettre à l&#39;exécuteur de faire tourner du vieux code étrange et de lever une Exception pour aider au développement, il faut ajouter <samp>&quot;use strict&quot;;</samp> et toutes les variables dans le champ lexical courant (le contexte d&#39;exécution courant) ainsi que les contextes enfants vont lever une Exception si le code ne respecte pas les standards. C&#39;est une bonne pratique de nos jours, ne l&#39;oubliez pas pour ne pas exécuter du code démoniaque !</p>
<p><em>Note : vous pouvez aussi l&#39;utiliser dans une fonction nommée ou à instancier ainsi que dans le champ lexical global si vous le souhaitez.</em></p>
<h4 id="plus-de-r-gle-javascript">Plus de règle JavaScript</h4>
<p>Pour respecter toutes les règles, suivez ces règles : <a href="http://nemo.sonarqube.org/coding_rules#languages=js">Quality JavaScript Rules</a></p>
<h3 id="changement-d-tat-des-l-ments">Changement d&#39;État des Éléments</h3>
<p>Si vous souhaitez changer l&#39;état d&#39;un élément, vous pouvez le faire en suivant les étapes suivantes :</p>
<h4 id="standard">Standard</h4>
<ul>
<li>Créer une classe <samp>.is-*</samp> avec tout le changement de design associé dans votre fichier CSS (ou Less/Stylus).</li>
<li>Ajouter la classe <samp>is-*</samp> ou retirez là de l&#39;élément en question pour changer son état.</li>
<li>Vérifier l&#39;existance de <samp>is-*</samp> pour savoir dans quel état est actuellement l&#39;élément.</li>
</ul>
<h4 id="avec-animation">Avec Animation</h4>
<ul>
<li>Utiliser avant la classe <samp>is-*</samp> une classe <samp>to-*</samp> pour démarrer l&#39;animation de transition entre deux états.</li>
<li>Utiliser après la classe <samp>is-*</samp> une classe <samp>from-*</samp> s&#39;il existe une transition de retour à l&#39;état précédent.</li>
<li>Utiliser les propriétés CSS3 keyframe, animation, transform, etc. pour créer des animations sur des éléments dont les paramètres sont statics. Utiliser une librairie d&#39;animation si les valeurs sont variables en fonction du contexte.</li>
</ul>
<h4 id="exemple">Exemple</h4>
<p>Trouvez dans cet exemple comment permettre un changement d&#39;état animé : <a href="http://codepen.io/Haeresis/pen/OyoOEV">Change Element State</a>.</p>
<h3 id="validation-de-formulaire">Validation de Formulaire</h3>
<p>Pour valider un formulaire il n&#39;est pas nécéssaire d&#39;écrire une seule ligne de JavaScript dans la majorité des cas. Utilisez juste ses trois fichiers :</p>
<ul>
<li><a href="http://jquery.com/">jQuery</a> <a href="//code.jquery.com/jquery-2.1.4.min.js">//code.jquery.com/jquery-2.1.4.min.js</a> (Utilisez comme une librairie pour wrapper élément Nodes dans le DOM).</li>
<li><a href="http://jqueryvalidation.org/">jQuery Validation Plugin</a> <a href="//cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.14.0/jquery.validate.min.js">//cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.14.0/jquery.validate.min.js</a> (Applique différentes règles pré-définies sur les champs souhaités)</li>
<li><a href="https://www.nuget.org/packages/jQuery.Validation.Unobtrusive/">jQuery Validation Unobstrusive Plugin</a> <a href="//ajax.aspnetcdn.com/ajax/mvc/5.2.3/jquery.validate.unobtrusive.min.js">//ajax.aspnetcdn.com/ajax/mvc/5.2.3/jquery.validate.unobtrusive.min.js</a> (Applique automatiquement les règles en ciblant les éléments avec l&#39;attribut <samp>data-*</samp>).</li>
</ul>
<p><em>Note: ce couple de fichier fonctionne ensemble mais si vous utilisez la dernière version pour l&#39;un, en cas de problème, utilisez la dernière version pour les deux autres.</em></p>
<p>Vous trouverez ici un cas d&#39;usage complet de l&#39;utilisation de chaque champ : <a href="http://codepen.io/Haeresis/pen/AzJgF/">Exemple d&#39;utilisation avec chaque champ</a></p>
<p>Et si un champ est injecté plus tard dans le DOM, <strong>après</strong> l&#39;inclusion du fichier unobstrusive, utilisez <samp>$.validator.unobtrusive.parse(&lt;selectorForm&gt;);</samp> pour faire fonctionner les nouveaux formulaires/champs avec unobstrusive.</p>
<p>Si une validation est plus complexe, vous pouvez trouver <a href="http://jqueryvalidation.org/documentation/">la documentation de jQuery Validate ici</a> ou vous tourner vers un Data Binder comme <a href="https://angularjs.org/">Angular</a>.</p>
<h3 id="-tendre-une-classe">Étendre une Classe</h3>
<p>Quand vous souhaitez étendre une classe depuis une autre (héritage), vous devez en plus d&#39;étendre la classe, bien penser a étendre les fonctions de son prototype. Si une classe doit hériter de plusieurs classe, alors ce que vous souhaitez est une interface (voir plus loin).</p>
<p>Quand votre classe est un model pour une vue HTML, ajoutez la dans <samp>website.components</samp> mais si c&#39;est purement une classe de model de donnée, ajoutez là dans <samp>website.models</samp>.</p>
<p>Essayons donc d&#39;étendre cette classe par celle-ci :</p>
<p><strong>Class Person</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">/* jslint browser: true */

window.website = window.website || {};
website.models = website.models || {};

website.models.Person = function (firstname, lastname) {
    this.firstname = firstname || &quot;No firstname&quot;;
    this.lastname = lastname || &quot;No lastname&quot;;
};
website.models.Person.prototype.age = &quot;No age&quot;;
</code></pre>
<p><strong>Class User</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">/* jslint browser: true */

window.website = window.website || {};
website.models = website.models || {};

website.models.User = function (id, password, firstname, lastname) {
    website.models.Person.call(this, firstname, lastname);

    this.id = id;
    this.password = password;
};
website.models.User.prototype = Object.create(website.models.Person.prototype);
website.models.User.prototype.constructor = website.models.User;
</code></pre>
<p><strong>Controller</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">/* jslint browser: true */

window.website = window.website || {};
website.models = website.models || {};

(function () {
    var user = new website.models.User(&quot;Haeresis&quot;, &quot;myPassword&quot;);
    user.age = 18;

    user.id; // &quot;Haeresis&quot;
    user.password; // &quot;myPassword&quot;
    user.firstname; // &quot;No firstname&quot;
    user.lastname; // &quot;No lastname&quot;
    user.age; // 18
}());
</code></pre>
<h3 id="implementer-un-mixin">Implementer un Mixin</h3>
<p>Quand une fonction est utilisable par plus d&#39;une fonction anonyme, n&#39;hésitez pas à la placer dans le namespace <samp>website</samp> comme <samp>loadComponents</samp> dans l&#39;exemple précédent.</p>
<p>Mais quand une fonction est partagée par plus d&#39;une classe, vous pouvez créer cette fonction dans des interfaces ou mixins et l&#39;implémenter dans les différentes classes. Un mixin est comme une classe mais son usage est uniquement d&#39;étendre une classe, jamais d&#39;être instanciée elle-même.</p>
<p>Ainsi nous pouvons implémenter ces deux mixins dans cette classe.</p>
<p><strong>Interface Age</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">/* jslint browser: true */

var website = window.website || {};
website.mixins = website.mixins || {};

website.mixins.Age = function () {
    this.age = &quot;18&quot;;
};
</code></pre>
<p><strong>Interface Firstname</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">/* jslint browser: true */

window.website = window.website || {};
website.mixins = website.mixins || {};

website.mixins.Firstname = function () {
    this.firstname = &quot;Bruno&quot;;
};
</code></pre>
<p><strong>Class Person</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">/* jslint browser: true */

window.website = window.website || {};
website.models = website.models || {};
website.mixins = website.mixins || {};

website.classes.Person = function () {
    website.mixins.Firstname.call(this);
    website.mixins.Age.call(this);

    var publics = this;

    publics.lastname = &quot;Lesieur&quot;;
};
</code></pre>
<p><em>Note : si un même nom de propriété ou de fonction existe entre deux interfaces, c&#39;est la dernière interface chargée qui remporte le conflit !</em></p>
<p><strong>Controller</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">window.website = window.website || {};
website.models = website.models || {};

(function () {
    var person = new website.models.Person();

    person.lastname; // &quot;Lesieur&quot;
    person.firstname; // &quot;Bruno&quot;
    person.age; // 18
}());
</code></pre>
<h3 id="travailler-sans-namespace">Travailler sans Namespace</h3>
<p>Si nous attachons tout dans le namespace <samp>website</samp> c&#39;est pour ne pas entrer en conflit avec des classes déjà existantes. Le pattern pour éviter les conflits est d&#39;exposer une méthode <samp>noConflict()</samp> dans la classe directement définie dans le scope <samp>global</samp>.</p>
<p>Voir plus bas:</p>
<pre class="prettyprint linenums"><code class="lang-js">(function (factory) {
    var initialClass = window.MyClass,
        api = window.MyClass = factory;
    api.noConflict = function () {
        window.MyClass = initialClass;
        return api;
    };
}(function () {
    // Standard definition of class here.
}));
</code></pre>
<p>et si la classe globale <samp>MyClass</samp> existe déjà, utilisez un nouveau nom de classe avec la méthode <samp>noConflict()</samp> pour restaurer l&#39;objet <samp>MyClass</samp> d&#39;origine.</p>
<pre class="prettyprint linenums"><code class="lang-js">var MyClass2 = MyClass.noConflict();
</code></pre>
<h3 id="classe-pour-environnement-multiple">Classe pour environnement Multiple</h3>
<p>Dans le but de permettre à la classe <samp>MyClass</samp> de fonctionner aussi bien avec Vanilla JS, un loader de module JS ou Node.js, créez une <samp>factory</samp> comme ci-après.</p>
<pre class="prettyprint linenums"><code class="lang-js">(function (root, factory) {
    var root.MyClass = factory;
    if (typeof define === &quot;function&quot; &amp;&amp; define.amd) {
        define(function () {
            return factory;
        });
    }
    if (typeof module === &quot;object&quot; &amp;&amp; module.exports) {
        module.exports = factory;
    }
}(this, function () {
    // Normal definition of class here.
}));
</code></pre>
<h3 id="autres-comportements">Autres Comportements</h3>
<h4 id="getter-setter-et-cha-nage">Getter, Setter et Chaînage</h4>
<p>Un pattern de chaînage (populaire en jQuery par exemple), consiste à fournir une référence aux propriétés privées d&#39;une classe instanciée depuis l’extérieur. La méthode utilisée renvoi la valeur souhaitée en mode Getter et permet de la modifier en mode Setter. En mode Setter, l&#39;objet alors retourné n&#39;est pas la valeur mais l&#39;objet instancié pour permettre « le chaînage ».</p>
<p><strong>Class</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">window.website = window.website || {};
website.models = website.models || {};

website.models.Person = function (firstname, lastname) {
    var publics = this,
        privates = {};

    privates.firstname = (firstname) ? publics.firstname(firstname) : &quot;No firstname&quot;;
    privates.lastname = (lastname) ? publics.lastname(lastname) : &quot;No lastname&quot;;

    publics.firstname = function (firstname) {
        if (typeof firstname === &quot;undefined&quot;) {
            return privates.firstname;
        } else {
            privates.firstname = firstname;
            return publics;
        }
    };

    publics.lastname = function (lastname) {
        if (typeof lastname === &quot;undefined&quot;) {
            return privates.lastname;
        } else {
            privates.lastname = lastname;
            return publics;
        }
    };
};
</code></pre>
<p><strong>Controller</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">window.website = window.website || {};
website.models = website.models || {};

(function () {
    var person = (new website.models.Person())
        .firstname(&quot;Bruno&quot;)
        .lastname(&quot;Lesieur&quot;);

    console.log(person.firstname()); // &quot;Bruno&quot;
    console.log(person.lastname()); // &quot;Lesieur&quot;
}());
</code></pre>
<h4 id="forcer-le-contexte-d-ex-cution">Forcer le contexte d&#39;exécution</h4>
<p>Vous pouvez forcer une classe a ne jamais permettre un autre contexte d&#39;exécution que le sien d&#39;être utilisé. Cela vous permet de ne pas utiliser le mot clé <samp>new</samp> depuis un appel extérieur.</p>
<p><strong>Class</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">var website = window.website || {};
website.models = website.models || {};

website.models.Person = function callee(firstname, lastname) {
    if (!(this instanceof callee)) {
        return new callee();
    }

    this.firstname = firstname || &quot;No firstname&quot;;
    this.lastname = lastname || &quot;No lastname&quot;;
};
</code></pre>
<p><strong>Controller</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">var website = window.website || {};
website.models = website.models || {};

(function () {
    (new website.models.Person() instanceof website.models.Person); // true
    (website.models.Person() instanceof website.models.Person); // true
}());
</code></pre>
<h3 id="g-rer-les-erreurs">Gérer les erreurs</h3>
<p>Il y a 3 manières de proprement lever les erreurs, pour un code synchrone, un code asynchrone ou un événement : <a href="https://blog.lesieur.name/gerer-les-erreurs-et-les-exceptions-en-javascript/">voir par ici</a>.</p>
<h3 id="documentation">Documentation</h3>
<p>De manière à documenter votre code, utilisez le <a href="https://www.npmjs.com/package/jsdoc">JSDoc npm CLI</a>. Vous trouverez tout <a href="http://usejsdoc.org/">ce qu&#39;il vous faut pour la documentation ici</a>.</p>
<ul>
<li><a href="https://www.lesieur.name/test-case-atlas/">Un exemple avec ce faux site Munchkin</a> et <a href="https://github.com/Haeresis/TestCaseAtlas">son code source</a>.</li>
</ul>
<p>Par exemple la page « <a href="https://www.lesieur.name/test-case-atlas/homepage.html">Home</a> » possède le composant « <a href="https://www.lesieur.name/test-case-atlas/components/hero.html">Hero</a> » qui est documenter <a href="https://www.lesieur.name/test-case-atlas/documentation/design/hero.html">pour le CSS</a> et <a href="https://www.lesieur.name/test-case-atlas/documentation/behaviors/module-munchkin-ws.ui.Hero.html">pour le JS</a>.</p>
<p><em>Première parution : le 08 Octobre 2015 à 17h48</em></p>
]]></description>
            <link>http://localhost:7776conventions-html-css-js-et-architecture-front-end/</link>
            <guid isPermaLink="false">5667eaecd1b7fe136fc2005a</guid>
            <category><![CDATA[HTML]]></category>
            <category><![CDATA[CSS3]]></category>
            <category><![CDATA[Ressources]]></category>
            <category><![CDATA[CSS]]></category>
            <category><![CDATA[Node.js]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[Less]]></category>
            <category><![CDATA[Spécifications]]></category>
            <category><![CDATA[Stylus]]></category>
            <category><![CDATA[HTML5]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Thu, 06 Oct 2016 10:48:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Version Mobile et Version Desktop : Ça n existe pas !]]></title>
            <description><![CDATA[<p>J&#39;entends tous les jours qu&#39;une « version mobile n&#39;est pas une option », sous entendu que l&#39;on souhaite créer une version de site pour mobile et une version de site pour desktop « en même temps » et derrière la même adresse. J&#39;entends aussi qu&#39;il serait bien de s&#39;occuper d&#39;une « version tablette » pendant qu&#39;on n&#39;y est !</p>
<p>Pour réaliser cela, quoi de mieux que l&#39;utilisation du <a href="https://blog.lesieur.name/les-concepts-autour-du-responsive-web-design/">Responsive Web Design</a> !</p>
<p>Jusque là tout va bien me direz-vous ? <strong>Pas du tout...</strong>. Une « Version Desktop », c&#39;est tactile ? Une « Version Mobile », ça a pas de bande passante ? Et bon sang, c&#39;est quoi une « Version Tablette » ?</p>
<p><img style="max-width: 100%;" src="media/images/upload/final.jpg" alt="Stop version desktop et mobile !"></p>

<p>Même si dans la théorie tout le monde croit se comprendre —avec des histoires de tailles—, je me sens contraint et forcer de faire du « Gloubi-boulga » quand j&#39;utilise les spécifications <del>imposées</del> proposées par un Client ou pire parfois... par un Professionnel. Et cela au lieu de faire ce qu&#39;on me demande en premier lieu, du <a href="https://blog.lesieur.name/les-concepts-autour-du-responsive-web-design/">Responsive Web Design</a>.</p>
<p>La simple évocation de « Mobile VS Desktop » est une preuve flagrante de l&#39;incompréhension total de la chose. De la même manière que certain pensant utiliser une méthode Agile s&#39;y prennent en réalité à <a href="http://www.la-rache.com/">La RACHE</a> ; il est intéressant de s&#39;assurer ici qu&#39;on ne confond pas tout.</p>
<h2 id="du-web-adapt-aux-p-riph-riques-c-est-quoi-">Du Web adapté aux périphériques, c&#39;est quoi ?</h2>
<p>Il serait temps d&#39;arrêter de parler de « Version Mobile », « Version Desktop », « Version Réfrigérateur », etc... et s’intéresser aux périphériques :</p>
<ul>
<li>avec Souris ou/<strong>et</strong> Gestion tactile,</li>
<li>à Bas débit ou/<strong>et</strong> Haut débit,</li>
<li>à affichage Portrait ou/<strong>et</strong> Paysage</li>
<li>à résolution Basse ou/<strong>et</strong> Haute.</li>
</ul>
<p>Car :</p>
<ul>
<li>Non, une fenêtre de navigateur rétrécie sur le côté <strong>N&#39;est Pas</strong> une « Version Mobile » à qui l&#39;on doit interdire les interactions de la souris.</li>
<li>Non, un smartphone sur le réseau Wifi <strong>N&#39;est Pas</strong> un périphérique à qui l&#39;on doit interdire « l&#39;auto-chargement » de vidéo.</li>
<li>Oui, <strong>un PC tactile ou une tablette avec clavier</strong> ça gère <strong>la souris et le tactile</strong>.</li>
<li>Oui, un <strong>smartphone sur le réseau Wifi</strong> a une <strong>excellente connexion</strong> alors qu&#39;un <strong>PC utilisant le partage de connexion</strong> d&#39;un smartphone sur un réseau Edge <strong>n&#39;en a pas</strong>.</li>
<li>Oui, un appareil qui se tient dans la/les main(s) peut <strong>être orienté</strong> et afficher <strong>la même page en largeur ou hauteur</strong>.</li>
<li>Oui, un <strong>zoom à 200%</strong> sur PC c&#39;est possible, et afficher <strong>un site sans viewport spécifique sur smartphone</strong>, ça l&#39;est aussi.</li>
<li>...</li>
</ul>
<p>C&#39;est parti pour vous présenter la liste non-exhaustive d&#39;implémentations qu&#39;on <del>m&#39;oblige à</del> <strong>me demande de</strong> faire et qui posent problème ainsi que des explications et exemples sur ce qu&#39;il faut alors conseiller.</p>
<h2 id="on-ne-fait-pas-">On ne fait pas...</h2>
<h3 id="-une-image-pour-la-version-desktop-et-une-image-pour-la-version-mobile-"><strong>Une image pour la version Desktop et une image pour la version Mobile</strong></h3>
<p><img src="media/images/upload/example-1.jpg" alt="Non"></p>
<blockquote>
<p><em><samp>NON et</samp></em> <strong>Non</strong>, il ne faut absolument pas que pour un contenu il existe plusieurs images avec des représentations différentes de celle-ci. En d&#39;autres termes, il ne doit pas y avoir deux fichiers différents pour représenter la même photo ou une partie de la photo initiale.</p>
<p><strong>Pourquoi ?</strong></p>
<ul>
<li>Il n&#39;est pas possible d&#39;adresser toutes les résolutions d&#39;écrans en faisant un switch « mobile / desktop » si votre image mobile n&#39;est pas assez large, d&#39;où l&#39;inutilité même de cette image.</li>
<li>Il y a deux requêtes et deux chargement d&#39;image même si l&#39;une des deux images n&#39;est pas affichée car une balise <samp>&lt;img&gt;</samp> fait automatiquement une requête au réseau. Même en utilisant une image de Background, une fenêtre mise sur le côté qui passerait ensuite en plein écran chargerait une seconde image.</li>
<li>Il y a plusieurs versions de la même image à gérer pour les pousseurs de contenus.</li>
</ul>
</blockquote>
<p><img src="media/images/upload/example-2.jpg" alt="Oui"></p>
<blockquote>
<p><strong><samp>OUI et</samp></strong> <strong>Oui,</strong> un même contenu peut posséder <strong>autant de version</strong> de lui-même dans des <strong>résolutions différentes</strong> avec un <strong>ratio identique</strong>.</p>
<p>C&#39;est ensuite, avec des règles CSS que l&#39;on affichera en fonction de la résolution les bonnes parties de l&#39;image.</p>
<p>En ce qui concerne la résolution de l&#39;image et son poids, on délivrera en fonction de la bande passante du réseau et de la résolution d&#39;écran des versions de l&#39;images de plus en plus lourde.</p>
</blockquote>
<h4 id="techniques">Techniques</h4>
<ul>
<li>Conservation du Ratio (CSS) : <a href="http://codepen.io/Haeresis/pen/NAgQoE">http://codepen.io/Haeresis/pen/NAgQoE</a></li>
<li>Hauteur fixe (CSS) : <a href="http://codepen.io/Haeresis/pen/qNjZGR">http://codepen.io/Haeresis/pen/qNjZGR</a></li>
<li>Chargement progressif (JS) : <a href="http://codepen.io/Haeresis/pen/GqvKEw">http://codepen.io/Haeresis/pen/GqvKEw</a></li>
</ul>
<h3 id="-un-survole-clique-souris-en-desktop-et-un-touch-en-mobile-"><strong>Un survole/clique souris en Desktop et un touché en Mobile</strong></h3>
<blockquote>
<p><em><samp>NON et</samp></em> <strong>Non</strong>, il faut arrêter de penser que seul les mobiles sont tactiles ! Il existe bien des ordinateurs et grande tablette tactile ou des périphériques de basse résolution qui ne le sont pas.</p>
<p>Il faut également penser qu&#39;on ne peut pas mettre une action importante au survol de la souris et une action importante au clique de la souris car elles se résumeront être la même action sur beaucoup d&#39;appareil tactile.</p>
</blockquote>
<p><img src="media/images/upload/example-3.jpg" alt="Piège"></p>
<blockquote>
<p><strong><samp>OUI et</samp></strong> <strong>Oui,</strong> on peut gérer la souris et le tactile pour tous les périphériques et de manière complémentaire quelque soit la résolution.</p>
<p>Si vous ne gérez pas vous-même les événements, vous pouvez associer </p>
<ul>
<li>un comportement au survole de la souris dont l&#39;action n&#39;est pas importante ou décorative (car il n&#39;est pas sûr que l&#39;appareil s&#39;en préoccupe si l&#39;action est effectuée avec le doigt) et</li>
<li>un comportement au <samp>click</samp> / <samp>tap</samp> qui sera l&#39;action réelle que vous souhaitez effectuer sur cet élément.</li>
</ul>
<p><strong>Cependant, si vous gérez vous-même ces événements</strong> à l&#39;aide de <samp>click</samp>, <samp>mouseenter</samp>, <samp>mouseout</samp>, <samp>touchstart</samp>, <samp>touchmove</samp> et <samp>touchend</samp> il est possible d&#39;associer un comportement au <samp>click</samp> / <samp>tap</samp> différent de celui du <samp>hover</samp> / <samp>swap</samp>. Dans ces cas là ce qu&#39;il faut se rappeler c&#39;est que :</p>
<ul>
<li>Chrome : cumule la gestion souris en plus du tactile quand vous touché.</li>
<li>Firefox, Edge/IE, Safari : simulent un click au touché.</li>
<li>Android (Chrome), iOS (Safari) : gère le tactile au touché.</li>
</ul>
<p>Il faut alors faire en sorte pour Chrome que la souris soit associée au clique, que le tactile soit associée <em>uniquement</em> au touché et laisser les autres gérer clique, simulation de clique au touché, ou touché réel. Vous n&#39;aurez plus qu&#39;à lancer les mêmes fonctions pour un <samp>click</samp> ou un <samp>tap</samp> et les mêmes fonctions pour un <samp>hover</samp> ou un <samp>swap</samp> afin de couvrir tous les browsers de la même manière.</p>
</blockquote>
<h4 id="techniques">Techniques</h4>
<ul>
<li>Click, Tap, Hover et Swap Cross-Browser (JS) : <a href="http://codepen.io/Haeresis/pen/KrvpQd">http://codepen.io/Haeresis/pen/KrvpQd</a></li>
<li>Touch Event Détection avec Modernizr (JS) : <a href="http://codepen.io/Haeresis/pen/bZANNY">http://codepen.io/Haeresis/pen/bZANNY</a></li>
</ul>
<h3 id="un-chargement-automatique-de-fichier-lourd">Un chargement automatique de fichier lourd</h3>
<p><img src="media/images/upload/example-4.jpg" alt="Non"></p>
<blockquote>
<p><em><samp>NON et</samp></em> <strong>Non</strong>, vous ne devez pas pré-supposer de l&#39;expérience utilisateur en vous basant uniquement sur la taille de l&#39;écran, <strong>il ne faut donc pas se baser sur la taille de l&#39;écran pour</strong> :</p>
<ul>
<li>Charger automatiquement un fichier lourds au chargement.</li>
<li>Charger un fichier lourd au survole de la souris ou au swap du doigt.</li>
<li>Charger un fichier lourd au défilement de la page.</li>
</ul>
</blockquote>
<p>Garder à l&#39;esprit qu&#39;un rendu sur PC ou mobile sur une connexion nomade bas débit est lent, et qu&#39;un rendu PC ou mobile sur un réseau wifi haut débit est rapide.</p>
<p><img src="media/images/upload/example-5.jpg" alt="Oui"></p>
<blockquote>
<p><strong><samp>OUI et</samp></strong> <strong>Oui,</strong> il faut prendre en compte le débit de l&#39;utilisateur. Sans entrer dans des calculs savant, on peut assez facilement savoir si l&#39;utilisateur charge à plus de 500Ko/s ou non. À partir de là, on prend la décision ou non de charger « automatiquement » les gros fichiers. En cas de réseau lent et si l&#39;utilisateur le souhaite <strong>avec une action de sa part</strong>, il peut afficher/télécharger les fichiers lourds. Donc :</p>
<ul>
<li>Si la taille de l&#39;écran et le débit le permettent, j&#39;affiche les fichier gros et/ou prenant de la place automatiquement.</li>
<li>Si la taille de l&#39;écran le permet mais pas le débit, j&#39;affiche les fichier gros et/ou prenant de la place après une action de l&#39;utilisateur.</li>
<li>Si ni la taille de l&#39;écran et ni le débit ne le permettent, j&#39;ouvre une page pour télécharger le fichier ou l&#39;afficher avec quelque chose de plus adapté après une action de l&#39;utilisateur.</li>
</ul>
</blockquote>
<h4 id="technique">Technique</h4>
<ul>
<li>Détection de Bande Passante (JS) : <a href="http://codepen.io/Haeresis/pen/ZOJGjL">http://codepen.io/Haeresis/pen/ZOJGjL</a></li>
</ul>
<h3 id="-du-d-blayage-d-information-sur-mobile-sous-pr-texte-qu-il-n-y-a-pas-de-place-"><strong>Du déblayage d&#39;information sur Mobile, sous prétexte qu&#39;il n&#39;y a pas de place</strong></h3>
<blockquote>
<p><em><samp>NON et</samp></em> <strong>Non</strong>, il ne faut pas retirer des parties de la page pour les écrans les plus petits sous prétexte qu&#39;il n&#39;y a pas de place ! Il ne faut pas non plus placer des « accordéons » à tous les coins de rue sous prétexte qu&#39;il n&#39;y a pas de place mais que l&#39;on ne souhaite rien retirer.</p>
<p>N&#39;ayez pas peur d&#39;exploiter la page dans sa longueur car « scroller » avec le pouce ou la molette souris est un jeu d&#39;enfant.</p>
</blockquote>
<p><img src="media/images/upload/example-6.jpg" alt="Doigt Facile"></p>
<blockquote>
<p><strong><samp>OUI et</samp></strong> <strong>Oui,</strong> quoi qu&#39;il arrive, laissez <strong>tout ce qui est important accessible sur la page</strong>, ne le caché pas pour garder une page complète qui tiens dans votre petit écran en mode portrait.</p>
<p>Il n&#39;est pas grave de laisser l&#39;utilisateur naviguer de haut en bas dans une longue page, surtout si vous laissez des ancres vers un menu. Multiplier les écrans à ouvrir à l&#39;aide de clique sur des zones précises de l&#39;écran est fatiguant sur des appareils qui demande parfois d&#39;étirer le pouce là ou un simple balayage de haut en bas est naturel.</p>
<p>À l&#39;inverse, passer son temps à attraper la barre de défilement pour descendre dans une page est gênant avec une souris. Si vous avez donc de la place sur votre écran, exploité donc cette fois les accordéons et autres sections entre « tab » qui sont facilement cliquable avec un mouvement simple du poignet : la souris est faites pour ça !</p>
</blockquote>
<h4 id="techniques">Techniques</h4>
<ul>
<li>Gestion d&#39;affichage Portrait/Paysage (CSS) : <a href="http://codepen.io/Haeresis/pen/meOGWz">http://codepen.io/Haeresis/pen/meOGWz</a></li>
<li>Rem au lieu de Pixel (CSS) : <a href="http://codepen.io/Haeresis/pen/ZGyGWm">http://codepen.io/Haeresis/pen/ZGyGWm</a></li>
<li>Contenu en dossier (CSS et JS) : <a href="http://codepen.io/Haeresis/pen/aORrxx">http://codepen.io/Haeresis/pen/aORrxx</a></li>
<li>Disposition Responsive (CSS) : <a href="http://codepen.io/Haeresis/pen/bdXymY">http://codepen.io/Haeresis/pen/bdXymY</a></li>
</ul>
<h2 id="et-vous-">Et vous ?</h2>
<p>Si vous aussi vous souhaitez partager vos techniques pour des sites pleinement <a href="https://blog.lesieur.name/les-concepts-autour-du-responsive-web-design/">Responsive Web Design</a>, n&#39;hésitez pas !</p>
]]></description>
            <link>http://localhost:7776version-mobile-et-version-desktop-ca-n-existe-pas/</link>
            <guid isPermaLink="false">577ca385d1b7fe136fc20061</guid>
            <category><![CDATA[Concept]]></category>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[CSS3]]></category>
            <category><![CDATA[Astuces]]></category>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Fri, 08 Jul 2016 10:21:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Outil Munchkin : Listez, Mélangez, Classez, Triez et Créez vos Jeux !]]></title>
            <description><![CDATA[<p>Je suis fan de Munchkin depuis des années maintenant ! Mais j&#39;ai un assez gros problème depuis quelques temps avec le Munchkin : plus les extensions augmentes et plus j&#39;ai des difficultés à pouvoir jouer avec des jeux équilibrés. Vous avez peut-être le même sentiment et si vous vous êtes déjà confronté aux problèmes listés ci-après, cette page peut vous être utile !</p>
<p>Elle va vous permettre de :</p>
<ul>
<li><a href="https://blog.lesieur.name/liste-des-cartes-munchkin-editions-francaises/#comment-trier-vos-cartes-munchkin">Trier vos cartes</a></li>
<li><a href="https://blog.lesieur.name/liste-des-cartes-munchkin-editions-francaises/#comment-m-langer-vos-cartes-munchkin">Mélanger vos cartes</a></li>
<li><a href="https://blog.lesieur.name/liste-des-cartes-munchkin-editions-francaises/#-liste-des-cartes-du-munchkin-des-ditions-fran-aises">Lister vos cartes</a></li>
</ul>
<h2 id="pr-sentation">Présentation</h2>
<p>Vous avez peut-être des difficultés à :</p>
<ul>
<li>Ajouter/Retirer des extensions/règles car vous en possédez un bon nombre toutes mélangés. Et si vous avez les premières versions sans couleurs, là vous ne pouvez pas les distinguer.</li>
<li>Mélanger vos cartes pour obtenir un jeu équilibré car il est difficile de mélanger facilement autant de carte ensemble.</li>
</ul>
<p>J&#39;ai donc créé ce petit outil qui va vous permettre de gérer votre jeu Munchkin ainsi que ses extensions plus facilement !</p>
<p>Il va par exemple vous permettre de :</p>
<ul>
<li>Classer vos cartes Munchkin par extension ou</li>
<li>Trier vos cartes Munchkin par type ou</li>
<li>Compter vos cartes Munchkin pour être sur qu&#39;il ne vous en manque pas ou</li>
<li>Créer vos propres Deck/Pioche Munchkin par pourcentage d&#39;apparition,</li>
<li>Simuler des pioches pour jouer à la distribution temps réel, ou pré-créer des mélanges à partir de vos boîtes de rangement.</li>
<li>Etc.</li>
</ul>
<blockquote>
<p>Si vous êtes développeur Front-end et que vous cherchez un exemple d&#39;utilisation de <a href="https://vuejs.org/">Vue.js</a> qui est SEO compliant, je peux vous conseiller de jeter un oeil au code source de cet outil derrière ce CodePen : <a href="http://codepen.io/Haeresis/pen/zBzWgQ">http://codepen.io/Haeresis/pen/zBzWgQ</a></p>
</blockquote>
<h2 id="comment-trier-vos-cartes-munchkin">Comment <strong>trier</strong> vos cartes Munchkin</h2>
<p>Il n&#39;est pas facile de s&#39;y repérer dans les différents types de cartes dans le Munchkin. Beaucoup ont la même couleur, et les versions dérivées du Munchkin original n&#39;ont pas de distinctions colorées. Il est également possible de souhaiter jouer avec des règles en moins.</p>
<h3 id="trier-vos-cartes-munckin-par-extension">Trier vos cartes Munckin par extension</h3>
<p>Ce cas de figure peut vous servir pour jouer à des parties avec des débutants afin de limiter les règles. Avant de pouvoir mélanger vos cartes à partir des extensions souhaités, il va falloir les triers. Pour ce faire, </p>
<p>Voici comment reconnaître les cartes par extension :</p>
<ul>
<li><strong>Munchkin</strong>                                            <em>si</em>     Pas d&#39;icone et indiqué au dos « Munchkin »</li>
<li><strong>Munchkin 2 : Hachement Mieux</strong>                        <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m2.gif" alt="Munchkin 2"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin 3 : Clerc et (pas) net</strong>                     <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m3.gif" alt="Munchkin 3"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin 4 : Ton destin est sellé !</strong>                 <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m4.gif" alt="Munchkin 4"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin 5 : On Zeu Rôde Again</strong>                      <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m5.gif" alt="Munchkin 5"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin 6 : Le Donjon de la Farce</strong>                  <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m6.gif" alt="Munchkin 6"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin 7 : Et pour quelques cartes de plus...</strong>     <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m7o.gif" alt="Munchkin 7"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin 7 : Oh le gros tricheuuuuuuuur !</strong>           <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m7.gif" alt="Munchkin 7"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin 8 : Centaure et Sans Reproche</strong>              <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m8.gif" alt="Munchkin 8"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin : Petit Papa Munchkin</strong>                      <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/n1.gif
" alt="Petit Papa Munchkin"> ou <img style="height: 10px" src="media/images/upload/n2.gif
" alt="Petit Papa Munchkin"> ou <img style="height: 10px" src="media/images/upload/n3.gif
" alt="Petit Papa Munchkin"> ou <img style="height: 10px" src="media/images/upload/n4.gif
" alt="Petit Papa Munchkin"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkinomicon</strong>                                      <em>si</em>     Icones <img style="height: 10px" src="media/images/upload/mm.gif" alt="Munchkinomicon"> ou <img style="height: 10px" src="media/images/upload/mm1.gif" alt="Munchkinomicon"> ou <img style="height: 10px" src="media/images/upload/mm2.gif" alt="Munchkinomicon"> ou <img style="height: 10px" src="media/images/upload/mm3.gif" alt="Munchkinomicon"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Star Munchkin</strong>                                       <em>si</em>     Pas d&#39;icone et indiqué au dos <em>Star Munchkin</em></li>
<li><strong>Star Munchkin 2 : La Guerre des Clowns</strong>              <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/st2.gif" alt="Star Munchkin 2"> et indiqué au dos <em>Star Munchkin</em></li>
<li><strong>Super Munchkin</strong>                                      <em>si</em>     Pas d&#39;icone et indiqué au dos <em>Super Munchkin</em></li>
<li><strong>Munchkin Zombies</strong>                                    <em>si</em>     Pas d&#39;icone et indiqué au dos <em>Munchkin Zombies</em></li>
<li><strong>Munchkin Zombies 2 : Ça zigouille à tour de bras !</strong>  <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/mz2.gif" alt="Munchkin Zombies 2"> et indiqué au dos <em>Munchkin Zombies</em></li>
<li><strong>Munchkin Cthulhu</strong>                                    <em>si</em>     Pas d&#39;icone et indiqué au dos <em>Munchkin Cthulhu</em></li>
<li><strong>Munchkin Cthulhu 2 : L&#39;Appel de la Vachthulhu</strong>       <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/mc2.gif" alt="Munchkin Cthulhu 2"> et indiqué au dos <em>Munchkin Cthulhu</em></li>
<li><strong>Munchkin Cthulhu 3 : La Crypte de l&#39;Indicible</strong>       <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/mc3.gif" alt="Munchkin Cthulhu 3"> et indiqué au dos <em>Munchkin Cthulhu</em></li>
<li><strong>Munchkin Cthulhu 4 : Oh my grottes !</strong>                <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/mc4.gif" alt="Munchkin Cthulhu 4"> et indiqué au dos <em>Munchkin Cthulhu</em></li>
</ul>
<p><em>Note : Le Munchkin original (sans couleur) ainsi que les deux premières extensions n&#39;ont pas d&#39;icone. Il n&#39;est donc pas possible de les différencier à moins de se référer à la <a href="https://blog.lesieur.name/liste-des-cartes-munchkin-editions-francaises/#-liste-des-cartes-du-munchkin-des-ditions-fran-aises">liste ci-après</a> dans cette page. Puisque les extensions en question apporte du nouveau contenu mais pas de règle à proprement parler (il y a tout de même les améliorations d&#39;objet), vous pouvez décider que quoi qu&#39;il arrive cette extension reste uni pour ne pas avoir à les trier à chaque fois.</em></p>
<h3 id="trier-vos-cartes-munckin-par-types">Trier vos cartes Munckin par types</h3>
<p>Si vous avez l&#39;intention de jouer au Munchkin avec toutes les extensions, il va être impossible de mélanger un jeu équilibré. C&#39;est là que le tri par type peut-être utile. Dans un premier temps vous créez des tas par type de carte, puis vous mélanger chaque tas. Pour finir vous sélectionnez une carte depuis chaque tas pour construire les 200 ou 300 premières cartes en utilisant, par exemple, le mélangeur de la partie suivante.</p>
<p>Voici comment reconnaître les cartes par type :</p>
<p>Dans les Portes</p>
<ul>
<li><span class="actions">Amélioration</span>             <em>si</em>    Aucunes des mentions listés ci-après <em>(Vert dans Munchkin)</em>.</li>
<li><span class="classes">Classe</span>                   <em>si</em>    « Classe » est indiqué <em>(Marron dans Munchkin)</em>.</li>
<li><span class="madnesses">Démence</span>                <em>si</em>    « Démence ! » est dans le titre.</li>
<li><span class="acolytes">Fidèle Serviteur</span>        <em>si</em>    « Fidèle Serviteur » ou « Acolyte » est dans le titre <em>(Vert dans Munchkin sauf Monture en solde)</em>.</li>
<li><span class="curses">Malédiction</span>               <em>si</em>    « Malédiction ! » ou « Piège » est dans le titre <em>(Vert dans Munchkin)</em>.</li>
<li><span class="mojos">Mojo</span>                       <em>si</em>    « Mojo » est indiqué.</li>
<li><span class="monsters">Monstre</span>                 <em>si</em>    Possède des trésors ou/et des niveaux <em>(Orange dans Munchkin)</em>.</li>
<li><span class="mounts">Monture</span>                   <em>si</em>    « Monture » est indiqué <em>(Violet dans Munchkin sauf Big Joe)</em>.</li>
<li><span class="origins">Origine</span>                  <em>si</em>    « Origine » est dans le titre.</li>
<li><span class="rooms">Pièce</span>                      <em>si</em>    « Pièce » est dans le titre.</li>
<li><span class="warps">Portail</span>                    <em>si</em>    « Portail » est indiqué <em>(Jaune dans Munchkin)</em>.</li>
<li><span class="powers">Pouvoir</span>                   <em>si</em>    « Pouvoir » est dans le titre.</li>
<li><span class="races">Race</span>                       <em>si</em>    « Race » est indiqué <em>(Gris dans Munchkin)</em>.</li>
</ul>
<p>Dans les Trésors</p>
<ul>
<li><span class="bonuses">Actions</span>                  <em>si</em>    Pas de prix <em>(Vert dans Munchkin)</em></li>
<li><span class="stuffs">Équipement</span>                <em>si</em>    Possède un prix et est à usage permanent <em>(Violet dans Munchkin)</em>.</li>
<li><span class="slaves">Fidèle Serviteur</span>          <em>si</em>    « Fidèle Serviteur » ou « Acolyte » est dans le titre <em>(Vert dans Munchkin)</em>.</li>
<li><span class="levels">Gain de Niveau</span>            <em>si</em>    « Gagner un Niveau » est écrit <em>(Vert dans Munchkin)</em>.</li>
<li><span class="munchkinomicon">Munchkinomicon</span>    <em>si</em>    Tête du grimoire au dos <em>(Violet dans Munchkin)</em>.</li>
<li><span class="objects">Objets</span>                   <em>si</em>    Un prix et à usage unique <em>(Bleu dans Munchkin)</em>.</li>
</ul>
<p>Pour les Donjons et Sorts, pas de soucis, se sont des défausses séparés. Vous reconnaîtrez aisément les grands formats des Donjons et les têtes de Munchkinomicon au dos des Sorts.</p>
<h2 id="comment-m-langer-vos-cartes-munchkin">Comment <strong>mélanger</strong> vos cartes Munchkin</h2>
<ol>
<li>Sélectionnez les cartes que vous souhaitez inclure dans votre jeu grâce à la <a href="https://blog.lesieur.name/liste-des-cartes-munchkin-editions-francaises/#-liste-des-cartes-du-munchkin-des-ditions-fran-aises">liste ci-après</a>.</li>
<li>Lancez des mélanges virtuels avec le lien ci-dessous (Avec F12, si votre navigateur le permet, vous pouvez également surveiller l&#39;état de vos pioches ét défausses).</li>
<li>Créez votre pioche en créant le Deck en sélectionnant exactement les noms de cartes cités ou vraiment plus rapidement, en n&#39;affectant qu&#39;une carte du type indiqué (Amélioration, Monture, etc.).</li>
</ol>
<div class="shuffle">
    <br>
    <div class="init" v-on:click="initShuffle()">Créez vos Pioches et testez-les !</div>
    <div class="shuffle-card">
        <div class="shuffle-card-inner">
            <div class="stop" v-on:click="stopShuffle()">Stop</div>
            <div class="twelve">F12</div>
            <div class="stack-doors">
                <div class="open" v-on:click="openDoors()">
                    <span class="title">Ouvrir une <strong>Porte</strong></span>
                </div>
                <div class="discard" v-bind:class="{ 'is-visible': doorsLastDiscard }">
                    <span class="title"></span>
                    <span class="stack">Porte</span>
                    <span class="extension"></span>
                    <span class="type"></span>
                    <span class="progress"></span>
                </div>
            </div>
            <div class="stack-treasures">
                <div class="open" v-on:click="openTreasures()">
                    <span class="title">Trouver un <strong>Trésor</strong></span>
                </div>
                <div class="discard" v-bind:class="{ 'is-visible': treasuresLastDiscard }">
                    <span class="title"></span>
                    <span class="stack">Trésor</span>
                    <span class="extension"></span>
                    <span class="type"></span>
                    <span class="progress"></span>
                </div>
            </div>
            <div class="stack-donjons">
                <div class="open" v-on:click="openDonjons()">
                    <span class="title">Entrer dans un <strong>Donjon</strong></span>
                </div>
                <div class="discard" v-bind:class="{ 'is-visible': donjonsLastDiscard }">
                    <span class="title"></span>
                    <span class="stack">Donjon</span>
                    <span class="extension"></span>
                    <span class="type"></span>
                    <span class="progress"></span>
                </div>
            </div>
            <div class="stack-books">
                <div class="open" v-on:click="openBooks()">
                    <span class="title">Lancer un <strong>Sort</strong></span>
                </div>
                <div class="discard" v-bind:class="{ 'is-visible': booksLastDiscard }">
                    <span class="title"></span>
                    <span class="stack">Sort</span>
                    <span class="extension"></span>
                    <span class="type"></span>
                    <span class="progress"></span>
                </div>
            </div>
        </div>
    </div>
</div>






<h2 id="-liste-des-cartes-du-munchkin-des-ditions-fran-aises"><strong>Liste</strong> des cartes du Munchkin des Éditions Françaises</h2>
<div class="all-cards">
    <div class="all">
        <div class="details" v-bind:class="{ 'is-displayed': all.filters }">
            <h3 id="munchkin-filtres">Filtres : Jeux et Extensions</h3>
            <p><button v-on:click="allToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <p>
                    <label>
                        <input type="checkbox" value="on" v-model="all.munchkin"> Munchkin
                    </label><br>
                    <label>
                        <input type="checkbox" value="on" v-model="all.munchkin2"> Munchkin 2 : Hachement Mieux
                    </label><br>
                    <label>
                        <input type="checkbox" value="on" v-model="all.munchkin3"> Munchkin 3 : Clerc et (pas) net
                    </label><br>
                    <label>
                        <input type="checkbox" value="on" v-model="all.munchkin4"> Munchkin 4 : Ton destin est sellé !
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkin5"> Munchkin 5 : On Zeu Rôde Again
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkin6"> Munchkin 6 : Le Donjon de la Farce
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkin7o"> Munchkin 7 : Et pour quelques cartes de plus...
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkin7"> Munchkin 7 : Oh le gros tricheuuuuuuuur !
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkin8"> Munchkin 8 : Centaure et Sans Reproche
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinN"> Munchkin : Petit Papa Munchkin
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinM"> Munchkinomicon
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinSt"> Star Munchkin
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinSt2"> Star Munchkin 2 : La Guerre des Clowns
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinSu"> Super Munchkin
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinZ"> Munchkin Zombies
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinZ2"> Munchkin Zombies 2 : Ça zigouille à tour de bras !
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinC"> Munchkin Cthulhu
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinC2"> Munchkin Cthulhu 2 : L&#39;Appel de la Vachthulhu
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinC3"> Munchkin Cthulhu 3 : La Crypte de l&#39;Indicible
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinC4"> Munchkin Cthulhu 4 : Oh my grottes !
                    </label>
                </p>
            </div>
        </div>
        <p><strong><span v-text="allCardsNumber">2095</span> cartes affichées</strong> au total pour votre Munchkin</p>
        <ul>
            <li>Il y a <strong><span v-text="allDoorsNumber">1242</span> cartes portes</strong> pour votre Munchkin.
                <ul>
                    <li v-if="allActionsNumber">dont <span class="actions"><span v-text="allActionsNumber">285</span> carte<span v-show="allActionsNumber > 1">s</span> Amélioration<span v-show="allActionsNumber > 1">s</span> (<span v-text="allActionsPercent || 0">23</span>%)</span>.</li>
                    <li v-if="allClassesNumber">dont <span class="classes"><span v-text="allClassesNumber">96</span> carte<span v-show="allClassesNumber > 1">s</span> Classe<span v-show="allClassesNumber > 1">s</span> (<span v-text="allClassesPercent || 0">8</span>%)</span>.</li>
                    <li v-if="allAcolytesNumber">dont <span class="acolytes"><span v-text="allAcolytesNumber">33</span> carte<span v-show="allAcolytesNumber > 1">s</span> Fidèle<span v-show="allAcolytesNumber > 1">s</span> Serviteur<span v-show="allActionsNumber > 1">s</span> (<span v-text="allAcolytesPercent || 0">3</span>%)</span>.</li>
                    <li v-if="allCursesNumber">dont <span class="curses"><span v-text="allCursesNumber">150</span> carte<span v-show="allCursesNumber > 1">s</span> Malédiction<span v-show="allCursesNumber > 1">s</span> (<span v-text="allCursesPercent || 0">12</span>%)</span>.</li>
                    <li v-if="allMadnessesNumber">dont <span class="curses"><span v-text="allMadnessesNumber">10</span> carte<span v-show="allMadnessesNumber > 1">s</span> Démence<span v-show="allMadnessesNumber > 1">s</span> (<span v-text="allMadnessesPercent || 0">1</span>%)</span>.</li>
                    <li v-if="allMojosNumber">dont <span class="mojos"><span v-text="allMojosNumber">16</span> carte<span v-show="allMojosNumber > 1">s</span> Mojos<span v-show="allMojosNumber > 1">s</span> (<span v-text="allMojosPercent || 0">1</span>%)</span>.</li>
                    <li v-if="allMonstersNumber">dont <span class="monsters"><span v-text="allMonstersNumber">445</span> carte<span v-show="allMonstersNumber > 1">s</span> Monstre<span v-show="allMonstersNumber > 1">s</span> (<span v-text="allMonstersPercent || 0">36</span>%)</span>.</li>
                    <li v-if="allMountsNumber">dont <span class="mounts"><span v-text="allMountsNumber">16</span> carte<span v-show="allMountsNumber > 1">s</span> Monture<span v-show="allMountsNumber > 1">s</span> (<span v-text="allMountsPercent || 0">1</span>%)</span>.</li>
                    <li v-if="allOriginsNumber">dont <span class="origins"><span v-text="allOriginsNumber">6</span> carte<span v-show="allOriginsNumber > 1">s</span> Origine<span v-show="allOriginsNumber > 1">s</span> (<span v-text="allOriginsPercent || 0">0</span>%)</span>.</li>
                    <li v-if="allRoomsNumber">dont <span class="rooms"><span v-text="allRoomsNumber">6</span> carte<span v-show="allRoomsNumber > 1">s</span> Pièce<span v-show="allRoomsNumber > 1">s</span> (<span v-text="allRoomsPercent || 0">0</span>%)</span>.</li>
                    <li v-if="allWarpsNumber">dont <span class="warps"><span v-text="allWarpsNumber">32</span> carte<span v-show="allWarpsNumber > 1">s</span> Portail<span v-show="allWarpsNumber > 1">s</span> (<span v-text="allWarpsPercent || 0">3</span>%)</span>.</li>
                    <li v-if="allPowersNumber">dont <span class="powers"><span v-text="allPowersNumber">44</span> carte<span v-show="allPowersNumber > 1">s</span> Pouvoir<span v-show="allPowersNumber > 1">s</span> (<span v-text="allPowersPercent || 0">4</span>%)</span>.</li>
                    <li v-if="allRacesNumber">dont <span class="races"><span v-text="allRacesNumber">103</span> carte<span v-show="allRacesNumber > 1">s</span> Race<span v-show="allRacesNumber > 1">s</span> (<span v-text="allRacesPercent || 0">8</span>%)</span>.</li>
                </ul>
            </li>
            <li>Il y a <strong><span v-text="allTreasuresNumber">799</span> cartes trésors</strong> pour votre Munchkin.
                <ul>
                    <li v-if="allBonusesNumber">dont <span class="bonuses"><span v-text="allBonusesNumber">123</span> carte<span v-show="allBonusesNumber > 1">s</span> Action<span v-show="allBonusesNumber > 1">s</span> (<span v-text="allBonusesPercent || 0">15</span>%)</span>.</li>
                    <li v-if="allStuffsNumber">dont <span class="stuffs"><span v-text="allStuffsNumber">386</span> carte<span v-show="allStuffsNumber > 1">s</span> Équipement<span v-show="allStuffsNumber > 1">s</span> (<span v-text="allStuffsPercent || 0">48</span>%)</span>.</li>
                    <li v-if="allSlavesNumber">dont <span class="slaves"><span v-text="allSlavesNumber">5</span> carte<span v-show="allSlavesNumber > 1">s</span> Fidèle<span v-show="allSlavesNumber > 1">s</span> Serviteur<span v-show="allSlavesNumber > 1">s</span> (<span v-text="allSlavesPercent || 0">1</span>%)</span>.</li>
                    <li v-if="allLevelsNumber">dont <span class="levels"><span v-text="allLevelsNumber">111</span> carte<span v-show="allLevelsNumber > 1">s</span> Gain<span v-show="allLevelsNumber > 1">s</span> de Niveau<span v-show="allLevelsNumber > 1">x</span> (<span v-text="allLevelsPercent || 0">14</span>%)</span>.</li>
                    <li v-if="munchkinMMunchkinomiconNumber">dont <span class="munchkinomicon"><span v-text="munchkinMMunchkinomiconNumber">1</span> carte Munchkinomicon (<span v-text="allMunchkinomiconPercent || 0">0</span>%)</span>.</li>
                    <li v-if="allObjectsNumber">dont <span class="objects"><span v-text="allObjectsNumber">173</span> carte<span v-show="allObjectsNumber > 1">s</span> Objet<span v-show="allObjectsNumber > 1">s</span> (<span v-text="allObjectsPercent || 0">22</span>%)</span>.</li>
                </ul>
            </li>
            <li>Il y a <strong><span v-text="allDonjonsNumber">40</span> cartes donjons</strong> pour votre Munchkin.</li>
            <li>Il y a <strong><span v-text="allSpellsNumber">14</span> cartes sorts</strong> pour votre Munchkin.</li>
        </ul>
    </div>
    <div class="munchkin munchkin-all" v-bind:class="{ 'is-visible': all.munchkin }">
        <img class="demo" height="200" src="media/images/upload/51vcdk0ID7L.jpg" alt="Munchkin">
        <h2 id="munchkin">Munchkin</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin.filters }">
            <h3 id="munchkin-filtres">Filtres</h3>
            <p><button v-on:click="munchkinToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Éditions</strong>
                <div class="edition">
                    <p>
                        <label>
                            <input type="radio" value="nocol" v-model="munchkin.version"> Édition originale
                        </label><br>
                        <label>
                            <input type="radio" value="color" v-model="munchkin.version"> Seconde Édition - (Couleur)
                        </label>
                    </p>
                </div>
                <strong>Types de carte</strong>
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin.bonuses"> Actions (<span v-text="munchkinBonusesNumber">2</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin.actions"> Améliorations (<span v-text="munchkinActionsNumber">16</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkin.classes"> Classes (<span v-text="munchkinClassesNumber">12</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin.stuffs"> Équipements (<span v-text="munchkinStuffsNumber">37</span>)
                    </label><br>
                    <label class="slaves">
                        <input type="checkbox" value="on" v-model="munchkin.slaves"> Fidèles Serviteurs (<span v-text="munchkinSlavesNumber">1</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkin.levels"> Gains de Niveaux (<span v-text="munchkinLevelsNumber">10</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin.curses"> Malédictions (<span v-text="munchkinCursesNumber">19</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkin.monsters"> Monstres (<span v-text="munchkinMonstersNumber">37</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin.objects"> Objets (<span v-text="munchkinObjectsNumber">23</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin.races"> Races (<span v-text="munchkinRacesNumber">11</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-details">Détails</h3>
            <p><strong>Nombre total de cartes : <span v-text="munchkinCardsNumber">168</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinDoorsNumber">95</span></p>
                <ol>
                    <li class="monsters color nocol">3872 Orques</li>
                    <li class="monsters color nocol">Amazone</li>
                    <li class="monsters color nocol">Balrog Charolais</li>
                    <li class="actions color nocol">Bébé !</li>
                    <li class="monsters color nocol">Belvédère Sauvage</li>
                    <li class="monsters color nocol">Bigfoot, alias Grand-Pied</li>
                    <li class="monsters color nocol">Binoclard Hurleur</li>
                    <li class="monsters color nocol">Céphalopodzilla</li>
                    <li class="monsters color nocol">Cheval Zombie</li>
                    <li class="monsters color nocol">Dragon de Plutonium</li>
                    <li class="races color nocol">Elfe</li>
                    <li class="races color nocol">Elfe</li>
                    <li class="races color nocol">Elfe</li>
                    <li class="actions color nocol">Énoooorme !</li>
                    <li class="actions color nocol">Enragé</li>
                    <li class="monsters color nocol">Escargots sous Acide</li>
                    <li class="monsters color nocol">Fan de Vampire</li>
                    <li class="monsters color nocol">Gerbosaure</li>
                    <li class="monsters color nocol">Goblin Estropié</li>
                    <li class="monsters color nocol">Golem Fracassé</li>
                    <li class="monsters color nocol">Grenouilles Volantes</li>
                    <li class="classes color nocol">Guerrier</li>
                    <li class="classes color nocol">Guerrier</li>
                    <li class="classes color nocol">Guerrier</li>
                    <li class="actions color nocol">Illusion</li>
                    <li class="actions color nocol">Intervention Divine</li>
                    <li class="actions color nocol">Intelligent</li>
                    <li class="races color nocol">Halfelin</li>
                    <li class="races color nocol">Halfelin</li>
                    <li class="races color nocol">Halfelin</li>
                    <li class="monsters color nocol"><del>Harpistes</del> Harpies</li>
                    <li class="monsters color nocol">Hippogriffe</li>
                    <li class="monsters color nocol">Horreur non-euclidienne indicible</li>
                    <li class="monsters color nocol">Huissier</li>
                    <li class="monsters color nocol">Lépreuxchaun</li>
                    <li class="classes color nocol">Magicien</li>
                    <li class="classes color nocol">Magicien</li>
                    <li class="classes color nocol">Magicien</li>
                    <li class="curses color nocol">Malédiction !</li>
                    <li class="curses color nocol">Malédiction !</li>
                    <li class="curses color nocol">Malédiction !</li>
                    <li class="curses color nocol">Malédiction !</li>
                    <li class="curses color nocol">Malédiction !</li>
                    <li class="curses color nocol">Malédiction ! Canard de l&#39;Apocalypse</li>
                    <li class="curses color nocol">Malédiction ! Changement de Classe</li>
                    <li class="curses color nocol">Malédiction ! Changement de Race</li>
                    <li class="curses color nocol">Malédiction ! Changement de Sexe</li>
                    <li class="curses color nocol">Malédiction ! Commun des Mortels</li>
                    <li class="curses color nocol">Malédiction ! Déclassé !</li>
                    <li class="curses color nocol">Malédiction ! Impôt sur le Revenu</li>
                    <li class="curses color nocol">Malédiction ! Grosse Perte</li>
                    <li class="curses color nocol">Malédiction ! Miroir Perfide</li>
                    <li class="curses color nocol">Malédiction ! Perdez deux cartes</li>
                    <li class="curses color nocol">Malédiction ! Petite Perte</li>
                    <li class="curses color nocol">Malédiction ! Petite Perte</li>
                    <li class="curses color nocol">Malédiction ! Poulet sur la Tête</li>
                    <li class="curses color nocol">Malédiction Vraiment Trop Injuste !</li>
                    <li class="monsters color nocol">Manticor-nithorynque</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="monsters color nocol">Morpions</li>
                    <li class="monsters color nocol">Mr. Nonos</li>
                    <li class="monsters color nocol">Mucus Baveux</li>
                    <li class="races color nocol">Nain</li>
                    <li class="races color nocol">Nain</li>
                    <li class="races color nocol">Nain</li>
                    <li class="monsters color nocol">Nez Flottant</li>
                    <li class="monsters color nocol">Octaèdre Gélatineux</li>
                    <li class="actions color nocol">Pause Déjeuner</li>
                    <li class="actions color nocol">Petite Amie</li>
                    <li class="monsters color nocol">Pit Bull</li>
                    <li class="monsters color nocol">Plante d&#39;Ornement</li>
                    <li class="monsters color nocol">Poulet Élevé aux Stéroïdes</li>
                    <li class="classes color nocol">Prêtre</li>
                    <li class="classes color nocol">Prêtre</li>
                    <li class="classes color nocol">Prêtre</li>
                    <li class="monsters color nocol">Rat Musclé</li>
                    <li class="monsters color nocol">René Crophage et Fils, Dépanneurs en Chirurgie</li>
                    <li class="monsters color nocol">Représentant en Assurances</li>
                    <li class="races color nocol">Sang-mêlè</li>
                    <li class="races color nocol">Sang-mêlè</li>
                    <li class="monsters color nocol">Succube Lange-de-Belle-Mère</li>
                    <li class="monsters color nocol">Suceur de Tête</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="actions color nocol">Tire-moi de là !</li>
                    <li class="actions color nocol">Tricheur !</li>
                    <li class="monsters color nocol">Trôliste</li>
                    <li class="monsters color nocol">Tut-Tuuut-Ankh-Ammon</li>
                    <li class="monsters color nocol">Vamps...ires !?!</li>
                    <li class="actions color nocol">Vénérable</li>
                    <li class="classes color nocol">Voleur</li>
                    <li class="classes color nocol">Voleur</li>
                    <li class="classes color nocol">Voleur</li>
                    <template v-for="(item, index) in munchkin.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin.version) !== -1) && ((munchkin.curses && item.class.indexOf('curses') !== -1) || (munchkin.classes && item.class.indexOf('classes') !== -1) || (munchkin.races && item.class.indexOf('races') !== -1) || (munchkin.monsters && item.class.indexOf('monsters') !== -1) || (munchkin.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin.version) !== -1) && all.munchkinDoorsEach[index] }">
                                        <input type="checkbox" v-model="all.munchkinDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinTreasuresNumber">73</span></p>
                <ol>
                    <li class="levels color nocol">1000 pièces d&#39;or</li>
                    <li class="objects color nocol">Anneau de Souhait</li>
                    <li class="objects color nocol">Anneau de Souhait</li>
                    <li class="stuffs color nocol">Arc Enrubanné</li>
                    <li class="stuffs color nocol">Armure de Cuir</li>
                    <li class="stuffs color nocol">Armure de Flamme</li>
                    <li class="stuffs color nocol">Armure de Mithril</li>
                    <li class="stuffs color nocol">Armure Gluante</li>
                    <li class="stuffs color nocol">Armure Trapue</li>
                    <li class="objects color nocol">Baguette de Sourcier</li>
                    <li class="stuffs color nocol">Bandana de Gros Dur</li>
                    <li class="stuffs color nocol">Bâton de Napalm</li>
                    <li class="objects color nocol">Boisson Énergisante Éventée</li>
                    <li class="stuffs color nocol">Bouclier Surdimensionné</li>
                    <li class="stuffs color nocol">Bottes de Convocation d&#39;Hémorroïdes</li>
                    <li class="stuffs color nocol">Bottes de Déplacement Frénetique</li>
                    <li class="stuffs color nocol">Brochette de Rat</li>
                    <li class="stuffs color nocol">Casque de Courage</li>
                    <li class="stuffs color nocol">Casque de Virilité Ostentatoire</li>
                    <li class="stuffs color nocol">Cape d&#39;Ombre</li>
                    <li class="objects color nocol">Champagne</li>
                    <li class="stuffs color nocol">Chapeau Pointu de Thaumaturgie</li>
                    <li class="stuffs color nocol">Collants de Force de Géant</li>
                    <li class="objects color nocol">Cotion de Ponfusion</li>
                    <li class="stuffs color nocol">Dague de Traitrise</li>
                    <li class="levels color nocol">Don de Chips Désintressé au MJ</li>
                    <li class="objects color nocol">Doppelganger</li>
                    <li class="objects color nocol">Dé Pipé</li>
                    <li class="stuffs color nocol">Énorme Rocher</li>
                    <li class="stuffs color nocol">Escabeau</li>
                    <li class="stuffs color nocol">Épée (de) Bâtard(e)</li>
                    <li class="stuffs color nocol">Épée de Féminisme Exacerbé</li>
                    <li class="stuffs color nocol">Épée Karaoké</li>
                    <li class="levels color nocol">Erreur de Calcul Avantageuse</li>
                    <li class="slaves color nocol">Fidèle Serviteur</li>
                    <li class="objects color nocol">Flaque de Colle</li>
                    <li class="levels color nocol">Génocide de Fourmis à l&#39;Huile Bouillante</li>
                    <li class="stuffs color nocol">Genouillères de Séduction</li>
                    <li class="stuffs color nocol">Genouillères Perforantes</li>
                    <li class="stuffs color nocol">Gourdin de Misogynie Fracassante</li>
                    <li class="stuffs color nocol">Hallebrde Suisse Multifonctions</li>
                    <li class="levels color nocol">Invocation de Règles Obscures</li>
                    <li class="objects color nocol">Lampe Merveilleuse</li>
                    <li class="stuffs color nocol">Lance de 3,50 m</li>
                    <li class="stuffs color nocol">Masse d&#39;Armes de Répartie Piquante</li>
                    <li class="stuffs color nocol">Marteau des Rotules Douloureuses</li>
                    <li class="objects color nocol">Missile Magique</li>
                    <li class="levels color nocol">Mutiler les Cadavres</li>
                    <li class="objects color nocol">Mur Instantané</li>
                    <li class="objects color nocol">Oh, Les Jolis Ballons !</li>
                    <li class="bonuses color nocol">Pillaaaaaaage !</li>
                    <li class="levels color nocol">Pleurer dans les Jupes du MJ</li>
                    <li class="objects color nocol">Potion Acide Radioactive et Électrique</li>
                    <li class="objects color nocol">Potion d&#39;Invisibilité</li>
                    <li class="objects color nocol">Potion d&#39;Amitié</li>
                    <li class="objects color nocol">Potion de bravoure hystérique</li>
                    <li class="levels color nocol">Potion de Machisme Triomphant</li>
                    <li class="objects color nocol">Potion de Mauvaise Halleine</li>
                    <li class="objects color nocol">Potion de Poison Enflammé</li>
                    <li class="objects color nocol">Potion de Polly-morphie</li>
                    <li class="objects color nocol">Potion de Sommeil</li>
                    <li class="objects color nocol">Potion de Transfert</li>
                    <li class="objects color nocol">Potion Glaciale Explosive</li>
                    <li class="stuffs color nocol">Rape à Fromage de la Paix</li>
                    <li class="stuffs color nocol">Rapière d&#39;Injustice Flagrante</li>
                    <li class="stuffs color nocol">Sandales de Protection</li>
                    <li class="stuffs color nocol">Sandwich Chocolat-Moules-Anchois</li>
                    <li class="stuffs color nocol">Targe d&#39;Inconscience Suicidaire</li>
                    <li class="bonuses color">Titre qui en Jette Vraiment Grave</li>
                    <li class="stuffs nocol">Titre qui en Jette Vraiment Grave</li>
                    <li class="stuffs color nocol">Tronçonneuse de la Mort</li>
                    <li class="stuffs color nocol">Tuba d&#39;Envoutement</li>
                    <li class="levels color nocol">Tuer le Fidèle Serviteur</li>
                    <li class="levels color nocol">Vol de Niveau</li>
                    <template v-for="(item, index) in munchkin.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin.version) !== -1) && ((munchkin.slaves && item.class.indexOf('slaves') !== -1) || (munchkin.levels && item.class.indexOf('levels') !== -1) || (munchkin.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin.objects && item.class.indexOf('objects') !== -1) || (munchkin.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin.version) !== -1) && all.munchkinTreasuresEach[index] }">
                                        <input type="checkbox" v-model="all.munchkinTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-2 munchkin-all" v-bind:class="{ 'is-visible': all.munchkin2 }">
        <img class="demo" src="media/images/upload/51CHPcSgexL._AC_UL320_SR248,320_.jpg" alt="Munchkin 2">
        <h2 id="munchkin-2">Munchkin 2 : Hachement Mieux</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin2.filters }">
            <h3 id="munchkin-2-filtres">Filtres</h3>
            <p><button v-on:click="munchkin2ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Éditions</strong>
                <div class="edition">
                    <p>
                        <label>
                            <input type="radio" value="nocol" v-model="munchkin2.version"> Édition originale
                        </label><br>
                        <label>
                            <input type="radio" value="color" v-model="munchkin2.version"> Seconde Édition - (Couleur)
                        </label>
                    </p>
                </div>
                <strong>Types de carte</strong>
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin2.bonuses"> Actions (<span v-text="munchkin2BonusesNumber">3</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin2.actions"> Améliorations (<span v-text="munchkin2ActionsNumber">14</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkin2.classes"> Classes (<span v-text="munchkin2ClassesNumber">4</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin2.stuffs"> Équipements (<span v-text="munchkin2StuffsNumber">25</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkin2.levels"> Gains de Niveaux (<span v-text="munchkin2LevelsNumber">7</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin2.curses"> Malédictions (<span v-text="munchkin2CursesNumber">11</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkin2.monsters"> Monstres (<span v-text="munchkin2MonstersNumber">29</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin2.objects"> Objets (<span v-text="munchkin2ObjectsNumber">10</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin2.races"> Races (<span v-text="munchkin2RacesNumber">8</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-2-details">Détails</h3>
            <p><img src="media/images/upload/m2.gif" alt="Munchkin 2"> Cette icone en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>Les améliorations d&#39;objets</li>
                <li>La Race des Orques</li>
                <li>Les très inutiles Cartes Vides</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkin2CardsNumber">111</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-2-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin2DoorsNumber">66</span></p>
                <ol>
                    <li class="actions color nocol">Amical</li>
                    <li class="actions color nocol">Annihilation</li>
                    <li class="monsters color nocol">Avocat fantôme</li>
                    <li class="monsters color nocol">Cafard Géant</li>
                    <li class="actions color nocol">Cartes excessivement merveilleuses</li>
                    <li class="monsters color nocol">Champi Gnons</li>
                    <li class="monsters color nocol">Clowns de la Mort</li>
                    <li class="monsters color nocol">Créature de Stupre et de Luxure</li>
                    <li class="monsters color nocol">Démon Tentaculaire</li>
                    <li class="monsters color nocol">Écureuil Psychopathe</li>
                    <li class="monsters color nocol">Élémentaire de Morve</li>
                    <li class="races color nocol">Elfe</li>
                    <li class="actions color nocol">Endormi</li>
                    <li class="actions color nocol">Fauché</li>
                    <li class="monsters color nocol">Géant de Givre</li>
                    <li class="classes color nocol">Guerrier</li>
                    <li class="races color nocol">Halfelin</li>
                    <li class="actions color nocol">Hé, une carte !</li>
                    <li class="monsters color nocol">Herbeux Dégueu</li>
                    <li class="monsters color nocol">Hydreolique</li>
                    <li class="monsters color nocol">Jabberwock</li>
                    <li class="monsters color nocol">Judge Fredd</li>
                    <li class="monsters color nocol">L&#39;Ombre du Nez Flottant</li>
                    <li class="monsters color nocol">La Chose au Nom si Long</li>
                    <li class="monsters color nocol">Le Germe du Mal</li>
                    <li class="actions color nocol">Les cadavres ne se battent pas</li>
                    <li class="classes color nocol">Magicien</li>
                    <li class="monsters color nocol">Main Rampante</li>
                    <li class="curses color nocol">Malédiction ! Bidule Maudit</li>
                    <li class="curses color nocol">Malédiction ! Bidule Maudit</li>
                    <li class="curses color nocol">Malédiction ! Générosité</li>
                    <li class="curses color nocol">Malédiction ! Grands Pieds</li>
                    <li class="curses color nocol">Malédiction ! Mains Minuscules</li>
                    <li class="curses color nocol">Malédiction ! Nécrophobie</li>
                    <li class="curses color nocol">Malédiction ! Odeur Corporelle</li>
                    <li class="curses color nocol">Malédiction ! Or des fous</li>
                    <li class="curses color nocol">Malédiction ! Perte d&#39;un Gros Objet</li>
                    <li class="curses color nocol">Malédiction ! Perte d&#39;un Petit Objet</li>
                    <li class="curses color nocol">Malédiction ! Règles de la Nouvelle Édition</li>
                    <li class="monsters color nocol">Minette Sanguinaire</li>
                    <li class="monsters color nocol">Mobile</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="monsters color nocol">Monstre fait maison</li>
                    <li class="actions color nocol">MoÔoman</li>
                    <li class="actions color nocol">Mort-Vivant</li>
                    <li class="monsters color nocol">Moufette Géante</li>
                    <li class="races color nocol">Nain</li>
                    <li class="actions color nocol">Nichée</li>
                    <li class="monsters color nocol">Nounours</li>
                    <li class="races color nocol">Orque</li>
                    <li class="races color nocol">Orque</li>
                    <li class="races color nocol">Orque</li>
                    <li class="races color nocol">Orque</li>
                    <li class="monsters color nocol">Père Noël</li>
                    <li class="classes color nocol">Prêtre</li>
                    <li class="monsters color nocol">Ptérodactyle</li>
                    <li class="monsters color nocol">Rats pestiférés</li>
                    <li class="races color nocol">Sang-Mêlé</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="monsters color nocol">Tortue-garou</li>
                    <li class="actions color">Tricheur</li>
                    <li class="monsters color nocol">Vestales de l&#39;Ordrede la Pleine Lune</li>
                    <li class="monsters color nocol">Vide</li>
                    <li class="monsters color nocol">Vide</li>
                    <li class="actions nocol">Vide</li>
                    <li class="classes color nocol">Voleur</li>
                    <template v-for="(item, index) in munchkin2.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin2.version) !== -1) && ((munchkin2.curses && item.class.indexOf('curses') !== -1) || (munchkin2.curses && item.class.indexOf('curses') !== -1) || (munchkin2.classes && item.class.indexOf('classes') !== -1) || (munchkin2.races && item.class.indexOf('races') !== -1) || (munchkin2.monsters && item.class.indexOf('monsters') !== -1) || (munchkin2.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin2.version) !== -1) && all.munchkin2DoorsEach[index] }">
                                        <input type="checkbox" v-model="all.munchkin2DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-2-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkin2TreasuresNumber">45</span></p>
                <ol>
                    <li class="bonuses nocol">...du Destin !</li>
                    <li class="stuffs color">...du Destin !</li>
                    <li class="objects color nocol">Anneau de Souhait</li>
                    <li class="stuffs color nocol">Boomdague</li>
                    <li class="stuffs color nocol">Braguette Cloutée</li>
                    <li class="stuffs color nocol">Casque de vision périphérique</li>
                    <li class="stuffs color nocol">Casquelette</li>
                    <li class="stuffs color nocol">Chapeau en Papier d&#39;Alu</li>
                    <li class="bonuses color nocol">Cheval de Troie</li>
                    <li class="levels color nocol">Contemplation du Nombril</li>
                    <li class="objects color nocol">Crème de bébé</li>
                    <li class="levels color nocol">Cruauté Gratuite</li>
                    <li class="objects color nocol">Dé Subtilement Pipé</li>
                    <li class="objects color nocol">Dé Subtilement Pipé</li>
                    <li class="stuffs color nocol">Dentier de l&#39;Effroi</li>
                    <li class="stuffs color nocol">Dragon Nain Tout Mignon</li>
                    <li class="levels color nocol">Échange de feuilles de personnage</li>
                    <li class="stuffs color nocol">Engin de Siège</li>
                    <li class="stuffs color nocol">Épée Super Zarbi</li>
                    <li class="stuffs color nocol">Épée Tueuse de Tout (à l&#39;exception notable des poulpes)</li>
                    <li class="stuffs color nocol">Exoarmure</li>
                    <li class="stuffs color nocol">Familier</li>
                    <li class="stuffs color nocol">Fausse Barbe</li>
                    <li class="stuffs color nocol">Fourchette à Barbecue</li>
                    <li class="stuffs color nocol">Gastérofronde</li>
                    <li class="stuffs color nocol">Hache Surnaturelle</li>
                    <li class="stuffs color nocol">Imperméable</li>
                    <li class="objects nocol">Lampe Merveilleuse</li>
                    <li class="levels color nocol">Laver la Voiture MJ</li>
                    <li class="stuffs color nocol">Le Maillet Béni de Saint Aieuuuu !</li>
                    <li class="stuffs color nocol">Lumière Éternelle (piles non incluses)</li>
                    <li class="levels color nocol">Payer la Pizza</li>
                    <li class="stuffs color nocol">Pince à Épiler de la Terreur</li>
                    <li class="levels color nocol">Plier, Embrocher et Mutiler</li>
                    <li class="objects color nocol">Poil à Gratter</li>
                    <li class="objects color nocol">Potage Sauvage</li>
                    <li class="objects color nocol">Potion de Lâcheté</li>
                    <li class="objects color nocol">Potion de Vol</li>
                    <li class="objects color nocol">Potion d&#39;Incrédulité</li>
                    <li class="levels color nocol">Promettre au MJ d&#39;arrêter de lui parler de votre Personnage</li>
                    <li class="stuffs color nocol">Rouleau de l&#39;Ordre</li>
                    <li class="stuffs color nocol">Sac de Clous</li>
                    <li class="objects color nocol">Sauce Tartare Barbare</li>
                    <li class="bonuses color nocol">Ton lacet est défait !</li>
                    <li class="stuffs color nocol">Très Saint Livre</li>
                    <li class="objects nocol">Vide</li>
                    <li class="stuffs color nocol">Vide</li>
                    <li class="bonuses color nocol">Vide Grenier</li>
                    <template v-for="(item, index) in munchkin2.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin2.version) !== -1) && ((munchkin2.levels && item.class.indexOf('levels') !== -1) || (munchkin2.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin2.objects && item.class.indexOf('objects') !== -1) || (munchkin2.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin2.version) !== -1) && all.munchkin2TreasuresEach[index] }">
                                        <input type="checkbox" v-model="all.munchkin2TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-3 munchkin-all" v-bind:class="{ 'is-visible': all.munchkin3 }">
        <img class="demo" src="media/images/upload/munchkin-3.gif" alt="Munchkin 3">
        <h2 id="munchkin-3">Munchkin 3 : Clerc et (pas) net</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin3.filters }">
            <h3 id="munchkin-3-filtres">Filtres</h3>
            <p><button v-on:click="munchkin3ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Éditions</strong>
                <div class="edition">
                    <p>
                        <label>
                            <input type="radio" value="nocol" v-model="munchkin3.version"> Édition originale
                        </label><br>
                        <label>
                            <input type="radio" value="color" v-model="munchkin3.version"> Seconde Édition - (Couleur)
                        </label>
                    </p>
                </div>
                <strong>Types de carte</strong>
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin3.bonuses"> Actions (<span v-text="munchkin3BonusesNumber">10</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin3.actions"> Améliorations (<span v-text="munchkin3ActionsNumber">12</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkin3.classes"> Classes (<span v-text="munchkin3ClassesNumber">9</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin3.stuffs"> Équipements (<span v-text="munchkin3StuffsNumber">17</span>)
                    </label><br>
                    <label class="slaves">
                        <input type="checkbox" value="on" v-model="munchkin3.slaves"> Fidèles Serviteurs (<span v-text="munchkin3SlavesNumber">1</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkin3.levels"> Gains de Niveaux (<span v-text="munchkin3LevelsNumber">7</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin3.curses"> Malédictions (<span v-text="munchkin3CursesNumber">8</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkin3.monsters"> Monstres (<span v-text="munchkin3MonstersNumber">27</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin3.objects"> Objets (<span v-text="munchkin3ObjectsNumber">11</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin3.races"> Races (<span v-text="munchkin3RacesNumber">10</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-3-details">Détails</h3>
            <p><img src="media/images/upload/m3.gif" alt="Munchkin 2"> Cette icone en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>La Classe des Bardes</li>
                <li>La Race des Gnomes</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkin3CardsNumber">112</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-3-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin3DoorsNumber">66</span></p>
                <ol>
                    <li class="actions color nocol">...de l&#39;Enfer</li>
                    <li class="monsters color nocol">Baal-Y-Nacee,Grand Antien de la Basse-Cour des Enfers</li>
                    <li class="classes color nocol">Barde</li>
                    <li class="classes color nocol">Barde</li>
                    <li class="classes color nocol">Barde</li>
                    <li class="classes color nocol">Barde</li>
                    <li class="classes color nocol">Barde</li>
                    <li class="monsters color nocol">Camulot</li>
                    <li class="monsters color nocol">Cécil Vanien, déménageur en entrailles</li>
                    <li class="monsters color nocol">Dessin de votre petit frère</li>
                    <li class="monsters color nocol">Dopplegangsters</li>
                    <li class="monsters color nocol">Dryade</li>
                    <li class="races color nocol">Elfe</li>
                    <li class="actions color nocol">En pleine dépression</li>
                    <li class="actions color nocol">En sous-vêtements</li>
                    <li class="actions color nocol">Énorme Épée de passage à tabac de personnage</li>
                    <li class="actions color nocol">Erreur de typo</li>
                    <li class="monsters color nocol">Géants de la raclette</li>
                    <li class="monsters color nocol">Gobe-mouche urticant bio-mutant</li>
                    <li class="races color nocol">Gnome</li>
                    <li class="races color nocol">Gnome</li>
                    <li class="races color nocol">Gnome</li>
                    <li class="races color nocol">Gnome</li>
                    <li class="races color nocol">Gnome</li>
                    <li class="monsters color nocol">Golem de Chewing-gum</li>
                    <li class="monsters color nocol">Gothyanki</li>
                    <li class="monsters color nocol">Gros Bourrin</li>
                    <li class="monsters color nocol">Gros porc macho</li>
                    <li class="classes color nocol">Guerrier</li>
                    <li class="races color nocol">Halfelin</li>
                    <li class="monsters color nocol">Homme-hochet</li>
                    <li class="monsters color nocol">Kali</li>
                    <li class="monsters color nocol">Kobolds kamikazes</li>
                    <li class="monsters color nocol">Les Manes occis de la mer morte</li>
                    <li class="actions color nocol">Les Monstres sont occupés</li>
                    <li class="classes color nocol">Magicien</li>
                    <li class="curses color nocol">Malédiction ! ...de la mort qui tue !</li>
                    <li class="curses color nocol">Malédiction ! amnésie temporaire</li>
                    <li class="curses color nocol">Malédiction ! bière des nains</li>
                    <li class="curses color nocol">Malédiction ! échec christique !</li>
                    <li class="curses color nocol">Malédiction ! les genoux explosés</li>
                    <li class="curses color nocol">Malédiction ! piège à touristes</li>
                    <li class="curses color nocol">Malédiction ! sac à dos affamé</li>
                    <li class="curses color nocol">Malédiction ! vous trebuchez sur votre trésors</li>
                    <li class="monsters color nocol">Méduse</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Mort-vivant</li>
                    <li class="monsters color nocol">Mort-Ylin Moncroc</li>
                    <li class="races color nocol">Nain</li>
                    <li class="monsters color nocol">Nounours sanguinaire géant</li>
                    <li class="actions color nocol">Obscènement riche</li>
                    <li class="races color nocol">Orque</li>
                    <li class="monsters color nocol">Petit lapin tout ce qu&#39;il y a de plus ordinaire...</li>
                    <li class="monsters color nocol">Poisson rouge</li>
                    <li class="classes color nocol">Prêtre</li>
                    <li class="monsters color nocol">Resident débile, le charancon mutant</li>
                    <li class="races color nocol">Sang-mêlé</li>
                    <li class="monsters color nocol">Sire Hupeux</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="monsters color nocol">Tati Paladin</li>
                    <li class="monsters color nocol">Tequila Piaf</li>
                    <li class="monsters color nocol">Tonneau sans fond</li>
                    <li class="actions color nocol">Tricheur !</li>
                    <li class="classes color nocol">Voleur</li>
                    <li class="monsters color nocol">Zozo le zusticier</li>
                    <template v-for="(item, index) in munchkin3.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin3.version) !== -1) && ((munchkin3.curses && item.class.indexOf('curses') !== -1) || (munchkin3.classes && item.class.indexOf('classes') !== -1) || (munchkin3.races && item.class.indexOf('races') !== -1) || (munchkin3.monsters && item.class.indexOf('monsters') !== -1) || (munchkin3.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin3.version) !== -1) && all.munchkin3DoorsEach[index] }">
                                        <input type="checkbox" v-model="all.munchkin3DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-3-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkin3TreasuresNumber">46</span></p>
                <ol>
                    <li class="levels color nocol">Acte de bonté absurde</li>
                    <li class="objects color nocol">Anneau de Souhait</li>
                    <li class="bonuses color nocol">Béni</li>
                    <li class="stuffs color nocol">Bikini en cotte de mailles</li>
                    <li class="stuffs color nocol">C&#39;est le luth finaAaleuuu !</li>
                    <li class="objects color nocol">Canard d&#39;abondance</li>
                    <li class="stuffs color nocol">Chaussettes de Pestilence</li>
                    <li class="stuffs color nocol">Chaussons de Coming-out</li>
                    <li class="objects color nocol">Cocktail Molotroll</li>
                    <li class="stuffs color nocol">Costume en gnomex</li>
                    <li class="bonuses color nocol">Coup quasi-fatal</li>
                    <li class="objects color nocol">Croquettes pour monstres</li>
                    <li class="objects color nocol">Dé pipé</li>
                    <li class="bonuses color nocol">Descente de dieux</li>
                    <li class="stuffs color nocol">Divan de psi</li>
                    <li class="bonuses color nocol">Empoisonné</li>
                    <li class="stuffs color nocol">Épée à deux mains</li>
                    <li class="levels color nocol">Faire un dessin de son personnage</li>
                    <li class="stuffs color nocol">Farces et attrapes de Manufacture Gnome</li>
                    <li class="slaves color nocol">Fidèle Serviteur</li>
                    <li class="stuffs color nocol">Fouet &quot;Plein-la-goule™&quot;</li>
                    <li class="objects color nocol">Gelée royale</li>
                    <li class="stuffs color nocol">Grelots tueurs</li>
                    <li class="objects color nocol">Injonction</li>
                    <li class="bonuses color nocol">Intervention féline</li>
                    <li class="stuffs color nocol">Lame vorpale</li>
                    <li class="bonuses color nocol">Lancer de nain</li>
                    <li class="stuffs color nocol">L&#39;amulette à fiabilité relative</li>
                    <li class="stuffs color nocol">L&#39;autre Anneau</li>
                    <li class="bonuses color nocol">Le casino du donjon</li>
                    <li class="stuffs color nocol">Mangnifique chapeau</li>
                    <li class="stuffs color nocol">Masse d&#39;arme de cheville improvisée</li>
                    <li class="levels color nocol">Menacer de changer de système de jeu</li>
                    <li class="bonuses color nocol">Moi ! Moi ! Moi !</li>
                    <li class="stuffs color nocol">Oreilles factices</li>
                    <li class="stuffs color nocol">Poignard-o-matic</li>
                    <li class="bonuses color nocol">Poignées de transport</li>
                    <li class="objects color nocol">Potion d&#39;apathie</li>
                    <li class="objects color nocol">Potion de greluche instantanée</li>
                    <li class="levels color nocol">Regarde le dé, il tourne, il toune...</li>
                    <li class="levels color nocol">Remettre sa vieille fiche de perso au propre...</li>
                    <li class="objects color nocol">Sauce pimentée</li>
                    <li class="levels color nocol">Se souvenir de l&#39;anniversaire du MJ</li>
                    <li class="objects color nocol">Tarte savoureuse</li>
                    <li class="bonuses color nocol">Taille unique</li>
                    <li class="levels color nocol">Voler la vedette</li>
                    <template v-for="(item, index) in munchkin3.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin3.version) !== -1) && ((munchkin3.slaves && item.class.indexOf('slaves') !== -1) || (munchkin3.levels && item.class.indexOf('levels') !== -1) || (munchkin3.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin3.objects && item.class.indexOf('objects') !== -1) || (munchkin3.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin3.version) !== -1) && all.munchkin3TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkin3TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-4 munchkin-all" v-bind:class="{ 'is-visible': all.munchkin4 }">
        <img class="demo" src="media/images/upload/512ADEdYO8L._AC_UL320_SR252,320_.jpg" alt="Munchkin 4">
        <h2 id="munchkin-4">Munchkin 4 : Ton destin est sellé !</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin4.filters }">
            <h3 id="munchkin-4-filtres">Filtres</h3>
            <p><button v-on:click="munchkin4ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Éditions</strong>
                <div class="edition">
                    <p>
                        <label>
                            <input type="radio" value="nocol" v-model="munchkin4.version"> Édition originale
                        </label><br>
                        <label>
                            <input type="radio" value="color" v-model="munchkin4.version"> Seconde Édition - (Couleur)
                        </label>
                    </p>
                </div>
                <strong>Types de carte</strong>
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin4.bonuses"> Actions (<span v-text="munchkin4BonusesNumber">11</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin4.actions"> Améliorations (<span v-text="munchkin4ActionsNumber">13</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkin4.classes"> Classes (<span v-text="munchkin4ClassesNumber">5</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin4.stuffs"> Équipements (<span v-text="munchkin4StuffsNumber">11</span>)
                    </label><br>
                    <label class="acolytes">
                        <input type="checkbox" value="on" v-model="munchkin4.acolytes"> Fidèles Serviteurs (<span v-text="munchkin4AcolytesNumber">13</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkin4.levels"> Gains de Niveaux (<span v-text="munchkin4LevelsNumber">6</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin4.curses"> Malédictions (<span v-text="munchkin4CursesNumber">5</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkin4.monsters"> Monstres (<span v-text="munchkin4MonstersNumber">27</span>)
                    </label><br>
                    <label class="mounts">
                        <input type="checkbox" value="on" v-model="munchkin4.mounts"> Montures (<span v-text="munchkin4MountsNumber">9</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin4.objects"> Objets (<span v-text="munchkin4ObjectsNumber">6</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin4.races"> Races (<span v-text="munchkin4RacesNumber">6</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-4-details">Détails</h3>
            <p><img src="media/images/upload/m4.gif" alt="Munchkin 4"> Cette icone en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>Les Fidèles serviteurs</li>
                <li>Les Montures</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkin4CardsNumber">112</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-4-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin4DoorsNumber">78</span></p>
                <ol>
                    <li class="actions color nocol">...jouant de la cornemuse</li>
                    <li class="actions color nocol">...surgi de l&#39;enfer</li>
                    <li class="actions color nocol">À dents de sable</li>
                    <li class="actions color nocol">Affamé</li>
                    <li class="mounts color nocol">Aigle de selle</li>
                    <li class="monsters color nocol">Bête égarante</li>
                    <li class="classes color nocol">Barde</li>
                    <li class="actions color nocol">Big Joe</li>
                    <li class="monsters color nocol">Bugs Beuh-Ni</li>
                    <li class="monsters color nocol">Camionosaure (Monstertruckosaurus Rex)</li>
                    <li class="monsters color nocol">Crâne en peluche</li>
                    <li class="actions color nocol">Demi...</li>
                    <li class="mounts color nocol">Dragon de selle</li>
                    <li class="races color nocol">Elfe</li>
                    <li class="actions color nocol">En armure</li>
                    <li class="acolytes color nocol">Fidèle serviteur barde</li>
                    <li class="acolytes color nocol">Fidèle serviteur Chappendale</li>
                    <li class="acolytes color nocol">Fidèle serviteur elfe</li>
                    <li class="acolytes color nocol">Fidèle serviteur en solde</li>
                    <li class="acolytes color nocol">Fidèle serviteur gnome</li>
                    <li class="acolytes color nocol">Fidèle serviteur guerrier</li>
                    <li class="acolytes color nocol">Fidèle serviteur halfelin</li>
                    <li class="acolytes color nocol">Fidèle serviteur magicien</li>
                    <li class="acolytes color nocol">Fidèle serviteur nain</li>
                    <li class="acolytes color nocol">Fidèle serviteur orque</li>
                    <li class="acolytes color nocol">Fidèle serviteur prètre</li>
                    <li class="acolytes color nocol">Fidèle <del>serviteur</del> <del>serviteuse</del> gourgandine pas farouche, quoi...</li>
                    <li class="acolytes color nocol">Fidèle serviteur voleur</li>
                    <li class="actions color nocol">Furtif</li>
                    <li class="monsters color nocol">Harry Pot-d&#39;terre</li>
                    <li class="monsters color nocol">Géant Ninja</li>
                    <li class="monsters color nocol">Gelée au caramel fondu</li>
                    <li class="mounts color nocol">Gerbille mutante géante de selle</li>
                    <li class="races color nocol">Gnome</li>
                    <li class="monsters color nocol">Godefroy de Court Bouillon</li>
                    <li class="monsters color nocol">Gros type velu et barbu qu&#39;on connait pas...</li>
                    <li class="classes color nocol">Guerrier</li>
                    <li class="races color nocol">Halfelin</li>
                    <li class="monsters color nocol">Katrina</li>
                    <li class="monsters color nocol">La nuée des morts-vivants</li>
                    <li class="monsters color nocol">Le Mauvais oeil</li>
                    <li class="mounts color nocol">Loup de selle</li>
                    <li class="monsters color nocol"><del>Ma marraine</del> Mon parrain la fée</li>
                    <li class="classes color nocol">Magicien</li>
                    <li class="curses color nocol">Malédiction ! Charges patronales</li>
                    <li class="curses color nocol">Malédiction ! Monture flatulente</li>
                    <li class="curses color nocol">Malédiction ! Plancher en papier tue-mouche !</li>
                    <li class="curses color nocol">Malédiction ! Rations gatées</li>
                    <li class="curses color nocol">Malédiction ! Tout est relatif !</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="races color nocol">Nain</li>
                    <li class="monsters color nocol">Oeuf</li>
                    <li class="races color nocol">Orque</li>
                    <li class="monsters color nocol">Ours bipolaire</li>
                    <li class="monsters color nocol">Ours pigeon</li>
                    <li class="monsters color nocol">Petit coin d&#39;ombre tout à fait inoffensif</li>
                    <li class="monsters color nocol">Petit toutou tout ce qu&#39;il y a de plus ordinaire</li>
                    <li class="monsters color nocol">Polly Èdre</li>
                    <li class="mounts color nocol">Poulet de selle</li>
                    <li class="classes color nocol">Prêtre</li>
                    <li class="mounts color nocol">Puissant destrier</li>
                    <li class="mounts color nocol">Raptor de selle</li>
                    <li class="actions color nocol">Résistant à la magie</li>
                    <li class="monsters color nocol">Réveil matin</li>
                    <li class="races color nocol">Sang-mêlé</li>
                    <li class="monsters color nocol">Sphinx farceur</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="mounts color nocol">Tigre de selle</li>
                    <li class="monsters color nocol">Toison Noire, le Fleau des Sept Mers, brebis égarée</li>
                    <li class="monsters color nocol">Touffu, élémentaire de poils</li>
                    <li class="monsters color nocol">Toute pitite araignée mignonne</li>
                    <li class="mounts color nocol">Tortue de selle</li>
                    <li class="actions color nocol">Tricheur !</li>
                    <li class="monsters color nocol">Vase naze à l&#39;uzi usé</li>
                    <li class="classes color nocol">Voleur</li>
                    <li class="monsters color nocol">William Jexpire, auteur du Songe d&#39;une pluie d&#39;XP</li>
                    <li class="monsters color nocol">Yack Yack Yack !</li>
                    <template v-for="(item, index) in munchkin4.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin4.version) !== -1) && ((munchkin4.curses && item.class.indexOf('curses') !== -1) || (munchkin4.acolytes && item.class.indexOf('acolytes') !== -1) || (munchkin4.mounts && item.class.indexOf('mounts') !== -1) || (munchkin4.classes && item.class.indexOf('classes') !== -1) || (munchkin4.races && item.class.indexOf('races') !== -1) || (munchkin4.monsters && item.class.indexOf('monsters') !== -1) || (munchkin4.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin4.version) !== -1) && all.munchkin4DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkin4DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-4-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkin4TreasuresNumber">34</span></p>
                <ol>
                    <li class="bonuses color nocol">...du Destin</li>
                    <li class="bonuses color nocol">Ailes de précipitation</li>
                    <li class="objects color nocol">Anneau de souhait</li>
                    <li class="objects color nocol">Appât à monture &quot;Oui-y-s&#39;casse&quot;</li>
                    <li class="stuffs color nocol">Arc souffrant d&#39;hypertension</li>
                    <li class="stuffs color nocol">Armure en épluchures de patates</li>
                    <li class="stuffs color nocol">Armure en solde</li>
                    <li class="stuffs color nocol">Batte de braise-ball</li>
                    <li class="stuffs color nocol">Bottes Deux Chevals</li>
                    <li class="bonuses color nocol">Bride lance-flammes</li>
                    <li class="bonuses color nocol">Brillant</li>
                    <li class="stuffs color nocol">Casque de fier-à-bras</li>
                    <li class="objects color nocol">Chant nuptial</li>
                    <li class="bonuses color nocol">Crise d&#39;Intelligence aiguë</li>
                    <li class="stuffs color nocol">Combat à pied nus</li>
                    <li class="bonuses color nocol">Crise de Jalousie</li>
                    <li class="objects color nocol">Dé Pipé</li>
                    <li class="stuffs color nocol">Faux et usage de faux</li>
                    <li class="bonuses color nocol">Maîtrise de gestion en management</li>
                    <li class="stuffs color nocol">Masque d&#39;Halloween</li>
                    <li class="bonuses color nocol">Mécano-...</li>
                    <li class="levels color nocol">Piller son propre temple</li>
                    <li class="stuffs color nocol">Planche à <del>repasser</del> trepasser</li>
                    <li class="objects color nocol">Potin de changement de sexe</li>
                    <li class="bonuses color nocol">Potion de volubilité</li>
                    <li class="objects color nocol">Poudre rétrécissante</li>
                    <li class="stuffs color nocol">Pulvérisatueur</li>
                    <li class="levels color nocol">Réveiller un volcan sous la ville ennemie</li>
                    <li class="levels color nocol">S&#39;habiller comme son personnage</li>
                    <li class="bonuses color nocol">Sanfouane et l&#39;oie</li>
                    <li class="bonuses color nocol">Soudoyer un Fidèle serviteur</li>
                    <li class="levels color nocol">Tuer des nazis</li>
                    <li class="levels color nocol">Tuer un Fidèle Serviteur</li>
                    <li class="levels color nocol">Tuer une Monture</li>
                    <template v-for="(item, index) in munchkin4.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin4.version) !== -1) && ((munchkin4.levels && item.class.indexOf('levels') !== -1) || (munchkin4.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin4.objects && item.class.indexOf('objects') !== -1) || (munchkin4.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin4.version) !== -1) && all.munchkin4TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkin4TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-5 munchkin-all" v-bind:class="{ 'is-visible': all.munchkin5 }">
        <img class="demo" src="media/images/upload/munchkin-5-on-ze-rode-again-edge_2345.jpg" alt="Munchkin 5">
        <h2 id="munchkin-5">Munchkin 5 : On Zeu Rôde Again</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin5.filters }">
            <h3 id="munchkin-5-filtres">Filtres</h3>
            <p><button v-on:click="munchkin5ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Éditions</strong>
                <div class="edition">
                    <p>
                        <label>
                            <input type="radio" value="nocol" v-model="munchkin5.version"> Édition originale
                    </label>
                        <br>
                        <label>
                            <input type="radio" value="color" v-model="munchkin5.version"> Seconde Édition - (Couleur)
                    </label>
                    </p>
                </div>
                <strong>Types de carte</strong>
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin5.bonuses"> Actions (<span v-text="munchkin5BonusesNumber">13</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin5.actions"> Améliorations (<span v-text="munchkin5ActionsNumber">8</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkin5.classes"> Classes (<span v-text="munchkin5ClassesNumber">6</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin5.stuffs"> Équipements (<span v-text="munchkin5StuffsNumber">24</span>)
                    </label><br>
                    <label class="acolytes">
                        <input type="checkbox" value="on" v-model="munchkin5.acolytes"> Fidèles Serviteurs (<span v-text="munchkin5AcolytesNumber">1</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkin5.levels"> Gains de Niveaux (<span v-text="munchkin5LevelsNumber">7</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin5.curses"> Malédictions (<span v-text="munchkin5CursesNumber">9</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkin5.monsters"> Monstres (<span v-text="munchkin5MonstersNumber">27</span>)
                    </label><br>
                    <label class="mounts">
                        <input type="checkbox" value="on" v-model="munchkin5.mounts"> Montures (<span v-text="munchkin5MountsNumber">3</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin5.objects"> Objets (<span v-text="munchkin5ObjectsNumber">8</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin5.races"> Races (<span v-text="munchkin5RacesNumber">6</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-5-details">Détails</h3>
            <p><img src="media/images/upload/m5.gif" alt="Munchkin 5"> Cette icone en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>La Races des Gnomes</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkin5CardsNumber">112</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-5-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin5DoorsNumber">60</span></p>
                <ol>
                    <li class="actions color nocol">À deux têtes</li>
                    <li class="monsters color nocol">Anubis</li>
                    <li class="mounts color nocol">Araignée de selle</li>
                    <li class="actions color nocol">Au sourire sinistre</li>
                    <li class="monsters color nocol">Blobgobelin</li>
                    <li class="monsters color nocol">Boeuf Pour-qui-l&#39;gnon</li>
                    <li class="monsters color nocol"><del>Bonus de base</del> Bonnasse de bouse à l&#39;attaque</li>
                    <li class="monsters color nocol">Clowns morts-vivants</li>
                    <li class="monsters color nocol">Coq qu&#39;est triste</li>
                    <li class="monsters color nocol">Cyclope</li>
                    <li class="monsters color nocol">Druide</li>
                    <li class="races color nocol">Elfe</li>
                    <li class="monsters color nocol">Ex di MJ</li>
                    <li class="monsters color nocol">Fée des dents</li>
                    <li class="acolytes color nocol">Fidèle serviteur porteur de torche</li>
                    <li class="races color nocol">Gnome</li>
                    <li class="actions color nocol">Gonflable</li>
                    <li class="races color nocol">Halfelin</li>
                    <li class="monsters color nocol">Insectricheurs</li>
                    <li class="monsters color nocol">Karateka Rapace (spectral, qui plus est...)</li>
                    <li class="monsters color nocol">La colère du Khan</li>
                    <li class="monsters color nocol">La main du destin</li>
                    <li class="monsters color nocol">Les J&#39;tue-mpfs</li>
                    <li class="monsters color nocol">Les frères Grimm</li>
                    <li class="monsters color nocol">Les trois munchquetaires</li>
                    <li class="monsters color nocol">Mâchoire de verre</li>
                    <li class="curses color nocol">Malédiction ! Catalogue</li>
                    <li class="curses color nocol">Malédiction ! &quot;Et moi j&#39;ai... un vieux caillou...&quot;</li>
                    <li class="curses color nocol">Malédiction ! Musette de rétention brachiale inopinée</li>
                    <li class="curses color nocol">Malédiction ! Perte du dé porte-bonheur</li>
                    <li class="curses color nocol">Malédiction ! Pluie de belettes</li>
                    <li class="curses color nocol">Malédiction ! Poupée vaudou</li>
                    <li class="curses color nocol">Malédiction ! Règles arbitrairement égalitaires</li>
                    <li class="curses color nocol">Malédiction ! Souhait prononcé sur un coup de tête</li>
                    <li class="curses color nocol">Malédiction ! Souhaiter qu&#39;on vous retire une épine du pied</li>
                    <li class="monsters color nocol">Monstre (subtilement) caché sous le lit</li>
                    <li class="actions color nocol">Monstre Érrant</li>
                    <li class="actions color nocol">Monstre Érrant</li>
                    <li class="mounts color nocol">Monture en solde</li>
                    <li class="races color nocol">Nain</li>
                    <li class="races color nocol">Orque</li>
                    <li class="monsters color nocol">Orque perdu</li>
                    <li class="actions color nocol">Politiquement correct</li>
                    <li class="monsters color nocol">Pou de foudre</li>
                    <li class="monsters color nocol">Pouletergeist</li>
                    <li class="monsters color nocol">Rapace caparaçonne</li>
                    <li class="monsters color nocol">Salaad</li>
                    <li class="races color nocol">Sang-mêlé</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="classes color nocol">Rôdeur</li>
                    <li class="classes color nocol">Rôdeur</li>
                    <li class="classes color nocol">Rôdeur</li>
                    <li class="classes color nocol">Rôdeur</li>
                    <li class="classes color nocol">Rôdeur</li>
                    <li class="classes color nocol">Rôdeur</li>
                    <li class="mounts color nocol">Tapis volant</li>
                    <li class="monsters color nocol">Téléprospecteur</li>
                    <li class="monsters color nocol">Tout ptit dieu</li>
                    <li class="actions color nocol">Tricheur</li>
                    <li class="monsters color nocol">Vendeur de montures d&#39;occasion</li>
                    <template v-for="(item, index) in munchkin5.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin5.version) !== -1) && ((munchkin5.curses && item.class.indexOf('curses') !== -1) || (munchkin5.acolytes && item.class.indexOf('acolytes') !== -1) || (munchkin5.mounts && item.class.indexOf('mounts') !== -1) || (munchkin5.classes && item.class.indexOf('classes') !== -1) || (munchkin5.races && item.class.indexOf('races') !== -1) || (munchkin5.monsters && item.class.indexOf('monsters') !== -1) || (munchkin5.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin5.version) !== -1) && all.munchkin5DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkin5DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-5-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkin5TreasuresNumber">52</span></p>
                <ol>
                    <li class="objects color nocol">Anneau de Souhait</li>
                    <li class="objects color nocol">Anneau de Souhait</li>
                    <li class="stuffs color nocol">Arbre de transmission de gnons</li>
                    <li class="stuffs color nocol">Arc de désequilibre éhonté des combats</li>
                    <li class="stuffs color nocol">Armure d&#39;écuelles</li>
                    <li class="bonuses color nocol">Armure de plaques chauffantes</li>
                    <li class="stuffs color nocol">Armure <del>lourde</del> gourde</li>
                    <li class="bonuses color nocol">Baron de Münchkinhausen</li>
                    <li class="bonuses color nocol">Bénédiction</li>
                    <li class="stuffs color nocol">Bottes de sept dieux</li>
                    <li class="stuffs color nocol">Bouclier humain</li>
                    <li class="stuffs color nocol">Casque de l&#39;horreur indicible et effroyablement terrifiante</li>
                    <li class="stuffs color nocol">Casque invisible</li>
                    <li class="stuffs color nocol">Cloche à gros mage</li>
                    <li class="objects color nocol">Corde de saut à l&#39;élastique</li>
                    <li class="bonuses color nocol">Coup critique</li>
                    <li class="stuffs color nocol">Cordon d&#39;insécurité</li>
                    <li class="stuffs color nocol">Cotte de mailles en spandex</li>
                    <li class="objects color nocol">Dé pipé</li>
                    <li class="bonuses color nocol">Deux pieds de plus</li>
                    <li class="stuffs color nocol">Diadème de dextérité suspecte</li>
                    <li class="objects color nocol">Eau gazeuse bénite</li>
                    <li class="levels color nocol">Écrire l&#39;histoire de votre personnage</li>
                    <li class="bonuses color nocol">Enflammé</li>
                    <li class="stuffs color nocol">Épée à trois mains</li>
                    <li class="stuffs color nocol">Espadon</li>
                    <li class="stuffs color nocol">Épée courte</li>
                    <li class="levels color nocol">Faire cracher du soda par le nez au MJ</li>
                    <li class="levels color nocol">Faire rire le MJ</li>
                    <li class="bonuses color nocol">Faux <del>sein</del> saint en plastique</li>
                    <li class="stuffs color nocol">Harnois à la noix</li>
                    <li class="bonuses color nocol">Il ne peut en rester qu&#39;un et c&#39;est moi</li>
                    <li class="bonuses color nocol">Invitation à prendre une bière</li>
                    <li class="levels color nocol">Jeter un froid</li>
                    <li class="stuffs color nocol">Joli petit haut perforant</li>
                    <li class="bonuses color nocol">Judicieusement interchangeable</li>
                    <li class="stuffs color nocol">LA hache</li>
                    <li class="stuffs color nocol">Lame <del>vorpale</del> morfale</li>
                    <li class="stuffs color nocol">Marteau de guerre de destruction massive</li>
                    <li class="stuffs color nocol">Moulin à gruyère</li>
                    <li class="levels color nocol">Nouveau MJ crédule</li>
                    <li class="stuffs color nocol">Pantoufles de P&#39;yen-Hu</li>
                    <li class="objects color nocol">Pierre fine aux os de poil</li>
                    <li class="bonuses color nocol">Plaque personnalisée</li>
                    <li class="bonuses color nocol"><del>Port des armures légères...</del> Peur des ordres d&#39;une mégère</li>
                    <li class="objects color nocol">Potion <del>de torero</del> d&#39;eau de terreur</li>
                    <li class="stuffs color nocol">Poulaines</li>
                    <li class="levels color nocol">Rire des répliques empruntées par le MJ aux Monty Python</li>
                    <li class="objects color nocol">Sandwich aux épinards</li>
                    <li class="stuffs color nocol">Sceptre d&#39;éveil Playsghoule©</li>
                    <li class="levels color nocol">Trouver l&#39;entrée secrète</li>
                    <li class="bonuses color nocol">Tuning de monture</li>
                    <template v-for="(item, index) in munchkin5.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin5.version) !== -1) && ((munchkin5.levels && item.class.indexOf('levels') !== -1) || (munchkin5.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin5.objects && item.class.indexOf('objects') !== -1) || (munchkin5.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin5.version) !== -1) && all.munchkin5TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkin5TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-6 munchkin-all" v-bind:class="{ 'is-visible': all.munchkin6 }">
        <img class="demo" src="media/images/upload/01ec5a2846c8ecc0bc8b3fa3ad606c169c3a.jpeg" alt="Munchkin 6">
        <h2 id="munchkin-6">Munchkin 6 : Le Donjon de la Farce</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin6.filters }">
            <h3 id="munchkin-6-filtres">Filtres</h3>
            <p><button v-on:click="munchkin6ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Éditions</strong>
                <div class="edition">
                    <p>
                        <label>
                            <input type="radio" value="nocol" v-model="munchkin6.version"> Édition originale
                        </label><br>
                        <label>
                            <input type="radio" value="color" v-model="munchkin6.version"> Seconde Édition - (Couleur)
                        </label>
                    </p>
                </div>
                <strong>Types de carte</strong>
                <p>
                    <label class="fields">
                        <input type="checkbox" value="on" v-model="munchkin6.fields"> Donjons (<span v-text="munchkin6DonjonsNumber">20</span>)
                    </label><br>
                    <label class="warps">
                        <input type="checkbox" value="on" v-model="munchkin6.warps"> Portails  (<span v-text="munchkin6WarpsNumber">16</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-6-details">Détails</h3>
            <p><img src="media/images/upload/m6.gif" alt="Munchkin 6"> Cette icone en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>Les Portails</li>
                <li>Les Donjons</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkin6CardsNumber">36</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-6-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin6DoorsNumber">16</span></p>
                <ol>
                    <li class="warps color nocol">Éboulement</li>
                    <li class="warps color nocol">Éboulement</li>
                    <li class="warps color nocol">La fortune sourit aux gros nuls</li>
                    <li class="warps color nocol">La fortune sourit aux gros nuls</li>
                    <li class="warps color nocol">Passage étroit</li>
                    <li class="warps color nocol">Passage étroit</li>
                    <li class="warps color nocol">Tous les chemin mènent à Rome</li>
                    <li class="warps color nocol">Tous les chemin mènent à Rome</li>
                    <li class="warps color nocol">Tourner en rond</li>
                    <li class="warps color nocol">Tourner en rond</li>
                    <li class="warps color nocol">Porte secrète</li>
                    <li class="warps color nocol">Porte secrète</li>
                    <li class="warps color nocol">Donjon néttoyé !</li>
                    <li class="warps color nocol">Donjon néttoyé !</li>
                    <li class="warps color nocol">Téléportation !</li>
                    <li class="warps color nocol">Téléportation !</li>
                    <template v-for="(item, index) in munchkin6.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin6.version) !== -1) && (munchkin6.warps && item.class.indexOf('warps') !== -1) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin6.version) !== -1) && all.munchkin6DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkin6DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="donjons">
                <h3 id="munchkin-6-donjons">Donjons</h3>
                <p>Nombre total de donjons : <span v-text="munchkin6DonjonsNumber">20</span></p>
                <ol>
                    <li class="fields color nocol">Chez Joe, le donjon à prix discount !</li>
                    <li class="fields color nocol">Donjon au sol en papier tue-mouche dégueu</li>
                    <li class="fields color nocol">Donjon de l&#39;effet manga libidineux</li>
                    <li class="fields color nocol">Donjon de la prodigalité du MD</li>
                    <li class="fields color nocol">Donjon de la révoltante mesquinerie</li>
                    <li class="fields color nocol">Donjon de la surabondance elfique</li>
                    <li class="fields color nocol">Donjon de la tricherie encore plus éhontée que d&#39;habitude</li>
                    <li class="fields color nocol">Donjon des adversaires en guimauve</li>
                    <li class="fields color nocol">Donjon des malédictions contagieuses</li>
                    <li class="fields color nocol">Donjon des monstres militants</li>
                    <li class="fields color nocol">Donjon des morts-vivants omniprésents</li>
                    <li class="fields color nocol">Donjon des prouesses inattendues</li>
                    <li class="fields color nocol">Donjon des races ridicules</li>
                    <li class="fields color nocol">Donjon des règles d&#39;emcombrement truquées</li>
                    <li class="fields color nocol">Donjon du butin opulent</li>
                    <li class="fields color nocol">Donjon du changement de sexe</li>
                    <li class="fields color nocol">Donjon du meurtre obligatoire</li>
                    <li class="fields color nocol">Donjon du petit effort en plus...</li>
                    <li class="fields color nocol">Donjon du talent prodigieux</li>
                    <li class="fields color nocol">Donjon du trépas létal mortel qui tue</li>
                    <template v-for="(item, index) in munchkin6.donjonsList">
                        <li v-bind:class="(item.class.indexOf(munchkin6.version) !== -1) && (munchkin6.fields && item.class.indexOf('fields') !== -1) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin6.version) !== -1) && all.munchkin6DonjonsEach[index] }">
                                <input type="checkbox" v-model="all.munchkin6DonjonsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-7-o munchkin-all" v-bind:class="{ 'is-visible': all.munchkin7o }">
        <img class="demo" src="media/images/upload/munchkin-7-et-pour-q-1372-1294056786.jpg" alt="Munchkin 7">
        <h2 id="munchkin-7-o">Munchkin 7 : Et pour quelques cartes de plus...</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin7o.filters }">
            <h3 id="munchkin-7-filtres">Filtres</h3>
            <p><button v-on:click="munchkin7oToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Éditions</strong>
                <div class="edition">
                    <p>
                        <label>
                            <input type="radio" value="nocol" v-model="munchkin7o.version"> Édition originale
                        </label><br>
                        <label>
                            <input type="radio" value="color" v-model="munchkin7o.version"> Seconde Édition - (Couleur)
                        </label>
                    </p>
                </div>
                <strong>Types de carte</strong>
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin7o.bonuses"> Actions (<span v-text="munchkin7oBonusesNumber">14</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin7o.actions"> Améliorations (<span v-text="munchkin7oActionsNumber">25</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin7o.stuffs"> Équipements (<span v-text="munchkin7oStuffsNumber">3</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin7o.curses"> Malédictions (<span v-text="munchkin7oCursesNumber">3</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin7o.objects"> Objets (<span v-text="munchkin7oObjectsNumber">7</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin7o.races"> Races (<span v-text="munchkin7oRacesNumber">4</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-7-o-details">Détails</h3>
            <p><img src="media/images/upload/m7o.gif" alt="Munchkin 7"> Cette icone en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>Un peu plus de triche !</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkin7oCardsNumber">56</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-7-o-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin7oDoorsNumber">32</span></p>
                <ol>
                    <li class="actions color nocol">... et ses petits copains</li>
                    <li class="actions color nocol">... et ses petits copains</li>
                    <li class="races color nocol">Chimère</li>
                    <li class="actions color nocol">Dans de beaux draps</li>
                    <li class="actions color nocol">Indiciblement...</li>
                    <li class="actions color nocol">Invisible</li>
                    <li class="curses color nocol">Malédiction! Et ne m&#39;appelez pas Ginette</li>
                    <li class="curses color nocol">Malédiction! Expiration de garantie !</li>
                    <li class="curses color nocol">Malédiction! Peinture au plomb !</li>
                    <li class="actions color nocol">Meurtrier</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Sauvage</li>
                    <li class="actions color nocol">Séduisant(e)</li>
                    <li class="actions color nocol">Standard</li>
                    <li class="races color nocol">Sang-mêlé</li>
                    <li class="races color nocol">Sang-mêlé</li>
                    <li class="races color nocol">Sang-méli-mélo</li>
                    <li class="actions color nocol">Super Maousse Munchkin</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="actions color nocol">Tricheur !</li>
                    <li class="actions color nocol">Tricheur !</li>
                    <li class="actions color nocol">Tricheur !</li>
                    <li class="actions color nocol">Tricheur !</li>
                    <li class="actions color nocol">Tromperie dur la marchandise</li>
                    <li class="actions color nocol">Ultra Munchkin</li>
                    <li class="actions color nocol">Vraiment très...</li>
                    <li class="actions color nocol">Voleur de niveaux</li>
                    <template v-for="(item, index) in munchkin7o.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin7o.version) !== -1) && ((munchkin7o.curses && item.class.indexOf('curses') !== -1) || (munchkin7o.actions && item.class.indexOf('actions') !== -1) || (munchkin7o.classes && item.class.indexOf('classes') !== -1) || (munchkin7o.races && item.class.indexOf('races') !== -1) || (munchkin7o.monsters && item.class.indexOf('monsters') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin7o.version) !== -1) && all.munchkin7oDoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkin7oDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-7-o-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkin7oTreasuresNumber">24</span></p>
                <ol>
                    <li class="bonuses color nocol">...À coque en acier renforcé</li>
                    <li class="bonuses color nocol">...À talons aiguille</li>
                    <li class="bonuses color nocol">...Au multiples bouts pointus et tranchants</li>
                    <li class="bonuses color nocol">...Autonettoyant(e)</li>
                    <li class="bonuses color nocol">...Monté sur ressorts</li>
                    <li class="bonuses color nocol">...Perce-armure</li>
                    <li class="bonuses color nocol">...Plaqué or</li>
                    <li class="bonuses color nocol">...Renforcé(e)</li>
                    <li class="bonuses color nocol">...Thème musical</li>
                    <li class="bonuses color nocol">...Ventilé</li>
                    <li class="objects color nocol">1001 astuces de survie en donjon</li>
                    <li class="objects color nocol">Anneau de Souhait</li>
                    <li class="stuffs color nocol">Bon pour des objets gratuits</li>
                    <li class="stuffs color nocol">Costume ne laissant (quasiment) rien à l&#39;imagination</li>
                    <li class="objects color nocol">Dé Pipé</li>
                    <li class="bonuses color nocol">Deux <del>pieds dans le même sabot</del> sabots sur le même pied</li>
                    <li class="bonuses color nocol">Oh le gros tricheuuuuuuuur!</li>
                    <li class="objects color nocol">Potion magique de transmutation d&#39;ADN</li>
                    <li class="objects color nocol">Sou porte-bonheur</li>
                    <li class="objects color nocol">Talisman porte-bonheur</li>
                    <li class="objects color nocol">Talisman porte-bonheur</li>
                    <li class="bonuses color nocol">Triche éhontée</li>
                    <li class="bonuses color nocol">Triche éhontée</li>
                    <li class="stuffs color nocol">Trou portatif</li>
                    <template v-for="(item, index) in munchkin7o.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin7o.version) !== -1) && ((munchkin7o.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin7o.objects && item.class.indexOf('objects') !== -1) || (munchkin7o.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin7o.version) !== -1) && all.munchkin7oTreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkin7oTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-7 munchkin-all" v-bind:class="{ 'is-visible': all.munchkin7 }">
        <img class="demo" src="media/images/upload/ubimu07.png" alt="Munchkin 7">
        <h2 id="munchkin-7">Munchkin 7 : Oh le gros tricheuuuuuuuur !</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin7.filters }">
            <h3 id="munchkin-7-filtres">Filtres</h3>
            <p><button v-on:click="munchkin7ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Types de carte</strong>
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin7.bonuses"> Actions (<span v-text="munchkin7BonusesNumber">19</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin7.actions"> Améliorations (<span v-text="munchkin7ActionsNumber">50</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin7.stuffs"> Équipements (<span v-text="munchkin7StuffsNumber">5</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkin7.levels"> Gains de Niveaux (<span v-text="munchkin7LevelsNumber">4</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin7.curses"> Malédictions (<span v-text="munchkin7CursesNumber">2</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkin7.monsters"> Monstres (<span v-text="munchkin7MonstersNumber">11</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin7.objects"> Objets (<span v-text="munchkin7ObjectsNumber">14</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin7.races"> Races (<span v-text="munchkin7RacesNumber">7</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-7-details">Détails</h3>
            <p><img src="media/images/upload/m7.gif" alt="Munchkin 7"> Cette icone en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>De la triche de malade !</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkin7CardsNumber">112</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-7-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin7DoorsNumber">70</span></p>
                <ol>
                    <li class="actions color">...de l&#39;Amour</li>
                    <li class="actions color">...avec supplément de fromage</li>
                    <li class="actions color">Acheté au prix de gros</li>
                    <li class="actions color">Alité</li>
                    <li class="actions color">Ancienne Édition</li>
                    <li class="actions color">Ancienne Édition</li>
                    <li class="actions color">Ancienne Édition</li>
                    <li class="actions color">Blindé</li>
                    <li class="races color">Chimère</li>
                    <li class="actions color">Dans de beaux draps</li>
                    <li class="actions color">Dans de beaux draps</li>
                    <li class="actions color">Deuxième round</li>
                    <li class="actions color">Édenté</li>
                    <li class="monsters color">Empreintes de pas</li>
                    <li class="actions color">Épique Junior</li>
                    <li class="actions color">Épique Junior</li>
                    <li class="actions color">Épique Junior</li>
                    <li class="actions color">Épouvantable</li>
                    <li class="actions color">Explosif</li>
                    <li class="actions color">Extraordinairement</li>
                    <li class="actions color">Extrèmement</li>
                    <li class="actions color">Foire aux monstres</li>
                    <li class="actions color">Foire aux monstres</li>
                    <li class="monsters color">Frites</li>
                    <li class="monsters color">Gérant de magasin de jeux</li>
                    <li class="actions color">Gonflé aux stéroïdes</li>
                    <li class="monsters color">Graffiti</li>
                    <li class="actions color">Inconcevablement</li>
                    <li class="actions color">Incroyablement</li>
                    <li class="actions color">Invraisemblablement</li>
                    <li class="monsters color">Linge sale</li>
                    <li class="curses color">Malédiction! Et ne m&#39;appelez pas Ginette</li>
                    <li class="curses color">Malédiction! Le MJ fait respecter les règles !</li>
                    <li class="monsters color">Marionnette chaussette</li>
                    <li class="monsters color">Mauvais odeur</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Mort-vivant</li>
                    <li class="actions color">Mort-vivant</li>
                    <li class="actions color">Mort-vivant</li>
                    <li class="monsters color">Petits soldats en plastique</li>
                    <li class="actions color">Saoul</li>
                    <li class="races color">Sang-mêlé</li>
                    <li class="races color">Sang-mêlé</li>
                    <li class="races color">Sang-mêlé</li>
                    <li class="races color">Sang-méli-mélo</li>
                    <li class="races color">Sang-méli-mélo</li>
                    <li class="races color">Sang-méli-mélo</li>
                    <li class="monsters color">Silhouette en carton</li>
                    <li class="monsters color">Smiley</li>
                    <li class="actions color">Sournois</li>
                    <li class="actions color">Super Maousse Munchkin</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="monsters color">Télévision</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Ultra Munchkin</li>
                    <li class="actions color">Ultra Munchkin</li>
                    <li class="actions color">Ultra Munchkin</li>
                    <li class="actions color">Ultra-rare</li>
                    <li class="actions color">Velu</li>
                    <li class="actions color">Vomitivement</li>
                    <template v-for="(item, index) in munchkin7.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin7.version) !== -1) && ((munchkin7.curses && item.class.indexOf('curses') !== -1) || (munchkin7.actions && item.class.indexOf('actions') !== -1) || (munchkin7.classes && item.class.indexOf('classes') !== -1) || (munchkin7.races && item.class.indexOf('races') !== -1) || (munchkin7.monsters && item.class.indexOf('monsters') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin7.version) !== -1) && all.munchkin7DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkin7DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-7-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkin7TreasuresNumber">42</span></p>
                <ol>
                    <li class="objects color">1001 astuces de survie en donjon</li>
                    <li class="bonuses color">À revêtement en Téflon®</li>
                    <li class="bonuses color">À coque en acier renforcé</li>
                    <li class="bonuses color">À talons aiguille</li>
                    <li class="bonuses color">Au multiples bouts pointus et tranchants</li>
                    <li class="bonuses color">Autonettoyant(e)</li>
                    <li class="stuffs color">Bon pour des objets gratuits</li>
                    <li class="stuffs color">Costume ne laissant (quasiment) rien à l&#39;imagination</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="stuffs color">Deux <del>pieds dans le même sabot</del> sabots sur le même pied</li>
                    <li class="objects color">Mites dressées</li>
                    <li class="bonuses color">Moi, je monte jusqu&#39;à II</li>
                    <li class="bonuses color">Monté sur ressorts</li>
                    <li class="objects color">Munchkin gonflable</li>
                    <li class="levels color">Nourrir l&#39;obsession du MJ pour les dés</li>
                    <li class="bonuses color">Oh le gros tricheuuuuuuuur!</li>
                    <li class="objects color">Parchemin de désamélioration</li>
                    <li class="bonuses color">Perce-armure</li>
                    <li class="bonuses color">Plaqué or</li>
                    <li class="objects color">Potion de taille démesurée</li>
                    <li class="objects color">Potion magique de transmutation d&#39;ADN</li>
                    <li class="bonuses color">Pour me prendre mon jouet, il faudra l&#39;arracher à mes mains froides et sans vie</li>
                    <li class="bonuses color">Pour me prendre mon jouet, il faudra l&#39;arracher à mes mains froides et sans vie</li>
                    <li class="bonuses color">Pour me prendre mon jouet, il faudra l&#39;arracher à mes mains froides et sans vie</li>
                    <li class="levels color">Retourner le cerveau du MJ</li>
                    <li class="bonuses color">Renforcé(e)</li>
                    <li class="levels color">Se réincarner sans mourir</li>
                    <li class="objects color">Sou porte-bonheur</li>
                    <li class="objects color">Talisman porte-bonheur</li>
                    <li class="objects color">Talisman porte-bonheur</li>
                    <li class="objects color">Talisman porte-bonheur</li>
                    <li class="objects color">Talisman porte-bonheur</li>
                    <li class="stuffs color">Thème musical</li>
                    <li class="bonuses color">Tonitruant</li>
                    <li class="bonuses color">Triche éhontée</li>
                    <li class="bonuses color">Triche éhontée</li>
                    <li class="bonuses color">Triche éhontée</li>
                    <li class="stuffs color">Trou portatif</li>
                    <li class="objects color">Vendre père et mère</li>
                    <li class="bonuses color">Ventilé</li>
                    <li class="levels color">Zieuter le scénario</li>
                    <template v-for="(item, index) in munchkin7.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin7.version) !== -1) && ((munchkin7.levels && item.class.indexOf('levels') !== -1) || (munchkin7.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin7.objects && item.class.indexOf('objects') !== -1) || (munchkin7.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin7.version) !== -1) && all.munchkin7TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkin7TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-8 munchkin-all" v-bind:class="{ 'is-visible': all.munchkin8 }">
        <img class="demo" src="media/images/upload/munchkin8.jpg" alt="Munchkin 8">
        <h2 id="munchkin-8">Munchkin 8 : Centaure et Sans Reproche</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin8.filters }">
            <h3 id="munchkin-8-filtres">Filtres</h3>
            <p><button v-on:click="munchkin8ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Types de carte</strong>
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin8.bonuses"> Actions (<span v-text="munchkin8BonusesNumber">11</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin8.actions"> Améliorations (<span v-text="munchkin8ActionsNumber">7</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin8.stuffs"> Équipements (<span v-text="munchkin8StuffsNumber">22</span>)
                    </label><br>
                    <label class="acolytes">
                        <input type="checkbox" value="on" v-model="munchkin8.acolytes"> Fidèles Serviteurs (<span v-text="munchkin8AcolytesNumber">3</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkin8.levels"> Gains de Niveaux (<span v-text="munchkin8LevelsNumber">6</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin8.curses"> Malédictions (<span v-text="munchkin8CursesNumber">14</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkin8.monsters"> Monstres (<span v-text="munchkin8MonstersNumber">24</span>)
                    </label><br>
                    <label class="mounts">
                        <input type="checkbox" value="on" v-model="munchkin8.mounts"> Montures (<span v-text="munchkin8MountsNumber">4</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin8.objects"> Objets (<span v-text="munchkin8ObjectsNumber">6</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin8.races"> Races (<span v-text="munchkin8RacesNumber">25</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-8-details">Détails</h3>
            <p><img src="media/images/upload/m8.gif" alt="Munchkin 8"> Cette icone en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>La Race des Centaures</li>
                <li>La Race des Hommes-lézards</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkin8CardsNumber">112</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-8-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin8DoorsNumber">77</span></p>
                <ol>
                    <li class="races color">Ancien</li>
                    <li class="races color">Ancien</li>
                    <li class="races color">Ancien</li>
                    <li class="monsters color">Accros qu&#39;aux deals</li>
                    <li class="monsters color"><del>Angle</del> Ange adroit</li>
                    <li class="monsters color"><del>Angle</del> Ange droit</li>
                    <li class="monsters color"><del>Angle</del> Ange obtus</li>
                    <li class="actions color">Barabare</li>
                    <li class="mounts color">Bélier de selle</li>
                    <li class="mounts color">Bouc et mystère</li>
                    <li class="races color">Centaure</li>
                    <li class="races color">Centaure</li>
                    <li class="races color">Centaure</li>
                    <li class="races color">Centaure</li>
                    <li class="races color">Centaure</li>
                    <li class="races color">Centaure</li>
                    <li class="races color">Centaure</li>
                    <li class="monsters color">Centaure Tillard</li>
                    <li class="monsters color">Cheval de bataille</li>
                    <li class="races color">D&#39;élite</li>
                    <li class="races color">D&#39;élite</li>
                    <li class="races color">D&#39;élite</li>
                    <li class="monsters color">Des serpents dans le bus</li>
                    <li class="acolytes color">Fidèle serviteur Centaure</li>
                    <li class="acolytes color">Fidèle serviteur Homme-lézard</li>
                    <li class="acolytes color">Fidèle Serviteur Médium</li>
                    <li class="monsters color">Flipper le <del>Dauphin</del> Saurien</li>
                    <li class="actions color">Grincheux</li>
                    <li class="races color">Homme-lézard</li>
                    <li class="races color">Homme-lézard</li>
                    <li class="races color">Homme-lézard</li>
                    <li class="races color">Homme-lézard</li>
                    <li class="races color">Homme-lézard</li>
                    <li class="races color">Homme-lézard</li>
                    <li class="races color">Homme-lézard</li>
                    <li class="monsters color">Homme des Tavernes</li>
                    <li class="monsters color">Jockey</li>
                    <li class="monsters color"><del>La nuit des morts vivants</del> L&#39;ami des mors luisants</li>
                    <li class="monsters color">Lapin en chocolat</li>
                    <li class="monsters color">Le cavalier sans tête (et sans cheval, de surcroît)</li>
                    <li class="races color">Légendaire</li>
                    <li class="races color">Légendaire</li>
                    <li class="races color">Légendaire</li>
                    <li class="monsters color">Lézards et essais</li>
                    <li class="mounts color">Licorne de selle</li>
                    <li class="monsters color">Lord Alfred Tennis-on</li>
                    <li class="curses color">Malédiction ! Appel de la forêt</li>
                    <li class="curses color">Malédiction ! Avoine avarée !</li>
                    <li class="curses color">Malédiction ! Bobos</li>
                    <li class="curses color">Malédiction ! Curieuse impression que les choses vont mal se passer...</li>
                    <li class="curses color">Malédiction ! Dé-coiffe-é</li>
                    <li class="curses color">Malédiction ! Dérive génétique</li>
                    <li class="curses color">Malédiction! Des fourmis (géantes rouges et carnivores) dans les jambes</li>
                    <li class="curses color">Malédiction! Gasterocotte de mailles</li>
                    <li class="curses color">Malédiction ! Perte du sens de l&#39;orientation sexuelle</li>
                    <li class="curses color">Malédiction ! Petits doigts gourds, gluants et gauches</li>
                    <li class="curses color">Malédiction ! Poussée d&#39;incompétence</li>
                    <li class="curses color">Malédiction! Ta race !</li>
                    <li class="curses color">Malédiction! Tu n&#39;étais <em>pas</em> l&#39;Élu</li>
                    <li class="curses color">Malédiction! Vide !</li>
                    <li class="monsters color">Monture Complètement Speed</li>
                    <li class="actions color">Névrosé</li>
                    <li class="actions color">Obsessionnel</li>
                    <li class="monsters color">Père Glu</li>
                    <li class="actions color">Placide</li>
                    <li class="monsters color">Prince crapaud</li>
                    <li class="monsters color">Roc Star</li>
                    <li class="monsters color">Salamandre</li>
                    <li class="monsters color">Salamandre Montypythonesque</li>
                    <li class="races color">Sang-mêlé</li>
                    <li class="races color">Sang-mêlé</li>
                    <li class="monsters color">Serpent de Midgard</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="monsters color">Tikbalang</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="monsters color">Varan navrant des écrans</li>
                    <li class="mounts color">Phénix de selle</li>
                    <template v-for="(item, index) in munchkin8.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin8.version) !== -1) && ((munchkin8.curses && item.class.indexOf('curses') !== -1) || (munchkin8.acolytes && item.class.indexOf('acolytes') !== -1) || (munchkin8.mounts && item.class.indexOf('mounts') !== -1) || (munchkin8.races && item.class.indexOf('races') !== -1) || (munchkin8.monsters && item.class.indexOf('monsters') !== -1) || (munchkin8.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin8.version) !== -1) && all.munchkin8DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkin8DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-8-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkin8TreasuresNumber">35</span></p>
                <ol>
                    <li class="levels color">À quelque chose malheur est bon</li>
                    <li class="stuffs color">Accessoires assortis</li>
                    <li class="levels color">Acheter de nouvelles figurines au MJ</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="objects color">Anneau qui donne la pêche !</li>
                    <li class="stuffs color">Appeau à cheval</li>
                    <li class="levels color">Arriver en avance à la partie</li>
                    <li class="bonuses color">Avatar</li>
                    <li class="stuffs color">Avertisseur sonore absolument pas kitsch</li>
                    <li class="stuffs color">Bardes</li>
                    <li class="stuffs color">Bottes en peau de mammifère</li>
                    <li class="levels color">Centaure et Sans Reproche</li>
                    <li class="stuffs color">Chaussures pour voyager à pinces</li>
                    <li class="stuffs color">Cotte <del>de mailles</del> d&#39;écailles</li>
                    <li class="stuffs color">Couverture d&#39;invisibilité</li>
                    <li class="stuffs color">Cravache enragée</li>
                    <li class="objects color">Dé pipé</li>
                    <li class="objects color">Dé ultrapipé</li>
                    <li class="stuffs color">Encensoir de censure</li>
                    <li class="stuffs color">Halo</li>
                    <li class="stuffs color">Lance et casque magiques</li>
                    <li class="stuffs color">Marmite de cassoulet William Saurien</li>
                    <li class="stuffs color">Masse à ailettes</li>
                    <li class="stuffs color">Mattraque du matin...</li>
                    <li class="stuffs color">Mattraque du soir...</li>
                    <li class="stuffs color">Oeillères</li>
                    <li class="stuffs color">Plumes de cheval</li>
                    <li class="stuffs color">Pull-over de Noël</li>
                    <li class="levels color">Regarder des films de monstres japonais</li>
                    <li class="stuffs color">Serpent <del>à sonnette</del> des toilettes</li>
                    <li class="objects color">Sirop des Râles</li>
                    <li class="objects color">Sirop des vrais bonhommes</li>
                    <li class="levels color">Trahir le groupe</li>
                    <li class="stuffs color">Truc sphérique, pointu et sacré</li>
                    <li class="stuffs color">Turbo</li>
                    <template v-for="(item, index) in munchkin8.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin8.version) !== -1) && ((munchkin8.levels && item.class.indexOf('levels') !== -1) || (munchkin8.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin8.objects && item.class.indexOf('objects') !== -1) || (munchkin8.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin8.version) !== -1) && all.munchkin8TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkin8TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-n munchkin-all" v-bind:class="{ 'is-visible': all.munchkinN }">
        <img class="demo" src="media/images/upload/ubimub01.png" alt="Munchkin : Petit Papa Munchkin">
        <h2 id="munchkin-n">Munchkin : Petit Papa Munchkin</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinN.filters }">
            <h3 id="munchkin-n-filtres">Filtres</h3>
            <p><button v-on:click="munchkinNToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Types de carte</strong>
                <p>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinN.actions"> Améliorations (<span v-text="munchkinNActionsNumber">8</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinN.stuffs"> Équipements (<span v-text="munchkinNStuffsNumber">19</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinN.levels"> Gains de Niveaux (<span v-text="munchkinNLevelsNumber">3</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinN.curses"> Malédictions (<span v-text="munchkinNCursesNumber">2</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinN.monsters"> Monstres (<span v-text="munchkinNMonstersNumber">26</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinN.objects"> Objets (<span v-text="munchkinNObjectsNumber">2</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-n-details">Détails</h3>
            <p>
            <img style="float: none;" src="media/images/upload/n1.gif" alt="Munchkin : Petit Papa Munchkin">
            <img style="float: none;" src="media/images/upload/n2.gif" alt="Munchkin : Petit Papa Munchkin">
            <img style="float: none;" src="media/images/upload/n3.gif" alt="Munchkin : Petit Papa Munchkin">
            <img style="float: none;" src="media/images/upload/n4.gif" alt="Munchkin : Petit Papa Munchkin">
            </p>
            <p>Les icones précédentes en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>Les Vilains et Gentils</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkinNCardsNumber">60</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-n-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinNDoorsNumber">36</span></p>
                <ol>
                    <li class="actions color">... armé d&#39;une bûche de Noël</li>
                    <li class="monsters color">Aides du père Noël</li>
                    <li class="monsters color">Ange de Bonté (mais aux manières un tantinet brutales)</li>
                    <li class="monsters color">Anti-Noël</li>
                    <li class="monsters color">Bergers allemands</li>
                    <li class="monsters color">Bon Anges de Neige</li>
                    <li class="monsters color">Casse-noisette</li>
                    <li class="monsters color">Camelot de Noěl</li>
                    <li class="monsters color">Dinde de Noël</li>
                    <li class="monsters color">Esprits de Noël</li>
                    <li class="monsters color">Éléphant blanc</li>
                    <li class="actions color">Gentil</li>
                    <li class="actions color">Gentil</li>
                    <li class="monsters color">Jouets défectueux</li>
                    <li class="actions color">Joyeux</li>
                    <li class="monsters color">Krampus</li>
                    <li class="monsters color">L&#39;enfant au (satané bon sang d&#39;)Tambour (qui casse les oreilles)</li>
                    <li class="monsters color">Le Crado de Noël</li>
                    <li class="monsters color">Le Vent d&#39;Hiver</li>
                    <li class="monsters color">Les p&#39;tits rennes qui voient rouge</li>
                    <li class="monsters color">Les trois rois mafieux</li>
                    <li class="curses color">Malédiction : <del>Joyeux</del> Facheux Noël</li>
                    <li class="curses color">Malédiction ! Pas la bonne taille !</li>
                    <li class="monsters color">Mère Noël</li>
                    <li class="monsters color">Perce oreilles</li>
                    <li class="monsters color">Père Noël</li>
                    <li class="monsters color">Petits chanteurs à la Noix de Bois</li>
                    <li class="monsters color">Petit tambour</li>
                    <li class="monsters color">Pôle Mords Express</li>
                    <li class="actions color">Police des vacances</li>
                    <li class="monsters color">Sapin de Noël</li>
                    <li class="monsters color">Scrooge</li>
                    <li class="monsters color">Spectre <del>du Noël présent</del> des présents de Noël</li>
                    <li class="actions color">Quand on perd Noël...</li>
                    <li class="actions color">Vilain</li>
                    <li class="actions color">Vilain</li>
                    <template v-for="(item, index) in munchkinN.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinN.version) !== -1) && ((munchkinN.curses && item.class.indexOf('curses') !== -1) || (munchkinN.mounts && item.class.indexOf('mounts') !== -1) || (munchkinN.races && item.class.indexOf('races') !== -1) || (munchkinN.monsters && item.class.indexOf('monsters') !== -1) || (munchkinN.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinN.version) !== -1) && all.munchkinNDoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinNDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-n-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinNTreasuresNumber">24</span></p>
                <ol>
                    <li class="levels color">Affrontez les fêtes de faim damnée</li>
                    <li class="levels color">Avec tes souhaits par milliers</li>
                    <li class="stuffs color">Boîte à chaussures</li>
                    <li class="stuffs color">Bottes de neige</li>
                    <li class="stuffs color">Bottes de Père Noël</li>
                    <li class="objects color">Boule de neige</li>
                    <li class="stuffs color">Boulet de <del>canon</del> charbon</li>
                    <li class="stuffs color">Cane à sucre (d&#39;orge)</li>
                    <li class="stuffs color">Cake au fruit un tout petit peu rassis, mais vraiment un tout petit peu</li>
                    <li class="stuffs color">Chandelle festive</li>
                    <li class="stuffs color">Chausson de Noël</li>
                    <li class="stuffs color">Chapeau de Père Noël</li>
                    <li class="stuffs color">Chapeau de Renne</li>
                    <li class="objects color">Coincé dans la cheminée</li>
                    <li class="stuffs color">Écharpe</li>
                    <li class="stuffs color">Étoile de Noël</li>
                    <li class="levels color">Lait de poule très légèrement alcoolisé</li>
                    <li class="stuffs color">Mât de Cocagne qui cogne</li>
                    <li class="stuffs color">Mon beau gourdin</li>
                    <li class="stuffs color">Mon petit soulier (innocent et parfaitement inoffensif, promis)</li>
                    <li class="stuffs color">Ôôôô tannen bombe, ôôô tannen bombe...</li>
                    <li class="stuffs color">Pagne en Guirlande</li>
                    <li class="stuffs color">Papier crado</li>
                    <li class="stuffs color">Pic <del>à</del> de glace</li>
                    <template v-for="(item, index) in munchkinN.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinN.version) !== -1) && ((munchkinN.levels && item.class.indexOf('levels') !== -1) || (munchkinN.objects && item.class.indexOf('objects') !== -1) || (munchkinN.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinN.version) !== -1) && all.munchkinNTreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinNTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-m munchkin-all" v-bind:class="{ 'is-visible': all.munchkinM }">
        <img class="demo" src="media/images/upload/ubimub2.png" alt="Munchkinomicon">
        <h2 id="munchkin-m">Munchkinomicon</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinM.filters }">
            <h3 id="munchkin-m-filtres">Filtres</h3>
            <p><button v-on:click="munchkinMToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Types de carte</strong>
                <p>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinM.actions"> Améliorations (<span v-text="munchkinMActionsNumber">17</span>)
                    </label><br>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinM.bonuses"> Actions (<span v-text="munchkinMBonusesNumber">1</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinM.classes"> Classes (<span v-text="munchkinMClassesNumber">1</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinM.stuffs"> Équipements (<span v-text="munchkinMStuffsNumber">4</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinM.levels"> Gains de Niveaux (<span v-text="munchkinMLevelsNumber">2</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinM.curses"> Malédictions (<span v-text="munchkinMCursesNumber">1</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinM.monsters"> Monstres (<span v-text="munchkinMMonstersNumber">3</span>)
                    </label><br>
                    <label class="munchkinomicon">
                        <input type="checkbox" value="on" v-model="munchkinM.munchkinomicon"> Munchkinomicon (<span v-text="munchkinMMunchkinomiconNumber">1</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinM.objects"> Objets (<span v-text="munchkinMObjectsNumber">6</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkinM.races"> Races (<span v-text="munchkinMRacesNumber">10</span>)
                    </label><br>
                    <label class="spells">
                        <input type="checkbox" value="on" v-model="munchkinM.spells"> Sorts (<span v-text="munchkinMSpellsNumber">14</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-m-details">Détails</h3>
            <p>
            <img style="float: none;" src="media/images/upload/mm.gif" alt="Munchkinomicon">
            <img style="float: none;" src="media/images/upload/mm1.gif" alt="Munchkinomicon">
            <img style="float: none;" src="media/images/upload/mm2.gif" alt="Munchkinomicon">
            <img style="float: none;" src="media/images/upload/mm3.gif" alt="Munchkinomicon">
            </p>
            <p>Les icones précédentes en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>Le Munchkinomicon</li>
                <li>Les Sorts</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkinMCardsNumber">60</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-m-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinMDoorsNumber">32</span></p>
                <ol>
                    <li class="actions color">... et ses petits copains</li>
                    <li class="actions color">... et ses petits copains</li>
                    <li class="actions color">De Hollywood</li>
                    <li class="races color">Elfe</li>
                    <li class="actions color">Enragé</li>
                    <li class="monsters color">Golem de savon</li>
                    <li class="classes color">Guerrier</li>
                    <li class="races color">Haut</li>
                    <li class="races color">Haut</li>
                    <li class="races color">Haut</li>
                    <li class="actions color">Indiciblement</li>
                    <li class="actions color">Invisible</li>
                    <li class="monsters color">Jeanne d&#39;Orque</li>
                    <li class="races color">Maître</li>
                    <li class="races color">Maître</li>
                    <li class="races color">Maître</li>
                    <li class="curses color">Malédiction ! Condamné par le Destin !</li>
                    <li class="actions color">Meurtrier</li>
                    <li class="actions color">Miniature</li>
                    <li class="monsters color">Peau de vache de la cour de récré</li>
                    <li class="actions color">Plein de préjugés</li>
                    <li class="actions color">Sauvage</li>
                    <li class="actions color">Séduisant(e)</li>
                    <li class="races color">Sombre</li>
                    <li class="races color">Sombre</li>
                    <li class="races color">Sombre</li>
                    <li class="actions color">Standard</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tromperie sur la marchandise</li>
                    <li class="actions color">Ultime</li>
                    <li class="actions color">Voleur de niveaux</li>
                    <li class="actions color">Vraiment très...</li>
                    <template v-for="(item, index) in munchkinM.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinM.version) !== -1) && ((munchkinM.curses && item.class.indexOf('curses') !== -1) || (munchkinM.classes && item.class.indexOf('classes') !== -1) || (munchkinM.races && item.class.indexOf('races') !== -1) || (munchkinM.monsters && item.class.indexOf('monsters') !== -1) || (munchkinM.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinM.version) !== -1) && all.munchkinMDoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinMDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-m-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinMTreasuresNumber">14</span></p>
                <ol>
                    <li class="stuffs color">Bottes de pas de deux</li>
                    <li class="bonuses color">Chutte de rochers : pas de survivant</li>
                    <li class="objects color">Dé ultrapipé</li>
                    <li class="objects color">Dé ultrapipé</li>
                    <li class="objects color">Dé ultrapipé</li>
                    <li class="objects color">Dé ultrapipé</li>
                    <li class="stuffs color">Enclume</li>
                    <li class="stuffs color">Greffier Griffu Grognon à une main</li>
                    <li class="munchkinomicon color">Munchkinomicon</li>
                    <li class="objects color">Potion d&#39;éructation déplacée</li>
                    <li class="objects color">Potion de continuité rétroactive</li>
                    <li class="levels color">Recalculez vos XP</li>
                    <li class="stuffs color">Tondeuse à gazon</li>
                    <li class="levels color">Un coup de polsh sur le matos !</li>
                    <template v-for="(item, index) in munchkinM.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinM.version) !== -1) && ((munchkinM.levels && item.class.indexOf('levels') !== -1) || (munchkinM.munchkinomicon && item.class.indexOf('munchkinomicon') !== -1) || (munchkinM.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinM.objects && item.class.indexOf('objects') !== -1) || (munchkinM.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinM.version) !== -1) && all.munchkinMTreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinMTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
             <div class="books">
                <h3 id="munchkin-m-books">Sorts</h3>
                <p>Nombre total de sorts : <span v-text="munchkinMSpellsNumber">14</span></p>
                <ol>
                    <li class="spells color">À vot&#39; bon coeur !</li>
                    <li class="spells color">Gloire contagieuse</li>
                    <li class="spells color">Hachoir occulte</li>
                    <li class="spells color">Invocation de horde</li>
                    <li class="spells color">Invocation du livre</li>
                    <li class="spells color">Le pouvoir par la terreur</li>
                    <li class="spells color">La Crypte de Zyvakomanksébo</li>
                    <li class="spells color">Marque-page</li>
                    <li class="spells color">Mettez-y un peu du vôtre</li>
                    <li class="spells color">Monstre, je t&#39;ordonne de paraître !</li>
                    <li class="spells color">Ni vu ni connu j&#39;t&#39;embrouille</li>
                    <li class="spells color">Résurrection</li>
                    <li class="spells color">Sortilèche</li>
                    <li class="spells color">Un pour tous, tous pour moi</li>
                    <template v-for="(item, index) in munchkinM.spellsList">
                        <li v-bind:class="(item.class.indexOf(munchkinM.version) !== -1) && (munchkinM.spells && item.class.indexOf('spells') !== -1) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinM.version) !== -1) && all.munchkinMSpellsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinMSpellsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-st munchkin-all" v-bind:class="{ 'is-visible': all.munchkinSt }">
        <img class="demo" src="media/images/upload/ubism01.png" alt="Star Munchkin">
        <h2 id="munchkin-st">Star Munchkin</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinSt.filters }">
            <h3 id="munchkin-st-filtres">Filtres</h3>
            <p><button v-on:click="munchkinStToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Types de carte</strong>
                <p>
                    <label class="acolytes">
                        <input type="checkbox" value="on" v-model="munchkinSt.acolytes"> Acolytes (Serviteurs) (<span v-text="munchkinStAcolytesNumber">8</span>)
                    </label><br>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinSt.bonuses"> Actions (<span v-text="munchkinStBonusesNumber">4</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinSt.actions"> Améliorations (<span v-text="munchkinStActionsNumber">13</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinSt.classes"> Classes (<span v-text="munchkinStClassesNumber">12</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinSt.stuffs"> Équipements (<span v-text="munchkinStStuffsNumber">40</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinSt.levels"> Gains de Niveaux (<span v-text="munchkinStLevelsNumber">10</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinSt.monsters"> Monstres (<span v-text="munchkinStMonstersNumber">36</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinSt.curses"> Pièges (Malédictions) (<span v-text="munchkinStCursesNumber">15</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkinSt.races"> Races (<span v-text="munchkinStRacesNumber">9</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinSt.objects"> Objets (<span v-text="munchkinStObjectsNumber">21</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-st-details">Détails</h3>
            <p>Sont apparut avec ce jeu :</p>
            <ul>
                <li>Les Acolytes (similaire aux Fidèles Serviteurs)</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkinStCardsNumber">168</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-st-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinStDoorsNumber">93</span></p>
                <ol>
                    <li class="acolytes color">Acolyte Assistant(e) Sexy</li>
                    <li class="acolytes color">Acolyte Androïde</li>
                    <li class="acolytes color">Acolyte Cible Vivante</li>
                    <li class="acolytes color">Acolyte Cible Vivante</li>
                    <li class="acolytes color">Acolyte Extra-Terrestre Sonore et Velu</li>
                    <li class="acolytes color">Acolyte Fidèle Robot</li>
                    <li class="acolytes color">Acolyte Petit Génie</li>
                    <li class="acolytes color">Acolyte Voleur</li>
                    <li class="actions color">...d&#39;une Autre Dimension</li>
                    <li class="actions color">...et son Clone</li>
                    <li class="monsters color">Affreux Machin Vert</li>
                    <li class="monsters color">Amazone de l&#39;Espace</li>
                    <li class="monsters color">Astrorat Musqué Pirate de l&#39;Espace</li>
                    <li class="monsters color">Bimbo Bionique</li>
                    <li class="monsters color">Blob</li>
                    <li class="monsters color">Boule de Poils</li>
                    <li class="monsters color">Boule de Poils à Dents de Sabre</li>
                    <li class="monsters color">Capitaine Beurk</li>
                    <li class="monsters color">Cerveau en Bocal</li>
                    <li class="monsters color">Chaise</li>
                    <li class="classes color">Chasseur de Primes</li>
                    <li class="classes color">Chasseur de Primes</li>
                    <li class="classes color">Chasseur de Primes</li>
                    <li class="monsters color">Chose sur laquelle les Yeux de l&#39;Homme ne devraient Point se Poser</li>
                    <li class="monsters color">Cow-Boy de l&#39;Espace</li>
                    <li class="monsters color">Créatures Minuscules mais Incroyablement Avancées</li>
                    <li class="actions color">Cybernétique</li>
                    <li class="races color">Cyborg</li>
                    <li class="races color">Cyborg</li>
                    <li class="races color">Cyborg</li>
                    <li class="monsters color">Étoile <del>de mer</del> de l&#39;Espace...</li>
                    <li class="monsters color">Être de Pensée Impure</li>
                    <li class="races color">Félin</li>
                    <li class="races color">Félin</li>
                    <li class="races color">Félin</li>
                    <li class="monsters color">Fourmis Géantes</li>
                    <li class="monsters color">Frank le Tank Facétieux</li>
                    <li class="monsters color">Géant Gazeux</li>
                    <li class="monsters color">Jarre Jarre</li>
                    <li class="monsters color">L&#39;Étrange Créature du Lac Rose</li>
                    <li class="monsters color">L&#39;Horreur aux Mille Yeux (Comptez pas, on vous dit...)</li>
                    <li class="monsters color">La Chèvre de Monsieur Spock</li>
                    <li class="actions color">Le Dernier de sa Race</li>
                    <li class="monsters color">Le Grand Cthulhu</li>
                    <li class="monsters color">Massacrobot</li>
                    <li class="actions color">Miniature</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="races color">Mutan</li>
                    <li class="races color">Mutan</li>
                    <li class="races color">Mutan</li>
                    <li class="classes color">Négociant Interstellaire</li>
                    <li class="classes color">Négociant Interstellaire</li>
                    <li class="classes color">Négociant Interstellaire</li>
                    <li class="monsters color">Parasite Facial Extrêmement Attachant</li>
                    <li class="monsters color">Petits Gris</li>
                    <li class="monsters color">Petit Homme Vert</li>
                    <li class="curses color">Piège ! Accident de Téléportation</li>
                    <li class="curses color">Piège ! Amnésie</li>
                    <li class="curses color">Piège ! Antimatière</li>
                    <li class="curses color">Piège ! Bonbons Extra-Terrestres</li>
                    <li class="curses color">Piège ! Déversement Accidentel de Produits Chimiques (et accessoirement mutagènes)</li>
                    <li class="curses color">Piège ! Éruption Solaire</li>
                    <li class="curses color">Piège ! Expérience Extra-Terestre</li>
                    <li class="curses color">Piège ! Inversion de Chromosome</li>
                    <li class="curses color">Piège ! Inversion de la Gravité</li>
                    <li class="curses color">Piège ! Monofilament</li>
                    <li class="curses color">Piège ! Ouvre-Boîte</li>
                    <li class="curses color">Piège ! Poulpisateur</li>
                    <li class="curses color">Piège ! Régression Génétique</li>
                    <li class="curses color">Piège ! Touillage de Cerveau</li>
                    <li class="monsters color">Plasmoïde</li>
                    <li class="monsters color">Plante Carnivore</li>
                    <li class="monsters color">Pshérif Psi</li>
                    <li class="classes color">Psi</li>
                    <li class="classes color">Psi</li>
                    <li class="classes color">Psi</li>
                    <li class="actions color">Radioactif</li>
                    <li class="monsters color">Robalayeur</li>
                    <li class="actions color">Sang-Mêlé</li>
                    <li class="actions color">Sang-Mêlé</li>
                    <li class="classes color">Savant Fou</li>
                    <li class="classes color">Savant Fou</li>
                    <li class="classes color">Savant Fou</li>
                    <li class="monsters color">Sonde Spatiale</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="monsters color">Tank O.G.R.E.</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="monsters color">Vampire de l&#39;Espace</li>
                    <li class="monsters color">Verminator</li>
                    <li class="monsters color">Virus Informatique</li>
                    <li class="monsters color">Yip</li>
                    <template v-for="(item, index) in munchkinSt.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinSt.version) !== -1) && ((munchkinSt.curses && item.class.indexOf('curses') !== -1) || (munchkinSt.acolytes && item.class.indexOf('acolytes') !== -1) || (munchkinSt.races && item.class.indexOf('races') !== -1) || (munchkinSt.classes && item.class.indexOf('classes') !== -1) || (munchkinSt.monsters && item.class.indexOf('monsters') !== -1) || (munchkinSt.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinSt.version) !== -1) && all.munchkinStDoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinStDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-st-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinStTreasuresNumber">75</span></p>
                <ol>
                    <li class="bonuses color">&quot;J&#39;ai une meilleure offre...&quot;</li>
                    <li class="objects color">&quot;Nous venons en paix... juré craché !&quot;</li>
                    <li class="stuffs color">Amplificateur Mental (avec caisson de basses psychiques)</li>
                    <li class="stuffs color">Antennes à Ressort</li>
                    <li class="stuffs color">Armure Énergétique</li>
                    <li class="stuffs color">Armure de Combat</li>
                    <li class="stuffs color">Baguette Paralysante</li>
                    <li class="stuffs color">Bananoventilolaser</li>
                    <li class="stuffs color">Bobaser</li>
                    <li class="objects color">Boite de Schrödinger</li>
                    <li class="objects color">Bombe Sangsue</li>
                    <li class="stuffs color">Bottes à Propulsion</li>
                    <li class="stuffs color">Bottes Magnétiques</li>
                    <li class="levels color">Bouton Innocemment Dégrafé</li>
                    <li class="bonuses color">Casier d&#39;Armes</li>
                    <li class="stuffs color">Casque Bulle</li>
                    <li class="stuffs color">Chamé de Stupidité</li>
                    <li class="objects color">Champ de Stase</li>
                    <li class="stuffs color">Cimeterre Photonique</li>
                    <li class="stuffs color">Combinaison Spatiale en Cellophane</li>
                    <li class="objects color">Coupons de Réduction</li>
                    <li class="stuffs color">Dazer</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="objects color">Dénoument Inattendu</li>
                    <li class="stuffs color">Dents en Diamantoïde</li>
                    <li class="stuffs color">Électro-Combinaison</li>
                    <li class="objects color">Fausse Carte d&#39;Identité</li>
                    <li class="stuffs color">Fouet Neuronal</li>
                    <li class="bonuses color">Fourrière Intergalactique</li>
                    <li class="objects color">Gaz de Contrôle Mental</li>
                    <li class="objects color">Grenade à Flash très Intense (bronzage au 3ème degré garanti)</li>
                    <li class="objects color">Grenade à la Bierre Secouée</li>
                    <li class="objects color">Grenade à Nanomachines Hallucinogènes</li>
                    <li class="objects color">Grenade à Virus Vibratoire</li>
                    <li class="objects color">Grenade Gerbante à Plasma Sonique</li>
                    <li class="objects color">Gros Bouton Rouge</li>
                    <li class="levels color">Illumination Cosmique</li>
                    <li class="stuffs color">Interface de Piratage Cybernétique</li>
                    <li class="stuffs color">Laser</li>
                    <li class="stuffs color">Laser</li>
                    <li class="stuffs color">Lunettes à Rayons X</li>
                    <li class="stuffs color">Maser</li>
                    <li class="stuffs color">Mécha-Na-P</li>
                    <li class="objects color">Médikit</li>
                    <li class="objects color">Médikit</li>
                    <li class="stuffs color">Mitrailleuse de Queue</li>
                    <li class="levels color">Monolithe</li>
                    <li class="stuffs color">Mutation Digitocéphale</li>
                    <li class="levels color">Oblitération Totale de Planète Pacifique</li>
                    <li class="stuffs color">Orbe de Prédiction</li>
                    <li class="stuffs color">Orteils Préhensiles</li>
                    <li class="stuffs color">Pacificateur Low-Tech</li>
                    <li class="stuffs color">Paraboles de Détection</li>
                    <li class="stuffs color">Partenaire Symbiote</li>
                    <li class="bonuses color">Pelote de Laine</li>
                    <li class="levels color">Piratage Informatique</li>
                    <li class="stuffs color">Pistolet à Rayons R</li>
                    <li class="stuffs color">Pistolet à Plop !</li>
                    <li class="stuffs color">Pistolet Décérébrant pour Décérébré</li>
                    <li class="levels color">Préter vos Bandes Dessinées au MJ</li>
                    <li class="levels color">Préter vos Vidéos au MJ</li>
                    <li class="stuffs color">Razer</li>
                    <li class="objects color">Rhum Dénébien</li>
                    <li class="stuffs color">Robochien</li>
                    <li class="stuffs color">Ruban de Scotch</li>
                    <li class="stuffs color">Shmazer</li>
                    <li class="levels color">Serum du Super-Soldat</li>
                    <li class="levels color">Soutenir le MJ à Coup d&#39;Arguments Scientifiques Bidon</li>
                    <li class="objects color">Time Warp</li>
                    <li class="objects color">Time Warp</li>
                    <li class="stuffs color">Toutou Extra-Terrestre</li>
                    <li class="stuffs color">Tronço-Gants</li>
                    <li class="stuffs color">Vibrolame</li>
                    <li class="levels color">Visite de Votre Double du Futur</li>
                    <template v-for="(item, index) in munchkinSt.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinSt.version) !== -1) && ((munchkinSt.levels && item.class.indexOf('levels') !== -1) || (munchkinSt.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinSt.objects && item.class.indexOf('objects') !== -1) || (munchkinSt.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinSt.version) !== -1) && all.munchkinStTreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinStTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-st-2 munchkin-all" v-bind:class="{ 'is-visible': all.munchkinSt2 }">
        <img class="demo" src="media/images/upload/ubism02.png" alt="Star Munchkin 2">
        <h2 id="munchkin-st-2">Star Munchkin 2 : La Guerre des Clowns</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinSt2.filters }">
            <h3 id="munchkin-st-2-filtres">Filtres</h3>
            <p><button v-on:click="munchkinSt2ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Types de carte</strong>
                <p>
                    <label class="acolytes">
                        <input type="checkbox" value="on" v-model="munchkinSt2.acolytes"> Acolytes (Serviteurs) (<span v-text="munchkinSt2AcolytesNumber">5</span>)
                    </label><br>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinSt2.bonuses"> Actions (<span v-text="munchkinSt2BonusesNumber">7</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinSt2.actions"> Améliorations (<span v-text="munchkinSt2ActionsNumber">13</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinSt2.classes"> Classes (<span v-text="munchkinSt2ClassesNumber">8</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinSt2.stuffs"> Équipements (<span v-text="munchkinSt2StuffsNumber">20</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinSt2.levels"> Gains de Niveaux (<span v-text="munchkinSt2LevelsNumber">7</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinSt2.monsters"> Monstres (<span v-text="munchkinSt2MonstersNumber">27</span>)
                    </label><br>
                    <label class="rooms">
                        <input type="checkbox" value="on" v-model="munchkinSt2.rooms"> Pièces (<span v-text="munchkinSt2RoomsNumber">6</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinSt2.curses"> Pièges (Malédictions) (<span v-text="munchkinSt2CursesNumber">6</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkinSt2.races"> Races (<span v-text="munchkinSt2RacesNumber">7</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinSt2.objects"> Objets (<span v-text="munchkinSt2ObjectsNumber">6</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-st-2-details">Détails</h3>
            <p><img src="media/images/upload/st2.gif" alt="Star Munchkin 2"> Cette icone en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>Les Pièces</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkinSt2CardsNumber">112</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-st-2-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinSt2DoorsNumber">72</span></p>
                <ol>
                    <li class="acolytes color">Acolyte Cible Vivante</li>
                    <li class="acolytes color">Acolyte Le Professeur</li>
                    <li class="acolytes color">Acolyte Ralph le Super Chien</li>
                    <li class="acolytes color">Acolyte Petite Soeur</li>
                    <li class="acolytes color">Acolyte Tadboulons</li>
                    <li class="monsters color">Ambassadeur Bourdon</li>
                    <li class="monsters color">Bob Ascète</li>
                    <li class="monsters color">Cadettes de Star-Flirt</li>
                    <li class="classes color">Chasseur de Primes</li>
                    <li class="monsters color">Cantatrice de Space Opera</li>
                    <li class="monsters color">Clowntrooper</li>
                    <li class="monsters color">Cosplayer un Poil (voire plusieurs poils) trop Enthousiaste</li>
                    <li class="races color">Cyborg</li>
                    <li class="monsters color">Dark Cador, le Musichien de l&#39;Espace</li>
                    <li class="monsters color">Elvis Bicéphale de l&#39;Espace</li>
                    <li class="actions color">Erreur de Continuité</li>
                    <li class="monsters color">Esprit de Ruche</li>
                    <li class="races color">Félin</li>
                    <li class="actions color">Fou</li>
                    <li class="actions color">Je suis ton Père !</li>
                    <li class="monsters color">Jumeau de Télétransporteur</li>
                    <li class="monsters color">La Pince de l&#39;Espace</li>
                    <li class="monsters color">Le Mec aux Oreilles Factices</li>
                    <li class="monsters color">Le Zéro Absolu</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="races color">Insectoïde</li>
                    <li class="races color">Insectoïde</li>
                    <li class="races color">Insectoïde</li>
                    <li class="races color">Insectoïde</li>
                    <li class="monsters color">L&#39;Oeil Électrique</li>
                    <li class="monsters color">La Momie de l&#39;Espace</li>
                    <li class="monsters color">La Raclette Maléfique de la Voie Lactée</li>
                    <li class="monsters color">Le Cruel et Crapuleux Dr Cranedechrome</li>
                    <li class="monsters color">Miss Île</li>
                    <li class="races color">Mutant</li>
                    <li class="monsters color">Nain Rouge</li>
                    <li class="monsters color">Nana peu Farouches de Films de Série Bzzzz</li>
                    <li class="classes color">Négociant Interstellaire</li>
                    <li class="monsters color">Offres Spatiales : Soldes Monstres</li>
                    <li class="rooms color">Pièce : Boudoir Extra-Terrestre</li>
                    <li class="rooms color">Pièce : Cantina</li>
                    <li class="rooms color">Pièce : Compacteur à Ordures</li>
                    <li class="rooms color">Pièce : Dehors</li>
                    <li class="rooms color">Pièce : Laboratoire</li>
                    <li class="rooms color">Pièce : Salle de Bain Extra-Terrestre</li>
                    <li class="curses color">Piège ! Big Bang</li>
                    <li class="curses color">Piège ! Champ Inhibiteur</li>
                    <li class="curses color">Piège ! Désintégration Spontanée</li>
                    <li class="curses color">Piège ! Jet d&#39;Acide</li>
                    <li class="curses color">Piège ! Le Plus Pernicieux des Pièges Jamais Conçus</li>
                    <li class="curses color">Piège ! Trou Noir</li>
                    <li class="monsters color">Pingouins Tueurs</li>
                    <li class="actions color">Polymorphe</li>
                    <li class="classes color">Psi</li>
                    <li class="monsters color">Ptérodactyle Fractal</li>
                    <li class="monsters color">Public Volatil</li>
                    <li class="actions color">Sang-Mêlé</li>
                    <li class="classes color">Savant Fou</li>
                    <li class="actions color">Super-Munchkin</li>
                    <li class="classes color">Ranger de l&#39;Espace</li>
                    <li class="classes color">Ranger de l&#39;Espace</li>
                    <li class="classes color">Ranger de l&#39;Espace</li>
                    <li class="classes color">Ranger de l&#39;Espace</li>
                    <li class="monsters color">RDC</li>
                    <li class="actions color">Télépathe</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="monsters color">Ultra-Violette</li>
                    <li class="actions color">Victime d&#39;une Terrible Méprise</li>
                    <li class="actions color">Vide</li>
                    <li class="actions color">Vide</li>
                    <li class="monsters color">XQWZZMP</li>
                    <template v-for="(item, index) in munchkinSt2.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinSt2.version) !== -1) && ((munchkinSt2.rooms && item.class.indexOf('rooms') !== -1) || (munchkinSt2.curses && item.class.indexOf('curses') !== -1) || (munchkinSt2.acolytes && item.class.indexOf('acolytes') !== -1) || (munchkinSt2.races && item.class.indexOf('races') !== -1) || (munchkinSt2.classes && item.class.indexOf('classes') !== -1) || (munchkinSt2.monsters && item.class.indexOf('monsters') !== -1) || (munchkinSt2.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinSt2.version) !== -1) && all.munchkinSt2DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinSt2DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-st-2-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinSt2TreasuresNumber">40</span></p>
                <ol>
                    <li class="levels color">Amélioration des Micro-Chloridiens</li>
                    <li class="levels color">Astronourriture</li>
                    <li class="stuffs color">Autofuite 1000</li>
                    <li class="bonuses color">Aux Effets Spéciaux Améliorés</li>
                    <li class="bonuses color">Animation Suspendue</li>
                    <li class="objects color">Bombe Intelligente</li>
                    <li class="stuffs color">Canon à Plasma</li>
                    <li class="stuffs color">Casque Psi</li>
                    <li class="stuffs color">Ceinture d&#39;Astéroïdes</li>
                    <li class="levels color">Charabia Technologique</li>
                    <li class="stuffs color">Complexe Exoskeleton</li>
                    <li class="stuffs color">Complexe Gratte-Dos Extra-Terrestre</li>
                    <li class="stuffs color">Complexe Laser Optique</li>
                    <li class="stuffs color">Complexe Le <del>Pont</del> Front de l&#39;Enterprise</li>
                    <li class="stuffs color">Cravatou Barada Nikto</li>
                    <li class="levels color">Dans l&#39;Espace, Personne ne vous Entend Tricher</li>
                    <li class="levels color">Découverte d&#39;une Nouvelle Forme de Vie</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="levels color">Écrire les Caractéristiques de son Personnage en Base 8</li>
                    <li class="bonuses color">Édition Spéciale du Director&#39;s Cut</li>
                    <li class="bonuses color">Expérimental</li>
                    <li class="stuffs color">Fil de la Trame Spatio-Temporelle</li>
                    <li class="levels color">Gagner la Reconnaissance de toutes les Races Intelligentes de l&#39;Univers</li>
                    <li class="objects color">Grenade Multiplicatrice</li>
                    <li class="objects color">Grenade au Yaourt Parfumé au Nacho</li>
                    <li class="objects color">Grenade Ouvre-Boîte</li>
                    <li class="stuffs color">Lampe <del>Torche</del> Chalumeau</li>
                    <li class="stuffs color">Lance-Boulettes Perce-Armure à Tête Chercheuse</li>
                    <li class="stuffs color">Laser à Rayons X</li>
                    <li class="stuffs color">Laser à Commande Digitale</li>
                    <li class="stuffs color">Minces Rubans Judicieusement Placés</li>
                    <li class="stuffs color">Peinture Verte</li>
                    <li class="stuffs color">Pulvérilaser</li>
                    <li class="bonuses color">Ramper par les Conduits d&#39;Aération</li>
                    <li class="stuffs color">Roues Rétractables</li>
                    <li class="stuffs color">Télécommande de Porte de Garage</li>
                    <li class="stuffs color">Tronçobottes</li>
                    <li class="bonuses color">Vide</li>
                    <li class="bonuses color">Vide</li>
                    <template v-for="(item, index) in munchkinSt2.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinSt2.version) !== -1) && ((munchkinSt2.levels && item.class.indexOf('levels') !== -1) || (munchkinSt2.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinSt2.objects && item.class.indexOf('objects') !== -1) || (munchkinSt2.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinSt2.version) !== -1) && all.munchkinSt2TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinSt2TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-su munchkin-all" v-bind:class="{ 'is-visible': all.munchkinSu }">
        <img class="demo" src="media/images/upload/super_munchkin_Boite.jpg" alt="Super Munchkin">
        <h2 id="munchkin-su">Super Munchkin</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinSu.filters }">
            <h3 id="munchkin-su-filtres">Filtres</h3>
            <p><button v-on:click="munchkinSuToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Types de carte</strong>
                <p>
                    <label class="acolytes">
                        <input type="checkbox" value="on" v-model="munchkinSu.acolytes" v-on:click="munchkinSuAcolytesGroup()"> Acolytes (Serviteurs) (<span v-text="munchkinSuAcolytesNumber + munchkinSuSlavesNumber">6</span>)
                    </label><br>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinSu.bonuses"> Actions (<span v-text="munchkinSuBonusesNumber">6</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinSu.actions"> Améliorations (<span v-text="munchkinSuActionsNumber">12</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinSu.classes"> Classes (<span v-text="munchkinSuClassesNumber">12</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinSu.stuffs"> Équipements (<span v-text="munchkinSuStuffsNumber">37</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinSu.levels"> Gains de Niveaux (<span v-text="munchkinSuLevelsNumber">8</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinSu.monsters"> Monstres (<span v-text="munchkinSuMonstersNumber">39</span>)
                    </label><br>
                    <label class="origins">
                        <input type="checkbox" value="on" v-model="munchkinSu.origins"> Origines (<span v-text="munchkinSuOriginsNumber">6</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinSu.curses"> Pièges (Malédictions) (<span v-text="munchkinSuCursesNumber">14</span>)
                    </label><br>
                    <label class="powers">
                        <input type="checkbox" value="on" v-model="munchkinSu.powers"> Pouvoirs (<span v-text="munchkinSuPowersNumber">20</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinSu.objects"> Objets (<span v-text="munchkinSuObjectsNumber">8</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-m-details">Détails</h3>
            <p>Sont apparut avec ce jeu :</p>
            <ul>
                <li>Les Pouvoirs</li>
                <li>Les Origins</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkinSuCardsNumber">168</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-su-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinSuDoorsNumber">106</span></p>
                <ol>
                    <li class="actions color">&quot;Il n&#39;était pas vraiment mort...&quot;</li>
                    <li class="powers color">2D</li>
                    <li class="acolytes color">Acolytes : Ami Imaginaire</li>
                    <li class="acolytes color">Acolytes : Femme reporter pleine d&#39;aplomb</li>
                    <li class="acolytes color">Acolytes : Gamin doté des mêmes Pouvoirs</li>
                    <li class="monsters color">Agent du Fisc</li>
                    <li class="monsters color">Anonyman</li>
                    <li class="powers color">Aura Radioactive</li>
                    <li class="monsters color">Balèzman</li>
                    <li class="monsters color">Baron Bidon</li>
                    <li class="powers color">Caméléon</li>
                    <li class="monsters color">Captain Corrosion</li>
                    <li class="powers color">Charisme</li>
                    <li class="monsters color">Chasseur de Frime</li>
                    <li class="monsters color">Clicman</li>
                    <li class="origins color">Contact avec une Idole Mystérieuse</li>
                    <li class="powers color">Corps Vachement Résistant (mais un truc de ouf, Quoi...)</li>
                    <li class="actions color">Costume moins Naze que le Vôtre</li>
                    <li class="powers color">Cri Supersonique</li>
                    <li class="monsters color">D&#39;autres voyous mous du genou</li>
                    <li class="monsters color">Dangerousse Girl</li>
                    <li class="powers color">Décolleté Foudroyant</li>
                    <li class="actions color">Dirigeant d&#39;un Petit Pays d&#39;Europe</li>
                    <li class="monsters color">Docteur Abiquitor</li>
                    <li class="monsters color">Docteur Halitos</li>
                    <li class="actions color">Duplicato-Rayon</li>
                    <li class="powers color">Élasticité</li>
                    <li class="classes color">Exotique</li>
                    <li class="classes color">Exotique</li>
                    <li class="classes color">Exotique</li>
                    <li class="origins color">Expérience du Gouvernement qui à mal Tourné</li>
                    <li class="monsters color">Explosiman</li>
                    <li class="powers color">Flammes</li>
                    <li class="monsters color">Glandouilleman</li>
                    <li class="monsters color">Godzillarbre</li>
                    <li class="powers color">Griffes</li>
                    <li class="monsters color">Gamins pénibles</li>
                    <li class="monsters color">Gerbeman</li>
                    <li class="monsters color">Grand type qui bouffe les planètes</li>
                    <li class="monsters color">Héros de l&#39;Ancienne République Soviétique</li>
                    <li class="monsters color">Horde d&#39;Aliens Baveux</li>
                    <li class="powers color">Hypnotisme</li>
                    <li class="origins color">Immergé dans une substance étrange</li>
                    <li class="actions color">Irrésistible tendance à Laisser des Indices</li>
                    <li class="powers color">Invisibilité</li>
                    <li class="actions color">Kidnapping de votre Tante Marge</li>
                    <li class="monsters color">L&#39;Armée sans Visage</li>
                    <li class="monsters color">L&#39;Imposteur</li>
                    <li class="monsters color">La Vachouette Landaise du Dr Alain Therville</li>
                    <li class="monsters color">Le Big Boss</li>
                    <li class="monsters color">Le Spaminator</li>
                    <li class="monsters color">Le Tueur à Gags</li>
                    <li class="monsters color">Marc Delabête, le Grizzly-Garou de l&#39;Apocalypse</li>
                    <li class="monsters color">Matériel-de-Bureau-Man</li>
                    <li class="monsters color">Miss Intello</li>
                    <li class="monsters color">Miss Wonder-Chépaquoi</li>
                    <li class="monsters color">Mister DCA, spécialiste en Tir aux Super-Pigeons</li>
                    <li class="monsters color">Mister Incompris</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="origins color">Mordu par un Chihuahua Radioactif</li>
                    <li class="classes color">Mutan</li>
                    <li class="classes color">Mutan</li>
                    <li class="classes color">Mutan</li>
                    <li class="classes color">Mystique</li>
                    <li class="classes color">Mystique</li>
                    <li class="classes color">Mystique</li>
                    <li class="origins color">Orteil écrasé</li>
                    <li class="monsters color">Piaf Man</li>
                    <li class="curses color">Piège ! Bégonia Mangeurs d&#39;Hommes</li>
                    <li class="curses color">Piège ! Changement de Scénariste</li>
                    <li class="curses color">Piège ! Condamnation pour trouble sur la voie publique</li>
                    <li class="curses color">Piège ! Couictonite</li>
                    <li class="curses color">Piège ! Démasqué !</li>
                    <li class="curses color">Piège ! Dinosaure</li>
                    <li class="curses color">Piège ! Falaise Incroyablement Fragile</li>
                    <li class="curses color">Piège ! Immondes Produits Chimiques</li>
                    <li class="curses color">Piège ! Mixeur à Superhéros</li>
                    <li class="curses color">Piège ! Péril Invisible</li>
                    <li class="curses color">Piège ! Propulsé dans l&#39;Espace</li>
                    <li class="curses color">Piège ! Réacteur Nucléaire</li>
                    <li class="curses color">Piège ! Robot Compresseur</li>
                    <li class="curses color">Piège ! Un sort pire que la mort</li>
                    <li class="monsters color">Professeur Onsley Jell</li>
                    <li class="origins color">Radio tombée dans la Baignoire</li>
                    <li class="powers color">Rafale Psi</li>
                    <li class="monsters color">Rayon de la Morve</li>
                    <li class="powers color">Rayons Oculaires</li>
                    <li class="powers color">Rot Supersonique</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="actions color">Super-Tricheur !</li>
                    <li class="monsters color">Supervers-Man</li>
                    <li class="powers color">Supervitesse</li>
                    <li class="classes color">Techno</li>
                    <li class="classes color">Techno</li>
                    <li class="classes color">Techno</li>
                    <li class="powers color">Téléportation</li>
                    <li class="monsters color">Toujours des voyous mous du genou</li>
                    <li class="monsters color">Triple Idiot</li>
                    <li class="powers color">Vision à Rayons X</li>
                    <li class="powers color">Vol</li>
                    <li class="actions color">Votre Ennemi Juré</li>
                    <li class="monsters color">Voyous mous du genou</li>
                    <li class="monsters color">Wonder Bimbo</li>
                    <li class="powers color">Wonder Bras</li>
                    <template v-for="(item, index) in munchkinSu.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinSu.version) !== -1) && ((munchkinSu.curses && item.class.indexOf('curses') !== -1) || (munchkinSu.acolytes && item.class.indexOf('acolytes') !== -1) || (munchkinSu.origins && item.class.indexOf('origins') !== -1) || (munchkinSu.classes && item.class.indexOf('classes') !== -1) || (munchkinSu.powers && item.class.indexOf('powers') !== -1) || (munchkinSu.monsters && item.class.indexOf('monsters') !== -1) || (munchkinSu.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinSu.version) !== -1) && all.munchkinSuDoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinSuDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-su-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinSuTreasuresNumber">62</span></p>
                <ol>
                    <li class="bonuses color">&quot;Tu peux être sûr qu&#39;ils vont faire une suite...&quot;</li>
                    <li class="slaves color">Acolyte Voiture Parlante</li>
                    <li class="slaves color">Acolyte Double Robotique</li>
                    <li class="slaves color">Acolyte Singe avec un costume comme le votre</li>
                    <li class="stuffs color">Aimant Géant</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="stuffs color">Anneau Lazérospidouilleur</li>
                    <li class="stuffs color">Armure à la Limite de la Décence</li>
                    <li class="stuffs color">Armure Ailée</li>
                    <li class="stuffs color">Armure en Cristal</li>
                    <li class="stuffs color">Bagette Magique</li>
                    <li class="stuffs color">Balai à Chiottes</li>
                    <li class="stuffs color">Balai à Réaction</li>
                    <li class="stuffs color">Basket à Ventouses</li>
                    <li class="stuffs color">Batte Mobile</li>
                    <li class="stuffs color">Batteur Électrique</li>
                    <li class="stuffs color">Bottes pour Shooter</li>
                    <li class="stuffs color">Boum-rang</li>
                    <li class="objects color">Café Noir</li>
                    <li class="stuffs color">Cape</li>
                    <li class="stuffs color">Casque Électropsychique</li>
                    <li class="stuffs color">Ceinture Multi-Usage</li>
                    <li class="stuffs color">Club de Golf</li>
                    <li class="stuffs color">Couettes Préhensiles</li>
                    <li class="stuffs color">Costume Peint à même la Peau</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="stuffs color">Déguisement d&#39;individu sans Histoire</li>
                    <li class="stuffs color">Détecteur de Vilains</li>
                    <li class="objects color">Effroyable Machine de Mort et de Destruction</li>
                    <li class="bonuses color">Évasion organisée</li>
                    <li class="stuffs color">Haltères</li>
                    <li class="bonuses color">Incohérence de Scénario</li>
                    <li class="stuffs color">La Torche (contondante) de la Liberté</li>
                    <li class="bonuses color">Labo Secret</li>
                    <li class="stuffs color">Montre-Radio Légère Pratique et Maniable</li>
                    <li class="stuffs color">Obsession Délirante</li>
                    <li class="objects color">Pavé de Bonnes Intentions</li>
                    <li class="stuffs color">Permis de Démolir</li>
                    <li class="bonuses color">Petit Raté Vestimentaire</li>
                    <li class="stuffs color">Pistolet à Grappin</li>
                    <li class="stuffs color">Pistolet Extra-Terrestre qui fait Pschiiiiiiiiwww</li>
                    <li class="stuffs color">Psycho-Électrodes</li>
                    <li class="stuffs color">QG : En Orbite</li>
                    <li class="stuffs color">QG : Grotte Secrète</li>
                    <li class="stuffs color">QG en Solde</li>
                    <li class="stuffs color">Sandales Ailées</li>
                    <li class="stuffs color">Skate en Molybdène</li>
                    <li class="stuffs color">Super Armure</li>
                    <li class="stuffs color">Super Bouclier</li>
                    <li class="objects color">Super Sérum</li>
                    <li class="stuffs color">Télézapinateur</li>
                    <li class="bonuses color">Version d&#39;un Univers Alternatif</li>
                    <li class="objects color">Violation de Copyright</li>
                    <li class="levels color">Acheter une Figurine au MJ</li>
                    <li class="levels color">Adaptation en Film</li>
                    <li class="levels color">Caleçon par-dessus le Pantalon</li>
                    <li class="levels color">Colère du Juste</li>
                    <li class="levels color">Recherches dans un Magasin de Comics</li>
                    <li class="levels color">Récompense d&#39;un montant Inconcevable</li>
                    <li class="levels color">Nouveau Costume</li>
                    <li class="levels color">Meurtre Accidentel d&#39;un Acolyte</li>
                    <template v-for="(item, index) in munchkinSu.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinSu.version) !== -1) && ((munchkinSu.slaves && item.class.indexOf('slaves') !== -1) || (munchkinSu.levels && item.class.indexOf('levels') !== -1) || (munchkinSu.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinSu.objects && item.class.indexOf('objects') !== -1) || (munchkinSu.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinSu.version) !== -1) && all.munchkinSuTreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinSuTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-z munchkin-all" v-bind:class="{ 'is-visible': all.munchkinZ }">
        <img class="demo" src="media/images/upload/ubimz01.png" alt="Munchkin Zombies">
        <h2 id="munchkin-z">Munchkin Zombies</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinZ.filters }">
            <h3 id="munchkin-z-filtres">Filtres</h3>
            <p><button v-on:click="munchkinZToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Types de carte</strong>
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinZ.bonuses"> Actions (<span v-text="munchkinZBonusesNumber">8</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinZ.actions"> Améliorations (<span v-text="munchkinZActionsNumber">13</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinZ.stuffs"> Équipements (<span v-text="munchkinZStuffsNumber">40</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinZ.levels"> Gains de Niveaux (<span v-text="munchkinZLevelsNumber">11</span>)
                    </label><br>
                    <label class="mojos">
                        <input type="checkbox" value="on" v-model="munchkinZ.mojos"> Mojos (<span v-text="munchkinZMojosNumber">9</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinZ.monsters"> Monstres (<span v-text="munchkinZMonstersNumber">38</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinZ.curses"> Malédictions (<span v-text="munchkinZCursesNumber">20</span>)
                    </label><br>
                    <label class="powers">
                        <input type="checkbox" value="on" v-model="munchkinZ.powers"> Pouvoirs (<span v-text="munchkinZPowersNumber">15</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinZ.objects"> Objets (<span v-text="munchkinZObjectsNumber">14</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-z-details">Détails</h3>
            <p>Sont apparut avec ce jeu :</p>
            <ul>
                <li>Les Mojos</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkinZCardsNumber">168</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-z-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinZDoorsNumber">95</span></p>
                <ol>
                    <li class="monsters color">3872 Bin-Ork-Lards</li>
                    <li class="monsters color">Adepte de l&#39;Herbe qui Vide la Tête</li>
                    <li class="actions color">Au Volant d&#39;un Rouleau Compresseur</li>
                    <li class="actions color">Avec un Gros Sifflet</li>
                    <li class="actions color">Attrape-Cerveau</li>
                    <li class="monsters color">Baby-Sitter</li>
                    <li class="monsters color">Barista</li>
                    <li class="actions color">Bodybuildé</li>
                    <li class="monsters color">Boucher</li>
                    <li class="monsters color">Bureaucrate Zombie</li>
                    <li class="monsters color">Cannibale</li>
                    <li class="monsters color">Cheftaine Scout (aux méthodes de vente un tantinet agressives)</li>
                    <li class="monsters color">Chihuahua Zombie</li>
                    <li class="monsters color">Concierge</li>
                    <li class="powers color">Costaud</li>
                    <li class="powers color">Costaud</li>
                    <li class="powers color">Costaud</li>
                    <li class="powers color">Coriace</li>
                    <li class="powers color">Coriace</li>
                    <li class="monsters color">Croque-Mort</li>
                    <li class="powers color">Furtif</li>
                    <li class="powers color">Furtif</li>
                    <li class="powers color">Futé</li>
                    <li class="powers color">Futé</li>
                    <li class="powers color">Futé</li>
                    <li class="monsters color">Gang de Bikers</li>
                    <li class="monsters color">Glandeur</li>
                    <li class="monsters color">Golfeur</li>
                    <li class="monsters color">Héros de Film d&#39;Action</li>
                    <li class="actions color">Inconscient</li>
                    <li class="monsters color">Infirmière</li>
                    <li class="monsters color">La Dame de la Cafet&#39;</li>
                    <li class="monsters color">Livreur de Pizza</li>
                    <li class="curses color">Malédiction ! Arrêt de Mort</li>
                    <li class="curses color">Malédiction ! Article(s) de la Mort</li>
                    <li class="curses color">Malédiction ! Bière et Paix</li>
                    <li class="curses color">Malédiction ! Bobooooooooo</li>
                    <li class="curses color">Malédiction ! C&#39;est Chauuuuuud !</li>
                    <li class="curses color">Malédiction ! Capital Décès</li>
                    <li class="curses color">Malédiction ! Cerveauuuuuuu !</li>
                    <li class="curses color">Malédiction ! De l&#39;eaaaaauuuuuuu</li>
                    <li class="curses color">Malédiction ! Doberman très Attaché</li>
                    <li class="curses color">Malédiction ! Double Mojo</li>
                    <li class="curses color">Malédiction ! Double Mojo</li>
                    <li class="curses color">Malédiction ! Feinté par un Mannequin</li>
                    <li class="curses color">Malédiction ! Fourmis</li>
                    <li class="curses color">Malédiction ! Jeuuunoooooot !</li>
                    <li class="curses color">Malédiction ! Les Bras vous en tombent</li>
                    <li class="curses color">Malédiction ! Locooooooo !</li>
                    <li class="curses color">Malédiction ! Mais où aviez-vous la Tête ?</li>
                    <li class="curses color">Malédiction ! Mort à l&#39;arrivée (et au départ aussi)</li>
                    <li class="curses color">Malédiction ! Perplexité Cadaverique</li>
                    <li class="curses color">Malédiction ! Tue par-dessus Quête</li>
                    <li class="actions color">Maniant un Fusil</li>
                    <li class="actions color">Maniant un Fusil à Canon Double</li>
                    <li class="actions color">Maniant une Tondeuse à Gazon</li>
                    <li class="monsters color">Manifestante</li>
                    <li class="monsters color">Mascotte</li>
                    <li class="monsters color">Mère de Famille</li>
                    <li class="monsters color">Monsieur tout le Monde</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="monsters color">Ninja</li>
                    <li class="monsters color">Nonne</li>
                    <li class="monsters color">Percepteur</li>
                    <li class="monsters color">Petit Gamin Mignon</li>
                    <li class="monsters color">Poivrot</li>
                    <li class="monsters color">Pompier</li>
                    <li class="monsters color">Postier</li>
                    <li class="monsters color">Présentateur de Jeu Télévisé</li>
                    <li class="powers color">Putrescent</li>
                    <li class="powers color">Putrescent</li>
                    <li class="powers color">Rapide</li>
                    <li class="powers color">Rapide</li>
                    <li class="powers color">Rapide</li>
                    <li class="monsters color">Requin Zombie</li>
                    <li class="monsters color">Sécurité de l&#39;Aéroport</li>
                    <li class="monsters color">Shérif du Comté</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="monsters color">Type en Chemise Hawaïenne</li>
                    <li class="monsters color">Vendeur de Voiture d&#39;Occasion</li>
                    <li class="monsters color">Zombie de l&#39;Administration</li>
                    <li class="mojos color">Zombie Nucléaire</li>
                    <li class="mojos color">Zombie Nucléaire</li>
                    <li class="mojos color">Zombie Nucléaire</li>
                    <li class="mojos color">Zombie Pestiféré</li>
                    <li class="mojos color">Zombie Pestiféré</li>
                    <li class="mojos color">Zombie Pestiféré</li>
                    <li class="mojos color">Zombie Vaudou</li>
                    <li class="mojos color">Zombie Vaudou</li>
                    <li class="mojos color">Zombie Vaudou</li>
                    <li class="monsters color">Zombiologiste</li>
                    <template v-for="(item, index) in munchkinZ.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinZ.version) !== -1) && ((munchkinZ.curses && item.class.indexOf('curses') !== -1) || (munchkinZ.powers && item.class.indexOf('powers') !== -1) || (munchkinZ.mojos && item.class.indexOf('mojos') !== -1) || (munchkinZ.monsters && item.class.indexOf('monsters') !== -1) || (munchkinZ.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinZ.version) !== -1) && all.munchkinZDoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinZDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-z-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinZTreasuresNumber">73</span></p>
                <ol>
                    <li class="bonuses color">À son Corps Défendant</li>
                    <li class="levels color">Allez les Pourris !</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="objects color">Astuces pour Survivre à une Invasion de Zombies</li>
                    <li class="stuffs color">Barrière Grillagée</li>
                    <li class="stuffs color">Bâton à Ressort</li>
                    <li class="levels color">Bi-Zombie</li>
                    <li class="levels color">Blague Humerus-Tique</li>
                    <li class="stuffs color">Blanche Armure de Porcelaine</li>
                    <li class="stuffs color">Boîte aux Lettres</li>
                    <li class="stuffs color">Borne Anti-Incendie</li>
                    <li class="stuffs color">Bras</li>
                    <li class="objects color">Brique</li>
                    <li class="stuffs color">Boule de Bowling</li>
                    <li class="objects color">Bouteille d&#39;Acide</li>
                    <li class="stuffs color">Cabane à Oiseaux</li>
                    <li class="bonuses color">Cachette Idéale</li>
                    <li class="stuffs color">Canettes de Soda</li>
                    <li class="stuffs color">Casserole</li>
                    <li class="levels color">Cerveaauuux !</li>
                    <li class="stuffs color">Chariot de Supermarché</li>
                    <li class="objects color">Chat Furibard</li>
                    <li class="stuffs color">Chaussures de Pointure</li>
                    <li class="bonuses color">Clef au Bras (un poil brutale)</li>
                    <li class="levels color">Conseils Diététiques</li>
                    <li class="stuffs color">Côte de Porc</li>
                    <li class="stuffs color">Coupe de Bowling</li>
                    <li class="stuffs color">Crachat Contaminé</li>
                    <li class="stuffs color">Cravate en Papier Tue-Mouche</li>
                    <li class="stuffs color">Crocs</li>
                    <li class="levels color">Croque-Madame</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="levels color">En-Cas Diététique</li>
                    <li class="bonuses color">En Feu</li>
                    <li class="stuffs color">Fétiche</li>
                    <li class="bonuses color">Fuite des Cerveaux</li>
                    <li class="stuffs color">Graisse en Putréfaction</li>
                    <li class="stuffs color">Griffes Phosphorescentes</li>
                    <li class="stuffs color">Gueule Béante</li>
                    <li class="stuffs color">Guirlande de Noël</li>
                    <li class="objects color"><del>Intestin Grêle</del> Grêle d&#39;intestins</li>
                    <li class="stuffs color">Jambe</li>
                    <li class="stuffs color">Jouet Tape-à-l&#39;Oeil</li>
                    <li class="levels color">La Main sur le <del>Berceau</del> Cerveau</li>
                    <li class="stuffs color">Langue Fourchue</li>
                    <li class="stuffs color">Longs Doigts Osseux</li>
                    <li class="objects color">Main Armée (pour les attaques éponymes)</li>
                    <li class="stuffs color">Mauvais Oeil</li>
                    <li class="stuffs color">Os de Mort-Bon-Vivant</li>
                    <li class="stuffs color">Panneau de Stop</li>
                    <li class="stuffs color">Parapluie</li>
                    <li class="bonuses color">Patin à Roulettes</li>
                    <li class="stuffs color">Pelle de Fossoyeur</li>
                    <li class="stuffs color">Piège à Rat</li>
                    <li class="stuffs color">Portière de Voiture</li>
                    <li class="stuffs color">Pots de Fleur</li>
                    <li class="stuffs color">Punaises</li>
                    <li class="levels color">Repas Chaud (comme la braise)</li>
                    <li class="levels color">S&#39;Attaquer à l&#39;Homme de Tête</li>
                    <li class="stuffs color">Singe Domestique</li>
                    <li class="bonuses color">Sosie Moisi</li>
                    <li class="stuffs color">Superglou, la Colle qui Colle <del>à Mort</del> les Morts</li>
                    <li class="objects color">Tête de Clown</li>
                    <li class="objects color">Tête de Lard</li>
                    <li class="stuffs color">Tripes qui Agrippent</li>
                    <li class="stuffs color">Un Autre Zombie</li>
                    <li class="stuffs color">Un Bras et une Jambe</li>
                    <li class="bonuses color">Une Cervelle pour Deux</li>
                    <li class="objects color">Vieux Restes</li>
                    <li class="levels color">Visite au Musée</li>
                    <li class="objects color">Vinyl Vintage</li>
                    <li class="stuffs color">Votre propre Pancreas et/ou votre Rate</li>
                    <li class="objects color">Zombies</li>
                    <template v-for="(item, index) in munchkinZ.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinZ.version) !== -1) && ((munchkinZ.levels && item.class.indexOf('levels') !== -1) || (munchkinZ.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinZ.objects && item.class.indexOf('objects') !== -1) || (munchkinZ.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinZ.version) !== -1) && all.munchkinZTreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinZTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-z-2 munchkin-all" v-bind:class="{ 'is-visible': all.munchkinZ2 }">
        <img class="demo" src="media/images/upload/ubimz02.png" alt="Munchkin Zombies 2">
        <h2 id="munchkin-z-2">Munchkin Zombies 2 : Ça zigouille à tour de bras !</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinZ2.filters }">
            <h3 id="munchkin-z-2-filtres">Filtres</h3>
            <p><button v-on:click="munchkinZ2ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Types de carte</strong>
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinZ2.bonuses"> Actions (<span v-text="munchkinZ2BonusesNumber"></span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinZ2.actions"> Améliorations (<span v-text="munchkinZ2ActionsNumber"></span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinZ2.stuffs"> Équipements (<span v-text="munchkinZ2StuffsNumber"></span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinZ2.levels"> Gains de Niveaux (<span v-text="munchkinZ2LevelsNumber"></span>)
                    </label><br>
                    <label class="mojos">
                        <input type="checkbox" value="on" v-model="munchkinZ2.mojos"> Mojos (<span v-text="munchkinZ2MojosNumber"></span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinZ2.monsters"> Monstres (<span v-text="munchkinZ2MonstersNumber"></span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinZ2.curses"> Malédictions (<span v-text="munchkinZ2CursesNumber"></span>)
                    </label><br>
                    <label class="powers">
                        <input type="checkbox" value="on" v-model="munchkinZ2.powers"> Pouvoirs (<span v-text="munchkinZ2PowersNumber"></span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinZ2.objects"> Objets (<span v-text="munchkinZ2ObjectsNumber"></span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-z-2-details">Détails</h3>
            <p><img src="media/images/upload/mz2.gif" alt="Munchkin Zombies 2"> Cette icone en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension.</p>
            <p><strong>Nombre total de cartes : <span v-text="munchkinZ2CardsNumber">112</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-z-2-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinZ2DoorsNumber">66</span></p>
                <ol>
                    <li class="powers color">Affamé</li>
                    <li class="powers color">Affamé</li>
                    <li class="powers color">Affamé</li>
                    <li class="actions color">Au Dernier <del>Rang</del> Range</li>
                    <li class="actions color">Au Téléphone</li>
                    <li class="monsters color">Batte-Man</li>
                    <li class="monsters color">Bébé Zombie</li>
                    <li class="monsters color">Bibliothécaire</li>
                    <li class="actions color">Cerveauphage</li>
                    <li class="monsters color">Chirurgien du Dimanche</li>
                    <li class="monsters color">Conducteur de Cyclopousse</li>
                    <li class="powers color">Coriace</li>
                    <li class="powers color">Costaud</li>
                    <li class="monsters color">Diplômée de l&#39;Unversité</li>
                    <li class="actions color">Doté du Pouvoir de la Science !</li>
                    <li class="actions color">Double Mojo</li>
                    <li class="monsters color">Fermier</li>
                    <li class="powers color">Furtif</li>
                    <li class="powers color">Futé</li>
                    <li class="monsters color">Imposteur Zombie</li>
                    <li class="monsters color">Joueur de Basket</li>
                    <li class="monsters color">Joueur de Hockey</li>
                    <li class="monsters color">Joueur <del>de</del> Zombie</li>
                    <li class="curses color">Malédiction ! À Corps Perdu...</li>
                    <li class="curses color">Malédiction ! Complètement Creuvé !</li>
                    <li class="curses color">Malédiction ! Fuite des Cerveaux</li>
                    <li class="curses color">Malédiction ! Garroooooooot !</li>
                    <li class="curses color">Malédiction ! Kesakoooooooo !</li>
                    <li class="curses color">Malédiction ! Noyauuuuuuux !</li>
                    <li class="curses color">Malédiction ! Ostrogoths !</li>
                    <li class="curses color">Malédiction ! Travaaaaaaaaux !</li>
                    <li class="curses color">Malédiction ! Traversée du Ciment</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="monsters color">Orang-Outan</li>
                    <li class="actions color">Pas de Cerveau, pas de Bobo</li>
                    <li class="monsters color">Pierroooooooot !</li>
                    <li class="monsters color">Politicard</li>
                    <li class="monsters color">Prof de Mécanique</li>
                    <li class="powers color">Putrescent</li>
                    <li class="actions color">Qu&#39;a du Cran</li>
                    <li class="monsters color">Pervenche</li>
                    <li class="monsters color">Plombier</li>
                    <li class="monsters color">Prof de Sport</li>
                    <li class="powers color">Rapide</li>
                    <li class="monsters color">Représentant en Feux d&#39;Artifice</li>
                    <li class="monsters color">Reporter</li>
                    <li class="actions color">Robin des Doigts</li>
                    <li class="monsters color">Skateur de l&#39;Extrême</li>
                    <li class="monsters color">Sosie d&#39;Elvis Zombie</li>
                    <li class="monsters color">Soubrette</li>
                    <li class="monsters color">Survivant</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="monsters color">Végétalienne</li>
                    <li class="monsters color">Vieille Dame aux Chats</li>
                    <li class="monsters color">Vieux Grincheux</li>
                    <li class="actions color">Zombie qui (se) Déchire</li>
                    <li class="mojos color">Zombie Rafistolé</li>
                    <li class="mojos color">Zombie Rafistolé</li>
                    <li class="mojos color">Zombie Rafistolé</li>
                    <li class="mojos color">Zombie Rafistolé</li>
                    <li class="mojos color">Zombie Nucléaire</li>
                    <li class="mojos color">Zombie Pestiféré</li>
                    <li class="mojos color">Zombie Vaudou</li>
                    <template v-for="(item, index) in munchkinZ2.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinZ2.version) !== -1) && ((munchkinZ2.curses && item.class.indexOf('curses') !== -1) || (munchkinZ2.powers && item.class.indexOf('powers') !== -1) || (munchkinZ2.mojos && item.class.indexOf('mojos') !== -1) || (munchkinZ2.monsters && item.class.indexOf('monsters') !== -1) || (munchkinZ2.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinZ2.version) !== -1) && all.munchkinZ2DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinZ2DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-z-2-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinZ2TreasuresNumber">46</span></p>
                <ol>
                    <li class="stuffs color">Abat-Jour</li>
                    <li class="levels color">Alimentation Riche</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="stuffs color"><del>Attaché-case</del> Attaché-Crève</li>
                    <li class="stuffs color">Baguette à Bulles</li>
                    <li class="objects color">Billes</li>
                    <li class="stuffs color">Bois de Cerf</li>
                    <li class="stuffs color">Bonne Vieille Planche des Familles</li>
                    <li class="levels color">Ça à un Goût de Poulet</li>
                    <li class="levels color">Ça Zigouille à Tour de Bras !</li>
                    <li class="stuffs color">Cactus</li>
                    <li class="stuffs color">Cercueil</li>
                    <li class="objects color">Champaaaaaaagne !</li>
                    <li class="stuffs color">Chaussures de Bowling</li>
                    <li class="stuffs color">Chemise de Bowling</li>
                    <li class="stuffs color">Compteur Geiger</li>
                    <li class="stuffs color">Cou à Rallonge</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="objects color">Dé Ultrapipé</li>
                    <li class="objects color">Dentier Mécanique</li>
                    <li class="bonuses color">Des Richesses dépassant vos Rêves les plus Fou !</li>
                    <li class="levels color">Devine qui vient (te) manger ce soir !</li>
                    <li class="levels color">Équilibre Alimentaire</li>
                    <li class="objects color">Fluide d&#39;Embaumement</li>
                    <li class="objects color">Fluide d&#39;Embrasement</li>
                    <li class="stuffs color">Fourche</li>
                    <li class="stuffs color">Girouette</li>
                    <li class="stuffs color">Gros Doigts</li>
                    <li class="levels color">La Mort vous vas si Bien</li>
                    <li class="stuffs color">Langue Préhensile</li>
                    <li class="objects color">Lingo d&#39;Or</li>
                    <li class="stuffs color">Mauvaise Haleine</li>
                    <li class="stuffs color">Mouche de Combat</li>
                    <li class="stuffs color">Moto</li>
                    <li class="stuffs color">Narguilé</li>
                    <li class="stuffs color">Pancarte d&#39;homme-sandwich</li>
                    <li class="objects color">Piège à Ours</li>
                    <li class="stuffs color">Pierre Tombale</li>
                    <li class="stuffs color">Poisson</li>
                    <li class="stuffs color">Poubelles en Feu</li>
                    <li class="levels color">Restauration Rapide</li>
                    <li class="bonuses color">Réutilisation, Recyclage, Réanimation</li>
                    <li class="stuffs color">Sabre de Samouraï</li>
                    <li class="stuffs color">Sourire de Winner</li>
                    <li class="stuffs color">Tête Chercheuse</li>
                    <li class="stuffs color">Tuyau d&#39;Arrosage</li>
                    <template v-for="(item, index) in munchkinZ2.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinZ2.version) !== -1) && ((munchkinZ2.levels && item.class.indexOf('levels') !== -1) || (munchkinZ2.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinZ2.objects && item.class.indexOf('objects') !== -1) || (munchkinZ2.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinZ2.version) !== -1) && all.munchkinZ2TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinZ2TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-c munchkin-all" v-bind:class="{ 'is-visible': all.munchkinC }">
        <img class="demo" src="media/images/upload/b28668707a5461de055da1bb129d18f368b4.jpeg" alt="Munchkin Cthulhu">
        <h2 id="munchkin-c">Munchkin Cthulhu</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinC.filters }">
            <h3 id="munchkin-c-filtres">Filtres</h3>
            <p><button v-on:click="munchkinCToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Types de carte</strong>
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinC.bonuses"> Actions (<span v-text="munchkinCBonusesNumber">8</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinC.actions"> Améliorations (<span v-text="munchkinCActionsNumber">32</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinC.classes"> Classes (<span v-text="munchkinCClassesNumber">18</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinC.stuffs"> Équipements (<span v-text="munchkinCStuffsNumber">38</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinC.levels"> Gains de Niveaux (<span v-text="munchkinCLevelsNumber">10</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinC.monsters"> Monstres (<span v-text="munchkinCMonstersNumber">37</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinC.curses"> Malédictions (<span v-text="munchkinCCursesNumber">13</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinC.objects"> Objets (<span v-text="munchkinCObjectsNumber">12</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-c-details">Détails</h3>
            <p>Est apparut dans ce jeu :</p>
            <ul>
                <li>La Classe spéciale Cultiste</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkinCCardsNumber">168</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-c-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinCDoorsNumber">100</span></p>
                <ol>
                    <li class="actions color">... et sa Progéniture</li>
                    <li class="actions color">Blasphématoire</li>
                    <li class="actions color">C&#39;est çui qui dit qui R&#39;Lyeh !</li>
                    <li class="monsters color">Celle qui Suçotait dans les Ténèbres</li>
                    <li class="monsters color">Celui qui Chapardait dans les Ténèbres</li>
                    <li class="monsters color">Ceux qui Chipotaient dans les Ténèbres</li>
                    <li class="monsters color">Chibithulhu</li>
                    <li class="actions color">Créé avec des Règles Cinématographiques !</li>
                    <li class="actions color">Complètement Barge</li>
                    <li class="actions color">Convention de Cultistes</li>
                    <li class="actions color">Corrompu par le Pouvoir !</li>
                    <li class="classes color">Cultiste</li>
                    <li class="classes color">Cultiste</li>
                    <li class="classes color">Cultiste</li>
                    <li class="classes color">Cultiste</li>
                    <li class="classes color">Cultiste</li>
                    <li class="classes color">Cultiste</li>
                    <li class="actions color">D&#39;une Indescriptible Hideur</li>
                    <li class="actions color">Écume de Bave</li>
                    <li class="actions color">En pleine Élucubration</li>
                    <li class="monsters color">Escarggoth</li>
                    <li class="monsters color">Goulaschoggoth</li>
                    <li class="actions color">Grand Coup sur la Tête</li>
                    <li class="actions color">Grand Coup sur la Tête</li>
                    <li class="monsters color">H.P. Munchcraft</li>
                    <li class="actions color">Iïa R&#39;Lyeh !</li>
                    <li class="actions color">Illumination Inopportune</li>
                    <li class="actions color">Innommable</li>
                    <li class="classes color">Investigateur</li>
                    <li class="classes color">Investigateur</li>
                    <li class="classes color">Investigateur</li>
                    <li class="classes color">Investigateur</li>
                    <li class="actions color">Je ne suis pas Digne de cet Honneur...</li>
                    <li class="monsters color">Joggoth</li>
                    <li class="monsters color">Kermitoggoth</li>
                    <li class="monsters color">L_ Ch<em>s</em> s_ns V___ll_s</li>
                    <li class="monsters color">L&#39;Abomination du Sandwich</li>
                    <li class="monsters color">L&#39;Avocat d&#39;Affaires Charles Dexter Ward</li>
                    <li class="monsters color">L&#39;Horreur Inçonon... impon... imprononçable</li>
                    <li class="monsters color">Les Beaufonds</li>
                    <li class="monsters color">Le Clochard d&#39;Innsmouth</li>
                    <li class="monsters color">Le Funky de Yuggoth</li>
                    <li class="monsters color">Le Grand Cthulhu</li>
                    <li class="monsters color">Le Peuple Serpent à Lunettes</li>
                    <li class="monsters color">Le Roi en Rose</li>
                    <li class="actions color">Les Étoiles sont Alignées</li>
                    <li class="actions color">Les Étoiles sont Complètement Stone</li>
                    <li class="actions color">Les Étoiles sont Troublées</li>
                    <li class="monsters color">Lloigor (ou Lloichka) Bogdanoff (on les reconnaît plus...)</li>
                    <li class="monsters color">Maigre Bêtes de la Nuisette</li>
                    <li class="curses color">Malédiction ! Aller-simple pour l&#39;Asile de Snarkham</li>
                    <li class="curses color">Malédiction ! Amnésie</li>
                    <li class="curses color">Malédiction ! Changement de Sexe</li>
                    <li class="curses color">Malédiction ! Cheveux Blanchis sous le Coup de l&#39;Horreur</li>
                    <li class="curses color">Malédiction ! Cheveux Dressés sur la Tête</li>
                    <li class="curses color">Malédiction ! Encore une Affreuse Prise de Conscience</li>
                    <li class="curses color">Malédiction ! Hastur Hastur Hastur</li>
                    <li class="curses color">Malédiction ! J&#39;me sens tout Visqueux, d&#39;un Coup...</li>
                    <li class="curses color">Malédiction ! La Malédiction de Savath</li>
                    <li class="curses color">Malédiction ! Par-delà la Frontière de la Démence</li>
                    <li class="curses color">Malédiction ! Piles de la Lampe Torche Usées !</li>
                    <li class="curses color">Malédiction ! Sac à Dos Dévoré</li>
                    <li class="curses color">Malédiction ! Votre Arme devient Maléfique</li>
                    <li class="actions color">Méphitique</li>
                    <li class="monsters color">Mesquins Byakhees Taquins Kakis</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="monsters color">Morves de Dieu Extérieur</li>
                    <li class="monsters color">Mouchoggoth, La Mite de Cthulhu</li>
                    <li class="actions color">Mutation</li>
                    <li class="monsters color">Paahrdeulhah, Lémure du Sommeil</li>
                    <li class="actions color">Plongé dans son Sommeil Millénaire</li>
                    <li class="monsters color">Polly le Polype Violent</li>
                    <li class="actions color">Portail du Mystère</li>
                    <li class="classes color">Professeur</li>
                    <li class="classes color">Professeur</li>
                    <li class="classes color">Professeur</li>
                    <li class="classes color">Professeur</li>
                    <li class="actions color">Quadri-Dimensionnel</li>
                    <li class="monsters color"><del>Rejeton</del> Gueuleton d&#39;Azathoth</li>
                    <li class="monsters color">Rideauggoth</li>
                    <li class="monsters color">Roboggoth</li>
                    <li class="monsters color">Shog Goth</li>
                    <li class="monsters color">Shoggoth (même pas de jeu de mot, rien...)</li>
                    <li class="monsters color">Sombre Bouton de Shub-Niggurath (en pleine floraison, qui plus est...)</li>
                    <li class="monsters color">Souchoggoth</li>
                    <li class="actions color">Squameux</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="classes color">Tabasseur de Monstres</li>
                    <li class="classes color">Tabasseur de Monstres</li>
                    <li class="classes color">Tabasseur de Monstres</li>
                    <li class="classes color">Tabasseur de Monstres</li>
                    <li class="monsters color">Tchou-Tchou</li>
                    <li class="monsters color">Tony Harlathotep (dit « Hawk »)</li>
                    <li class="monsters color">Témoins de Cthulhu</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Vésiculeux</li>
                    <li class="monsters color">Vigne des Anciens, Avatar de Yog-Sauterne</li>
                    <template v-for="(item, index) in munchkinC.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinC.version) !== -1) && ((munchkinC.curses && item.class.indexOf('curses') !== -1) || (munchkinC.classes && item.class.indexOf('classes') !== -1) || (munchkinC.monsters && item.class.indexOf('monsters') !== -1) || (munchkinC.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC.version) !== -1) && all.munchkinCDoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinCDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-c-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinCTreasuresNumber">68</span></p>
                <ol>
                    <li class="bonuses color">...des Plutôt Grands et Relativement Anciens</li>
                    <li class="bonuses color">... Officiel du Mythe</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="stuffs color">Appareil de Protection Électrique du Professeur Tesla (Prototype)</li>
                    <li class="levels color">Appeler l&#39;Armée à la Rescousse</li>
                    <li class="levels color">Apprendre ce que l&#39;Homme n&#39;était pas Censé Savoir</li>
                    <li class="stuffs color">Autocollant de Pare-Choc Cthulhu</li>
                    <li class="levels color">Avertir le FBI de l&#39;Existence des Créatures</li>
                    <li class="levels color">Avertir le Président</li>
                    <li class="stuffs color">Baguette de Mémorable Raclée</li>
                    <li class="stuffs color">Bottes en Caoutchouc</li>
                    <li class="stuffs color">Carte de Membre d&#39;un Culte Maléfique</li>
                    <li class="stuffs color">Carte Non-Euclidienne</li>
                    <li class="stuffs color">Casque de Mineur</li>
                    <li class="stuffs color">Clou Lourd</li>
                    <li class="objects color">Corned-Beef</li>
                    <li class="stuffs color">Cornemuse</li>
                    <li class="stuffs color">Couteau à Sushi du Destin</li>
                    <li class="stuffs color">Couvre... Poulpe-Chef</li>
                    <li class="bonuses color">Cri Perçant</li>
                    <li class="stuffs color">Cthulhututu Chapeau Pointu</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="levels color">Découverte Troublante dans l&#39;Album de Famille</li>
                    <li class="bonuses color">Éclipse Solaire</li>
                    <li class="stuffs color">Enseigne des Anciens</li>
                    <li class="levels color">Entrainement</li>
                    <li class="levels color">Être Interviewé au Journal de Vingt Heures</li>
                    <li class="stuffs color">Fusil à Triple Canon</li>
                    <li class="stuffs color">Hache Préhistorique</li>
                    <li class="objects color">Ichor : Le Cancan Fielleux</li>
                    <li class="objects color">Ichor : Le Élan des Preux</li>
                    <li class="objects color">Ichor : Le Flan Visqueux</li>
                    <li class="objects color">Ichor : Le P&#39;tit Blanc des Dieux</li>
                    <li class="objects color">Ichor : Le Sang Dégueu</li>
                    <li class="objects color">Ichor : Le Sang des Dieux</li>
                    <li class="objects color">Ichor : Moins Lent, c&#39;est Mieux...</li>
                    <li class="bonuses color">Incommensurable Richesse</li>
                    <li class="levels color">Informer les Autorités Locales</li>
                    <li class="stuffs color">Insecticide</li>
                    <li class="objects color">La Douleur tombée du Ciel</li>
                    <li class="stuffs color">Lance-Flammes</li>
                    <li class="stuffs color">Lattes à latter du Monstre</li>
                    <li class="bonuses color">Le Chant qui Rend Fou</li>
                    <li class="stuffs color">Les Tatanes Hallucinées</li>
                    <li class="stuffs color">Maîîîîîîître !</li>
                    <li class="stuffs color">Manuscrit Ésotérique</li>
                    <li class="stuffs color">Mythailleuse</li>
                    <li class="stuffs color">Necrocomicon</li>
                    <li class="stuffs color">Necrognomicon</li>
                    <li class="stuffs color">Necronomicon</li>
                    <li class="stuffs color">Necrononichons</li>
                    <li class="stuffs color">Nécrotélécom</li>
                    <li class="stuffs color">Pages Jaunes d&#39;Innsmouth</li>
                    <li class="stuffs color">Poing Américain Vachement Stylé</li>
                    <li class="stuffs color">Poncho Imperméable aux Substances Dégueu</li>
                    <li class="stuffs color">Quille de Bowling</li>
                    <li class="bonuses color">Rire Dément</li>
                    <li class="stuffs color">Sac à Dos Rempli de Dynamite</li>
                    <li class="levels color">Seul Survivant</li>
                    <li class="stuffs color">Shogulateur</li>
                    <li class="stuffs color">Tentacule</li>
                    <li class="stuffs color">Tentacule Factice</li>
                    <li class="stuffs color">T-Shirt de l&#39;Université de Miskatronic</li>
                    <li class="stuffs color">Torche Électrique à Deux Mains</li>
                    <li class="stuffs color">Veste en Tweed</li>
                    <li class="levels color">Vision Mystiques</li>
                    <li class="bonuses color">Voleur d&#39;Ichor</li>
                    <template v-for="(item, index) in munchkinC.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinC.version) !== -1) && ((munchkinC.levels && item.class.indexOf('levels') !== -1) || (munchkinC.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinC.objects && item.class.indexOf('objects') !== -1) || (munchkinC.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC.version) !== -1) && all.munchkinCTreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinCTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-c-2 munchkin-all" v-bind:class="{ 'is-visible': all.munchkinC2 }">
        <img class="demo" src="media/images/upload/ubicm02.png" alt="Munchkin Cthulhu 2">
        <h2 id="munchkin-c-2">Munchkin Cthulhu 2 : L&#39;Appel de la Vachthulhu</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinC2.filters }">
            <h3 id="munchkin-c-2-filtres">Filtres</h3>
            <p><button v-on:click="munchkinC2ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Types de carte</strong>
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinC2.bonuses"> Actions (<span v-text="munchkinC2BonusesNumber">8</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinC2.actions"> Améliorations (<span v-text="munchkinC2ActionsNumber">32</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinC2.classes"> Classes (<span v-text="munchkinC2ClassesNumber">18</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinC2.stuffs"> Équipements (<span v-text="munchkinC2StuffsNumber">38</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinC2.levels"> Gains de Niveaux (<span v-text="munchkinC2LevelsNumber">10</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinC2.monsters"> Monstres (<span v-text="munchkinC2MonstersNumber">37</span>)
                    </label><br>
                    <label class="madnesses">
                        <input type="checkbox" value="on" v-model="munchkinC2.madnesses"> Démences (<span v-text="munchkinC2MadnessesNumber">13</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinC2.objects"> Objets (<span v-text="munchkinC2ObjectsNumber">12</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-c-2-details">Détails</h3>
            <p><img src="media/images/upload/mc2.gif" alt="Munchkin Cthulhu 2"> Cette icone en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension. Est apparut dans cette extension :</p>
            <ul>
                <li>Les Démences</li>
            </ul>
            <p><strong>Nombre total de cartes : <span v-text="munchkinC2CardsNumber">56</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-c-2-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinC2DoorsNumber">32</span></p>
                <ol>
                    <li class="actions color">Agité de Soubresauts</li>
                    <li class="monsters color">Arkhamster</li>
                    <li class="actions color">Batracien</li>
                    <li class="monsters color">Cochonien</li>
                    <li class="monsters color">Chatzatoth</li>
                    <li class="monsters color">Chiot-Goth</li>
                    <li class="monsters color">Chiots de Tindalos</li>
                    <li class="monsters color">Cotchk-Cotchk-Codêêêêtchk</li>
                    <li class="classes color">Cultiste</li>
                    <li class="classes color">Cultiste</li>
                    <li class="actions color">D&#39;une Hideuse Indescriptibilitude</li>
                    <li class="madnesses color">Démence ! Double Personnalité</li>
                    <li class="madnesses color">Démence ! Gammaphobie</li>
                    <li class="madnesses color">Démence ! Kleptomanie</li>
                    <li class="madnesses color">Démence ! Névrose Obsessionnelle Compulsive</li>
                    <li class="madnesses color">Démence ! Paranoïa</li>
                    <li class="actions color">Grand Coup sur la Tête</li>
                    <li class="classes color">Investigateur</li>
                    <li class="monsters color">La Douleur Tombée du Miel</li>
                    <li class="monsters color">La Vache Milkhathulhu</li>
                    <li class="monsters color">Les Chariots des Dieux Vieux</li>
                    <li class="monsters color">Les Enfants du Maïs</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="classes color">Professeur</li>
                    <li class="monsters color">Salade de Chèvres Chauggoth</li>
                    <li class="monsters color">Shub-Ni-Goret</li>
                    <li class="monsters color">Sombres Moutons de Shub-Niggurath</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="classes color">Tabasseur de Monstres</li>
                    <li class="monsters color">Tcha-Tcha</li>
                    <li class="actions color">Tout(e) Pitit(e) Pitit(e)...</li>
                    <li class="actions color">Tricheur !</li>
                    <template v-for="(item, index) in munchkinC2.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinC2.version) !== -1) && ((munchkinC2.madnesses && item.class.indexOf('madnesses') !== -1) || (munchkinC2.classes && item.class.indexOf('classes') !== -1) || (munchkinC2.monsters && item.class.indexOf('monsters') !== -1) || (munchkinC2.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC2.version) !== -1) && all.munchkinC2DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinC2DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-c-2-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinC2TreasuresNumber">24</span></p>
                <ol>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="stuffs color">Bottes en Peau de Poulpe</li>
                    <li class="stuffs color">Canon à Patates</li>
                    <li class="stuffs color">Chapeau de Paille</li>
                    <li class="levels color">Conserves de Concours</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="bonuses color">Doc Igor l&#39;Ichor</li>
                    <li class="stuffs color">Faux</li>
                    <li class="stuffs color">Fourche de Foule en Colère (mais néanmoins prudente...)</li>
                    <li class="objects color">Ichor : Le Nectar du Feu de Dieu ! Boudiou !</li>
                    <li class="bonuses color">Infecté</li>
                    <li class="bonuses color">Hurlement Délirant</li>
                    <li class="bonuses color">Intervention Bovine</li>
                    <li class="stuffs color">Le Barattor ! (et à travers...)</li>
                    <li class="bonuses color">Le Chant qui rend Fou, 2e Couplet</li>
                    <li class="levels color">Méditer au Temple de la Pleine Lune Fendue</li>
                    <li class="stuffs color">Moissonneuse Tabasseuse</li>
                    <li class="stuffs color">Pelle à Crottes qui déchire sa Race (surtout sa Race Ancienne)</li>
                    <li class="bonuses color">Poignée de Main Secrète</li>
                    <li class="levels color">Poser pour un Portrait de Famille</li>
                    <li class="bonuses color">Puits aux Souhaits</li>
                    <li class="stuffs color">Rouleau à Pâtisserie</li>
                    <li class="stuffs color">Veste de l&#39;Université de Rat-Musquétonic</li>
                    <li class="objects color">Vieux Poêle Curieusement Aérodynamique</li>
                    <template v-for="(item, index) in munchkinC2.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinC2.version) !== -1) && ((munchkinC2.levels && item.class.indexOf('levels') !== -1) || (munchkinC2.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinC2.objects && item.class.indexOf('objects') !== -1) || (munchkinC2.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC2.version) !== -1) && all.munchkinC2TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinC2TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-c-3 munchkin-all" v-bind:class="{ 'is-visible': all.munchkinC3 }">
        <img class="demo" src="media/images/upload/ubicm03.png" alt="Munchkin Cthulhu 3">
        <h2 id="munchkin-c-3">Munchkin Cthulhu 3 : La Crypte de l&#39;Indicible</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinC3.filters }">
            <h3 id="munchkin-c-3-filtres">Filtres</h3>
            <p><button v-on:click="munchkinC3ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Types de carte</strong>
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinC3.bonuses"> Actions (<span v-text="munchkinC3BonusesNumber">8</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinC3.actions"> Améliorations (<span v-text="munchkinC3ActionsNumber">32</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinC3.classes"> Classes (<span v-text="munchkinC3ClassesNumber">18</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinC3.stuffs"> Équipements (<span v-text="munchkinC3StuffsNumber">38</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinC3.levels"> Gains de Niveaux (<span v-text="munchkinC3LevelsNumber">10</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinC3.monsters"> Monstres (<span v-text="munchkinC3MonstersNumber">37</span>)
                    </label><br>
                    <label class="madnesses">
                        <input type="checkbox" value="on" v-model="munchkinC3.madnesses"> Démences (<span v-text="munchkinC3MadnessesNumber">13</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinC3.objects"> Objets (<span v-text="munchkinC3ObjectsNumber">12</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-c-3-details">Détails</h3>
            <p><img src="media/images/upload/mc3.gif" alt="Munchkin Cthulhu 3"> Cette icone en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension.</p>
            <p><strong>Nombre total de cartes : <span v-text="munchkinC3CardsNumber">56</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-c-3-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinC3DoorsNumber">34</span></p>
                <ol>
                    <li class="monsters color">&#39;Zathoth</li>
                    <li class="monsters color">Atlach-Nacha</li>
                    <li class="actions color">Chthoniens !</li>
                    <li class="classes color">Cultiste</li>
                    <li class="actions color">Cultistes Croustillants</li>
                    <li class="monsters color">Dagoon</li>
                    <li class="actions color">Dégoulinant de Bave</li>
                    <li class="madnesses color">Démence ! Autophobie</li>
                    <li class="madnesses color">Démence ! Bibliophobie</li>
                    <li class="madnesses color">Démence ! Disophobie</li>
                    <li class="madnesses color">Démence ! Phobophobie</li>
                    <li class="madnesses color">Démence ! Pyromanie</li>
                    <li class="monsters color">Goules</li>
                    <li class="actions color">Grand Coup sur la Tête</li>
                    <li class="monsters color">Gug</li>
                    <li class="classes color">Investigateur</li>
                    <li class="monsters color">Le Grand Quethoulhou</li>
                    <li class="monsters color">Les Pwofonds</li>
                    <li class="monsters color">Maigres Bêtes de la Nuit</li>
                    <li class="monsters color">Mi-Glu</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="monsters color">Nyarly</li>
                    <li class="classes color">Professeur</li>
                    <li class="monsters color">Shoggies</li>
                    <li class="monsters color">Shubby</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="classes color">Tabasseur de Monstres</li>
                    <li class="monsters color">Tindaloo</li>
                    <li class="actions color">Tout Minuscule</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Truculent</li>
                    <li class="actions color">Tumescent</li>
                    <li class="monsters color">Ygo</li>
                    <li class="monsters color">Yogzotot</li>
                    <template v-for="(item, index) in munchkinC3.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinC3.version) !== -1) && ((munchkinC3.madnesses && item.class.indexOf('madnesses') !== -1) || (munchkinC3.classes && item.class.indexOf('classes') !== -1) || (munchkinC3.monsters && item.class.indexOf('monsters') !== -1) || (munchkinC3.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC3.version) !== -1) && all.munchkinC3DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinC3DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-c-3-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinC3TreasuresNumber">22</span></p>
                <ol>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="levels color">Donner vos Amis à Manger à Quethoulhou</li>
                    <li class="stuffs color">Feux d&#39;Artifice</li>
                    <li class="levels color">Fouiller les Profondeurs en Quête de Savoir</li>
                    <li class="bonuses color">Gémissement Inhumain</li>
                    <li class="stuffs color">Gramophone</li>
                    <li class="objects color">Ichor le Nectar Capricieux !</li>
                    <li class="objects color">Ichor le Nectar Vicieux !</li>
                    <li class="bonuses color">Le Chant qui rend Fou, 3e Couplet</li>
                    <li class="levels color">Maîtriser ses Peurs</li>
                    <li class="bonuses color">Miam Miam !</li>
                    <li class="stuffs color">Nécrominicon</li>
                    <li class="stuffs color">Ouvre-Boîte</li>
                    <li class="bonuses color">Pied Tentaculaires</li>
                    <li class="stuffs color">Seringue Hypodermique</li>
                    <li class="objects color">Shoggy Gelé</li>
                    <li class="stuffs color">T-Shirt <del>de</del> en Cultiste</li>
                    <li class="stuffs color">Taille-Haie</li>
                    <li class="bonuses color">Tête Gluante</li>
                    <li class="bonuses color">Trop Coool !</li>
                    <li class="bonuses color">Venu d&#39;une Autre Dimension</li>
                    <template v-for="(item, index) in munchkinC3.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinC3.version) !== -1) && ((munchkinC3.levels && item.class.indexOf('levels') !== -1) || (munchkinC3.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinC3.objects && item.class.indexOf('objects') !== -1) || (munchkinC3.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC3.version) !== -1) && all.munchkinC3TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinC3TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-c-4 munchkin-all" v-bind:class="{ 'is-visible': all.munchkinC4 }">
        <img class="demo" src="media/images/upload/ubicm04.png" alt="Munchkin Cthulhu 4">
        <h2 id="munchkin-c-4">Munchkin Cthulhu 4 : Oh my grottes !</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinC4.filters }">
            <h3 id="munchkin-c-4-filtres">Filtres</h3>
            <p><button v-on:click="munchkinC4ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <strong>Types de carte</strong>
                <p>
                    <label class="fields">
                        <input type="checkbox" value="on" v-model="munchkinC4.fields"> Donjons (<span v-text="munchkinC4DonjonsNumber">20</span>)
                    </label><br>
                    <label class="warps">
                        <input type="checkbox" value="on" v-model="munchkinC4.warps"> Portails  (<span v-text="munchkinC4WarpsNumber">16</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-c-4-details">Détails</h3>
            <p><img src="media/images/upload/mc4.gif" alt="Munchkin Cthulhu 4"> Cette icone en bas à droite d&#39;une carte marque l&#39;appartenance à cette extension.</p>
            <p><strong>Nombre total de cartes : <span v-text="munchkinC4CardsNumber">36</span></strong></p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-c-4-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinC4DoorsNumber">16</span></p>
                <ol>
                    <li class="warps color">Condamnés à Répéter les Erreurs du Passé</li>
                    <li class="warps color">Condamnés à Répéter les Erreurs du Passé</li>
                    <li class="warps color">Dimension Parallèle</li>
                    <li class="warps color">Dimension Parallèle</li>
                    <li class="warps color">Enseigne Clignotante Géante des Anciens</li>
                    <li class="warps color">Enseigne Clignotante Géante des Anciens</li>
                    <li class="warps color">Fosse et Usage de Fosse !</li>
                    <li class="warps color">Fosse et Usage de Fosse !</li>
                    <li class="warps color">Immenses Glyphes Immondes Sculptés sur les Murs</li>
                    <li class="warps color">Immenses Glyphes Immondes Sculptés sur les Murs</li>
                    <li class="warps color">Passe Devant et Suis-moi</li>
                    <li class="warps color">Passe Devant et Suis-moi</li>
                    <li class="warps color">Par ici, Bande d&#39;Abrutis !</li>
                    <li class="warps color">Par ici, Bande d&#39;Abrutis !</li>
                    <li class="warps color">Porte des Grands Anciens</li>
                    <li class="warps color">Porte des Grands Anciens</li>
                    <template v-for="(item, index) in munchkinC4.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinC4.version) !== -1) && (munchkinC4.warps && item.class.indexOf('warps') !== -1) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC4.version) !== -1) && all.munchkinC4DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinC4DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="donjons">
                <h3 id="munchkin-c-4-donjons">Donjons</h3>
                <p>Nombre total de donjons : <span v-text="munchkinC4DonjonsNumber">20</span></p>
                <ol>
                    <li class="fields color">Antre des Dholes</li>
                    <li class="fields color">Antre Souterrain de Byatis</li>
                    <li class="fields color">Arène d&#39;Azathoth</li>
                    <li class="fields color">Boutique de Chaussures Souterraine de Shub-Niggurath</li>
                    <li class="fields color">Caverne des Archétypes</li>
                    <li class="fields color">Cloaque des Mi-Go</li>
                    <li class="fields color">Crevasse des Chthoniens</li>
                    <li class="fields color">Cryptes d&#39;Innsmouth</li>
                    <li class="fields color">Égout des Shoggoths</li>
                    <li class="fields color">Gouffre de Cthulhu</li>
                    <li class="fields color">Grotte de Glaaki</li>
                    <li class="fields color">K&#39;n-Yan</li>
                    <li class="fields color">Le Fossé de Dunwich</li>
                    <li class="fields color">Les Contrées du Rêve</li>
                    <li class="fields color">Les Montagnes Hallucinées</li>
                    <li class="fields color">Monde Souterrain d&#39;Ubbo-Sathla</li>
                    <li class="fields color">Sous-sol de la Bibliothèque de l&#39;Université Miskatonic</li>
                    <li class="fields color">Station de Métro d&#39;Arkham</li>
                    <li class="fields color">Ténébreuse Tanière des Lloigor</li>
                    <li class="fields color">Tunnel de Tsathoggua</li>
                    <template v-for="(item, index) in munchkinC4.donjonsList">
                        <li v-bind:class="(item.class.indexOf(munchkinC4.version) !== -1) && (munchkinC4.fields && item.class.indexOf('fields') !== -1) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC4.version) !== -1) && all.munchkinC4DonjonsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinC4DonjonsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
</div>]]></description>
            <link>http://localhost:7776liste-des-cartes-munchkin-editions-francaises/</link>
            <guid isPermaLink="false">577a13cfd1b7fe136fc20060</guid>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Vue.js]]></category>
            <category><![CDATA[Ressources]]></category>
            <category><![CDATA[Outils]]></category>
            <category><![CDATA[Hors-sujet]]></category>
            <category><![CDATA[SEO]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Front-end]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Sat, 02 Jul 2016 07:44:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Coder proprement en JavaScript par l'exemple&nbsp;: Upload d'image]]></title>
            <description><![CDATA[<p>Dans cet article il ne va pas être question d&#39;expliquer l&#39;utilité du point virgule (semi-colon) « ; » ou encore les bienfaits de l&#39;opérateur d&#39;égalité stricte (strict equality operator) « === » mais plutôt de vous montrer par l&#39;exemple comment produire du code que vous et les autres pourrons relire sans entrer dans les détails si cela n&#39;est pas nécessaire.</p>
<div style="text-align: center">
<img style="max-width:100%;border-radius: 16px" src="media/images/upload/clean-code-design-patterns-7-638.jpg" alt="Clean Code">
<span style="font-style: italic"><em>Source : <a href="http://fr.slideshare.net/pazscall/clean-code-design-patterns">http://fr.slideshare.net/pazscall/clean-code-design-patterns</a></em></span>
</div>

<p>Nous allons tout au long de cet article aborder plusieurs notions également comme :</p>
<ul>
<li><strong>La programmation par intention</strong> (intentional programming) ou le fait de rassembler et nommer chaque suite d&#39;instruction dans une fonction pour rendre le code aisé à la relecture.</li>
<li><strong>La programmation par retour de fonction</strong> (function callback) ou le fait de déléguer à une fonction externe ce qu&#39;il va se passer à la fin d&#39;une suite d&#39;instruction.</li>
<li><strong>La programmation par entrée/sortie</strong> (I/O) ou le fait que chaque fonction doit clairement définir ce qu&#39;elles attendent en entrée (inputs), et ce qu&#39;elles vont renvoyer en sortie (outputs).</li>
<li><strong>La programmation asynchrone</strong> ou le fait d&#39;attendre un événement ou un temps précis sur des boucles indépendantes de l&#39;Event Loop avant l&#39;exécution du code.</li>
</ul>
<p>C&#39;est parti pour apprendre tout ça à travers un exemple d&#39;upload de fichier.</p>
<h2 id="s-lectionner-une-image">Sélectionner une image</h2>
<p>Commençons par tout script JavaScript courant, une simple suite d&#39;instruction se trouvant dans le <strong>champ lexical global</strong> (global scope) afin, dans notre exemple, de sélectionner une image stockée sur notre disque dur.</p>
<pre class="prettyprint linenums"><code class="lang-js">var inputFile = document.createElement(&quot;input&quot;);
inputFile.type = &quot;file&quot;;
inputFile.accept = &quot;image/*&quot;;

document.getElementsByTagName(&quot;body&quot;)[0].appendChild(inputFile);
</code></pre>
<p>Une fois ce code exécuté, vous devriez voir un bouton pour choisir une image.</p>
<input type="file" accept="image/*">

<p>Dans le détail c&#39;est assez simple :</p>
<ul>
<li>On affecte à la variable <samp>inputFile</samp> un élément de type <samp>HTMLInputElement</samp> (<samp>&lt;input&gt;</samp>) via la fonction <samp>document.createElement</samp>.</li>
<li>On affecte l&#39;attribut <samp>type</samp> ainsi que l&#39;attribut <samp>accept</samp>.</li>
<li>Et on insère dans l&#39;élément <samp>HTMLBodyElement</samp> (<samp>&lt;body&gt;</samp>) avec <samp>appendChild</samp> l&#39;élément que nous venons de créer.</li>
</ul>
<blockquote>
<p><strong>Comprendre le DOM et les Nodes</strong></p>
<p>La fonction <samp>document.createElement</samp> créé des objets de type <samp>HTMLElement</samp> et retourne une référence vers ces objets qui ne sont pas encore placés dans le DOM. Si le premier paramètre est un élément HTML connu, l&#39;objet est encore plus précis. Dans notre cas <samp>document.createElement(&quot;input&quot;)</samp> est un objet de type <samp>HTMLInputElement</samp>.</p>
<p>La fonction <samp>document.getElementsByTagName</samp> récupère un tableau de type <samp>HTMLCollection</samp> dont chaque élément est une référence à un <samp>HTMLElement</samp> déjà placé dans le DOM. Dans notre exemple <samp>document.getElementsByTagName(&quot;body&quot;)</samp> retourne un <samp>HTMLCollection</samp> d&#39;un seul élément puisque la balise <samp>&lt;body&gt;</samp> est unique dans le DOM et <samp>document.getElementsByTagName(&quot;body&quot;)[0]</samp> retourne donc cet unique élément de type plus précis <samp>HTMLBodyElement</samp>.</p>
<p>Chaque objet en JavaScript hérite d&#39;un prototype qui est un objet qui lui-même hérite d&#39;un prototype etc. Tous les objets en dernier lieu hérite de <samp>Object</samp>. Par exemple ici :</p>
<ul>
<li>Pour <samp>HTMLBodyElement</samp> (<samp>&lt;body&gt;</samp>) la chaîne prototypale est la suivante : <samp>HTMLBodyElement</samp> -&gt; <samp>HTMLElement</samp> -&gt; <samp>Element</samp> -&gt; <samp>Node</samp> -&gt; <samp>EventTarget</samp> -&gt; <samp>Object</samp></li>
<li>Pour <samp>HTMLInputElement</samp> (<samp>&lt;input&gt;</samp>) la chaine prototypale est la suivante : <samp>HTMLInputElement</samp> -&gt; <samp>HTMLElement</samp> -&gt; <samp>Element</samp> -&gt; <samp>Node</samp> -&gt; <samp>EventTarget</samp> -&gt; <samp>Object</samp></li>
</ul>
<p>Nos deux éléments ont chaqu&#39;un des fonctions utilisables comme <samp>appendChild</samp> qu&#39;ils héritent de leurs prototypes aussi :</p>
<ul>
<li>Le fait de pouvoir utiliser la fonction <samp>inputFile.toString</samp> est hérité de <samp>Object</samp>.</li>
<li>Le fait de pouvoir utiliser la fonction <samp>inputFile.addEventListener</samp> est hérité de <samp>EventTarget</samp>.</li>
<li>Le fait de pouvoir utiliser la propriété <samp>inputFile.textContent</samp> est hérité de <samp>Node</samp>.</li>
<li>Le fait de pouvoir utiliser la fonction <samp>inputFile.getElementsByTagName</samp> est hérité de <samp>Element</samp>.</li>
<li>etc...</li>
</ul>
<p>Il faut également comprendre que l&#39;on manipule des références vers les éléments HTML du DOM et que tous les objets HTML chargés en mémoire dans le navigateur ne sont pas forcément tous dans le DOM. C&#39;est le cas de notre objet <samp>HTMLInputElement</samp> qui n&#39;est référencé comme enfant de <samp>HTMLBodyElement</samp> dans le DOM qu&#39;à partir de la ligne 5. Avant cela, l&#39;objet existe et est manipulable via sa référence <samp>inputFile</samp> mais il n&#39;est pas dans le DOM. Tout objet dont la référence se perd dans le code (n&#39;est pas utilisé), et qui n&#39;a pas été référencé dans le DOM (injecté) est alors perdu.</p>
</blockquote>
<h3 id="lire-l-image-s-lectionn-e">Lire l&#39;image sélectionnée</h3>
<p>Il va maintenant être question de lire l&#39;image que nous venons de sélectionner. C&#39;est à dire de transformer chaque octets de donnée de l&#39;image en une chaîne de caractère exploitable par notre navigateur afin que celui-ci puisse afficher l&#39;image.</p>
<p>Toujours dans notre <strong>champ lexical global</strong> et à la suite des précédentes instructions nous ajoutons ceci :</p>
<pre class="prettyprint linenums"><code class="lang-js">var reader = new FileReader();
reader.readAsDataURL(inputFile.files[0]);
</code></pre>
<p>En executant le code, nous obtenons alors l&#39;erreur suivante : <samp>Uncaught TypeError: Failed to execute &#39;readAsDataURL&#39; on &#39;FileReader&#39;: parameter 1 is not of type &#39;Blob&#39;.</samp></p>
<p>Le problème est le suivant : il faut exécuter ce pend de code après qu&#39;on ai sélectionné l&#39;image sinon, au moment de transformer nos octets avec <samp>reader.readAsDataURL</samp>, <samp>inputFile</samp> ne contient pas d&#39;image dans son tableau <samp>files</samp>.</p>
<h3 id="apr-s-la-s-lection-">Après la sélection...</h3>
<p>Nous allons donc ajouter un événement sur notre <samp>HTMLInputElement</samp> grâce à la fonction <samp>addEventListener</samp> disponible et exécuter par un <strong>retour de fonction</strong> ce qu&#39;il va se passer quand l’événement ce produit. Voici donc à quoi va maintenant ressembler la partie qui est dans le <strong>champ lexical global</strong>.</p>
<pre class="prettyprint linenums"><code class="lang-js">var inputFile = document.createElement(&quot;input&quot;);
inputFile.type = &quot;file&quot;;
inputFile.accept = &quot;image/*&quot;;

inputFile.addEventListener(&quot;change&quot;, function () {
    var reader = new FileReader();
    reader.readAsDataURL(inputFile.files[0]);

    console.log(&quot;Done&quot;);
});

document.getElementsByTagName(&quot;body&quot;)[0].appendChild(inputFile);
</code></pre>
<p>On précise donc ici via <samp>&quot;change&quot;</samp> à la ligne 5 que l’événement que nous souhaitons capturer est le changement d&#39;image dans l&#39;élément <samp>HTMLInputElement</samp>. La fonction qui se trouve ensuite est celle qui va être exécutée par <samp>addEventListener</samp> quand l&#39;image aura effectivement changée, à savoir : lire et convertir l&#39;image.</p>
<p>Si vous testez ce code, vous devriez voir dans la console de votre navigateur le message « Done » (ligne 9) une fois l&#39;évènement <samp>&quot;change&quot;</samp> déclenché.</p>
<blockquote>
<p><strong>Comprendre la Boucle d’événement</strong></p>
<p>Les instructions en JavaScript sont lues de haut en bas et exécutées par la <strong>boucle d’événement</strong> JavaScript (Event Loop). Chaque tour de boucle correspond à la lecture des instructions synchrones dans une fonction, les une après les autres. Quand une instruction asynchrone est parcourue, elle est mise de côté de manière à être traitée ultérieurement par un autre tour de boucle. Dans notre exemple précédent, c&#39;est le cas avec <samp>addEventListener</samp> dont la <strong>fonction de retour</strong> ne sera exécutée par la <strong>boucle événement</strong> que lorsque l’événement « changement d&#39;image » sera levé.</p>
<p>Ce n&#39;est pas parce que une fonction dispose d&#39;une <strong>fonction de retour</strong> que celle-ci ne sera pas exécutée de manière synchrone, dans notre cas précédent c&#39;est parce qu’il s&#39;agit d&#39;un événement.</p>
<p>Ce qui provoque une exécution de code sur un autre tour de boucle parmi des instructions à la suite dans une fonction sont de manière non exhaustives les éléments suivants :</p>
<ul>
<li>setInterval, setTimeout ou setImediate.</li>
<li>Event (Load, Click, ...)</li>
<li>XMLHttpRequest ou WebSocket</li>
<li>requestAnimationFrame</li>
<li>Des API Html comme File API, Web Database API</li>
<li>...</li>
</ul>
<p>Ainsi dans l&#39;exemple suivant :</p>
<pre class="prettyprint linenums"><code class="lang-js">console.log(&quot;Test 1&quot;);
setInterval(function () {
    console.log(&quot;Test 2&quot;);
}, 0);
console.log(&quot;Test 3&quot;);
</code></pre>
<p>La sortie produira dans l&#39;ordre : « Test 1 », « Test 3 » et « Test 2 ».</p>
</blockquote>
<h3 id="avec-callback-asynchrone">Avec Callback asynchrone</h3>
<p>Nous allons maintenant déporter ce qui est logique dans une fonction. Nous allons nommer cette fonction de manière à indiquer notre <strong>intention</strong> (intentional programming) pour comprendre ce qui est fait lors de la relecture du code.</p>
<p>Le développeur se référera à la partie « Logique » si cela lui est nécessaire, sinon il se contentera de relire la partie « Exécution ».</p>
<p><strong>Logique</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">/**
 * Select an image from your device library and allow you to define what do after.
 * @param  {selectImage~callback} afterSelectCallback - Allow you to set what do after selection.
 * @return {HTMLInputElement} The `HTMLInputElement` used to select photo into library.
 */
function selectImage(afterSelectCallback) {
    var inputFile = document.createElement(&quot;input&quot;);
    inputFile.type = &quot;file&quot;;
    inputFile.accept = &quot;image/*&quot;;

    inputFile.addEventListener(&quot;change&quot;, function () {
        if (afterSelectCallback) {

            /**
             * What do after selecting image.
             * @callback selectImage~callback
             * @param {HTMLInputElement} inputFile - The `HTMLInputElement` used to select photo into library.
             */
            afterSelectCallback(inputFile);
        }
    });

    return inputFile;
}
</code></pre>
<p>Notre fonction <samp>selectImage</samp> va nous permettre de créer le mécanisme de sélection d&#39;image, de le mettre à disposition et de nous permettre de déléguer par <strong>retour de fonction</strong> ce qu&#39;il sera fait une fois que l&#39;image aura été choisie. Par ailleurs, cette fonction retourne le <samp>HTMLInputElement</samp> qu&#39;il créer en retour immédiat et le fourni également en premier argument de la <strong>fonction de retour</strong>.</p>
<p><strong>Exécution</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">document.getElementsByTagName(&quot;body&quot;)[0].appendChild(
    selectImage(function (inputFile) {
        var reader = new FileReader();
        reader.readAsDataURL(inputFile.files[0]);
        console.log(&quot;Done&quot;);
    })
);
</code></pre>
<p>Ainsi à la ligne 2 nous savons que le code va nous permettre de sélectionner une image et la fonction passé en argument va constituer ce qu&#39;il se passera quand celle-ci aura été choisie. En outre <samp>selectImage</samp> retourne de manière synchrone via son mot clé <samp>return</samp> le <samp>HTMLInputElement</samp> ce qui permet de le passer à <samp>appendChild</samp> à la ligne 1.</p>
<blockquote>
<p><strong>Comprendre les commentaires JSDoc</strong></p>
<p>Si le but de la <strong>programmation par intention</strong> est de permettre de relire plus facilement ce que le code fait dans la partie « Exécution », les commentaires JSDoc permettent quand à eux d&#39;expliquer les <strong>entrées/sorties</strong> (inputs/outputs ou I/O) des fonctions définies dans la partie « Logique ».</p>
<p>Le but est de ne pas relire le contenu de la fonction (sauf s&#39;il faut la modifier) mais de comprendre</p>
<ul>
<li>ce qu&#39;elle fait,</li>
<li>ce qu&#39;elle à besoin en entrée et</li>
<li>ce qu&#39;elle retourne en sortie (ou ce qu&#39;elle fournit à la <strong>fonction de retour</strong>).</li>
</ul>
<p>Bien qu&#39;il ne soit pas obligatoire de respecter le schéma de mon exemple, cela vous permettra avec divers outils de générer une documentation de vos scripts automatiquement.</p>
</blockquote>
<h2 id="afficher-l-image">Afficher l&#39;image</h2>
<p>Augmentons un peu le code de retour de notre exemple précédent après l&#39;utilisation de la fonction <samp>selectImage</samp>.</p>
<pre class="prettyprint linenums"><code class="lang-js">var reader = new FileReader(),
    image = document.createElement(&quot;img&quot;);

reader.readAsDataURL(inputFile.files[0]);
image.src = reader.result;

document.getElementsByTagName(&quot;body&quot;)[0].appendChild(image);
console.log(&quot;Done&quot;);
</code></pre>
<p>Nous voyons à la ligne 7 que notre image est censé être affichée dans le DOM puisqu&#39;elle est injectée dans l&#39;élément <samp>&lt;body&gt;</samp>. Pourtant ce n&#39;est pas le cas car le reader n&#39;a pas eu le temps de convertir le résultat avant de l&#39;afficher dans la source ce qui fait qu&#39;il ne se passe rien.</p>
<h3 id="attendre-la-fin-de-la-lecture">Attendre la fin de la lecture</h3>
<p>De la même manière qu&#39;avec notre élément <samp>HTMLInputElement</samp>, il va falloir écouter l’événement <samp>&quot;load&quot;</samp> qui exécutera une <strong>fonction de retour</strong> quand l&#39;image aura correctement été lue et convertie.</p>
<pre class="prettyprint linenums"><code class="lang-js">var reader = new FileReader();

reader.addEventListener(&quot;load&quot;, function () {
    var image = document.createElement(&quot;img&quot;);
    image.src = reader.result;

    document.getElementsByTagName(&quot;body&quot;)[0].appendChild(image);
    console.log(&quot;Done&quot;);
});

reader.readAsDataURL(inputFile.files[0]);
</code></pre>
<p>Il est important de savoir ce qui déclenche l’événement. Dans le cas présent, c&#39;est l&#39;exécution de <samp>readAsDataURL</samp> à la ligne 11. Ce qui signifie que pour que le code de retour dans <samp>&quot;load&quot;</samp> puisse être exécuté, il faut qu&#39;il ai été déclaré avant <samp>readAsDataURL</samp> sinon au moment ou celui ci lèvera l’événement <samp>&quot;load&quot;</samp>, il n&#39;y aura pas encore de <strong>fonction de retour</strong> de déclarée.</p>
<h3 id="avec-callback-asynchrone">Avec Callback asynchrone</h3>
<p>Ré-écrivons ce code afin d&#39;appeler les instructions d&#39;exécution principale (dans le <strong>champ lexical global</strong>) par <strong>intention</strong>. Nous ajoutons donc au côté de <samp>selectImage</samp> une nouvelle fonction que nous appellerons <samp>readImage</samp>.</p>
<p><strong>Logique</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">/* ... */

/**
 * Convert an Image from device to a Data Url Base64 string.
 * @param  {HTMLInputElement}   inputFile - Element used to read the source image.
 * @param  {readImage~callback} callback  - Allow you to set what do after convertion.
 */
function readImage(inputFile, callback) {
    var reader = new FileReader();

    reader.addEventListener(&quot;load&quot;, function () {
        var image = document.createElement(&quot;img&quot;);
        image.src = reader.result;
        if (callback) {

            /**
             * What do after converting image.
             * @callback readImage~callback
             * @param {HTMLImageElement} image  - The `HTMLImageElement` that content the correct Data Url Base64 source.
             * @param {FileReader}       reader - The `FileReader` used to convert the original Image.
             */
            callback(image, reader);
        }
    });

    reader.readAsDataURL(inputFile.files[0]);
}
</code></pre>
<p>Nous fournissons pour le <strong>retour de fonction</strong> la possibilité de manipuler l&#39;image avec en premier paramètre l&#39;objet <samp>HTMLImageElement</samp> et en second paramètre l&#39;objet <samp>FileReader</samp>. Nous choisissons cet ordre car il est plus probable qu&#39;à l&#39;utilisation, on souhaite manipuler l&#39;image lue que réellement l&#39;objet qui à permis sa conversion.</p>
<p><strong>Exécution</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">var body = document.getElementsByTagName(&quot;body&quot;)[0];

body.appendChild(
    selectImage(function (inputFile) {
        readImage(inputFile, function (image) {
            body.appendChild(image);
            console.log(this.toString());
        });
    })
);
</code></pre>
<p>Après avoir mis la référence à <samp>&lt;body&gt;</samp> dans la variable <samp>body</samp>, on peut comprendre à la lecture des ligne 4 et 5 que le code va nous permettre de choisir une image, de la lire puis de faire autre chose. En l’occurrence ici de l&#39;ajouter au DOM. On peut également voir à la ligne 5 que nous avons uniquement décidé d&#39;utiliser le paramètre <samp>image</samp> pour la suite.</p>
<blockquote>
<p><strong>Raccourci et conservation des contextes d&#39;exécution avec ES6</strong></p>
<p>On utilise la notation <samp>function () { /* ... */ }</samp> pour utiliser une fonction anonyme comme <strong>fonction de retour</strong> dans le code destiné à l’exécution dans le champ lexical global (le contexte d&#39;exécution le plus haut). Réécrire ce terme <samp>function</samp> est assez verbeux et recréer un nouveau contexte d&#39;exécution entre chaque fonction redéfini la valeur de <samp>this</samp> à chaque niveau. Il est possible de conserver le <samp>this</samp> du contexte d&#39;exécution important en changeant la manière de nommer les <strong>fonctions de retour</strong> avec <samp>=&gt;</samp>. Le code précédent donnerait donc :</p>
<pre class="prettyprint linenums"><code class="lang-js">var body = this.document.getElementsByTagName(&quot;body&quot;)[0];
body.appendChild(
    selectImage(inputFile =&gt; {
        readImage(inputFile, image =&gt; {
            body.appendChild(image);
            console.log(this.toString());
        });
    })
);

Dans l&#39;exemple avec `=&gt;`, `this` vaut `window` alors que dans celui avec `function`, `this` vaut `undefined`.
</code></pre>
</blockquote>
<h2 id="redimensionner-l-image">Redimensionner l&#39;image</h2>
<p>L&#39;image sélectionnée est parfois grande alors que nous souhaitons l&#39;afficher dans une zone réduite. De plus si nous souhaitons l&#39;uploader sur le serveur plus tard, il serait intéressant qu&#39;elle soit moins lourde. On souhaiterait qu&#39;elle fasse au maximum 800 pixels de large ou au maximum 600 pixels de haut tout en conservant son ratio initial.</p>
<p>Voici un petit algorithme capable de transformer notre image en utilisant pour cela un objet <samp>HTMLCanvasElement</samp>. Nous allons cette fois directement le créer dans une fonction, et l&#39;utiliserons dans la partie exécution.</p>
<p><strong>Logique</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">/* ... */

/**
 * Reduce size of image and to keep the ratio.
 * @param  {HTMLImageElement}     imageSource - Element used as original image.
 * @param  {reduceImage~callback} callback    - Allow you to set what do after resizing.
 */
function reduceImage(imageSource, callback) {
    var canvas = document.createElement(&quot;canvas&quot;),
        imageResult = document.createElement(&quot;img&quot;),
        context,
        maxWidth = 800,
        maxHeight = 600,
        width = imageSource.width,
        height = imageSource.height;

    if (width &gt; height) {
        if (width &gt; maxWidth) {
            height *= maxWidth / width;
            width = maxWidth;
        }
    } else {
        if (height &gt; maxHeight) {
            width *= maxHeight / height;
            height = maxHeight;
        }
    }

    canvas.width = width;
    canvas.height = height;

    context = canvas.getContext(&quot;2d&quot;);
    context.drawImage(imageSource, 0, 0, width, height);

    imageResult.src = canvas.toDataURL(&quot;image/jpg&quot;, 0.8);

    /**
     * What do after resizing image.
     * @callback reduceImage~callback
     * @param {HTMLImageElement} image  - The `HTMLImageElement` that content the correct Data Url Base64 source.
     * @param {FileReader}       reader - The `FileReader` used to convert the original Image.
     */
    callback(imageResult, canvas);
}
</code></pre>
<p>Nous pouvons lire comment cela fonctionne :</p>
<ul>
<li>Après avoir fixé les largeur et hauteur maximal aux lignes 12 et 13,</li>
<li>nous trouvons quelle est la dimension la plus importante pour appliquer la valeur maximale à celle-ci ligne 17</li>
<li>et affectons à l&#39;autre dimension le ratio approprié pour réduire l&#39;image (ligne 19 et 24).</li>
<li>Après avoir défini la taille du canvas qui va nous permettre de créer l&#39;image aux dimensions finales nous dessinons l&#39;image à la ligne 33,</li>
<li>puis nous affectons l&#39;image dans un nouvel élément de type <samp>HTMLImageElement</samp> en transferrant dans sa source le contenu du canvas au format « jpeg » compressé à « 80% » ligne 35.</li>
</ul>
<p>Il ne nous reste plus qu&#39;à utiliser notre nouvelle fonction.</p>
<p><strong>Exécution</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">var body = document.getElementsByTagName(&quot;body&quot;)[0];

body.appendChild(
    selectImage(function (inputFile) {
        readImage(inputFile, function (image) {
            reduceImage(image, function (imageResult) {
                body.appendChild(imageResult);
                console.log(&quot;Done&quot;);
            });
        });
    })
);
</code></pre>
<p>Nous pouvons voir que les lignes 7 et 8 (anciennement 6 et 7) sont restées inchangées et qu&#39;une nouvelle ligne d&#39;intention a été ajouté, à savoir <samp>reduceImage</samp> (<samp>image</samp> est tout de même devenu <samp>imageResult</samp>).</p>
<blockquote>
<p><strong>Pourquoi la cascade de Callback</strong></p>
<p>Sachez que si vous trouvez la cascade de <strong>fonction de retour</strong> difficile à lire, vous pouvez toujours nommer et affecter chaque étape dans des variables pour tout rendre à plat. Pour ma part, je ne trouve pas cela plus simple puisque cela inverse le sens de lecture par rapport à ce qui est fait en premier et ce qui apparaît dans le fichier de code.</p>
<pre class="prettyprint linenums"><code class="lang-js">var body, inputFile, readImageCallback, selectImageCallback;
body = document.getElementsByTagName(&quot;body&quot;)[0];
readImageCallback = function (image) {
    body.appendChild(image);
    console.log(&quot;Done&quot;);
};
selectImageCallback = function (inputFile) {
    readImage(inputFile, readImageCallback);
};
inputFile = selectImage(selectImageCallback);
body.appendChild(inputFile);
</code></pre>
</blockquote>
<h3 id="-viter-l-image-noire-">Éviter l&#39;image noire.</h3>
<p>Si votre image réduite apparaît en noire dans le Canvas c&#39;est tout simplement parce qu&#39;elle n&#39;est pas chargée au moment ou elle est appliquée dans celui-ci. Il faut alors, comme c&#39;était le cas avec l&#39;objet <samp>FileReader</samp> attendre que l&#39;image soit chargée avant d&#39;exécuter la fonction de retour.</p>
<pre class="prettyprint linenums"><code class="lang-js">/* ... */

/**
 * Convert an Image from device to a Data Url Base64 string.
 * @param  {HTMLInputElement}   inputFile - Element used to read the source image.
 * @param  {readImage~callback} callback  - Allow you to set what do after convertion.
 */
function readImage(inputFile, callback) {
    var reader = new FileReader();

    reader.addEventListener(&quot;load&quot;, function () {
        var image = document.createElement(&quot;img&quot;);

        image.addEventListener(&quot;load&quot;, function () {
            if (callback) {

                /**
                 * What do after converting image.
                 * @callback readImage~callback
                 * @param {HTMLImageElement} image  - The `HTMLImageElement` that content the correct Data Url Base64 source.
                 * @param {FileReader}       reader - The `FileReader` used to convert the original Image.
                 */
                callback(image, reader);
            }
        });

        image.src = reader.result;
    });

    reader.readAsDataURL(inputFile.files[0]);
}

/* ... */

/**
 * Reduce size of image, keept the ratio and return a miniature of original image.
 * @param  {HTMLImageElement}     imageSource - Element used as original image.
 * @param  {reduceImage~callback} callback    - Allow you to set what do after resizing.
 */
function reduceImage(imageSource, callback) {
    var canvas = document.createElement(&quot;canvas&quot;),
        imageResult = document.createElement(&quot;img&quot;),
        context,
        maxWidth = 800,
        maxHeight = 600,
        width = imageSource.width,
        height = imageSource.height;

    if (width &gt; height) {
        if (width &gt; maxWidth) {
            height *= maxWidth / width;
            width = maxWidth;
        }
    } else {
        if (height &gt; maxHeight) {
            width *= maxHeight / height;
            height = maxHeight;
        }
    }

    canvas.width = width;
    canvas.height = height;

    context = canvas.getContext(&quot;2d&quot;);
    context.drawImage(imageSource, 0, 0, width, height);

    imageResult.addEventListener(&quot;load&quot;, function () {

        /**
         * What do after resizing image.
         * @callback reduceImage~callback
         * @param {HTMLImageElement} image  - The `HTMLImageElement` that content the correct Data Url Base64 source.
         * @param {FileReader}       reader - The `FileReader` used to convert the original Image.
         */
        callback(imageResult, canvas);
    });

    imageResult.src = canvas.toDataURL(&quot;image/jpg&quot;, 0.8);
}

/* ... */
</code></pre>
<p>vous constaterez donc, ligne 14 pour <samp>readImage</samp> et ligne 67 pour <samp>reduceImage</samp>, que nous avons ajouté <samp>addEventListener</samp> pour l&#39;évènement <samp>&quot;load&quot;</samp> afin d&#39;attendre que l&#39;image soit complètement chargée avant de passer à la suite.</p>
<h3 id="externaliser-des-m-canismes-r-utilisables-">Externaliser des mécanismes réutilisables.</h3>
<p>Notre fonction <samp>reduceImage</samp> fait deux choses :</p>
<ul>
<li>elle nous délivre de nouvelles dimentions à partir de dimentions originales et</li>
<li>elle créé une « miniature » de l&#39;image originale avec un canvas.</li>
</ul>
<p>Ces deux actions pourraient être scindées pour ajouter un <strong>niveau d&#39;intention</strong> à la relecture.</p>
<pre class="prettyprint linenums"><code class="lang-js">/* ... */

/**
 * Reduce size of 2D item and kept the ratio based on max width and height.
 * @param  {number}                       width     - Original with of item.
 * @param  {number}                       height    - Original height of item.
 * @param  {number}                       maxWidth  - Maximal width of the output item.
 * @param  {number}                       maxHeight - Maximal height of the output item.
 * @param  {resizeWithSameRatio~callback} callback  - Allow you to set what do after resizing.
 */
function resizeWithSameRatio(width, height, maxWidth, maxHeight, callback) {
    if (width &gt; height) {
        if (width &gt; maxWidth) {
            height *= maxWidth / width;
            width = maxWidth;
        }
    } else {
        if (height &gt; maxHeight) {
            width *= maxHeight / height;
            height = maxHeight;
        }
    }

    /**
     * What do after find the reduced value.
     * @callback resizeWithSameRatio~callback
     * @param {number} width  - New with of item.
     * @param {number} height - New height of item.
     */
    callback(width, height);
}

/**
 * Create a reduced image from a more large image.
 * @param  {HTMLImageElement}             imageSource - Element used as original image.
 * @param  {number}                       width       - New image width.
 * @param  {number}                       height      - New image height.
 * @param  {thumbnailWithCanvas~callback} callback    - Allow you to set what do after generating new image.
 */
function thumbnailWithCanvas(imageSource, width, height, callback) {
    var canvas = document.createElement(&quot;canvas&quot;),
        imageResult = document.createElement(&quot;img&quot;),
        context;

    canvas.width = width;
    canvas.height = height;

    context = canvas.getContext(&quot;2d&quot;);
    context.drawImage(imageSource, 0, 0, width, height);

    imageResult.addEventListener(&quot;load&quot;, function () {

        /**
         * What do after render the reduced image.
         * @callback resizeWithSameRatio~callback
         * @param {HTMLImageElement}  image  - The `HTMLImageElement` that content the correct Data Url Base64 source.
         * @param {HTMLCanvasElement} canvas - The `HTMLCanvasElement` used to reduce the image.
         */
        callback(imageResult, canvas);
    });

    imageResult.src = canvas.toDataURL(&quot;image/jpg&quot;, 0.8);
}

/**
 * Reduce size of image, keept the ratio and return a miniature of original image.
 * @param  {HTMLImageElement}     imageSource - Element used as original image.
 * @param  {reduceImage~callback} callback    - Allow you to set what do after resizing.
 */
function reduceImage(imageSource, callback) {
    resizeWithSameRatio(imageSource.width, imageSource.height, 800, 600, function (width, height) {
        thumbnailWithCanvas(imageSource, width, height, function (imageResult, canvas) {

            /**
             * What do after resizing image.
             * @callback reduceImage~callback
             * @param {HTMLImageElement}  image  - The `HTMLImageElement` that content the correct Data Url Base64 source.
             * @param {HTMLCanvasElement} canvas - The `HTMLCanvasElement` used to reduce the image.
             */
            callback(imageResult, canvas);
        })
    });
}

/* ... */
</code></pre>
<blockquote>
<p><strong>Dette technique ou comment trouver le bon niveau d&#39;intention</strong></p>
<p>Vous me direz : « Pourquoi ne pas encore re-scinder les fonctions <samp>resizeWithSameRatio</samp> ou <samp>thumbnailWithCanvas</samp> ? Dans ce cas là, où s&#39;arrête le travail pour faciliter la relecture ? Il faut pour cela repérer en quoi la fonction pourrait se suffire à elle-même. En général les « inputs/outputs » sont une bonne indication car si vous êtes capable en sortie de produire un élément de même type que celui en entrée, c&#39;est que vos instructions sont bonnes pour être groupées.</p>
<p>Il n&#39;est pas non plus nécessaire de scinder une fonction qui pourrait l&#39;être tant que la nécessite ne s&#39;en fait pas ressentir. Il faut trouver le bon équilibre entre temps et utilité.</p>
<p>Certain outils vous permette de jauger la complexité des fonctions à l&#39;aide de la <strong>complexité cyclomatique</strong> (Cyclomatic Complexity) ou du <strong>Ratio d&#39;endettement</strong> qui donne un poids à chaque instruction et qui vous aide à grouper celle-ci en sous fonctions.</p>
</blockquote>
<h3 id="inputs-par-passage-d-objet">Inputs par passage d&#39;objet</h3>
<p>Vous aurez remarqué que pour la fonction <samp>resizeWithSameRatio</samp> il y a un nombre conséquent de paramètre à passer. Là première question à se poser est : « Est-il possible de diminuer ce nombre de paramètre ? » Ici on pourrait estimer que si la <samp>maxWidth</samp> et la <samp>maxHeight</samp> sont <samp>undefined</samp> alors on pourrait assigner des valeurs par défaut comme ceci :</p>
<pre class="prettyprint linenums"><code class="lang-js">/* ... */
function resizeWithSameRatio(width, height, maxWidth, maxHeight, callback) {
    var maxWidth = options.maxWidth || 800,
        maxHeight = options.maxHeight || 600/* ... */

    /* ... */
}
/* ... */
</code></pre>
<p>ce qui ne nous oblige plus à préciser réellement les valeurs en utilisant notre fonction comme ceci :</p>
<pre class="prettyprint linenums"><code class="lang-js">resizeWithSameRatio(1024, 768, null, null, function (width, height) {
    /* ... */
});
</code></pre>
<p>Cependant vous noterez deux problèmes :</p>
<ul>
<li>Bien qu&#39;il ne soit plus nécessaire d&#39;indiquer les tailles maximales choisis pour la miniature, il est nécessaire de placer des valeurs à vide pour pouvoir appeler en dernier lieu, à la bonne position, la <strong>fonction de retour</strong>.</li>
<li>Il est impossible à la relecture de la partie « Exécution » de comprendre à quoi servent chaque paramètres passés. Il faut alors se référer à la partie « Logique ».</li>
</ul>
<p>La manière la plus simple de rendre lisible les paramètres d&#39;entrés, et de les rendre optionnels à l&#39;appel est de n&#39;utiliser pour unique entrée qu&#39;un objet de la manière suivante :</p>
<pre class="prettyprint linenums"><code class="lang-js">/* ... */

/**
 * Reduce size of 2D item and kept the ratio based on max width and height.
 * @param  {Object}                       options             - All input values.
 * @param  {number}                       [options.width]     - Original with of item.
 * @param  {number}                       [options.height]    - Original height of item.
 * @param  {number}                       [options.maxWidth]  - Maximal width of the output item.
 * @param  {number}                       [options.maxHeight] - Maximal height of the output item.
 * @param  {resizeWithSameRatio~callback} callback            - Allow you to set what do after resizing.
 */
function resizeWithSameRatio(options, callback) {
    var width = options.width || 0,
        height = options.height || 0,
        maxWidth = options.maxWidth || 800,
        maxHeight = options.maxHeight || 600

    if (width &gt; height) {
        if (width &gt; maxWidth) {
            height *= maxWidth / width;
            width = maxWidth;
        }
    } else {
        if (height &gt; maxHeight) {
            width *= maxHeight / height;
            height = maxHeight;
        }
    }

    /**
     * What do after find the reduced value.
     * @callback resizeWithSameRatio~callback
     * @param {number} width  - New with of item.
     * @param {number} height - New height of item.
     */
    callback(width, height);
}

/* ... */

/**
 * Create a reduced image from a more large image.
 * @param  {Object}                       options               - All input values.
 * @param  {HTMLImageElement}             [options.imageSource] - Element used as original image.
 * @param  {number}                       [options.width]       - New image width.
 * @param  {number}                       [options.height]      - New image height.
 * @param  {thumbnailWithCanvas~callback} callback              - Allow you to set what do after generating new image.
 */
function thumbnailWithCanvas(options, callback) {
    var imageSource = options.imageSource || document.createElement(&quot;img&quot;),
        width = options.width || 0,
        height = options.height || 0,
        canvas = document.createElement(&quot;canvas&quot;),
        imageResult = document.createElement(&quot;img&quot;),
        context;

    canvas.width = width;
    canvas.height = height;

    context = canvas.getContext(&quot;2d&quot;);
    context.drawImage(imageSource, 0, 0, width, height);

    imageResult.addEventListener(&quot;load&quot;, function () {

        /**
         * What do after render the reduced image.
         * @callback resizeWithSameRatio~callback
         * @param {HTMLImageElement}  image  - The `HTMLImageElement` that content the correct Data Url Base64 source.
         * @param {HTMLCanvasElement} canvas - The `HTMLCanvasElement` used to reduce the image.
         */
        callback(imageResult, canvas);
    });

    imageResult.src = canvas.toDataURL(&quot;image/jpg&quot;, 0.8);
}

/* ... */

/**
 * Reduce size of image, keept the ratio and return a miniature of original image.
 * @param  {HTMLImageElement}     imageSource - Element used as original image.
 * @param  {reduceImage~callback} callback    - Allow you to set what do after resizing.
 */
function reduceImage(imageSource, callback) {
    resizeWithSameRatio({
        height: imageSource.height,
        width: imageSource.width
    }, function (height, width) {
        thumbnailWithCanvas({
            imageSource: imageSource,
            width: width,
            height: height
        }, function (canvas, imageResult) {

            /**
             * What do after resizing image.
             * @callback reduceImage~callback
             * @param {HTMLImageElement}  image  - The `HTMLImageElement` that content the correct Data Url Base64 source.
             * @param {HTMLCanvasElement} canvas - The `HTMLCanvasElement` used to reduce the image.
             */
            callback(imageResult, canvas);
        })
    });
}

/* ... */
</code></pre>
<p>Vous remarquerez ainsi que lors de l&#39;appel des fonctions <samp>resizeWithSameRatio</samp> ligne 85 et <samp>thumbnailWithCanvas</samp> ligne 89 nous ne passons que les paramètres nécessaires dans l&#39;ordre voulu et que nous savons à présent côté « Exécution » à quoi correspond chaque paramètre d&#39;entrée puisqu&#39;ils sont nommés.</p>
<blockquote>
<p><strong>Passage d&#39;inputs par décomposition avec ES6</strong></p>
<p>Vous constaterez dans l&#39;exemple précédent qu&#39;il est nécessaire de consacrer plusieurs lignes afin de constituer des <strong>fallback</strong> au cas où la propriété n&#39;ai pas été passée dans l&#39;objet des inputs (ligne 13 à 16 pour <samp>resizeWithSameRatio</samp>). Les fallbacks sont assignés comme raccourci grâce à <samp>||</samp> : si la partie de gauche une fois convertie en Boolean renvoi <samp>true</samp>, alors on assigne cette valeur dans sa forme originale, si elle renvoi <samp>false</samp> alors on passe à l&#39;élément de droite et on l&#39;assigne.</p>
<p>Il existe un meilleurs raccourci en ES6 qui consiste à directement créer les éléments vides lors de la définition de la fonction par <strong>décomposition</strong> :</p>
<pre class="prettyprint linenums"><code class="lang-js">/* ... */
function resizeWithSameRatio({
    width = 0,
    height = 0,
    maxWidth = 800,
    maxHeight = 600
} = {}, callback) {
    if (width &gt; height) {
        if (width &gt; maxWidth) {
            height *= maxWidth / width;
            width = maxWidth;
        }
    } else {
        if (height &gt; maxHeight) {
            width *= maxHeight / height;
            height = maxHeight;
        }
    }
    /* ... */
}
/* ... */
</code></pre>
<p>afin de l&#39;appeler comme ceci :</p>
<pre class="prettyprint linenums"><code class="lang-js">resizeWithSameRatio({
    height: imageSource.height,
    width: imageSource.width
}, function (width, height) {
    /* ... */
});
</code></pre>
</blockquote>
<h3 id="outputs-avec-r-f-rence-par-nom-au-lieu-de-r-f-rence-par-position">Outputs avec référence par nom au lieu de référence par position</h3>
<p>De la même manière que l&#39;on souhaite uniquement passer les inputs dont nous avons besoin pour utiliser une fonction, on souhaiterait pouvoir utiliser uniquement les outputs dont nous avons besoin sans avoir à invoquer des variables que nous n&#39;utiliserons pas dans la <strong>fonction de retour</strong>. Cela est possible en utilisant des <strong>références par nom</strong> <a href="https://blog.lesieur.name/javascript-et-callback-par-nom-de-parametre-comme-dans-angularjs/">comme dans AngularJS</a> au lieu de références par position.</p>
<p>Notre code précédent devient alors celui-ci :</p>
<pre class="prettyprint linenums"><code class="lang-js">/* ... */

/**
 * Reduce size of 2D item and kept the ratio based on max width and height.
 * @param  {Object}                       options             - All input values.
 * @param  {number}                       [options.width]     - Original with of item.
 * @param  {number}                       [options.height]    - Original height of item.
 * @param  {number}                       [options.maxWidth]  - Maximal width of the output item.
 * @param  {number}                       [options.maxHeight] - Maximal height of the output item.
 * @param  {resizeWithSameRatio~callback} callback            - Allow you to set what do after resizing.
 */
function resizeWithSameRatio(options, callback) {
    var width = options.width || 0,
        height = options.height || 0,
        maxWidth = options.maxWidth || 800,
        maxHeight = options.maxHeight || 600

    if (width &gt; height) {
        if (width &gt; maxWidth) {
            height *= maxWidth / width;
            width = maxWidth;
        }
    } else {
        if (height &gt; maxHeight) {
            width *= maxHeight / height;
            height = maxHeight;
        }
    }

    /**
     * What do after find the reduced value.
     * @callback resizeWithSameRatio~callback
     * @param {number} [width]  - New with of item.
     * @param {number} [height] - New height of item.
     */
    Function.namedParameters(callback, {
        width: width,
        height: height
    });
}

/* ... */

/**
 * Create a reduced image from a more large image.
 * @param  {Object}                       options               - All input values.
 * @param  {HTMLImageElement}             [options.imageSource] - Element used as original image.
 * @param  {number}                       [options.width]       - New image width.
 * @param  {number}                       [options.height]      - New image height.
 * @param  {thumbnailWithCanvas~callback} callback              - Allow you to set what do after generating new image.
 */
function thumbnailWithCanvas(options, callback) {
    var imageSource = options.imageSource || document.createElement(&quot;img&quot;),
        width = options.width || 0,
        height = options.height || 0,
        canvas = document.createElement(&quot;canvas&quot;),
        imageResult = document.createElement(&quot;img&quot;),
        context;

    canvas.width = width;
    canvas.height = height;

    context = canvas.getContext(&quot;2d&quot;);
    context.drawImage(imageSource, 0, 0, width, height);

    imageResult.addEventListener(&quot;load&quot;, function () {

        /**
         * What do after render the reduced image.
         * @callback resizeWithSameRatio~callback
         * @param {HTMLImageElement}  [image]  - The `HTMLImageElement` that content the correct Data Url Base64 source.
         * @param {HTMLCanvasElement} [canvas] - The `HTMLCanvasElement` used to reduce the image.
         */
        Function.namedParameters(callback, {
            imageResult: imageResult,
            canvas: canvas
        });
    });

    imageResult.src = canvas.toDataURL(&quot;image/jpg&quot;, 0.8);
}

/* ... */

/**
 * Reduce size of image, keept the ratio and return a miniature of original image.
 * @param  {HTMLImageElement}     imageSource - Element used as original image.
 * @param  {reduceImage~callback} callback    - Allow you to set what do after resizing.
 */
function reduceImage(imageSource, callback) {
    resizeWithSameRatio({
        height: imageSource.height,
        width: imageSource.width
    }, function (height, width) {
        thumbnailWithCanvas({
            imageSource: imageSource,
            width: width,
            height: height
        }, function (canvas, imageResult) {

            /**
             * What do after resizing image.
             * @callback reduceImage~callback
             * @param {HTMLImageElement}  image  - The `HTMLImageElement` that content the correct Data Url Base64 source.
             * @param {HTMLCanvasElement} canvas - The `HTMLCanvasElement` used to reduce the image.
             */
            callback(imageResult, canvas);
        })
    });
}

/* ... */
</code></pre>
<p>Vous constaterez que nous faisons alors appel à <samp>Function.namedParameters</samp> qui nous permet de créer des <samp>callback</samp> qui nous renvoi les paramètres dans l&#39;ordre que nous le souhaitons et cela en s&#39;appuyant sur le <strong>nom du paramètre</strong>. Ainsi nous pouvons comme c&#39;est le cas ligne 94 et ligne 99 intervertir les paramètres ou seulement appeler le second en premier sans que cela ne brise notre code.</p>
<blockquote>
<p><strong>Comment simuler un retour de fonction par nom de paramètre</strong></p>
<p>Basiquement le code utiliser par <samp>Function.namedParameters</samp> pourrait être le suivant.</p>
<pre class="prettyprint linenums"><code class="lang-js">Function.prototype.namedParameters = function (type, list, error) {
    var params,
        callback = type,
        regex = /^(?:function *[a-zA-Z0-9_$]*)? *\(? *([a-zA-Z0-9_$, ]*) *\)?/g,
        functions = list || {};
    if (type instanceof Array) {
        callback = type.pop();
        params = type;
    } else {
        params = ((regex.exec(callback.toString()) || [1]).slice(1)[0] || &quot;&quot;).split(&#39;,&#39;)
    }
    params = params.map(function (item) {
        var key = item.trim();
        if (functions.hasOwnProperty(key)) {
            return functions[key];
        } else {
            return (error &amp;&amp; error(key)) || new Error(&#39;Named parameter `&#39; + key + &quot;` doesn&#39;t exist.&quot;);
        }
    });
    callback.apply(this, params);
};
</code></pre>
<p>Vous trouverez tout ce qu&#39;il vous faut dans <a href="https://blog.lesieur.name/javascript-et-callback-par-nom-de-parametre-comme-dans-angularjs/">cet article</a> pour manipuler <samp>Function.prototype.namedParameters</samp> et comprendre comment il fonctionne.</p>
</blockquote>
<h2 id="uploader-l-image">Uploader l&#39;image</h2>
<p>La dernière étape va être d&#39;uploader l&#39;image pour permettre à un code héberger sur le serveur de la récupérer et de l&#39;enregistrer. Dans notre exemple, nous allons supposer que nous avons un code côté serveur qui attend une requête XMLHttpRequest (Ajax) en POST et qui s&#39;attend à recevoir dans la variable « image » le contenu de l&#39;image en base64. Si tout ce passe bien, le contenu « Done » est renvoyé. (Pour les besoins de l&#39;article nous avons simulé cela avec l&#39;adresse <samp>http://www.mocky.io/v2/5773cc3c0f0000950c597af9</samp>).</p>
<h3 id="upload-gestion-d-erreur-et-de-succ-s">Upload, gestion d&#39;erreur et de succès</h3>
<p>Nous allons de nouveau créer une fonction pour gérer l&#39;upload comme ceci :</p>
<p><strong>Logique</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">/* ... */

/**
 * Upload an image with an XHR POST request via the `image` variable.
 * @param  {Object}               options       - All input values.
 * @param  {string}               options.url   - Url of service that handle the image POST request.
 * @param  {HTMLImageElement}     options.image - The `HTMLImageElement` that contain the image.
 * @param  {uploadImage~callback} callback      - Allow you to set what do after upload of image.
 */
function uploadImage(options, callback) {
    var xhttp = new XMLHttpRequest(),
        formData = new FormData();

    url = options.url || new Error(&quot;`options.url` parameter invalid for `uploadImage` function.&quot;);
    image = options.image || new Error(&quot;`options.image` parameter invalid for `uploadImage` function.&quot;);

    if (url instanceof Error) {
      throw url;
    }
    if (image instanceof Error) {
      throw image;
    }

    formData.append(&quot;image&quot;, image.src);
    xhttp.open(&quot;POST&quot;, url, true);

    xhttp.addEventListener(&quot;load&quot;, function () {
        if (xhttp.status &lt; 200 &amp;&amp; xhttp.status &gt;= 400) {
            return Function.namedParameters(callback, {
                error: new Error(&quot;XHR connection error for `uploadImage` function.&quot;),
                response: null
            });
        }

        /**
         * What do after upload the image.
         * @callback uploadImage~callback
         * @param {Error}  [error]    - Return `null` if no error occur else return an `Error` object.
         * @param {string} [response] - Return the content of XHR response if no error occur, else return `null`.
         */
        Function.namedParameters(callback, {
            error: null,
            response: xhttp.responseText
        });
    });

    xhttp.addEventListener(&quot;error&quot;, function (test) {
        Function.namedParameters(callback, {
            error: new Error(&quot;XHR connection error for `uploadImage` function.&quot;),
            response: null
        });
    });

    xhttp.send(formData);
}

/* ... */
</code></pre>
<p>Nous créons donc :</p>
<ul>
<li>une instance <samp>xhttp</samp> de <samp>XMLHttpRequest</samp> ligne 11 que</li>
<li>nous paramétrons en POST à la ligne 25 laquelle nous ajoutons</li>
<li>une écoute en cas de réussite (ligne 27)</li>
<li>et une écoute en cas d&#39;échec (ligne 47)</li>
<li>avant d&#39;envoyer les données ligne 54 à l&#39;aide d&#39;un container <samp>FormData</samp>.</li>
</ul>
<p>La nouveauté ici c&#39;est la gestion des erreurs, nous pouvons constater que cette fois, les paramètres <samp>options.url</samp> et <samp>options.image</samp> sont obligatoire ce qui signifie qu&#39;il n&#39;ai pas possible de décider d&#39;une valeur par défaut ligne 14 et 15. C&#39;est pour cela que nous créons des <samp>Error</samp> afin de les lancer et ainsi créer des exceptions aux lignes 18 et 21. Le mot clé throw arrête toute suite au script et renvoi des exceptions qui sont ainsi récupérable via un mécanisme de <samp>try</samp> / <samp>catch</samp>, mais plus intéressant, qui permette au développeur utilisant la fonction de voir ce qui ne va pas.</p>
<p><strong>Exécution</strong></p>
<p><em>Et voici le code final à relire pour comprendre rapidement ce qui ce passe ici. Il ne sera pas nécessaire d&#39;entrer dans le détail à moins d&#39;améliorer des fonctionnalités.</em></p>
<pre class="prettyprint linenums"><code class="lang-js">var body = document.getElementsByTagName(&quot;body&quot;)[0];
body.appendChild(
    selectImage(function (inputFile) {
        readImage(inputFile, function (image) {
            reduceImage(image, function (imageResult) {
                uploadImage({
                    url: &quot;http://www.mocky.io/v2/5773cc3c0f0000950c597af9&quot;,
                    image: imageResult
                }, function (error, response) {
                    var data = document.createElement(&quot;div&quot;);
                    data.textContent = (error) ? error : response;

                    body.appendChild(data);
                    body.appendChild(imageResult);
                });
            });
        });
    })
);
</code></pre>
<p>Nous utilisons donc notre nouvelle fonction à la ligne 6 avec nos deux paramètres obligatoire. Dans notre exemple nous utilisons l&#39;<samp>error</samp> pour définir quel message nous allons renvoyer dans le DOM (ligne 11).</p>
<blockquote>
<p><strong>Erreur ou Exception ?</strong></p>
<p>En JavaScript les Erreurs sont un type d&#39;objet à elles seules et se créent en utilisant la syntaxe suivante <samp>new Error()</samp>. Elles se manipulent comme un objet et peuvent être return ou mises dans des variables.</p>
<p>Les Exceptions quant à elles sont des Erreurs qui sont lancées ou jetées avec le mot clé <samp>throw</samp> soit <samp>throw new Error()</samp> et ne peuvent plus être manipulées. Elles mettent ainsi fin aux contextes d&#39;exécution les un après les autres en remontant jusqu&#39;à afficher une erreur dans la console. Elles peuvent être interceptées avec <samp>try</samp> et l&#39;erreur qu&#39;elles remontent peut être manipulée via <samp>catch (exception)</samp>.</p>
<p>Vous trouverez tout ce qu&#39;il vous faut dans <a href="https://blog.lesieur.name/gerer-les-erreurs-et-les-exceptions-en-javascript/">cet article</a> à propos des erreurs.</p>
</blockquote>
<h2 id="isoler-son-code">Isoler son code</h2>
<p>Depuis le début, nous créons tout dans le <strong>champ lexical global</strong> ce qui a pour conséquence d&#39;écraser d&#39;éventuelles variables déjà existantes à travers tous les scripts. Il convient donc d&#39;isoler chaque code dans un <strong>contexte d&#39;exécution</strong> dédié. Cela est possible en utilisant une fonction que nous exécutons immédiatement, ou en créant une <strong>classe</strong> (instantiate object) spécifique pour ranger toutes les fonctions, ou encore en rangeant notre fonction dans un <strong>espace de nom</strong> (namespace) dédié.</p>
<h3 id="fonction-anonyme-auto-ex-cut-e">Fonction anonyme auto-exécutée</h3>
<p>Nous allons nous contenter du premier point ici en créant une simple fonction anonyme (sans nom) et en l&#39;exécutant immédiatement :</p>
<pre class="prettyprint linenums"><code class="lang-js">;(function () {

    /* Intégralité du code déjà existant ici. */

}());
</code></pre>
<p>ainsi, aucune fonction et variable créer dans ce <strong>contexte d&#39;exécution</strong> ne sera accessible ailleurs et n&#39;ira écraser des variables déjà existante.</p>
<p><em>Note : Le bout de code que nous avons attaché au prototype de <samp>Function</samp> sera quand à lui accessible partout car <samp>Function</samp> fait déjà partie du <strong>contexte d&#39;exécution global</strong> (champ lexical global).</em></p>
<h3 id="classe-sp-cifique">Classe spécifique</h3>
<p>Il est également possible d&#39;accrocher le code utile dans une classe JavaScript que nous instancierons afin d&#39;exécuter le code. Nous pourrions créer alors deux types de fonctions :</p>
<ul>
<li>Les fonctions privées qui ne seront accessibles que dans le <strong>champ lexical</strong> de la classe.</li>
<li>Les fonctions publiques qui seront attachées à <samp>this</samp> et qui seront donc accessibles depuis l&#39;objet instancié.</li>
</ul>
<p>Cela pourrait ressemblé à ceci :</p>
<pre class="prettyprint linenums"><code class="lang-js">var UploadImage = function () {
    var privates =  {},
        publics = this;

    privates.selectImage = function (afterSelectCallback) { /* ... */ };
    privates.readImage = function (inputFile, callback) { /* ... */ };
    privates.resizeWithSameRatio = function (options, callback) { /* ... */ };
    privates.thumbnailWithCanvas = function (options, callback) { /* ... */ };
    privates.reduceImage = function (imageSource, callback) { /* ... */ };
    privates.uploadImage = function (options, callback) { /* ... */ };

    publics.init = function () {
        var body = document.getElementsByTagName(&quot;body&quot;)[0];
        body.appendChild(
            privates.selectImage(function(inputFile) {
                privates.readImage(inputFile, function(image) {
                    privates.reduceImage(image, function(imageResult) {
                        privates.uploadImage({
                            url: &quot;http://www.mocky.io/v2/5773cc3c0f0000950c597af9&quot;,
                            image: imageResult
                        }, function(error, response) {
                            var data = document.createElement(&quot;div&quot;);
                            data.textContent = (error) ? error : response;

                            body.appendChild(data);
                            body.appendChild(imageResult);
                        });
                    });
                });
            })
        );
    };
 };
</code></pre>
<p>Avec la ligne d&#39;instanciation :</p>
<pre class="prettyprint linenums"><code class="lang-js">new UploadImage().init();
</code></pre>
<h2 id="exemple-complet-sur-codepen">Exemple complet sur Codepen</h2>
<p>Je finirais par vous fournir un exemple fonctionnel de ce que nous venons de voir (avec une fonction anonyme comme <strong>champ lexical</strong>). C&#39;est à vous de jouer maintenant !</p>
<p><a href="http://codepen.io/Haeresis/pen/aZvQVQ">Vous pouvez lire et tester le résultat final sur ce Codepen</a></p>
<h2 id="et-vous-">Et vous ?</h2>
<p>Je vous laisse décider lesquels de ces conseils peuvent vous apporter de l&#39;aide et lesquels ne le feront pas et vous donne rendez-vous dans les commentaires pour partager votre expérience sur la question ou éclaircir des zones d&#39;ombre dans cet article.</p>
]]></description>
            <link>http://localhost:7776coder-proprement-en-javascript-par-l-exemple-upload-d-image/</link>
            <guid isPermaLink="false">575a62fbd1b7fe136fc2005e</guid>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <category><![CDATA[Développement Web]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Mon, 27 Jun 2016 10:49:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Des Easter Eggs sur vos sites avec le Konami Code JavaScript]]></title>
            <description><![CDATA[<p>Connaissez-vous ce petit code de triche qu&#39;est le Konami Code ? Ce code à entrer dans les jeux vidéos permet de débloquer des options secrètes. Je vous propose de l&#39;implémenter sur vos sites web en JavaScript avec une petite API maison gérant le clavier et le tactile. Suivez le guide !</p>
<p><img style="display: block; margin: 0 auto; max-width: 100%" src="media/images/upload/76d6ddd2a0293213d04e0847645bddbc.jpg" alt="Konami Code"></p>

<p>L&#39;API présenté dans cet article lève un événement JavaScript quand vous entrez la célèbre séquence du Konami Code « Haut Haut Bas Bas Gauche Droite Gauche Droite B A » avec votre clavier. Cela marche également avec votre doigt en glissant « Haut Haut Bas Bas Gauche Droite Gauche Droite » puis en faisant « Tap Tap ».</p>
<div style="text-align: center;">
    <p><a href="https://github.com/Haeresis/konami-code-js">Source sur GitHub</a> / <a href="https://www.npmjs.com/package/konami-code-js">Npm Package</a></p>
</div>





<h2 id="utilisation-basique">Utilisation Basique</h2>
<pre class="prettyprint linenums"><code class="lang-js">new KonamiCode(function () {
    // Faites quelque chose ici.
    // Cette partie est exécutée si « Haut Haut Bas Bas Gauche Droite Gauche Droite B A »
    // est reconnue depuis votre clavier ou votre mouvement de doigt sur l&#39;écran.
});
</code></pre>
<h2 id="exemple-plus-complet">Exemple plus complet</h2>
<p>Dans cet exemple, nous allons autoriser la reconnaissance du Konami Code uniquement si la souris ou le doigt est sur l&#39;élément <samp>&lt;article&gt;</samp>. Une fois que la séquence aura été reconnue, on désactivera la reconnaissance du Konami Code.</p>
<pre class="prettyprint linenums"><code class="lang-js">var kc = new KonamiCode({
    listener: document.getElementsByTagName(&quot;article&quot;)[0]
});

kc.setCallback(function () {
    kc.disable();

    // Faites quelque chose ici.
    // Cette partie est exécutée si « Haut Haut Bas Bas Gauche Droite Gauche Droite B A »
    // est reconnue depuis votre clavier ou votre mouvement de doigt sur l&#39;écran.
});
</code></pre>
<h2 id="documentation-de-l-api">Documentation de l&#39;API</h2>
<p><strong>Pour obtenir la dernière version de l&#39;API documentée, référez-vous à <a href="https://github.com/Haeresis/konami-code-js">la documentation sur Github</a></strong></p>
<p><a name="KonamiCode"></a></p>
<p><strong>Version</strong>: 0.8.0</p>
<p><strong>Auteur:</strong> <a href="https://www.lesieur.name/">Bruno Lesieur</a></p>
<ul>
<li><p><a href="#KonamiCode">KonamiCode</a></p>
<ul>
<li><a href="#new_KonamiCode_new">new KonamiCode([options])</a></li>
<li><p><em>instance</em></p>
<ul>
<li><a href="#KonamiCode+enable">.enable()</a> ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></li>
<li><a href="#KonamiCode+enableKeyboardKeys">.enableKeyboardKeys()</a> ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></li>
<li><a href="#KonamiCode+enableTouchGesture">.enableTouchGesture()</a> ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></li>
<li><a href="#KonamiCode+disable">.disable()</a> ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></li>
<li><a href="#KonamiCode+disabledKeyboardKeys">.disabledKeyboardKeys()</a> ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></li>
<li><a href="#KonamiCode+disabledTouchGesture">.disabledTouchGesture()</a> ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></li>
<li><a href="#KonamiCode+setListener">.setListener(listener)</a> ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></li>
<li><a href="#KonamiCode+setCallback">.setCallback(callback)</a> ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></li>
<li><a href="#KonamiCode+setOptions">.setOptions([options])</a> ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></li>
</ul>
</li>
<li><p><em>static</em></p>
<ul>
<li><a href="#KonamiCode.noConflict">.noConflict()</a></li>
<li><a href="#KonamiCode.getNumberOfInstance">.getNumberOfInstance()</a> ⇒ <code>number</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><a name="new_KonamiCode_new"></a></p>
<h3 id="new-konamicode-options-">new KonamiCode([options])</h3>
<p>Créer une reconnaissance de la séquence du Konami Code « Haut Haut Bas Bas Gauche Droite Gauche Droite B A » sur un HTMLElement précis ou sur le HTMLDocument global.</p>
<table>
<thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>[options]</td>
<td><code>Object</code> &#124; <code>function</code></td>
<td>Contient toutes les options. Si le type de <samp>options</samp> est Function, il est exécuté après que la séquence du Konami Code est été reconnue.</td>
</tr>
<tr>
<td>[options.callback]</td>
<td><code>function</code></td>
<td>Si <samp>options</samp> n&#39;est pas une Function, <samp>options.callback</samp> est exécuté après que la séquence du Konami Code ai été reconnue. Le premier argument fourni par la callback est l&#39;instance courante de <samp>KonamiCode</samp>.</td>
</tr>
<tr>
<td>[options.listener]</td>
<td><code>Node</code></td>
<td>Par défaut c&#39;est le HTMLDocument <samp>window.document</samp>. Vous pouvez passer un HTMLElement comme <samp>&lt;input&gt;</samp> (HTMLInputElement) pour seulement reconnaître la séquence du Konami Code quand la souris ou le doigt est sur cet élément.</td>
</tr>
<tr>
<td>[options.debug]</td>
<td><code>boolean</code></td>
<td>Par défaut sa valeur est à <samp>false</samp>. Quand vous changez cette valeur à <samp>true</samp>, cela vous permet de voir tous les messages de débogue dans la console.</td>
</tr>
</tbody>
</table>
<p><a name="KonamiCode+enable"></a></p>
<h3 id="konamicode-enable-code-konamicode-konamicode-code-">konamiCode.enable() ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></h3>
<p>Active l&#39;écoute de la séquence du Konami Code.</p>
<p><strong>Type</strong>: instance de méthode du <code><a href="#KonamiCode">KonamiCode</a></code></p>
<p><strong>Return</strong>: <code><a href="#KonamiCode">KonamiCode</a></code> - Instance courante <samp>KonamiCode</samp>
<a name="KonamiCode+enableKeyboardKeys"></a></p>
<h3 id="konamicode-enablekeyboardkeys-code-konamicode-konamicode-code-">konamiCode.enableKeyboardKeys() ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></h3>
<p>Active l&#39;écoute de la séquence du Konami Code pour les touches du clavier.</p>
<p><strong>Kind</strong>: instance method of <code><a href="#KonamiCode">KonamiCode</a></code></p>
<p><strong>Returns</strong>: <code><a href="#KonamiCode">KonamiCode</a></code> - Current instance of KonamiCode
<a name="KonamiCode+enableTouchGesture"></a></p>
<h3 id="konamicode-enabletouchgesture-code-konamicode-konamicode-code-">konamiCode.enableTouchGesture() ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></h3>
<p>Active l&#39;écoute de la séquence du Konami Code pour les gestes tactiles.</p>
<p><strong>Kind</strong>: instance method of <code><a href="#KonamiCode">KonamiCode</a></code></p>
<p><strong>Returns</strong>: <code><a href="#KonamiCode">KonamiCode</a></code> - Current instance of KonamiCode
<a name="KonamiCode+disable"></a></p>
<h3 id="konamicode-disable-code-konamicode-konamicode-code-">konamiCode.disable() ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></h3>
<p>Désactive l&#39;écoute de la séquence du Konami Code.</p>
<p><strong>Type</strong>: instance de méthode du <code><a href="#KonamiCode">KonamiCode</a></code></p>
<p><strong>Return</strong>: <code><a href="#KonamiCode">KonamiCode</a></code> - Instance courante <samp>KonamiCode</samp>
<a name="KonamiCode+disabledKeyboardKeys"></a></p>
<h3 id="konamicode-disabledkeyboardkeys-code-konamicode-konamicode-code-">konamiCode.disabledKeyboardKeys() ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></h3>
<p>Désactive l&#39;écoute de la séquence du Konami Code pour les touches du clavier.</p>
<p><strong>Kind</strong>: instance de méthode du <code><a href="#KonamiCode">KonamiCode</a></code></p>
<p><strong>Returns</strong>: <code><a href="#KonamiCode">KonamiCode</a></code> - Instance courante <samp>KonamiCode</samp>
<a name="KonamiCode+disabledTouchGesture"></a></p>
<h3 id="konamicode-disabledtouchgesture-code-konamicode-konamicode-code-">konamiCode.disabledTouchGesture() ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></h3>
<p>Désactive l&#39;écoute de la séquence du Konami Code pour les gestes tactiles.</p>
<p><strong>Kind</strong>: instance de méthode du <code><a href="#KonamiCode">KonamiCode</a></code></p>
<p><strong>Returns</strong>: <code><a href="#KonamiCode">KonamiCode</a></code> - Instance courante <samp>KonamiCode</samp>
<a name="KonamiCode+setListener"></a></p>
<h3 id="konamicode-setlistener-listener-code-konamicode-konamicode-code-">konamiCode.setListener(listener) ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></h3>
<p>Change l&#39;écouteur. L&#39;ancien écouteur ne fonctionnera plus. Note: changer l&#39;écouteur ré-active une instance que aurait été précédemment <samp>disable()</samp>.</p>
<p><strong>Type</strong>: instance de méthode du <code><a href="#KonamiCode">KonamiCode</a></code></p>
<p><strong>Return</strong>: <code><a href="#KonamiCode">KonamiCode</a></code> - Instance courante <samp>KonamiCode</samp></p>
<table>
<thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>listener</td>
<td><code>Node</code></td>
<td>Vous pouvez passer un HTMLElement comme <samp>&lt;input&gt;</samp> (HTMLInputElement) pour seulement reconnaître la séquence du Konami Code quand la souris ou le doigt est sur cet élément.</td>
</tr>
</tbody>
</table>
<p><a name="KonamiCode+setCallback"></a></p>
<h3 id="konamicode-setcallback-callback-code-konamicode-konamicode-code-">konamiCode.setCallback(callback) ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></h3>
<p>Change la Function exécutée après que la séquence du Konami Code ai été reconnue.</p>
<p><strong>Type</strong>: instance de méthode du <code><a href="#KonamiCode">KonamiCode</a></code></p>
<p><strong>Return</strong>: <code><a href="#KonamiCode">KonamiCode</a></code> - Instance courante <samp>KonamiCode</samp></p>
<table>
<thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>callback</td>
<td><code>function</code></td>
<td>Function exécutée après que la séquence du Konami Code ai été reconnue. Le premier argument fourni par la callback est l&#39;instance courante du KonamiCode.</td>
</tr>
</tbody>
</table>
<p><strong>Example</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">new KonamiCode().setCallback(function (konamiCode) {
    konamiCode.disable();
    // Faites quelque chose ici.
});
</code></pre>
<p><a name="KonamiCode+setOptions"></a></p>
<h3 id="konamicode-setoptions-options-code-konamicode-konamicode-code-">konamiCode.setOptions([options]) ⇒ <code><a href="#KonamiCode">KonamiCode</a></code></h3>
<p>Changer les options pour l&#39;instance courante.</p>
<p><strong>Kind</strong>: instance de méthode du <code><a href="#KonamiCode">KonamiCode</a></code></p>
<p><strong>Returns</strong>: <code><a href="#KonamiCode">KonamiCode</a></code> - Instance courante <samp>KonamiCode</samp></p>
<table>
<thead>
<tr>
<th>Param</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>[options]</td>
<td><code>Object</code></td>
<td>Contient toutes les options.</td>
</tr>
<tr>
<td>[options.callback]</td>
<td><code>function</code></td>
<td>Function exécutée après que la séquence du Konami Code ai été reconnue. Le premier argument fourni par la callback est l&#39;instance courante du KonamiCode.</td>
</tr>
<tr>
<td>[options.listener]</td>
<td><code>Node</code></td>
<td>Par défaut c&#39;est le HTMLDocument <samp>window.document</samp>. Vous pouvez passer un HTMLElement comme <samp>&lt;input&gt;</samp> (HTMLInputElement) pour seulement reconnaître la séquence du Konami Code quand la souris ou le doigt est sur cet élément.</td>
</tr>
<tr>
<td>[options.debug]</td>
<td><code>boolean</code></td>
<td>Par défaut sa valeur est à <samp>false</samp>. Quand vous changez cette valeur à <samp>true</samp>, cela vous permet de voir tous les messages de débogue dans la console.</td>
</tr>
</tbody>
</table>
<p><a name="KonamiCode.noConflict"></a></p>
<h3 id="konamicode-noconflict-">KonamiCode.noConflict()</h3>
<p>Si une variable <samp>KonamiCode</samp> existe déjà dans l&#39;environnement global, vous pouvez la conserver en changeant le nom du <samp>KonamiCode</samp>.
Vous pouvez aussi simplement utiliser cette fonction pour changer le nom de la variable global « KonamiCode ».</p>
<p><strong>Type</strong>: methode statique du <code><a href="#KonamiCode">KonamiCode</a></code></p>
<p><strong>Example</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">&lt;script src=&quot;other/konami-code.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;last/konami-code.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    var MyKC = KonamiCode.noConflict();
    console.log(KonamiCode); // Return the other KonamiCode
    console.log(MyKC); // Return your KonamiCode
&lt;/script&gt;
</code></pre>
<p><a name="KonamiCode.getNumberOfInstance"></a></p>
<h3 id="konamicode-getnumberofinstance-code-number-code-">KonamiCode.getNumberOfInstance() ⇒ <code>number</code></h3>
<p>Retourne le nombre de fois que <samp>KonamiCode</samp> a été instancié.</p>
<p><strong>Type</strong>: méthode statique du <code><a href="#KonamiCode">KonamiCode</a></code></p>
<p><strong>Return</strong>: <code>number</code> - Nombre d&#39;instance de <samp>KonamiCode</samp> créer depuis le début.</p>
<h2 id="cha-nage">Chaînage</h2>
<p>Toutes les méthodes instanciées de l&#39;API  retourne l&#39;instance courante de l&#39;objet <samp>KonamiCode</samp>. Cela vous permet d&#39;instancier un objet comme ceci :</p>
<pre class="prettyprint linenums"><code class="lang-js">new KonamiCode()
    .disable()
    .enable()
    .setListener(document.getElementsByTagName(&quot;body&quot;)[0])
    .setCallback(function (konamiCode) {
        konamiCode.disable();
        // Faites quelque chose ici.
        // Cette partie est exécutée si « Haut Haut Bas Bas Gauche Droite Gauche Droite B A »
        // est reconnue depuis votre clavier ou votre mouvement de doigt sur l&#39;écran.
    });
</code></pre>
<h2 id="mode-d-bogue">Mode Débogue</h2>
<p>Vous pouvez voir chaque étape de la vie de l&#39;instance dans votre débogueur par des messages console si le mode débogue est activé.</p>
<pre class="prettyprint linenums"><code class="lang-js">new KonamiCode({
    debug: true,
    callback: function (konamiCode) {
        konamiCode.disable();
    }
});
</code></pre>
<h2 id="importer-le-fichier-javascript">Importer le Fichier JavaScript</h2>
<h3 id="par-t-l-chargement">Par Téléchargement</h3>
<ul>
<li><a href="https://github.com/Haeresis/konami-code-js">https://github.com/Haeresis/konami-code-js</a></li>
</ul>
<h3 id="via-npm">Via NPM</h3>
<pre class="prettyprint linenums"><code>npm install konami-code-js
</code></pre><h3 id="via-cdn">Via CDN</h3>
<ul>
<li>Pour le développement :</li>
</ul>
<pre class="prettyprint linenums"><code class="lang-html">&lt;script src=&quot;https://rawgit.com/Haeresis/konami-code-js/master/src/konami-code.js&quot;&gt;&lt;/script&gt;
</code></pre>
<ul>
<li>Pour la production :</li>
</ul>
<pre class="prettyprint linenums"><code class="lang-html">&lt;script src=&quot;https://cdn.rawgit.com/Haeresis/konami-code-js/master/src/konami-code.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h3 id="avec-un-injecteur-amd">Avec un injecteur AMD</h3>
<pre class="prettyprint linenums"><code class="lang-html">&lt;script src=&quot;require.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    requirejs([&quot;konami-code&quot;], function (KonamiCode) {
        new KonamiCode(function () {
            // Do something here.
            // This part will be executed if « Up Up Down Down Left Right Left Right B A »
            // is recognised from Keyboard or Touch Gesture.
        });
    });
&lt;/script&gt;
</code></pre>
<h3 id="avec-un-injecteur-commonjs">Avec un injecteur CommonJS</h3>
<pre class="prettyprint linenums"><code class="lang-js">var KonamiCode = require(&quot;konami-code&quot;);

new KonamiCode(function () {
    // Do something here.
    // This part will be executed if « Up Up Down Down Left Right Left Right B A »
    // is recognised from Keyboard or Touch Gesture.
});
</code></pre>
<h2 id="bonus-le-konami-code-de-cette-page">Bonus : le Konami Code de cette page</h2>
<p>Si vous testez le Konami Code depuis cette page voici ce qui sera exécuté :</p>
<pre class="prettyprint linenums"><code class="lang-js">// Création d&#39;un HTMLScriptElement.
var script = document.createElement(&quot;script&quot;),
    // Référence sur le HTMLBodyElement.
    body = document.getElementsByTagName(&quot;body&quot;)[0],
    // Création d&#39;un interrupteur activé/désactivé.
    toggle = false;

// Notre script sera de type JavaScript
script.type = &quot;text/javascript&quot;;

// Ce code s&#39;exécutera quand la `src`
// de notre HTMLScriptElement sera rempli
// et quand le HTMLScriptElement sera injecté dans le DOM.
script.addEventListener(&quot;load&quot;, function () {

    // Création d&#39;un écouteur de Konami Code.
    new KonamiCode(function () {

        // Surprise ou retour à la normal.
        if (toggle)   {
            toggle = false;
            body.style = &quot;overflow-x: hidden;transition: transform 2s ease;transform: rotate(0deg)&quot;;
        } else {
            toggle = true;
            body.style = &quot;overflow-x: hidden;transition: transform 2s ease;transform: rotate(180deg)&quot;;
        }
    });
});

// Attribution d&#39;un fichier et injection de HTMLScriptElement dans le DOM.
script.src = &quot;https://cdn.rawgit.com/Haeresis/konami-code-js/master/src/konami-code.js&quot;;
body.appendChild(script);
</code></pre>
]]></description>
            <link>http://localhost:7776des-easter-eggs-avec-konami-code-js/</link>
            <guid isPermaLink="false">576946cfd1b7fe136fc2005f</guid>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Outils]]></category>
            <category><![CDATA[Spécifications]]></category>
            <category><![CDATA[Ressources]]></category>
            <category><![CDATA[Concept]]></category>
            <category><![CDATA[API]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Tue, 21 Jun 2016 10:53:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[JavaScript et Callback par Nom de paramètre comme dans AngularJS]]></title>
            <description><![CDATA[<p>Ce qui m&#39;a interpellé la première fois que j&#39;ai pu m&#39;essayer à <a href="https://angularjs.org/" target="_blank">AngularJS</a>, c&#39;est la possibilité offerte de sélectionner les Services que l&#39;on souhaite en les récupérant par leur nom de paramètre, et non par leur position de paramètre. Ce concept n&#39;existe pas en JavaScript et pourtant le fait est bien là <samp>function ($scope, $http)</samp> ou <samp>function ($http, $scope)</samp> renvoi les bon contenu de variable en fonction de leur nom et <samp>function (scope, $http)</samp> vous dit que <samp>scope</samp> n&#39;existe pas !</p>
<p>Comment cela est-il possible en JavaScript ? Il est possible de « simuler » un passage par nom de paramètre avec un type <samp>Object</samp>, mais là, il s&#39;agit belle et bien de différents paramètres.</p>
<p>Voici le petit exercice que je vous propose dans cet article, faire du « Reverse Engineering » sur le mécanisme « caché » permettant aux fonctions de rappel (callback) JavaScript de délivrer leurs paramètres par « nom de paramètre » en lieu et place du mécanisme natif qui est par « position de paramètre ».</p>
<h2 id="position-vs-nom-de-param-tre">Position VS Nom de paramètre</h2>
<p>Précisons plus finement de quoi l&#39;on parle dans les deux différents cas : nom ou position.</p>
<h3 id="position-de-param-tre-par-l-exemple">Position de paramètre par l&#39;exemple</h3>
<p>Habituellement (et nativement) en JavaScript, lorsqu&#39;une callback vous fournit des paramètres, chaque position de paramètre vous permet de savoir à quoi celui-ci va vous servir. C&#39;est sur cette position que s&#39;appuie la documentation pour vous expliquer à quoi sert les paramètres. Prenons l&#39;exemple de la fonction <samp>filter</samp> des <samp>Array</samp> en JavaScript :</p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="com">// Nous créons un tableau avec des strings.</span></code></li><li class="L1"><code class="lang-js"><span class="kwd">var</span><span class="pln"> nbrs </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="str">&quot;zero&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;un&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;deux&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;trois&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;quatre&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;cinq&quot;</span><span class="pun">];</span></code></li><li class="L2"><code class="lang-js"></code></li><li class="L3"><code class="lang-js"><span class="com">// Nous utilisons la fonction <samp>filter</samp> qui demande une</span></code></li><li class="L4"><code class="lang-js"><span class="com">// callback qui va expliquer comment le filtre doit s&#39;appliquer</span></code></li><li class="L5"><code class="lang-js"><span class="com">// sur chaque élément du tableau un par un.</span></code></li><li class="L6"><code class="lang-js"><span class="com">// Cette callback nous fournit nativement les paramètres par</span></code></li><li class="L7"><code class="lang-js"><span class="com">// « Position de paramètre » ce qui signifie que...</span></code></li><li class="L8"><code class="lang-js"><span class="pln">nbrs</span><span class="pun">.</span><span class="pln">filter</span><span class="pun">(</span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">item</span><span class="pun">,</span><span class="pln"> position</span><span class="pun">,</span><span class="pln"> all</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="lang-js"><span class="pln">    </span><span class="com">// Le premier paramètre est la valeur de chaque entrée (&quot;zero&quot;, &quot;un&quot;, etc.).</span></code></li><li class="L0"><code class="lang-js"><span class="pln">    </span><span class="com">// Le deuxième paramètre est l&#39;index de chaque entrée.</span></code></li><li class="L1"><code class="lang-js"><span class="pln">    </span><span class="com">// Le troisième paramètre est le tableau complet.</span></code></li><li class="L2"><code class="lang-js"></code></li><li class="L3"><code class="lang-js"><span class="pln">    </span><span class="com">// Pour le premier tour de <samp>filter</samp> on a donc :</span></code></li><li class="L4"><code class="lang-js"><span class="pln">    </span><span class="com">// <samp>item</samp> qui vaut <samp>&quot;zero&quot;</samp>.</span></code></li><li class="L5"><code class="lang-js"><span class="pln">    </span><span class="com">// <samp>position</samp> qui vaut <samp>0</samp>.</span></code></li><li class="L6"><code class="lang-js"><span class="pln">    </span><span class="com">// <samp>all</samp> qui vaut <samp>[&quot;zero&quot;, &quot;un&quot;, &quot;deux&quot;, &quot;trois&quot;, &quot;quatre&quot;, &quot;cinq&quot;]</samp>.</span></code></li><li class="L7"><code class="lang-js"></code></li><li class="L8"><code class="lang-js"><span class="pln">    </span><span class="com">// Pour le second tour de <samp>filter</samp> on a donc :</span></code></li><li class="L9"><code class="lang-js"><span class="pln">    </span><span class="com">// <samp>item</samp> qui vaut <samp>&quot;un&quot;</samp>.</span></code></li><li class="L0"><code class="lang-js"><span class="pln">    </span><span class="com">// <samp>position</samp> qui vaut <samp>1</samp>.</span></code></li><li class="L1"><code class="lang-js"><span class="pln">    </span><span class="com">// <samp>all</samp> qui vaut <samp>[&quot;zero&quot;, &quot;un&quot;, &quot;deux&quot;, &quot;trois&quot;, &quot;quatre&quot;, &quot;cinq&quot;]</samp>.</span></code></li><li class="L2"><code class="lang-js"></code></li><li class="L3"><code class="lang-js"><span class="pln">    </span><span class="com">// Etc...</span></code></li><li class="L4"><code class="lang-js"></code></li><li class="L5"><code class="lang-js"><span class="pln">    </span><span class="com">// On filtre par indice pair le résultat et on obtient...</span></code></li><li class="L6"><code class="lang-js"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">position </span><span class="pun">%</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="pun">===</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span></code></li><li class="L7"><code class="lang-js"><span class="pun">});</span></code></li><li class="L8"><code class="lang-js"><span class="com">// Résultat : <samp>[&quot;zero&quot;, &quot;deux&quot;, &quot;quatre&quot;]</samp></span></code></li></ol></pre>
<p>Comprenez bien ici que vous choisissez le nom des paramètres vous-même, car seule la position importe, aussi le code suivant fait la même chose :</p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="pun">[</span><span class="str">&quot;zero&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;un&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;deux&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;trois&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;quatre&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;cinq&quot;</span><span class="pun">].</span><span class="pln">filter</span><span class="pun">(</span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">o</span><span class="pun">,</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="lang-js"><span class="pln">    </span><span class="com">// Pour le premier tour de <samp>filter</samp> on a donc :</span></code></li><li class="L2"><code class="lang-js"><span class="pln">    </span><span class="com">// <samp>o</samp> qui vaut <samp>&quot;zero&quot;</samp>.</span></code></li><li class="L3"><code class="lang-js"><span class="pln">    </span><span class="com">// <samp>i</samp> qui vaut <samp>0</samp>.</span></code></li><li class="L4"><code class="lang-js"><span class="pln">    </span><span class="com">// <samp>a</samp> qui vaut <samp>[&quot;zero&quot;, &quot;un&quot;, &quot;deux&quot;, &quot;trois&quot;, &quot;quatre&quot;, &quot;cinq&quot;]</samp>.</span></code></li><li class="L5"><code class="lang-js"></code></li><li class="L6"><code class="lang-js"><span class="pln">    </span><span class="com">// Etc...</span></code></li><li class="L7"><code class="lang-js"></code></li><li class="L8"><code class="lang-js"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">!(</span><span class="pln">i </span><span class="pun">%</span><span class="pln"> </span><span class="lit">2</span><span class="pun">);</span></code></li><li class="L9"><code class="lang-js"><span class="pun">});</span></code></li><li class="L0"><code class="lang-js"><span class="com">// Résultat : <samp>[&quot;zero&quot;, &quot;deux&quot;, &quot;quatre&quot;]</samp></span></code></li></ol></pre>
<p>Mais le code suivant non :</p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="pun">[</span><span class="str">&quot;zero&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;un&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;deux&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;trois&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;quatre&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;cinq&quot;</span><span class="pun">].</span><span class="pln">filter</span><span class="pun">(</span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">position</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="lang-js"><span class="pln">    </span><span class="com">// <samp>position</samp> vaut <samp>&quot;zero&quot;</samp>, puis <samp>&quot;un&quot;</samp>, puis...</span></code></li><li class="L2"><code class="lang-js"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">!(</span><span class="pln">position </span><span class="pun">%</span><span class="pln"> </span><span class="lit">2</span><span class="pun">);</span><span class="pln"> </span><span class="com">// <samp>!NaN</samp> équivaut à <samp>true</samp>, tout passe.</span></code></li><li class="L3"><code class="lang-js"><span class="pun">});</span></code></li><li class="L4"><code class="lang-js"><span class="com">// Résultat : <samp>[&quot;zero&quot;, &quot;un&quot;, &quot;deux&quot;, &quot;trois&quot;, &quot;quatre&quot;, &quot;cinq&quot;]</samp></span></code></li></ol></pre>
<blockquote>
<p><strong>A retenir :</strong> c&#39;est l&#39;ordre dans lequel les paramètres sont fournit par une callback qui détermine ce que le paramètre contient et ceci est vrai pour tout programme JavaScript utilisant le mécanisme natif.</p>
<p><em>Avantage :</em> on peut utiliser n&#39;importe quel nom pour nommer son paramètre et l&#39;utiliser dans la callback.</p>
<p><em>Inconvénient :</em> il faut créer les paramètres 1 et 2 si l&#39;on souhaite utiliser le paramètre 3.</p>
</blockquote>
<h3 id="nom-de-param-tre-par-l-exemple">Nom de paramètre par l&#39;exemple</h3>
<p>Mais le petit tour de magie fait par AngularJS est que l&#39;on ne récupère pas les paramètres par position mais par Nom de paramètre ce qui n&#39;est pas possible en JavaScript. Aussi observons le code suivant.</p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="kwd">var</span><span class="pln"> app </span><span class="pun">=</span><span class="pln"> angular</span><span class="pun">.</span><span class="pln">module</span><span class="pun">(</span><span class="str">&quot;app&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[]);</span></code></li><li class="L1"><code class="lang-js"></code></li><li class="L2"><code class="lang-js"><span class="com">// On demande l&#39;objet $scope en première position,</span></code></li><li class="L3"><code class="lang-js"><span class="com">// puis la fonction $http en seconde position...</span></code></li><li class="L4"><code class="lang-js"><span class="pln">app</span><span class="pun">.</span><span class="pln">controller</span><span class="pun">(</span><span class="str">&quot;ctrl&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$scope</span><span class="pun">,</span><span class="pln"> $http</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="lang-js"><span class="pln">    </span><span class="com">// ...et on affiche l&#39;objet <samp>ChildScope { ... }</samp>...</span></code></li><li class="L6"><code class="lang-js"><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">$scope</span><span class="pun">);</span></code></li><li class="L7"><code class="lang-js"></code></li><li class="L8"><code class="lang-js"><span class="pln">    </span><span class="com">// ...ainsi que la fonction <samp>function $http(requestConfig)</samp>.</span></code></li><li class="L9"><code class="lang-js"><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">$http</span><span class="pun">);</span></code></li><li class="L0"><code class="lang-js"><span class="pun">});</span></code></li></ol></pre>
<p>Jusque là, rien d&#39;anormal me direz-vous ? Cela signifie que le premier paramètre délivre un objet, et le second une fonction. Effectivement.</p>
<p>Mais la magie opère dès lors que vous demandez plutôt ceci.</p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="kwd">var</span><span class="pln"> app </span><span class="pun">=</span><span class="pln"> angular</span><span class="pun">.</span><span class="pln">module</span><span class="pun">(</span><span class="str">&#39;app&#39;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[]);</span></code></li><li class="L1"><code class="lang-js"></code></li><li class="L2"><code class="lang-js"><span class="com">// On demande la fonction $http en première position,</span></code></li><li class="L3"><code class="lang-js"><span class="com">// puis l&#39;objet $scope en seconde position...</span></code></li><li class="L4"><code class="lang-js"><span class="pln">app</span><span class="pun">.</span><span class="pln">controller</span><span class="pun">(</span><span class="str">&quot;ctrl&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$http</span><span class="pun">,</span><span class="pln"> $scope</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="lang-js"><span class="pln">    </span><span class="com">// ...et on affiche l&#39;objet <samp>ChildScope { ... }</samp>...</span></code></li><li class="L6"><code class="lang-js"><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">$scope</span><span class="pun">);</span></code></li><li class="L7"><code class="lang-js"></code></li><li class="L8"><code class="lang-js"><span class="pln">    </span><span class="com">// ...ainsi que la fonction <samp>function $http(requestConfig)</samp>.</span></code></li><li class="L9"><code class="lang-js"><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">$http</span><span class="pun">);</span></code></li><li class="L0"><code class="lang-js"><span class="pun">});</span></code></li></ol></pre>
<p>Et ça marche ! Exactement de la même manière que précédemment. Par contre, si je voulais que mon <samp>$http</samp> ici réclamé en première position s&#39;appelle plutôt <samp>http</samp>, j&#39;aurais des ennuis.</p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="pln">angular</span><span class="pun">.</span><span class="pln">module</span><span class="pun">(</span><span class="str">&quot;app&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[]).</span><span class="pln">controller</span><span class="pun">(</span><span class="str">&quot;ctrl&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">http</span><span class="pun">,</span><span class="pln"> $scope</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="lang-js"><span class="pln">    </span><span class="com">// ...et on affiche l&#39;objet <samp>ChildScope { ... }</samp>...</span></code></li><li class="L2"><code class="lang-js"><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">$scope</span><span class="pun">);</span></code></li><li class="L3"><code class="lang-js"></code></li><li class="L4"><code class="lang-js"><span class="pln">    </span><span class="com">// ...et...</span></code></li><li class="L5"><code class="lang-js"><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">http</span><span class="pun">);</span></code></li><li class="L6"><code class="lang-js"><span class="pln">    </span><span class="com">// ...s&#39;affiche <samp>Error: [$injector:unpr] Unknown provider</samp>...</span></code></li><li class="L7"><code class="lang-js"><span class="pun">});</span></code></li></ol></pre>
<blockquote>
<p><strong>A retenir :</strong> AngularJS ne délivre pas le contenu de ses paramètres de callback en fonction de leur position, mais en fonction de leur nom.</p>
<p><em>Avantage :</em> nous pouvons nous servir à travers tous les paramètres disponibles, dans l&#39;ordre souhaité. « J&#39;ai besoin du paramètre <samp>$http</samp> ? Ok, je le rajoute à la liste ».</p>
<p><em>Inconvénient :</em> on ne peut pas utiliser n&#39;importe quel nom pour nommer son paramètre et l&#39;utiliser dans la callback sous peine d&#39;avoir une erreur. Très handicapant pour minifier/offusquer son code JavaScript.</p>
</blockquote>
<h2 id="comment-angularjs-fournit-les-param-tres-par-nom-">Comment AngularJS fournit les paramètres par nom ?</h2>
<p>Pour répondre à cette question, nous allons entreprendre de recréer les objets et fonctions de l&#39;exemple avec AngularJS pas à pas pour comprendre exactement à quel moment nous pouvons agir afin de « changer » le comportement natif du JavaScript.</p>
<p><strong>Commençons donc par créer <samp>app</samp> et sa fonction <samp>module</samp>.</strong></p>
<p>Aussi le code suivant :</p>
<p><em>Définition</em></p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="com">// Création de l&#39;espace de nom <samp>angular</samp> utilisé par la librairie.</span></code></li><li class="L1"><code class="lang-js"><span class="kwd">var</span><span class="pln"> angular </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{};</span></code></li><li class="L2"><code class="lang-js"></code></li><li class="L3"><code class="lang-js"><span class="com">// Création d&#39;une fonction <samp>module</samp> qui permettrait de</span></code></li><li class="L4"><code class="lang-js"><span class="com">// nommer mon module, et de passer le tableau <samp>[]</samp></span></code></li><li class="L5"><code class="lang-js"><span class="com">// nécessaire à la création.</span></code></li><li class="L6"><code class="lang-js"><span class="pln">angular</span><span class="pun">.</span><span class="pln">module </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">name</span><span class="pun">,</span><span class="pln"> options</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="lang-js"><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">name</span><span class="pun">);</span></code></li><li class="L8"><code class="lang-js"><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">options</span><span class="pun">);</span></code></li><li class="L9"><code class="lang-js"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">{};</span></code></li><li class="L0"><code class="lang-js"><span class="pun">};</span></code></li></ol></pre>
<p>me permet d&#39;exécuter cela :</p>
<p><em>Application</em></p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="kwd">var</span><span class="pln"> app </span><span class="pun">=</span><span class="pln"> angular</span><span class="pun">.</span><span class="pln">module</span><span class="pun">(</span><span class="str">&quot;app&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[]);</span></code></li><li class="L1"><code class="lang-js"><span class="com">// Log : <samp>app</samp></span></code></li><li class="L2"><code class="lang-js"><span class="com">// Log : <samp>[]</samp></span></code></li><li class="L3"><code class="lang-js"><span class="pln">console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">app</span><span class="pun">);</span></code></li><li class="L4"><code class="lang-js"><span class="com">// Log : <samp>Object {}</samp></span></code></li></ol></pre>
<p><strong>Ajoutons maintenant la fonction <samp>controller</samp>.</strong></p>
<p>Aussi le code suivant</p>
<p><em>Définition</em></p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="kwd">var</span><span class="pln"> angular </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{};</span></code></li><li class="L1"><code class="lang-js"><span class="pln">angular</span><span class="pun">.</span><span class="pln">module </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">name</span><span class="pun">,</span><span class="pln"> options</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="lang-js"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="lang-js"></code></li><li class="L4"><code class="lang-js"><span class="pln">        </span><span class="com">// Création d&#39;une fonction <samp>controller</samp> qui permettrait de</span></code></li><li class="L5"><code class="lang-js"><span class="pln">        </span><span class="com">// nommer mon controller, et de passer une callback avec</span></code></li><li class="L6"><code class="lang-js"><span class="pln">        </span><span class="com">// les instructions à exécuter et récupérer nos fameux paramètres !</span></code></li><li class="L7"><code class="lang-js"><span class="pln">        controller</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">name</span><span class="pun">,</span><span class="pln"> callback</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="lang-js"><span class="pln">            console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">name</span><span class="pun">);</span></code></li><li class="L9"><code class="lang-js"><span class="pln">            console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">callback</span><span class="pun">);</span></code></li><li class="L0"><code class="lang-js"></code></li><li class="L1"><code class="lang-js"><span class="pln">            </span><span class="com">// On exécute la callback que l&#39;on a passé en attribuant</span></code></li><li class="L2"><code class="lang-js"><span class="pln">            </span><span class="com">// pour le moment deux paramètres.</span></code></li><li class="L3"><code class="lang-js"><span class="pln">            callback</span><span class="pun">(</span><span class="str">&quot;first parameter&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&quot;second parameter&quot;</span><span class="pun">);</span></code></li><li class="L4"><code class="lang-js"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L5"><code class="lang-js"><span class="pln">    </span><span class="pun">};</span></code></li><li class="L6"><code class="lang-js"><span class="pun">};</span></code></li></ol></pre>
<p>me permet d&#39;exécuter cela</p>
<p><em>Application</em></p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="kwd">var</span><span class="pln"> app </span><span class="pun">=</span><span class="pln"> angular</span><span class="pun">.</span><span class="pln">module</span><span class="pun">(</span><span class="str">&quot;app&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[]);</span></code></li><li class="L1"><code class="lang-js"><span class="pln">app</span><span class="pun">.</span><span class="pln">controller</span><span class="pun">(</span><span class="str">&quot;ctrl&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$scope</span><span class="pun">,</span><span class="pln"> $http</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="lang-js"><span class="com">// Log : <samp>ctrl</samp></span></code></li><li class="L3"><code class="lang-js"><span class="com">// Log : <samp>function ($scope, $http) { ... }</samp></span></code></li><li class="L4"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">$scope</span><span class="pun">);</span></code></li><li class="L5"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>&quot;first parameter&quot;</samp></span></code></li><li class="L6"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">$http</span><span class="pun">);</span></code></li><li class="L7"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>&quot;second parameter&quot;</samp></span></code></li><li class="L8"><code class="lang-js"><span class="pun">});</span></code></li></ol></pre>
<p>Et là nous remarquons une belle piste. Nous sommes capable de connaître le nom des fonctions utilisées par la callback fournit dans la partie <strong>Application</strong> (<samp>console.log(callback);</samp>) avant de l&#39;exécuter et de lui passer actuellement les paramètres <samp>&quot;first parameter&quot;</samp> et <samp>&quot;second parameter&quot;</samp>.</p>
<blockquote>
<p><strong><samp>Bingo.</samp></strong> <strong>C&#39;est exactement comme cela que AngularJS procède. Le nom des paramètres est extrais à partir de</strong> <samp>callback.toString()</samp> <strong>grâce à une Expression régulière et diverses opérations de capture. Nous allons en reproduire une équivalence dans l&#39;exemple suivant.</strong></p>
</blockquote>
<h2 id="extraction-des-param-tres-par-nom">Extraction des paramètres par nom</h2>
<p>Pour simuler une callback par Nom de paramètre il va falloir :</p>
<ul>
<li>Isoler la liste des paramètres pour en connaître leur nom.</li>
<li>Affecter le bon contenu de paramètre à la bonne place dans la callback pour donner l&#39;illusion d&#39;une callback partageant ces paramètres par nom de paramètre.</li>
</ul>
<h3 id="isoler-la-liste-des-param-tres">Isoler la liste des paramètres</h3>
<p>La manière la plus rapide de parvenir à nos fins va être d&#39;utiliser une expression régulière pour extraire la liste des paramètres de la fonction rendu par <samp>callback.toString()</samp>.</p>
<p>Voici là liste des fonctions dans lesquels nous devons pouvoir récupérer les paramètres. J&#39;ai volontairement ajouté des espaces inutiles pour être sur de tester tous les cas :</p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code><span class="kwd">function</span><span class="pln"> test </span><span class="pun">(</span><span class="pln">  $http </span><span class="pun">,</span><span class="pln"> $scope  </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">...</span><span class="pln"> </span><span class="pun">};</span></code></li><li class="L1"><code><span class="kwd">function</span><span class="pln"> test  </span><span class="pun">(</span><span class="pln">  $http  </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">...</span><span class="pln"> </span><span class="pun">};</span></code></li><li class="L2"><code><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">  $scope</span><span class="pun">,</span><span class="pln"> $http  </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">...</span><span class="pln"> </span><span class="pun">};</span></code></li><li class="L3"><code><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">  $http</span><span class="pun">,</span><span class="pln"> scope  </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">...</span><span class="pln"> </span><span class="pun">};</span></code></li><li class="L4"><code><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">  $scope  </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">...</span><span class="pln"> </span><span class="pun">};</span></code></li><li class="L5"><code><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">  </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">...</span><span class="pln"> </span><span class="pun">};</span></code></li><li class="L6"><code><span class="pun">(</span><span class="pln"> $scop  </span><span class="pun">,</span><span class="pln">  $http</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">...</span><span class="pln"> </span><span class="pun">};</span></code></li><li class="L7"><code><span class="pln">$scope  </span><span class="pun">=&gt;</span><span class="pln">  </span><span class="pun">{</span><span class="pln"> </span><span class="pun">...</span><span class="pln"> </span><span class="pun">};</span></code></li><li class="L8"><code><span class="pun">(</span><span class="pln">  $scope  </span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">...</span><span class="pln"> </span><span class="pun">};</span></code></li><li class="L9"><code><span class="pun">(</span><span class="pln">  </span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">...</span><span class="pln"> </span><span class="pun">};</span></code></li></ol></pre><p>À l&#39;aide d&#39;outil comme <a href="https://regex101.com/#javascript" target="_blank">101Regex</a>, on arrive à une expression régulière comme celle-ci:</p>
<blockquote>
<p><samp>/^(?:function <em>[a-zA-Z0-9_$]</em>)? <em>(? </em>([a-zA-Z0-9_$, ]<em>) </em>)?/g</samp></p>
</blockquote>
<div class="hidden-explaination" onclick="this.classList.toggle('hidden-explaination')">
<br>
<button>Explication complète sur la RegExp en cliquant ici</button>
<div>
<br>
<em>Note : nous ajoutons le paramètre <samp>m</samp> lors de nos tests pour tester tous nos cas de test dans <a href="https://regex101.com/#javascript" target="_blank">101Regex</a> mais il ne ferra pas parti de l&#39;expression régulière finale.</em>
<ul id="regexExplainer" class="filetree treeview">
                  <li>
                    <div class="first-folder">
                      <div><span class="expslash">/</span><span class="treeview_pattern regex_colorizer"><b>^</b><b class="g1">(?:</b>function <b><em></b><i>[</i><i>a<b>-</b>zA<b>-</b>Z0<b>-</b>9_$</i><i>]</i><b></em></b><b class="g1">)</b><b class="g1">?</b> <b><em></b><b class="et">(</b><b>?</b> <b></em></b><b class="g1" data-groupnum="1">(</b><i>[</i><i>a<b>-</b>zA<b>-</b>Z0<b>-</b>9_$, </i><i>]</i><b><em></b><b class="g1" data-groupnum="1">)</b> <b></em></b><b class="et">)</b><b>?</b></span>
                        <span class="expslash">/</span><span class="treeview_pattern treeview_options">gm</span></div>
                    </div>
                    <ul>
                      <li>
                        <div class="file"><span class="token">^</span> déclarer la position comme le début de la ligne</div>
                      </li>
                      <li>
                        <div class="hitarea collapsable"><i class="fa fa-caret-down"></i></div>
                        <div class="folder"><span class="group">(?:function <em>[a-zA-Z0-9<em>$]</em>)?</span> Groupe non capturant</div>
                        <ul>
                          <li>
                            <div class="file"><span class="note">Quantifieur:</span> <span class="inner-quantifier">?</span> Entre <span class="quantifier">zero</span> et <span class="quantifier">une</span> fois, autant de fois que possible, car en mode
                              <span class="misc">[greedy]</span>
                            </div>
                          </li>
                          <li>
                            <div class="file"><span class="token">function</span> concorde avec les caractères <span class="literal">function</span> tel quel (sensible à la casse)</div>
                          </li>
                          <li>
                            <div class="hitarea collapsable"><i class="fa fa-caret-down"></i></div>
                            <div class="folder"><span class="token"> <em></em></span><em> concorde avec le caractère <span class="literal"> </span> tel quel</em></div><em>
                            </em><ul><em>
                              </em><li><em>
                                </em><div class="file"><em><span class="note">Quantifieur:</span> <span class="inner-quantifier"></span></em> Entre <span class="quantifier">zero</span> et <span class="quantifier">une infinité</span> de fois, autant de fois que possible, car en mode
                                  <span class="misc">[greedy]</span></div>
                              </li>
                            </ul>
                          </li>
                          <li>
                            <div class="hitarea collapsable"><i class="fa fa-caret-down"></i></div>
                            <div class="folder"><span class="treeCharclass">[a-zA-Z0-9<em>$]<em></em></em></span><em><em> concorde avec un seul caractère de la liste précédente</em></em></div><em><em>
                            </em></em><ul><em><em>
                              </em><li><em>
                                </em><div class="file"><em><span class="note">Quantifier:</span> <span class="inner-quantifier"></span></em> Entre <span class="quantifier">zero</span> et <span class="quantifier">une infinité</span> de fois, autant de fois que possible, car en mode
                                  <span class="misc">[greedy]</span></div>
                              </li>
                              <li>
                                <div class="file"><span class="token">a-z</span> un seul caractère entre <span class="literal">a</span> et <span class="literal">z</span> (sensible à la casse)</div>
                              </li>
                              <li>
                                <div class="file"><span class="token">A-Z</span> un seul caractère entre <span class="literal">A</span> et <span class="literal">Z</span> (sensible à la casse)</div>
                              </li>
                              <li>
                                <div class="file"><span class="token">0-9</span> un seul caractère entre <span class="literal">0</span> et <span class="literal">9</span></div>
                              </li>
                              </em><li><em>
                                </em><div class="file"><em><span class="token"></span></em>$ concorde avec un caractère de la liste <span class="literal"><em>$</em></span><em> tel quel</em></div><em>
                              </em></li><em>
                            </em></ul><em>
                          </em></li><em>
                        </em></ul><em>
                      </em></li><em>
                      <li>
                        <div class="hitarea collapsable"><i class="fa fa-caret-down"></i></div>
                        <div class="folder"><span class="token"> <em></em></span><em> concorde avec le caractère <span class="literal"> </span> tel quel</em></div><em>
                        </em><ul><em>
                          </em><li><em>
                            </em><div class="file"><em><span class="note">Quantifieur:</span> <span class="inner-quantifier"></span></em> Entre <span class="quantifier">zero</span> et <span class="quantifier">une infinité</span> de fois, de fois, autant de fois que possible, car en mode
                              <span class="misc">[greedy]</span></div>
                          </li>
                        </ul>
                      </li>
                      <li>
                        <div class="hitarea collapsable"><i class="fa fa-caret-down"></i></div>
                        <div class="folder"><span class="token">(?</span> matches the character <span class="literal">(</span> literally</div>
                        <ul>
                          <li>
                            <div class="file"><span class="note">Quantifieur:</span> <span class="inner-quantifier">?</span> Entre <span class="quantifier">zero</span> et <span class="quantifier">une</span> fois, de fois, autant de fois que possible, car en mode
                              <span class="misc">[greedy]</span>
                            </div>
                          </li>
                        </ul>
                      </li>
                      <li>
                        <div class="hitarea collapsable"><i class="fa fa-caret-down"></i></div>
                        <div class="folder"><span class="token"> <em></em></span><em> matches the character <span class="literal"> </span> literally</em></div><em>
                        </em><ul><em>
                          </em><li><em>
                            </em><div class="file"><em><span class="note">Quantifieur:</span> <span class="inner-quantifier"></span></em> Entre <span class="quantifier">zero</span> et <span class="quantifier">une infinité</span> de fois, autant de fois que possible, car en mode
                              <span class="misc">[greedy]</span></div>
                          </li>
                        </ul>
                      </li>
                      </em><li><em>
                        <div class="hitarea collapsable"><i class="fa fa-caret-down"></i></div>
                        </em><div class="folder"><em><span class="capturinggrooup match1">1st</span> groupe caturant <span class="group">([a-zA-Z0-9</span></em>$, ]<em>)</em></div><em>
                        </em><ul><em>
                          </em><li><em>
                            <div class="hitarea collapsable"><i class="fa fa-caret-down"></i></div>
                            </em><div class="folder"><em><span class="treeCharclass">[a-zA-Z0-9</em>$, ]</span></em> concorde avec un seul caractère de la liste précédente</div>
                            <ul>
                              <li>
                                <div class="file"><span class="note">Quantifier:</span> <span class="inner-quantifier"><em></em></span><em> Entre <span class="quantifier">zero</span> et <span class="quantifier">une infinité</span> de fois, autant de fois que possible, car en mode
                                  <span class="misc">[greedy]</span></em></div><em>
                              </em></li><em>
                              <li>
                                <div class="file"><span class="token">a-z</span> un seul caractère entre <span class="literal">a</span> et <span class="literal">z</span> (sensible à la casse)</div>
                              </li>
                              <li>
                                <div class="file"><span class="token">A-Z</span> un seul caractère entre <span class="literal">A</span> et <span class="literal">Z</span> (sensible à la casse)</div>
                              </li>
                              <li>
                                <div class="file"><span class="token">0-9</span> un seul caractère entre <span class="literal">0</span> et <span class="literal">9</span></div>
                              </li>
                              <li>
                                <div class="file"><span class="token"><em>$, </em></span><em> concorde avec un caractère de la liste <span class="literal"></span></em>$,  tel quel</div>
                              </li>
                            </em></ul><em>
                          </em></li><em>
                        </em></ul><em>
                      </em></li><em>
                      </em><li><em>
                        <div class="hitarea collapsable"><i class="fa fa-caret-down"></i></div>
                        </em><div class="folder"><em><span class="token"> </span></em> concorde avec le caractère <span class="literal"> </span> tel quel</div>
                        <ul>
                          <li>
                            <div class="file"><span class="note">Quantifieur:</span> <span class="inner-quantifier"><em></em></span><em> Between <span class="quantifier">zero</span> and <span class="quantifier">unlimited</span> times, as many times as possible, giving back as needed
                              <span class="misc">[greedy]</span></em></div><em>
                          </em></li><em>
                        </em></ul><em>
                      </em></li><em>
                      </em><li><em>
                        <div class="hitarea collapsable"><i class="fa fa-caret-down"></i></div>
                        <div class="folder"><span class="token">)?</span> matches the character <span class="literal">)</span> literally</div>
                        </em><ul><em>
                          </em><li><em>
                            </em><div class="file"><em><span class="note">Quantifieur:</span> <span class="inner-quantifier"></span></em> Entre <span class="quantifier">zero</span> et <span class="quantifier">une infinité</span> de fois, autant de fois que possible, car en mode
                              <span class="misc">[greedy]</span>
                            </div>
                          </li>
                        </ul>
                      </li>
                      <li>
                        <div class="file"><span class="modifier">g modifieur:</span> <strong>g</strong>lobale. Pour toutes concordances (pas de retour à la première capture)</div>
                      </li>
                      <li>
                        <div class="file"><span class="modifier">m modifieur:</span> <strong>m</strong>ulti ligne. Fait que <span class="misc">^</span> et <span class="misc">$</span> concorde pour le début/la fin de chaque ligne (pas seulement le début/la fin de la chaine)</div>
                      </li>
                    </ul>
                  </li>
                </ul>
</div>
</div>

<p>Cette expression régulière nous extrait au regard des tests unitaires précédent ceci :</p>

<pre class="prettyprint linenums"><code class="lang-js">`  $http , $scope  `
`  $http  `
`  $scope, $http  `
`  $http, scope  `
`  $scope  `
`  `
` $scope  ,  $http`
`$scope`
`  $scope  `
`  `
</code></pre>
<p><h3 id="affectation-des-param-tres">Affectation des paramètres</h3></p>
<p><p>Après avoir obtenu de notre <samp>callback.toString()</samp> les paramètres suivant <samp>$http , $scope</samp> à l&#39;aide de notre expression régulière, nous allons récupérer ces paramètres un par un. Nous allons ensuite retirer les espaces et injecter nos paramètres dans notre callback aux bonnes positions pour donner l&#39;illusion d&#39;une callback par nom de paramétrage en sortie. C&#39;est parti !</p></p>
<p><p><em>Définition</em></p></p>
<p><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="kwd">var</span><span class="pln"> angular </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{};</span></code></li><li class="L1"><code class="lang-js"><span class="pln">angular</span><span class="pun">.</span><span class="pln">module </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">name</span><span class="pun">,</span><span class="pln"> options</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="lang-js"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="lang-js"><span class="pln">        controller</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">name</span><span class="pun">,</span><span class="pln"> callback</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="lang-js"></code></li><li class="L5"><code class="lang-js"><span class="pln">            </span><span class="com">// Création de la RegExp d&#39;extraction des paramètres réclamés.</span></code></li><li class="L6"><code class="lang-js"><span class="pln">            </span><span class="kwd">var</span><span class="pln"> regex </span><span class="pun">=</span><span class="pln"> </span><span class="str">/^(?:function <em>[a-zA-Z0-9_$]</em>)? <em>(? </em>([a-zA-Z0-9_$, ]<em>) </em>)?/</span><span class="pln">g</span><span class="pun">,</span></code></li><li class="L7"><code class="lang-js"></code></li><li class="L8"><code class="lang-js"><span class="pln">                </span><span class="com">// Exécution de la RegExp sur <samp>callback.toString()</samp> avec par exemple</span></code></li><li class="L9"><code class="lang-js"><span class="pln">                </span><span class="com">// <samp>function test (  $http , $scope  ) { ... };</samp>. Est obtenu comme valeur...</span></code></li><li class="L0"><code class="lang-js"><span class="pln">                params </span><span class="pun">=</span><span class="pln"> </span><span class="pun">((</span><span class="pln">regex</span><span class="pun">.</span><span class="pln">exec</span><span class="pun">(</span><span class="pln">callback</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">())</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="pun">[</span><span class="lit">1</span><span class="pun">]).</span><span class="pln">slice</span><span class="pun">(</span><span class="lit">1</span><span class="pun">)[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="str">&quot;&quot;</span><span class="pun">).</span><span class="pln">split</span><span class="pun">(</span><span class="str">&#39;,&#39;</span><span class="pun">),</span></code></li><li class="L1"><code class="lang-js"><span class="pln">                </span><span class="com">// ...pour <samp>params</samp> : <samp>[&#39;$http&#39;, &#39;$scope&#39;]</samp>.</span></code></li><li class="L2"><code class="lang-js"></code></li><li class="L3"><code class="lang-js"><span class="pln">                </span><span class="com">// Attribution du contenu des paramètres que notre callback va fournir en sortie</span></code></li><li class="L4"><code class="lang-js"><span class="pln">                </span><span class="com">// lors de l&#39;utilisation de <samp>app.controller(&quot;ctrl&quot;, function (...) { ... })</samp> dans un objet</span></code></li><li class="L5"><code class="lang-js"><span class="pln">                </span><span class="com">// ou chaque clé correspondra aux paramètres nommés souhaités.</span></code></li><li class="L6"><code class="lang-js"><span class="pln">                functions </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="lang-js"></code></li><li class="L8"><code class="lang-js"><span class="pln">                    </span><span class="com">// Si la clé passé à <samp>functions</samp> est <samp>&#39;$scope&#39;</samp>, la fonction suivante sera recourné.</span></code></li><li class="L9"><code class="lang-js"><span class="pln">                    $scope</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="lang-js"><span class="pln">                        </span><span class="str">&quot;I&#39;m the $scope function&quot;</span><span class="pun">;</span></code></li><li class="L1"><code class="lang-js"><span class="pln">                    </span><span class="pun">},</span></code></li><li class="L2"><code class="lang-js"></code></li><li class="L3"><code class="lang-js"><span class="pln">                    </span><span class="com">// Si la clé passé est <samp>functions est</samp>&#39;$http&#39;<samp>, la fonction suivante sera recourné.&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L4&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;                    $http&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L5&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;                        &lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;I&#39;m the $http function&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L6&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;                    &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L7&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L8&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L9&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Association pour chaque élément de</samp>[&#39;$http&#39;, &#39;$scope&#39;]<samp>de la valeur contenue dans</samp>functions<samp>&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L0&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// en se servant de chaque chaîne du tableau comme clé dans</samp>functions<samp>.&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;            params &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; params&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L2&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Renvoi pour chaque clé de la valeur ou, si aucune concordance,&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L3&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// une erreur pour signifier qu&#39;aucun paramètre avec ce nom n&#39;existe.&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L4&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;                &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; functions&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()]&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kwd&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;typ&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&#39;This</samp>&#39;</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> item</span><span class="pun">.</span><span class="pln">trim</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">&quot;<samp>doesn&#39;t exist.&quot;&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L5&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L6&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// ...</samp>[function () { &quot;I&#39;m the $scope function&quot;; },</span></code></li><li class="L7"><code class="lang-js"><span class="pln">            </span><span class="com">//       function () { &quot;I&#39;m the $http function&quot;; }]<samp>&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L8&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L9&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// Exécution de</samp>callback<samp>fournit en utilisant&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L0&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;// les paramètres dans le bon ordre directement du tableau</samp>params<samp>avec&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;&lt;li class=&quot;L1&quot;&gt;&lt;code class=&quot;lang-js&quot;&gt;&lt;span class=&quot;pln&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;com&quot;&gt;//</samp>apply` qui prend un tableau de paramètres.</span></code></li><li class="L2"><code class="lang-js"><span class="pln">            callback</span><span class="pun">.</span><span class="pln">apply</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">,</span><span class="pln"> params</span><span class="pun">);</span></code></li><li class="L3"><code class="lang-js"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L4"><code class="lang-js"><span class="pln">    </span><span class="pun">};</span></code></li><li class="L5"><code class="lang-js"><span class="pun">};</span></code></li></ol></pre></p>
<p><p><em>Application</em></p></p>
<p><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="kwd">var</span><span class="pln"> app </span><span class="pun">=</span><span class="pln"> angular</span><span class="pun">.</span><span class="pln">module</span><span class="pun">(</span><span class="str">&quot;app&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[]);</span></code></li><li class="L1"><code class="lang-js"><span class="pln">app</span><span class="pun">.</span><span class="pln">controller</span><span class="pun">(</span><span class="str">&quot;ctrl&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$scope</span><span class="pun">,</span><span class="pln"> $http</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">$scope</span><span class="pun">);</span></code></li><li class="L3"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>&quot;function () { &quot;I&#39;m the $scope function&quot;; }&quot;</samp></span></code></li><li class="L4"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">$http</span><span class="pun">);</span></code></li><li class="L5"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>&quot;function () { &quot;I&#39;m the $http function&quot;; }&quot;</samp></span></code></li><li class="L6"><code class="lang-js"><span class="pun">});</span></code></li></ol></pre></p>
<p><p>ou</p></p>
<p><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="kwd">var</span><span class="pln"> app </span><span class="pun">=</span><span class="pln"> angular</span><span class="pun">.</span><span class="pln">module</span><span class="pun">(</span><span class="str">&quot;app&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[]);</span></code></li><li class="L1"><code class="lang-js"><span class="pln">app</span><span class="pun">.</span><span class="pln">controller</span><span class="pun">(</span><span class="str">&quot;ctrl&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$http</span><span class="pun">,</span><span class="pln"> $scope</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">$scope</span><span class="pun">);</span></code></li><li class="L3"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>&quot;function () { &quot;I&#39;m the $scope function&quot;; }&quot;</samp></span></code></li><li class="L4"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">$http</span><span class="pun">);</span></code></li><li class="L5"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>&quot;function () { &quot;I&#39;m the $http function&quot;; }&quot;</samp></span></code></li><li class="L6"><code class="lang-js"><span class="pun">});</span></code></li></ol></pre></p>
<p><p>ou avec erreur</p></p>
<p><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="kwd">var</span><span class="pln"> app </span><span class="pun">=</span><span class="pln"> angular</span><span class="pun">.</span><span class="pln">module</span><span class="pun">(</span><span class="str">&quot;app&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[]);</span></code></li><li class="L1"><code class="lang-js"><span class="pln">app</span><span class="pun">.</span><span class="pln">controller</span><span class="pun">(</span><span class="str">&quot;ctrl&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">http</span><span class="pun">,</span><span class="pln"> $scope</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">$scope</span><span class="pun">);</span></code></li><li class="L3"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>&quot;function () { &quot;I&#39;m the $scope function&quot;; }&quot;</samp></span></code></li><li class="L4"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">http</span><span class="pun">);</span></code></li><li class="L5"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>Error: This</samp>http<samp>doesn&#39;t exist.</samp></span></code></li><li class="L6"><code class="lang-js"><span class="pun">});</span></code></li></ol></pre></p>
<p><h2 id="quid-de-l-offuscation-du-code-">QUID de l’offuscation du code ?</h2></p>
<p><h3 id="utilisation-souhait-e">Utilisation souhaitée</h3></p>
<p><p>Comme mentionné précédemment, si nous offusquons le code, ou si nous souhaitons simplement utiliser d&#39;autres noms de variable pour les paramètres fournis par la callback nous allons obtenir le même type d&#39;erreur que dans notre troisième exemple d&#39;application dans la partie précédente.</p></p>
<p><p>AngularJS contourne le problème en remplaçant cette syntaxe :</p></p>
<p><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">$http</span><span class="pun">,</span><span class="pln"> $scope</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">$scope</span><span class="pun">);</span></code></li><li class="L2"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>&quot;function () { &quot;I&#39;m the $scope function&quot;; }&quot;</samp></span></code></li><li class="L3"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">$http</span><span class="pun">);</span></code></li><li class="L4"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>&quot;function () { &quot;I&#39;m the $http function&quot;; }&quot;</samp></span></code></li><li class="L5"><code class="lang-js"><span class="pun">}</span></code></li></ol></pre></p>
<p><p>par cette syntaxe :</p></p>
<p><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="pun">[</span><span class="str">&#39;$http&#39;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&#39;$scope&#39;</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">h</span><span class="pun">,</span><span class="pln"> s</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">s</span><span class="pun">);</span></code></li><li class="L2"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>&quot;function () { &quot;I&#39;m the $scope function&quot;; }&quot;</samp></span></code></li><li class="L3"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">h</span><span class="pun">);</span></code></li><li class="L4"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>&quot;function () { &quot;I&#39;m the $http function&quot;; }&quot;</samp></span></code></li><li class="L5"><code class="lang-js"><span class="pun">}]</span></code></li></ol></pre></p>
<blockquote>
<p>Pour contourner le problème, le nommage des paramètres n&#39;est plus effectué dans la callback mais dans un tableau. On ne passe donc plus une <samp>Function</samp> de callback mais un <samp>Array</samp> dont le dernier item est la <samp>Function</samp> de callback et dont tous les items précédents sont les paramètres nommé que nous souhaitons sous forme de <samp>string</samp> (et donc non offusquable). Cela nous permet ensuite d&#39;utiliser, par exemple, les variables <samp>h</samp> et <samp>s</samp> dans notre exemple.</p>
</blockquote>
<h3 id="impl-mentation-de-la-fonctionnalit-">Implémentation de la fonctionnalité</h3>
<p>Ajoutons donc cela à notre code déjà existant. Nous voulons que le comportement précédent fonctionne toujours, mais que celui-ci marche également.</p>
<p><em>Définition</em></p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="kwd">var</span><span class="pln"> angular </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{};</span></code></li><li class="L1"><code class="lang-js"><span class="pln">angular</span><span class="pun">.</span><span class="pln">module </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">name</span><span class="pun">,</span><span class="pln"> options</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="lang-js"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="lang-js"><span class="pln">        controller</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">name</span><span class="pun">,</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="lang-js"></code></li><li class="L5"><code class="lang-js"><span class="pln">            </span><span class="com">// On définira les <samp>params</samp> plus tard selon le type de <samp>args</samp>.</span></code></li><li class="L6"><code class="lang-js"><span class="pln">            </span><span class="kwd">var</span><span class="pln"> params</span><span class="pun">,</span></code></li><li class="L7"><code class="lang-js"></code></li><li class="L8"><code class="lang-js"><span class="pln">                </span><span class="com">// <samp>callback</samp> est devenu <samp>args</samp>. <samp>args</samp> peut être une <samp>Function</samp> ou un <samp>Array</samp>.</span></code></li><li class="L9"><code class="lang-js"><span class="pln">                </span><span class="com">// on défini donc la variable <samp>callback</samp> et lui attribuons <samp>args</samp>.</span></code></li><li class="L0"><code class="lang-js"><span class="pln">                </span><span class="com">// en supposant qu&#39;il est de type <samp>Function</samp>...</span></code></li><li class="L1"><code class="lang-js"><span class="pln">                callback </span><span class="pun">=</span><span class="pln"> args</span><span class="pun">,</span></code></li><li class="L2"><code class="lang-js"><span class="pln">                regex </span><span class="pun">=</span><span class="pln"> </span><span class="str">/^(?:function <em>[a-zA-Z0-9_$]</em>)? <em>(? </em>([a-zA-Z0-9_$, ]<em>) </em>)?/</span><span class="pln">g</span><span class="pun">,</span></code></li><li class="L3"><code class="lang-js"><span class="pln">                functions </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="lang-js"><span class="pln">                    $scope</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="lang-js"><span class="pln">                        </span><span class="str">&quot;I&#39;m the $scope function&quot;</span><span class="pun">;</span></code></li><li class="L6"><code class="lang-js"><span class="pln">                    </span><span class="pun">},</span></code></li><li class="L7"><code class="lang-js"><span class="pln">                    $http</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="lang-js"><span class="pln">                        </span><span class="str">&quot;I&#39;m the $http function&quot;</span><span class="pun">;</span></code></li><li class="L9"><code class="lang-js"><span class="pln">                    </span><span class="pun">}</span></code></li><li class="L0"><code class="lang-js"><span class="pln">                </span><span class="pun">};</span></code></li><li class="L1"><code class="lang-js"></code></li><li class="L2"><code class="lang-js"><span class="pln">            </span><span class="com">// ...cependant si <samp>args</samp> est de type Array.</span></code></li><li class="L3"><code class="lang-js"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">args instanceof </span><span class="typ">Array</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="lang-js"></code></li><li class="L5"><code class="lang-js"><span class="pln">              </span><span class="com">// Notre <samp>callback</samp> devient le dernier item du tableau</span></code></li><li class="L6"><code class="lang-js"><span class="pln">              </span><span class="com">// qui est retiré et retourné avec <samp>pop()</samp>,</span></code></li><li class="L7"><code class="lang-js"><span class="pln">              callback </span><span class="pun">=</span><span class="pln"> args</span><span class="pun">.</span><span class="pln">pop</span><span class="pun">();</span></code></li><li class="L8"><code class="lang-js"></code></li><li class="L9"><code class="lang-js"><span class="pln">              </span><span class="com">// et nos paramètres sont le reste du tableau.</span></code></li><li class="L0"><code class="lang-js"><span class="pln">              params </span><span class="pun">=</span><span class="pln"> args</span><span class="pun">;</span></code></li><li class="L1"><code class="lang-js"><span class="pln">            </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="lang-js"></code></li><li class="L3"><code class="lang-js"><span class="pln">              </span><span class="com">// Sinon, si <samp>args</samp> est —comme supposé initialement— une <samp>Function</samp>, on continue comme avant.</span></code></li><li class="L4"><code class="lang-js"><span class="pln">              params </span><span class="pun">=</span><span class="pln"> </span><span class="pun">((</span><span class="pln">regex</span><span class="pun">.</span><span class="pln">exec</span><span class="pun">(</span><span class="pln">callback</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">())</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="pun">[</span><span class="lit">1</span><span class="pun">]).</span><span class="pln">slice</span><span class="pun">(</span><span class="lit">1</span><span class="pun">)[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="str">&quot;&quot;</span><span class="pun">).</span><span class="pln">split</span><span class="pun">(</span><span class="str">&#39;,&#39;</span><span class="pun">)</span></code></li><li class="L5"><code class="lang-js"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L6"><code class="lang-js"></code></li><li class="L7"><code class="lang-js"><span class="pln">            params </span><span class="pun">=</span><span class="pln"> params</span><span class="pun">.</span><span class="pln">map</span><span class="pun">(</span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">item</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="lang-js"><span class="pln">                </span><span class="kwd">return</span><span class="pln"> functions</span><span class="pun">[</span><span class="pln">item</span><span class="pun">.</span><span class="pln">trim</span><span class="pun">()]</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Error</span><span class="pun">(</span><span class="str">&#39;This <samp>&#39;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; item&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;</samp> doesn&#39;t exist.&quot;</span><span class="pun">);</span></code></li><li class="L9"><code class="lang-js"><span class="pln">            </span><span class="pun">});</span></code></li><li class="L0"><code class="lang-js"></code></li><li class="L1"><code class="lang-js"><span class="pln">            callback</span><span class="pun">.</span><span class="pln">apply</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">,</span><span class="pln"> params</span><span class="pun">);</span></code></li><li class="L2"><code class="lang-js"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L3"><code class="lang-js"><span class="pln">    </span><span class="pun">};</span></code></li><li class="L4"><code class="lang-js"><span class="pun">};</span></code></li></ol></pre>
<p><em>Application</em></p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="kwd">var</span><span class="pln"> app </span><span class="pun">=</span><span class="pln"> angular</span><span class="pun">.</span><span class="pln">module</span><span class="pun">(</span><span class="str">&quot;app&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[]);</span></code></li><li class="L1"><code class="lang-js"><span class="pln">app</span><span class="pun">.</span><span class="pln">controller</span><span class="pun">(</span><span class="str">&quot;ctrl&quot;</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[</span><span class="str">&#39;$http&#39;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&#39;$scope&#39;</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">h</span><span class="pun">,</span><span class="pln"> s</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">s</span><span class="pun">);</span></code></li><li class="L3"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>&quot;function () { &quot;I&#39;m the $scope function&quot;; }&quot;</samp></span></code></li><li class="L4"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">h</span><span class="pun">);</span></code></li><li class="L5"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>&quot;function () { &quot;I&#39;m the $http function&quot;; }&quot;</samp></span></code></li><li class="L6"><code class="lang-js"><span class="pun">}]);</span></code></li></ol></pre>
<blockquote>
<p><em><samp>Exemple :</samp></em> <strong><a href="http://codepen.io/Haeresis/pen/WwOpNG" target="_blank">Vous trouverez un exemple Live de ce code sur ce Codepen !</a></strong></p>
</blockquote>
<h2 id="built-in-function">Built-in Function</h2>
<p>Et si on utilisait ce système pour nos propres callback, indépendamment de AngularJS ? Nous allons effectuer quelques changement et attacher ce mécanisme au prototype de <samp>Function</samp> mais vous pouvez en faire une simple fonction ou l&#39;ajouter à votre librairie JavaScript préféré !</p>
<p><strong>Raccourci</strong></p>
<p>Ce code est à placer avec vos librairies JavaScript.</p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="pun">;(</span><span class="kwd">function</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="lang-js"></code></li><li class="L2"><code class="lang-js"><span class="pln">  </span><span class="com">// On retire <samp>name</samp> qui ne sert pas et on ajoute sa propre injection de fonctions,</span></code></li><li class="L3"><code class="lang-js"><span class="pln">  </span><span class="com">// et éventuellement sa propre fonction en cas d&#39;erreur.</span></code></li><li class="L4"><code class="lang-js"><span class="pln">  </span><span class="typ">Function</span><span class="pun">.</span><span class="pln">prototype</span><span class="pun">.</span><span class="pln">namedParameters </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">args</span><span class="pun">,</span><span class="pln"> providedFunctions</span><span class="pun">,</span><span class="pln"> error</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="lang-js"><span class="pln">      </span><span class="kwd">var</span><span class="pln"> params</span><span class="pun">,</span></code></li><li class="L6"><code class="lang-js"><span class="pln">          callback </span><span class="pun">=</span><span class="pln"> args</span><span class="pun">,</span></code></li><li class="L7"><code class="lang-js"><span class="pln">          regex </span><span class="pun">=</span><span class="pln"> </span><span class="str">/^(?:function <em>[a-zA-Z0-9_$]</em>)? <em>(? </em>([a-zA-Z0-9_$, ]<em>) </em>)?/</span><span class="pln">g</span><span class="pun">,</span></code></li><li class="L8"><code class="lang-js"><span class="pln">          functions </span><span class="pun">=</span><span class="pln"> providedFunctions </span><span class="pun">||</span><span class="pln"> </span><span class="pun">{};</span></code></li><li class="L9"><code class="lang-js"></code></li><li class="L0"><code class="lang-js"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">args instanceof </span><span class="typ">Array</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="lang-js"><span class="pln">      callback </span><span class="pun">=</span><span class="pln"> args</span><span class="pun">.</span><span class="pln">pop</span><span class="pun">();</span></code></li><li class="L2"><code class="lang-js"><span class="pln">      params </span><span class="pun">=</span><span class="pln"> args</span><span class="pun">;</span></code></li><li class="L3"><code class="lang-js"><span class="pln">    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="lang-js"><span class="pln">      params </span><span class="pun">=</span><span class="pln"> </span><span class="pun">((</span><span class="pln">regex</span><span class="pun">.</span><span class="pln">exec</span><span class="pun">(</span><span class="pln">callback</span><span class="pun">.</span><span class="pln">toString</span><span class="pun">())</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="pun">[</span><span class="lit">1</span><span class="pun">]).</span><span class="pln">slice</span><span class="pun">(</span><span class="lit">1</span><span class="pun">)[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="str">&quot;&quot;</span><span class="pun">).</span><span class="pln">split</span><span class="pun">(</span><span class="str">&#39;,&#39;</span><span class="pun">)</span></code></li><li class="L5"><code class="lang-js"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="lang-js"></code></li><li class="L7"><code class="lang-js"><span class="pln">    params </span><span class="pun">=</span><span class="pln"> params</span><span class="pun">.</span><span class="pln">map</span><span class="pun">(</span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">item</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="lang-js"></code></li><li class="L9"><code class="lang-js"><span class="pln">        </span><span class="com">// On ajoute sa propre fonction d&#39;erreur qui prend en paramètre le nom de paramètre posant problème.</span></code></li><li class="L0"><code class="lang-js"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> functions</span><span class="pun">[</span><span class="pln">item</span><span class="pun">.</span><span class="pln">trim</span><span class="pun">()]</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="pun">(</span><span class="pln">error </span><span class="pun">&amp;&amp;</span><span class="pln"> error</span><span class="pun">(</span><span class="pln">item</span><span class="pun">.</span><span class="pln">trim</span><span class="pun">()))</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Error</span><span class="pun">(</span><span class="str">&#39;This <samp>&#39;&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; item&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;pun&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pln&quot;&gt; &lt;/span&gt;&lt;span class=&quot;str&quot;&gt;&quot;</samp> doesn&#39;t exist.&quot;</span><span class="pun">);</span></code></li><li class="L1"><code class="lang-js"><span class="pln">    </span><span class="pun">});</span></code></li><li class="L2"><code class="lang-js"></code></li><li class="L3"><code class="lang-js"><span class="pln">    callback</span><span class="pun">.</span><span class="pln">apply</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">,</span><span class="pln"> params</span><span class="pun">);</span></code></li><li class="L4"><code class="lang-js"><span class="pln">  </span><span class="pun">};</span></code></li><li class="L5"><code class="lang-js"><span class="pun">}());</span></code></li></ol></pre>
<p>*Note : vous pouvez également accrocher cette fonction à votre librairie préféré comme par exemple jQuery de cette manière <samp>$.fn.namedParameters = function (args, providedFunctions, error) { … }</samp></p>
<p>Vous pourrez ensuite définir et appliquer les paramètres par nom dans toutes les fonctions souhaités :</p>
<p><strong>Définition</strong></p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="kwd">var</span><span class="pln"> say </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="lang-js"><span class="pln">  </span><span class="typ">Function</span><span class="pun">.</span><span class="pln">namedParameters</span><span class="pun">(</span><span class="pln">args</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="lang-js"><span class="pln">      hello</span><span class="pun">:</span><span class="pln"> </span><span class="str">&quot;Hello !&quot;</span><span class="pun">,</span></code></li><li class="L3"><code class="lang-js"><span class="pln">      bye</span><span class="pun">:</span><span class="pln"> </span><span class="str">&quot;Bye&quot;</span></code></li><li class="L4"><code class="lang-js"><span class="pln">  </span><span class="pun">},</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">param</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="lang-js"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> param </span><span class="pun">+</span><span class="pln"> </span><span class="str">&quot; create an error !&quot;</span><span class="pun">;</span></code></li><li class="L6"><code class="lang-js"><span class="pln">  </span><span class="pun">});</span></code></li><li class="L7"><code class="lang-js"><span class="pun">};</span></code></li></ol></pre>
<p><strong>Application</strong></p>
<pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="lang-js"><span class="pln">say</span><span class="pun">(</span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">again</span><span class="pun">,</span><span class="pln"> hello</span><span class="pun">,</span><span class="pln"> bye</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">hello</span><span class="pun">);</span></code></li><li class="L2"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>Hello !</samp></span></code></li><li class="L3"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">bye</span><span class="pun">);</span></code></li><li class="L4"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>Bye</samp></span></code></li><li class="L5"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">again</span><span class="pun">);</span></code></li><li class="L6"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>again create an error !</samp></span></code></li><li class="L7"><code class="lang-js"><span class="pun">});</span></code></li><li class="L8"><code class="lang-js"><span class="pln">say</span><span class="pun">([</span><span class="str">&#39;bye&#39;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&#39;again&#39;</span><span class="pun">,</span><span class="pln"> </span><span class="str">&#39;hello&#39;</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="pun">(</span><span class="pln">b</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> h</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">h</span><span class="pun">);</span></code></li><li class="L0"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>Hello !</samp></span></code></li><li class="L1"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">b</span><span class="pun">);</span></code></li><li class="L2"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>Bye</samp></span></code></li><li class="L3"><code class="lang-js"><span class="pln">  console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">a</span><span class="pun">);</span></code></li><li class="L4"><code class="lang-js"><span class="pln">  </span><span class="com">// Log : <samp>again create an error !</samp></span></code></li><li class="L5"><code class="lang-js"><span class="pun">}]);</span></code></li></ol></pre>
<blockquote>
<p><em><samp>Exemple :</samp></em> <strong><a href="http://codepen.io/Haeresis/pen/xVpjxV" target="_blank">Vous trouverez un exemple Live de ce code sur ce Codepen !</a></strong></p>
</blockquote>]]></description>
            <link>http://localhost:7776javascript-et-callback-par-nom-de-parametre-comme-dans-angularjs/</link>
            <guid isPermaLink="false">56fb9383d1b7fe136fc2005d</guid>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Ressources]]></category>
            <category><![CDATA[Angular.js]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[Astuces]]></category>
            <category><![CDATA[Concept]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Fri, 08 Apr 2016 15:35:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Utiliser AngularJS en respectant les recommandations W3C et SEO]]></title>
            <description><![CDATA[<p>AngularJS est un régale pour toute création d&#39;Application Web de petite et moyenne taille. J&#39;entends par là, des ensembles d&#39;interfaces web ou l&#39;utilisateur est sollicité à participer au remplissage de contenu par l&#39;intermédiaire de champs, listes, boutons, etc.</p>
<div style="text-align: center;"><img src="media/images/upload/AngularJS-large.png" alt="AngularJS" style="max-width: 100%;"></div>

<p>Le principe est le suivant : sortir le contenu utile du HTML pour le ranger dans un scope JavaScript afin de le manipuler plus aisément et parsemer le HTML de référence à ce scope de contenu. L&#39;avantage est que le contenu a sa propre vie, et n&#39;est plus figé dans le HTML et surtout <strong>toute mise à jour de contenu dans le JavaScript entraîne sa mise à jour dans le HTML</strong>, bien pratique.</p>
<p>Le revers de la médaille est que la source HTML mangée par les moteurs de recherche pour le référencement ne ressemble plus qu&#39;à un ensemble de variables, et les balises et attributs HTML rencontrés font pâlir n&#39;importe quel validateur W3C.</p>
<p>C&#39;est parti pour un tutoriel vous expliquant comment contenter le W3C pour pouvoir correctement implémenter vos recommandations SEO avec AngularJS.</p>
<h2 id="angularjs-pour-du-contenu-interactif">AngularJS pour du contenu interactif</h2>
<p>Construire son Site Web intégralement avec AngularJS, alors que son but est de présenter du contenu au visiteur et aux moteurs de recherche est le meilleur moyen de faire un magnifique site introuvable.</p>
<p>Cependant, parsemer un Site Web de divers mécanismes apportés par la librairie AngularJS sur les formulaires ou le contenu extensible est un jeu d&#39;enfant et n&#39;entrave en rien un bon référencement et de bonnes pratiques HTML, à condition de respecter les guidelines que va vous fournir cet article.</p>
<h2 id="les-ng-deviennent-des-data-ng-">Les <samp>ng-*</samp> deviennent des <samp>data-ng-*</samp></h2>
<p>Partons d&#39;un pattern extrêmement simple :</p>
<p><strong>HTML</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Angular pour le W3C et le SEO&lt;/title&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!-- AngularJS, applique toi ! --&gt;
    &lt;div ng-app=&quot;&quot;&gt;
        &lt;p&gt;
            Écrivez dans ce champ :&lt;br&gt;
            &lt;!-- Choisi ton contenu dans `content` --&gt;
            &lt;input type=&quot;text&quot; ng-model=&quot;content&quot;&gt;&lt;br&gt;
            Résultat : {{ content }}
        &lt;/p&gt;
    &lt;/div&gt;
    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&quot;&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>Démo</strong></p>
<div data-ng-app="" class="demo">
    <p>
        Écrivez dans ce champ :<br>
        <input type="text" data-ng-model="content"><br>
        Résultat : {{ content }}
    </p>
</div>

<blockquote>
<p><em><samp>Non</samp></em> <strong>Ce qui ne va pas</strong></p>
<p>La voix du W3C ne se fait pas prier et vous recevrez les remontrances suivantes :</p>
<ul>
<li>Error: Attribute <samp>ng-app</samp> not allowed on element <samp>div</samp> at this point.</li>
<li>Error: Attribute <samp>ng-model</samp> not allowed on element <samp>input</samp> at this point.</li>
</ul>
<p>car effectivement il n&#39;est pas possible d&#39;inventer ses propres attributs en HTML5 à moins de les préfixer par <samp>data-</samp>.</p>
</blockquote>
<hr class="invisible">

<blockquote>
<p><strong><samp>Oui</samp></strong> <strong>Ce qu&#39;il faut faire</strong></p>
<p>Pour régler ce point, préfixez tous les attributs de AngularJS avec <samp>data-</samp> ce qui nous donne :</p>
<pre class="prettyprint linenums"><code>&lt;div data-ng-app=&quot;&quot;&gt;
    &lt;p&gt;
        Écrivez dans ce champ :&lt;br&gt;
        &lt;input type=&quot;text&quot; data-ng-model=&quot;content&quot;&gt;&lt;br&gt;
        Résultat : {{ content }}
    &lt;/p&gt;
&lt;/div&gt;
</code></pre></blockquote>
<h2 id="utilisez-data-ng-bind-plut-t-que-">Utilisez <samp>data-ng-bind</samp> plutôt que <samp>{{ }}</samp></h2>
<p>Imaginons ce texte qui est massacré pour les moteurs de recherche.</p>
<pre class="prettyprint linenums"><code>&lt;!-- ... --&gt;
&lt;!-- Appelons par défaut notre personnage John Doe --&gt;
&lt;div data-ng-app=&quot;&quot; data-init=&quot;name=&#39;John Doe&#39;&quot;&gt;
   &lt;h1&gt;L&#39;histoire dont « qui vous voulez » est le zéro&lt;/h1&gt;
   &lt;p&gt;
       Quel nom pour l&#39;histoire ?&lt;br&gt;
       &lt;!-- Renommez John ! --&gt;
       &lt;input type=&quot;text&quot; data-ng-model=&quot;name&quot;&gt;
   &lt;/p&gt;
   &lt;!-- Pas de nom, pas d&#39;histoire ! --&gt;
   &lt;p data-ng-show=&quot;name&quot;&gt;
       Voici l&#39;histoire de {{ name }}. {{ name }} était amoureux d&#39;une princesse, 
       mais n&#39;était pas prince. 
       {{ name }} mourru très vieux sans jamais avoir épousé sa princesse 
       —{{ name }} n&#39;ayant effectivement pas réussi à se faire adopter par un noble—.   
   &lt;/p&gt;
&lt;/div&gt;
&lt;!-- ... --&gt;
</code></pre><p><strong>Démo</strong></p>
<div id="app2" data-ng-app="example2" data-ng-controller="controller2" class="demo">
   <p>L&#39;histoire dont « qui vous voulez » est le zéro</p>
   <p>
       Quel nom pour l&#39;histoire ?<br>
       <input type="text" data-ng-model="name">
   </p>
   <p data-ng-show="name">
       Voici l&#39;histoire de <span data-ng-bind="name">John Doe</span>. <span data-ng-bind="name">John Doe</span> était amoureux d&#39;une princesse, 
       mais n&#39;était pas prince. 
       <span data-ng-bind="name">John Doe</span> mourru très vieux sans jamais avoir épousé sa princesse 
       —<span data-ng-bind="name">John Doe</span> n&#39;ayant effectivement pas réussi à se faire adopter par un noble—.<br>   </p>
</div>

<blockquote>
<p><em><samp>Non</samp></em> <strong>Ce qui ne va pas</strong></p>
<p>Ici le soucis est pour les moteurs de recherche. S&#39;ils souhaitent indexer votre histoire, ils n&#39;entendront jamais parler du brave John Doe mais d&#39;un certain <samp>{{ name }}</samp>.</p>
</blockquote>
<hr class="invisible">

<blockquote>
<p><strong><samp>Oui</samp></strong> <strong>Ce qu&#39;il faut faire</strong></p>
<p>Pour solutionner ce problème il faut tout simplement remplacer <samp>{{ name }}</samp> par <samp>&lt;span data-ng-bind=&quot;name&quot;&gt;John Doe&lt;/span&gt;</samp> ainsi les moteurs de recherche pourront inscrire « la gloire » de John Doe dans l&#39;histoire.</p>
<pre class="prettyprint linenums"><code>&lt;!-- ... --&gt;
&lt;div data-ng-app=&quot;&quot; data-init=&quot;name=&#39;John Doe&#39;&quot;&gt;
   &lt;p&gt;L&#39;histoire dont « qui vous voulez » est le zéro&lt;/p&gt;
   &lt;p&gt;
       Quel nom pour l&#39;histoire ?&lt;br&gt;
       &lt;input type=&quot;text&quot; data-ng-model=&quot;name&quot;&gt;
   &lt;/p&gt;
   &lt;p data-ng-show=&quot;name&quot;&gt;
       Voici l&#39;histoire de &lt;span data-ng-bind=&quot;name&quot;&gt;John Doe&lt;/span&gt;. &lt;span data-ng-bind=&quot;name&quot;&gt;John Doe&lt;/span&gt; était amoureux d&#39;une princesse, 
       mais n&#39;était pas prince. 
       &lt;span data-ng-bind=&quot;name&quot;&gt;John Doe&lt;/span&gt; mourru très vieux sans jamais avoir épousé sa princesse 
       —&lt;span data-ng-bind=&quot;name&quot;&gt;John Doe&lt;/span&gt; n&#39;ayant effectivement pas réussi à se faire adopter par un roi—.   
   &lt;/p&gt;
&lt;/div&gt;
&lt;!-- ... --&gt;
</code></pre><p>Si votre application permettait à quelqu&#39;un de changer le nom et de valider cela côté serveur dans une base de donnée, il verrait son changement en temps réel, mais les moteurs de recherche en affichant la page à partir de cet instant pourrait indexer le nouveau nom pour l&#39;histoire.</p>
</blockquote>
<h2 id="des-directives-par-attributs-au-lieu-de-balises">Des Directives par attributs au lieu de balises</h2>
<p>Il est possible grâce à AngularJS de créer ses propres directives comme dans cet exemple :</p>
<p>HTML</p>
<pre class="prettyprint linenums"><code>&lt;div data-ng-app=&quot;new-directive&quot;&gt;
    &lt;unknown-markup-directive&gt;&lt;/unknown-markup-directive&gt;
&lt;/div&gt;
</code></pre><p>JS</p>
<pre class="prettyprint linenums"><code>angular.module(&quot;new-directive&quot;, []).directive(&quot;unknownMarkupDirective&quot;, function() {
    return {
        template : &quot;&lt;p&gt;Ceci a été créé par une Directive !&lt;/p&gt;&quot;
    };
});
</code></pre><p><strong>Démo</strong></p>
<div id="app4" data-ng-app="example4" class="demo">
    <div data-new-directive></div>
</div>

<blockquote>
<p><em><samp>Non</samp></em> <strong>Ce qui ne va pas</strong></p>
<p>Le problème ici c&#39;est que le code suivant <samp>&lt;unknown-markup-directive&gt;&lt;/unknown-markup-directive&gt;</samp> ne passe pas la validation car il n&#39;est pas permis en HTML d&#39;inventer ses propres balises. Cependant, l&#39;utilisation de directives étant fort pratique il est intéressant de savoir qu&#39;il est également possible de les utiliser en tant que nom d&#39;attribut ou nom de classe.</p>
</blockquote>
<hr class="invisible">

<blockquote>
<p><strong><samp>Oui</samp></strong> <strong>Ce qu&#39;il faut faire</strong></p>
<p>Aussi pour résoudre notre problème précédent, il suffit de faire comme suit :</p>
<p>HTML</p>
<pre class="prettyprint linenums"><code>&lt;div data-ng-app=&quot;new-directive&quot;&gt;
    &lt;div data-new-directive&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>JS</p>
<pre class="prettyprint linenums"><code>angular.module(&quot;new-directive&quot;, []).directive(&quot;newDirective&quot;, function() {
    return {
        /* On active l&#39;utilisation de la directive avec un attribut ! */
        restrict : &quot;A&quot;,
        template : &quot;&lt;p&gt;Ceci a été créé par une Directive !&lt;/p&gt;&quot;
    };
});
</code></pre></blockquote>
<h2 id="initialiser-le-scope-depuis-une-source-indexable">Initialiser le Scope depuis une source indexable</h2>
<p>Quand vous mettez en marche une application AngularJS avec un fichier JavaScript pour initialiser le <samp>$scope</samp> ou à travers <samp>data-ng-init</samp>, les informations sont bien attachées au couple View-Model (HTML-JS) mais rien n&#39;est indexable par les moteurs de recherche. Voyez plutôt.</p>
<p>HTML</p>
<pre class="prettyprint linenums"><code>&lt;div data-ng-app=&quot;pokemon&quot; data-ng-controller=&quot;popular&quot;&gt;
    &lt;p&gt;Pokemons Populaires&lt;/p&gt;
    &lt;ul&gt;
        &lt;li data-ng-repeat=&quot;pokemon in popularPokemons&quot;&gt;
            {{ pokemon.name }} est populaire.
            &lt;span data-ng-if=&quot;pokemon.cover&quot;&gt;
                &lt;strong&gt;Il est sur une pochette de jeu.&lt;/strong&gt;
            &lt;/span&gt;
            &lt;span data-ng-if=&quot;!pokemon.cover&quot;&gt;
                Il n&#39;est pas sur une pochette de jeu.
            &lt;/span&gt; -
            &lt;a href=&quot;javascript:;&quot; data-ng-click=&quot;remove($index)&quot;&gt;Supprimer&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;form data-ng-init=&quot;addPokemon={ cover: &#39;false&#39; }&quot;&gt;
        &lt;strong&gt;Vous en connaissez un autre ?&lt;/strong&gt;&lt;br&gt;
        Nom : &lt;input type=&quot;text&quot; data-ng-model=&quot;addPokemon.name&quot;&gt;&lt;br&gt;
        &lt;select data-ng-model=&quot;addPokemon.cover&quot;&gt;
            &lt;option value=&quot;false&quot;&gt;Il n&#39;est pas sur une pochette de jeu.&lt;/option&gt;
            &lt;option value=&quot;true&quot;&gt;Il est sur une pochette de jeu.&lt;/option&gt;
        &lt;/select&gt;
        &lt;button data-ng-click=&quot;add()&quot; data-ng-disabled=&quot;!addPokemon.name&quot;&gt;Ajouter&lt;/button&gt;
    &lt;/form&gt;
&lt;/div&gt;
</code></pre><p>JS</p>
<pre class="prettyprint linenums"><code>angular.module(&quot;pokemon&quot;, []).controller(&quot;popular&quot;, function($scope) {
    $scope.popularPokemons = [
        { name: &quot;Pikachu&quot;, cover: true }, 
        { name: &quot;Bulbizarre&quot;, cover: false }, 
        { name: &quot;Carapuce&quot;, cover: false }, 
        { name: &quot;Dracaufeu&quot;, cover: true }, 
        { name: &quot;Mewtwo&quot;, cover: false }, 
    ];
    $scope.add = function () {
        $scope.addPokemon.cover = ($scope.addPokemon.cover === &quot;true&quot;);
        $scope.popularPokemons.push($scope.addPokemon);
        $scope.addPokemon = { cover: &quot;false&quot; };
    }
    $scope.remove = function (pos) {
        $scope.popularPokemons.splice(pos, 1);
    }
});
</code></pre><p><strong>Démo</strong></p>
<div id="app3" data-ng-app="example3" data-ng-controller="controller3" class="demo">
    <p>Pokemons Populaires</p>
    <ul class="popular-pokemon-list">
        <li data-ng-if="false">
            <span class="pokemon">Pikachu</span> est populaire. 
            <span class="cover">
                <strong>Il est sur une pochette de jeu.</strong>
            </span>
        </li>
        <li data-ng-if="false">
            <span class="pokemon">Bulbizarre</span> est populaire. 
            <span>Il n&#39;est pas sur une pochette de jeu.</span>
        </li>
        <li data-ng-if="false">
            <span class="pokemon">Carapuce</span> est populaire. 
            <span> Il n&#39;est pas sur une pochette de jeu.</span>
        </li>
        <li data-ng-if="false">
            <span class="pokemon">Dracaufeu</span> est populaire. 
            <span class="cover">
                <strong>Il est sur une pochette de jeu.</strong>
            </span>
        </li>
        <li data-ng-if="false">
            <span class="pokemon">Mewtwo</span> est populaire. 
            <span>Il n&#39;est pas sur une pochette de jeu.</span>
        </li>
        <template class="popular-pokemon-template">
        <li data-ng-repeat="pokemon in popularPokemons">
            {{ pokemon.name }} est populaire.
            <span data-ng-if="pokemon.cover">
                <strong>Il est sur une pochette de jeu.</strong>
            </span>
            <span data-ng-if="!pokemon.cover">
                Il n&#39;est pas sur une pochette de jeu.
            </span> -
            <a href="javascript:;" data-ng-click="remove($index)">Supprimer</a>
        </li>
        </template>
    </ul>
    <br>
    <form data-ng-init="addPokemon={ cover: 'false' }">
        <strong>Vous en connaissez un autre ?</strong><br>
        Nom : <input type="text" data-ng-model="addPokemon.name">
        <select data-ng-model="addPokemon.cover">
            <option value="false">Il n&#39;est pas sur une pochette de jeu.</option>
            <option value="true">Il est sur une pochette de jeu.</option>
        </select><br>
        <button data-ng-click="add()" data-ng-disabled="!addPokemon.name">Ajouter</button>
    </form>
</div>

<blockquote>
<p><em><samp>Non</samp></em> <strong>Ce qui ne va pas</strong></p>
<p>Le problème ici, c&#39;est que pour un indexeur de contenu, ce morceau de code n&#39;a rien de très appétissant.</p>
<pre class="prettyprint linenums"><code>&lt;ul&gt;
    &lt;li data-ng-repeat=&quot;pokemon in popularPokemons&quot;&gt;
        {{ pokemon.name }} est populaire.
        &lt;span data-ng-if=&quot;pokemon.cover&quot;&gt;
            &lt;strong&gt;Il est sur une pochette de jeu.&lt;/strong&gt;
        &lt;/span&gt;
        &lt;span data-ng-if=&quot;!pokemon.cover&quot;&gt;
            Il n&#39;est pas sur une pochette de jeu.
        &lt;/span&gt; -
        &lt;a href=&quot;javascript:;&quot; data-ng-click=&quot;remove($index)&quot;&gt;Supprimer&lt;/a&gt;
    &lt;/li&gt;
&lt;/ul&gt;
</code></pre><ul>
<li>Nous allons donc le cacher aux yeux de l&#39;indexeur en expliquant que c&#39;est un <samp>&lt;template&gt;</samp> avec la balise HTML5 associée.</li>
<li>Nous allons également donner à manger le vrai contenu dans le code HTML source que nous allons cacher à l&#39;utilisateur.</li>
<li>Nous allons alimenter le <samp>$scope</samp> à partir du HTML comme référence et non plus le piéger dans le JavaScript.</li>
</ul>
</blockquote>
<hr class="invisible">

<blockquote>
<p><strong><samp>Oui</samp></strong> <strong>Ce qu&#39;il faut faire</strong></p>
<p>Modifions alors le code HTML qui va arriver du serveur et qui sera parfaitement indexable pour ce qui est du contenu et parfaitement ignoré pour ce qui est du template (la balise <samp>&lt;template&gt;</samp>).</p>
<p>HTML</p>
<pre class="prettyprint linenums"><code>&lt;!-- ... Début identique à la précédente version ... --&gt;
&lt;ul class=&quot;popular-pokemon-list&quot;&gt;
    &lt;li data-ng-if=&quot;false&quot;&gt;
        &lt;span class=&quot;pokemon&quot;&gt;Pikachu&lt;/span&gt; est populaire. 
        &lt;span class=&quot;cover&quot;&gt;
            &lt;strong&gt;Il est sur une pochette de jeu.&lt;/strong&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li data-ng-if=&quot;false&quot;&gt;
        &lt;span class=&quot;pokemon&quot;&gt;Bulbizarre&lt;/span&gt; est populaire.
        Il n&#39;est pas sur une pochette de jeu.
    &lt;/li&gt;
    &lt;li data-ng-if=&quot;false&quot;&gt;
        &lt;span class=&quot;pokemon&quot;&gt;Carapuce&lt;/span&gt; est populaire.
        Il n&#39;est pas sur une pochette de jeu.
    &lt;/li&gt;
    &lt;li data-ng-if=&quot;false&quot;&gt;
        &lt;span class=&quot;pokemon&quot;&gt;Dracaufeu&lt;/span&gt; est populaire. 
        &lt;span class=&quot;cover&quot;&gt;
            &lt;strong&gt;Il est sur une pochette de jeu.&lt;/strong&gt;
        &lt;/span&gt;
    &lt;/li&gt;
    &lt;li data-ng-if=&quot;false&quot;&gt;
        &lt;span class=&quot;pokemon&quot;&gt;Mewtwo&lt;/span&gt; est populaire.
        Il n&#39;est pas sur une pochette de jeu.
    &lt;/li&gt;
&lt;template class=&quot;popular-pokemon-template&quot;&gt;
    &lt;li data-ng-repeat=&quot;pokemon in popularPokemons&quot;&gt;
        {{ pokemon.name }} est populaire.
        &lt;span data-ng-if=&quot;pokemon.cover&quot;&gt;
            &lt;strong&gt;Il est sur une pochette de jeu.&lt;/strong&gt;
        &lt;/span&gt;
        &lt;span data-ng-if=&quot;!pokemon.cover&quot;&gt;
            Il n&#39;est pas sur une pochette de jeu.
        &lt;/span&gt; -
        &lt;a href=&quot;javascript:;&quot; data-ng-click=&quot;remove($index)&quot;&gt;Supprimer&lt;/a&gt;
    &lt;/li&gt;
&lt;/template&gt;
&lt;/ul&gt;
&lt;!-- ... Fin identique à la précédente version ... --&gt;
</code></pre><p>Dans notre exemple précédent, tous les <samp>data-ng-if</samp> vont être retiré du DOM et la version contenu dans <samp>&lt;template&gt;</samp> va être exécuté par AngularJS après avoir été activé à l&#39;aide du code suivant :</p>
<p>JS</p>
<pre class="prettyprint linenums"><code>/* Récupération du Template */
var template = document.getElementsByClassName(&quot;popular-pokemon-template&quot;)[0],
    /* Activation du Template par copie */
    content = document.importNode(template.content, true),
    /* Zone d&#39;atterrissage du conteru de Template */
    list = document.getElementsByClassName(&quot;popular-pokemon-list&quot;)[0],
    pokemons = list.getElementsByTagName(&quot;li&quot;),
    popularPokemons = [];
/* Alimentation du futur `Scope` Angular */
Array.prototype.forEach.call(pokemons, function (pokemon) {
    popularPokemons.push({ 
        name: pokemon.getElementsByClassName(&quot;pokemon&quot;)[0].textContent, 
        cover: (pokemon.getElementsByClassName(&quot;cover&quot;).length &gt; 0) ? true : false
    });
});
/* Dépôt du Template dans le DOM */
list.appendChild(content);
</code></pre><p>La variable <samp>popularPokemons</samp> peut ensuite être associée au <samp>Scope</samp> initial de AngularJS.</p>
<pre class="prettyprint linenums"><code>/* Module AngularJS */
angular.module(&quot;pokemon&quot;, []).controller(&quot;popular&quot;, function($scope) {
    $scope.popularPokemons = popularPokemons;
    /* ... Reste identique à la précédente version ... */
});
</code></pre><p><strong>Note :</strong></p>
<p>Libre à vous d&#39;utiliser la techno côté serveur qui vous délivrera le HTML près à être indexé par les moteurs. Voici un exemple en Node.js avec le module <a href="https://www.npmjs.com/package/node-atlas">NodeAtlas</a> (Utilisant le moteur de template <samp>EJS 2</samp>).</p>
<pre class="prettyprint linenums"><code>&lt;!-- ... --&gt;
&lt;ul class=&quot;popular-pokemon-list&quot;&gt;
    &lt;% for (var pokemon in pokemons) { %&gt;
    &lt;li data-ng-if=&quot;false&quot;&gt;
        &lt;span class=&quot;pokemon&quot;&gt;&lt;%- pokemon.name %&gt;&lt;/span&gt; est populaire.
        &lt;% if (pokemon.cover) { %&gt; 
        &lt;span class=&quot;cover&quot;&gt;
            &lt;strong&gt;Il est sur une pochette de jeu.&lt;/strong&gt;
        &lt;/span&gt;
        &lt;% } else { %&gt;
        Il n&#39;est pas sur une pochette de jeu.
        &lt;% } %&gt; 
    &lt;/li&gt;
    &lt;% } %&gt; 
&lt;template class=&quot;popular-pokemon-template&quot;&gt;
    &lt;li data-ng-repeat=&quot;pokemon in popularPokemons&quot;&gt;
        {{ pokemon.name }} est populaire.
        &lt;span data-ng-if=&quot;pokemon.cover&quot;&gt;
            &lt;strong&gt;Il est sur une pochette de jeu.&lt;/strong&gt;
        &lt;/span&gt;
        &lt;span data-ng-if=&quot;!pokemon.cover&quot;&gt;
            Il n&#39;est pas sur une pochette de jeu.
        &lt;/span&gt; -
        &lt;a href=&quot;javascript:;&quot; data-ng-click=&quot;remove($index)&quot;&gt;Supprimer&lt;/a&gt;
    &lt;/li&gt;
&lt;/template&gt;
&lt;/ul&gt;
&lt;!-- ... --&gt;
</code></pre></blockquote>
<h2 id="d-livrer-du-contenu-derri-re-chaque-url">Délivrer du contenu derrière chaque URL</h2>
<p>Si vous utilisez AngularJS pour quelque chose de plus complet que la vérification de formulaire, il est possible que votre site n&#39;est qu&#39;une seule et unique url d&#39;entrée actuellement.</p>
<p>Ainsi à la page <samp>http://www.mon-site.com/</samp> vous faites tourner le code suivant :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Angular pour le W3C et le SEO&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!-- AngularJS, applique toi ! --&gt;
    &lt;div data-ng-app=&quot;app&quot; data-ng-controller=&quot;main&quot;&gt;
        &lt;div data-main-module&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>JS</p>
<pre class="prettyprint linenums"><code>angular.module(&quot;app&quot;, []).controller(&quot;main&quot;, function($scope, $location, $sce) {
    // Liste de vos différentes pages.
    var content = {
        &quot;/&quot;: &quot;&lt;div&gt;&lt;!-- Contenu de Home --&gt;&lt;/div&gt;&quot;,
        &quot;/products/&quot;: &quot;&lt;div&gt;&lt;!-- Contenu de Products --&gt;&lt;/div&gt;&quot;,
        &quot;/contact/&quot;: &quot;&lt;div&gt;&lt;!-- Contenu de Contacts --&gt;&lt;/div&gt;&quot;,
    };
    // Afficher la bonne page en fonction du changement d&#39;url.
    $scope.$on(&quot;$locationChangeStart&quot;, function (event, next) {
        var hash = /\/#(\/[a-z]*\/?)/g.exec(next);
        $scope.content = $sce.trustAsHtml(content[hash ? hash[1] : &quot;/&quot;]);
    });
    // Changer artificiellement d&#39;url.
    $scope.goTo = function (url) {
        $location.path(url).replace();
    }
}).directive(&quot;mainModule&quot;, function() {
        return {
            restrict : &quot;A&quot;,
            template : &quot;&lt;div data-ng-bind-html=&#39;content&#39;&gt;&lt;/div&gt;&quot; + 
                       &quot;&lt;button data-ng-click=\&quot;goTo(&#39;/&#39;)\&quot;&gt;Accueil&lt;/button&gt;&quot; + 
                       &quot;&lt;button data-ng-click=\&quot;goTo(&#39;/products/&#39;)\&quot;&gt;Produits&lt;/button&gt;&quot; + 
                       &quot;&lt;button data-ng-click=\&quot;goTo(&#39;/contact/&#39;)\&quot;&gt;Contactez-nous&lt;/button&gt;&quot;
    };
});
</code></pre><p>et en cliquant sur chaque lien vous allez afficher les urls :</p>
<ul>
<li><a href="http://www.mon-site.com/#/">http://www.mon-site.com/#/</a></li>
<li><a href="http://www.mon-site.com/#/products/">http://www.mon-site.com/#/products/</a></li>
<li><a href="http://www.mon-site.com/#/contact/">http://www.mon-site.com/#/contact/</a></li>
</ul>
<p>avec pour chacune un contenu différent</p>
<p><strong>Démo</strong></p>
<div id="app5" data-ng-app="example5" data-ng-controller="controller5" class="demo">
    <div data-main-module></div>
</div>

<blockquote>
<p><em><samp>Non</samp></em> <strong>Ce qui ne va pas</strong></p>
<p>Vous constaterez en changeant de page via les boutons que vos urls contiennent toutes des <samp>#</samp>. Cela signifie que vous n&#39;avez pas changé de page car tout ce qui suit ce caractère n&#39;est pas interprété par les moteurs de recherche. L&#39;intégralité de votre site aux yeux de Google se résume a une unique page HTML... vide...</p>
<p>Nous avons également ajouté nous même du code JavaScript pour lier le changement d&#39;url à l&#39;état de la page, c-à-d que si vous changez à la main l&#39;url de votre bar d&#39;adresse pour une autre page existante celle-ci va s&#39;afficher ce qui vous permet au moins de partager des urls avec <samp>#</samp> avec vos amis et qu&#39;ils puissent arriver tout de même sur la bonne page.</p>
<p>Il y a deux choses à faire pour rendre cela SEO friendly.</p>
<ul>
<li>Il ne faut plus que les adresses contiennent de <samp>#</samp>, mais que ce soit de vrais adresses consultables si je me rends dessus.</li>
<li>Il faut qu&#39;en me rendant à chaque adresse directement, il y ai un code source initial en « response » à la « request » serveur qui puisse être indexé par des moteurs de recherche.</li>
</ul>
</blockquote>
<hr class="invisible">

<blockquote>
<p><strong><samp>Oui</samp></strong> <strong>Ce qu&#39;il faut faire</strong></p>
<p>L&#39;unique page précédente devient alors trois pages distinctes :</p>
<ul>
<li><a href="http://www.mon-site.com/">http://www.mon-site.com/</a></li>
<li><a href="http://www.mon-site.com/products/">http://www.mon-site.com/products/</a></li>
<li><a href="http://www.mon-site.com/contact/">http://www.mon-site.com/contact/</a></li>
</ul>
<p>avec sur chaque page, au retour « response » du serveur, le contenu dédié à la page.</p>
<p><strong>/</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Accueil&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!-- AngularJS, applique toi ! --&gt;
    &lt;div data-ng-app=&quot;app&quot; data-ng-controller=&quot;main&quot;&gt;
        &lt;div data-ng-if=&quot;false&quot;&gt;&lt;!-- Contenu de Home --&gt;&lt;/div&gt;
        &lt;div data-main-module&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>/products/</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Notre Wallpaper&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!-- AngularJS, applique toi ! --&gt;
    &lt;div data-ng-app=&quot;app&quot; data-ng-controller=&quot;main&quot;&gt;
        &lt;div data-ng-if=&quot;false&quot;&gt;&lt;!-- Contenu de Products --&gt;&lt;/div&gt;
        &lt;div data-main-module&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>/contact/</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Contactez-nous&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!-- AngularJS, applique toi ! --&gt;
    &lt;div data-ng-app=&quot;app&quot; data-ng-controller=&quot;main&quot;&gt;
        &lt;div data-ng-if=&quot;false&quot;&gt;&lt;!-- Contenu de Contact --&gt;&lt;/div&gt;
        &lt;div data-main-module&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.4.5/angular.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>C&#39;est ensuite que le code JavaScript va être parsé et que le pushState de AngularJS va être activé pour permettre aux utilisateur de changer l&#39;adresse dynamiquement (sans rechargement de page, c-à-d sans request/response) et de charger les contenus.</p>
<p>JS</p>
<p><strong>app.js</strong></p>
<pre class="prettyprint linenums"><code class="lang-js">angular.module(&quot;app&quot;, []).config(function($locationProvider) {
    $locationProvider.html5Mode(true);
}).controller(&quot;main&quot;, function($scope, $location, $sce) {
    // Liste de vos différentes pages.
    var content = {
        &quot;/&quot;: &quot;&lt;div&gt;&lt;!-- Contenu de Home --&gt;&lt;/div&gt;&quot;,
        &quot;/products/&quot;: &quot;&lt;div&gt;&lt;!-- Contenu de Products --&gt;&lt;/div&gt;&quot;,
        &quot;/contact/&quot;: &quot;&lt;div&gt;&lt;!-- Contenu de Contacts --&gt;&lt;/div&gt;&quot;,
    };
    // Changer d&#39;url.
    $scope.goTo = function (url) {
        $location.path(url).replace();
        $scope.content = $sce.trustAsHtml(content[url]);
    }
    // Charger la bonne page selon l&#39;url
    $scope.content = $sce.trustAsHtml(content[$location.url()]);
}).directive(&quot;mainModule&quot;, function() {
        return {
            restrict : &quot;A&quot;,
            template : &quot;&lt;div data-ng-bind-html=&#39;content&#39;&gt;&lt;/div&gt;&quot; + 
                       &quot;&lt;button data-ng-click=\&quot;goTo(&#39;/&#39;)\&quot;&gt;Accueil&lt;/button&gt;&quot; + 
                       &quot;&lt;button data-ng-click=\&quot;goTo(&#39;/products/&#39;)\&quot;&gt;Produits&lt;/button&gt;&quot; + 
                       &quot;&lt;button data-ng-click=\&quot;goTo(&#39;/contact/&#39;)\&quot;&gt;Contactez-nous&lt;/button&gt;&quot;
    };
});
</code></pre>
<p><strong>Comment ça marche ?</strong></p>
<p>Quand un moteur de recherche affiche l&#39;une des trois pages, celle-ci est indexé via sont url avec le contenu déjà présent dessus dans la source de la « response ».</p>
<p>Quand un utilisateur affiche l&#39;une des trois pages, son contenu initial est caché et <samp>app.js</samp> fait tourner l&#39;application en chargeant le bon contenu en fonction de l&#39;url. Après quoi, chaque fois que l&#39;utilisateur changera de page, sa page ne se rechargera pas (le code source initial sera toujours celui de la page d&#39;arrivée) mais sa barre d&#39;adresse changera bien et AngularJS mettra le contenu à jour. S&#39;il actualise la page depuis une autre url après navigation à travers plusieurs page, c&#39;est la nouvelle page que sera chargé depuis la « response » et le cycle recommencera.</p>
<p>Ce mécanisme est bien entendu possible avec le routage officiel d&#39;AngularJS avec <samp>$routeProvider</samp> et vous êtes libre d&#39;utiliser la technologie Back-end de votre choix pour afficher le bon contenu source derrière chaque url de votre site en retour de la « response ».</p>
<p><em>Exemple Live</em></p>
<p>Sur mon <a href="https://www.lesieur.name/">site de présentation</a> réalisé avec <a href="https://github.com/Haeresis/NodeAtlas">NodeAtlas</a>, en arrivant par l&#39;une de ses urls :</p>
<ul>
<li><a href="https://www.lesieur.name/bienvenue/">https://www.lesieur.name/bienvenue/</a></li>
<li><a href="https://www.lesieur.name/bepo/">https://www.lesieur.name/bepo/</a></li>
<li><a href="https://www.lesieur.name/a-propos/">https://www.lesieur.name/a-propos/</a></li>
<li>Etc.</li>
</ul>
<p>le code source de la « response » sera uniquement celui de l&#39;onglet ouvert. Tous le contenu des autres onglets sera chargé ultérieurement via des requêtes asynchrones. En changeant d&#39;onglet, l&#39;adresse changera mais pas le code source (la page ne sera pas rechargée, il n&#39;y aura plus de « request / response »). Si vous rechargez la page depuis une autre url que celle d&#39;arrivée, alors une « request / response » sera effectué avec seulement le contenu de cette page, et le reste viendra par contenu asynchrone, etc.</p>
</blockquote>
<h2 id="vos-astuces-w3c-et-seo-">Vos astuces W3C et SEO ?</h2>
<p>Il doit exister d&#39;autres situations ou de bonnes pratiques permettraient à du code AngularJS d&#39;être parfaitement référencé aussi j&#39;alimenterai cet article avec d&#39;autres exemples dans le futur.</p>
<p>Et vous ? Des méthodes à partager ? </p>
]]></description>
            <link>http://localhost:7776utiliser-angularjs-en-respectant-les-recommandations-w3c-et-seo/</link>
            <guid isPermaLink="false">56c4274bd1b7fe136fc2005b</guid>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <category><![CDATA[SEO]]></category>
            <category><![CDATA[Angular.js]]></category>
            <category><![CDATA[W3C]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Wed, 17 Feb 2016 15:20:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Gérer les Erreurs et les Exceptions en JavaScript]]></title>
            <description><![CDATA[<p>Une étape bien trop souvent oubliée lors de la réalisation de scripts JavaScript est la gestion des erreurs. On se contente de colmater les problèmes à l&#39;aide de <samp>try</samp>/<samp>catch</samp> quand ceux-ci sont remontés par l&#39;interpréteur et... et c&#39;est tout.</p>
<div style="text-align: center;"><img src="media/images/upload/error-or-exception.jpg" alt="&quot;Erreur ou Exception ?&quot;"></div>

<p>Voici les <a href="https://blog.lesieur.name/gerer-les-erreurs-et-les-exceptions-en-javascript/#erreurs-d-finir-retourner-et-utiliser-des-erreurs">3 principaux patterns a utilisés pour gérer vos erreurs JavaScript</a> dans les navigateurs ou dans Node.js et pour ceux qui ont le temps, un petit topo sur la différence entre Erreur et Exception.</p>
<h2 id="erreur-ou-exception-">Erreur ou Exception ?</h2>
<p>En JavaScript les Erreurs sont un type d&#39;objet à elles seules et se créent en utilisant la syntaxe suivante <samp>new Error()</samp>. Elles se manipulent comme un objet et peuvent être <samp>return</samp> ou mises dans des variables.</p>
<p>Les Exceptions quant à elles sont des Erreurs qui sont lancées ou jetées avec le mot clé <samp>throw</samp> soit <samp>throw new Error()</samp> et ne peuvent plus être manipulées. Elles mettent ainsi fin aux contextes d&#39;exécution les un après les autres en remontant jusqu&#39;à afficher une erreur dans la console. Elles peuvent être interceptées avec <samp>try</samp> et l&#39;erreur qu&#39;elles remontent peut être manipulée via <samp>catch (exception)</samp>.</p>
<h2 id="ne-pas-confondre-erreurs-de-d-veloppement-et-erreurs-op-rationnelles">Ne pas confondre erreurs de développement et erreurs opérationnelles</h2>
<p>Tout d&#39;abord, avant de pouvoir correctement gérer les erreurs, il va falloir faire la différence entre celles de type opérationnelles et celles de développement.</p>
<h3 id="erreurs-de-syntaxe-et-d-x-cution">Erreurs de syntaxe et d&#39;éxécution</h3>
<p>Les erreurs de développement sont des erreurs de syntaxe ou des bogues dans le programme. Ce sont des lignes qui peuvent toujours être réparées en changeant du code. Elles n&#39;ont jamais besoin d&#39;être interceptées. Ce sont des erreurs comme par exemple :</p>
<ul>
<li>Oublier une parenthèse (erreur de syntaxe).</li>
<li>Essayer de lire la propriété d&#39;une variable <samp>undefined</samp> (erreur d&#39;exécution).</li>
<li>Création d&#39;une fonction asynchone sans proposer de callback (erreur de conception).</li>
<li>Passer un primitif number quand un objet est attendu (erreur d&#39;exécution).</li>
<li>etc...</li>
</ul>
<p>Ajouter du code pour corriger ces erreurs n&#39;est jamais la solution, sinon c&#39;est la porte ouverte aux <a href="http://french.joelonsoftware.com/Articles/LeakyAbstractions.html">Abstractions qui Fuient</a>.</p>
<h3 id="erreurs-op-rationnelles">Erreurs opérationnelles</h3>
<p>Les erreurs opérationnelles sont les erreurs lancées par des programmes correctement écrit, ce ne sont pas des bogues dans les programmes mais des problèmes avec le système lui-même (hors mémoire, trop de fichiers ouvert, ...), la configuration système (pas de route pour l&#39;adresse demandée, ...), le réseau (socket refermée, ...), les services distants (erreur 500, connexion impossible, ...) ou les utilisateurs (des inputs non valides) et <strong>ce sont elles que vous devez veiller à intercepter pour les traiter ou à renvoyer pour que d&#39;autres fonctions puissent les traiter</strong>.</p>
<h2 id="erreur-d-finir-retourner-et-utiliser-des-erreurs">Erreur : définir, retourner et utiliser des erreurs</h2>
<p>Il y a donc 3 façons de « lancer » des erreurs opérationnelles en toutes sécurités, chacune dépendant de votre implémentation JavaScript.</p>
<h3 id="pour-du-code-synchrone">Pour du code synchrone</h3>
<p>Pour du code synchrone, si une erreur doit être levée, elle est retournée de la manière suivante :</p>
<pre class="prettyprint linenums"><code class="lang-js">// Définition d&#39;une fonction de division synchrone.
var divideSync = function (x, y) {
    &quot;use strict&quot;;

    // La division par 0 est décidée comme interdite.
    if (y === 0) {

        // On lève proprement une erreur en la retournant.
        return (new Error(&quot;Can&#39;t divide by zero&quot;)).code = &quot;ENOZER&quot;;
    }

    // S&#39;il n&#39;y a pas d&#39;erreur, on retourne le résultat.
    return x / y;
};
</code></pre>
<p>et on traite l&#39;erreur de cette façon :</p>
<pre class="prettyprint linenums"><code class="lang-js">(function () {
    &quot;use strict&quot;;

    // Diviser 4/0.
    var result = divideSync(4, 0);

    // Est-ce qu&#39;une erreur connue a été levée ?
    if (result instanceof Error &amp;&amp; result.code === &quot;ENOZER&quot;) { // Juste `(result instanceof Error)` pour une erreur inconnue.

        // Traiter l&#39;erreur.
        return console.log(&quot;4/0 = Error, &quot;, result); // 4/0 = Error, Can&#39;t divide by zero
    }

    // S&#39;il n&#39;y a pas d&#39;erreur, on retourne le résultat.
    console.log(&quot;4/0 = &quot; + result);
}());
</code></pre>
<h5 id="pour-du-code-bas-sur-une-callback">Pour du code basé sur une Callback</h5>
<p>Pour du code basé sur une callback (utilisée pour les fonctions asynchrones entre autre), le premier paramètre de la Callback est <samp>err</samp>. Si une erreur doit être levée, <samp>err</samp> est un <samp>new Error()</samp>, sinon, <samp>err</samp> est <samp>null</samp>. Après, n&#39;importe quels types de paramètre peuvent suivre :</p>
<pre class="prettyprint linenums"><code class="lang-js">// Définition d&#39;une fonction de division avec callback.
var divide = function(x, y, next) {
    &quot;use strict&quot;;

    // La division par 0 est décidée comme interdite.
    if (y === 0) {

        // On lève une erreur proprement en appelant la callback
        // avec en premier paramètre l&#39;erreur souhaitée.
        return next((new Error(&quot;Can&#39;t divide by zero&quot;)).code = &quot;ENOZER&quot;);
    }

    // S&#39;il n&#39;y a pas d&#39;erreur, on retourne le résultat.
    next(null, x / y);
};
</code></pre>
<p>et on traite l&#39;erreur de cette façon :</p>
<pre class="prettyprint linenums"><code class="lang-js">divide(4, 0, function (err, result) {

    // Est-ce qu&#39;une erreur connue a été levée ?
    if (err &amp;&amp; err.code === &quot;ENOZER&quot;) { // Juste `(err)` pour une erreur inconnue.

        // Traiter l&#39;erreur.
        return console.log(&quot;4/0 = Error, &quot;, err); // 4/0 = Error, Can&#39;t divide by zero
    }

    // S&#39;il n&#39;y a pas d&#39;erreur, on retourne le résultat.
    console.log(&quot;4/0 = &quot; + result);
});
</code></pre>
<h5 id="pour-un-v-nement">Pour un Événement</h5>
<p>Pour un code événementiel, si une erreur doit être levée, un événement de type <samp>error</samp> est émis.</p>
<p>En premier lieux, ajoutons la possibilité d’émettre et d&#39;écouter des événements à un objet.</p>
<pre class="prettyprint linenums"><code class="lang-js">// Définition d&#39;un événement de division.
var events = require(&#39;events&#39;), // Utiliser EventEmitter côté client `http://smalljs.org/object/events/event-emitter/`
    Divider = function () {
        &quot;use strict&quot;;

        events.EventEmitter.call(this);
    };
require(&#39;util&#39;).inherits(Divider, events.EventEmitter);
</code></pre>
<p>puis ajoutons une fonctionnalité de division à notre objet :</p>
<pre class="prettyprint linenums"><code class="lang-js">// Ajout d&#39;une fonction de division.
Divider.prototype.divide = function (x, y) {
    &quot;use strict&quot;;

    // La division par 0 est décidée comme interdite.
    if (y === 0) {

        // On lève proprement une erreur en l’émettant.
        this.emit(&quot;error&quot;, (new Error(&quot;Can&#39;t divide by zero&quot;)).code = &quot;ENOZER&quot;);
    } else {

        // S&#39;il n&#39;y a pas d&#39;erreur, on retourne le résultat.
        this.emit(&quot;divided&quot;, x, y, x / y);
    }

    // Permettre le chaînage.
    return this;
};
</code></pre>
<p>et on traite l&#39;erreur de cette façon :</p>
<pre class="prettyprint linenums"><code class="lang-js">// Créer un nouveau diviseur.
var divider = new Divider();

// Gérer les erreurs.
divider.on(&quot;error&quot;, function (err) {
    &quot;use strict&quot;;

    // Est-ce qu&#39;une erreur connue a été levée ?
    if (err.code === &quot;ENOZER&quot;) { // Pas de condition pour une erreur inconnue.
        // Traiter l&#39;erreur.
        return console.log(&quot;4/2=err&quot;, err);
    }
});

// Gérer le résultat.
divider.on(&#39;divided&#39;, function (x, y, result) {
    &quot;use strict&quot;;

    // S&#39;il n&#39;y a pas d&#39;erreur, on retourne le résultat.
    console.log(&quot;4/2=&quot; + result);
});

// Division réussi puis division levant une erreur après chaînage.
divider.divide(4, 2).divide(4, 0);
</code></pre>
<h2 id="exception-intercepter-et-lancer-des-erreurs-avec-try-catch-et-throw-">Exception : intercepter et lancer des erreurs avec <samp>try</samp>, <samp>catch</samp> et <samp>throw</samp>.</h2>
<p>L&#39;exemple qui suit ne fait pas partie des 3 patterns de bonne pratique dont nous avons parlé un peu plus tôt mais il est important de le connaître car ce n&#39;est qu&#39;ainsi que vous pourrez créer ce que l&#39;on appel des <strong>exceptions</strong> et que vous pourrez intercepter celles lancées par l&#39;interpréteur JavaScript.</p>
<h3 id="lancer-une-exception">Lancer une Exception</h3>
<p>Vous ne devriez que rarement (voir jamais) utiliser le mot clé <samp>throw</samp>. Ce mot-clé transforme les <samp>new Error()</samp> en exceptions et ont pour but d&#39;afficher des erreurs dans les consoles d&#39;erreur et de mettre fin à l&#39;interprétation du code restant, c&#39;est pourquoi elles <strong>ne devraient jamais être utilisée pour représenter des erreurs opérationnelles</strong>. De plus, il est impossible d&#39;utiliser <samp>try</samp> / <samp>catch</samp> pour intercepter une erreur lancée autour d&#39;une fonction asynchrone.</p>
<p>Voici donc le <samp>throw</samp> pour lancer une erreur, c-à-d créer une exception :</p>
<pre class="prettyprint linenums"><code class="lang-javascript">throw new Error(&quot;The exception message.&quot;);
</code></pre>
<h3 id="intercepter-une-exception">Intercepter une Exception</h3>
<p>Pour intercepter une exception il suffit d&#39;utiliser les mots-clés <samp>try</samp> / <samp>catch</samp> :</p>
<pre class="prettyprint linenums"><code class="lang-javascript">try {
    var code = &quot;EXAMPL&quot;;

    throw new Error(&quot;Simulation of an Error throwed.&quot;);
} catch (exception) {
    return exception.code; // &quot;EXAMPL&quot;
}
</code></pre>
<p>À vous de jouer !</p>
]]></description>
            <link>http://localhost:7776gerer-les-erreurs-et-les-exceptions-en-javascript/</link>
            <guid isPermaLink="false">5650f0e6d1b7fe136fc20059</guid>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[Node.js]]></category>
            <category><![CDATA[Ressources]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Sat, 21 Nov 2015 17:32:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Vanilla JS - Documentation en français]]></title>
            <description><![CDATA[<div class="h1-like"><span>Vanilla JS</span><img src="media/images/upload/vanillajs.jpg" width="200" alt="Vanilla JS"></div>

<p class="lead"><strong><span class="vanillajs">Vanilla JS</span> est <span class="mask">un framework</span> rapide, léger et multi-plateforme pour créer d&#39;incroyables et puissantes applications JavaScript</strong></p>





<h2 id="introduction">Introduction</h2>
<p><a href="https://twitter.com/HaeresisDotFr">L&#39;équipe de <span class="vanillajs">Vanilla JS</span></a> maintient le moindre petit octet de code <span class="mask">du framework</span> et travaille dur chaque jour pour être sûr qu&#39;il reste léger et intuitif. Qui utilise <span class="vanillajs">Vanilla JS</span> ? Content que vous vous le demandiez ! En voici quelques uns :</p>
<ul class="used-by">
    <li>Google</li>
    <li>Facebook</li>
    <li>YouTube</li>
    <li>Yahoo</li>
    <li>Wikipedia</li>
    <li>Windows Live</li>
    <li>Twitter</li>
    <li>Amazon</li>
    <li>LinkedIn</li>
    <li>MSN</li>
    <li>eBay</li>
    <li>Microsoft</li>
    <li>Tumblr</li>
    <li>Apple</li>
    <li>Pinterest</li>
    <li>PayPal</li>
    <li>Reddit</li>
    <li>Netflix</li>
    <li>Stack Overflow</li>
</ul>

<p>En fait, <span class="vanillajs">Vanilla JS</span> est déjà utilisé sur plus de sites que jQuery, Prototype JS, MooTools, YUI, et Google Web Toolkit - <em>réunis</em> !</p>
<h2 id="t-l-charger">Télécharger</h2>
<p>Prêt à utiliser <span class="vanillajs">Vanilla JS</span> ? Choisissez exactement ce dont vous avez besoin !</p>
<div class="customizer-options">
    <label class="selected disabled"><input type="checkbox" name="core" checked="checked" disabled="disabled"> Core Functionality</label>
    <label><input type="checkbox">AJAX</label>
    <label><input type="checkbox">DOM (Parcours / Sélections)</label>
    <label><input type="checkbox">Prototype-based Object System</label>
    <label><input type="checkbox">Animations</label>
    <label><input type="checkbox">Event System</label>
    <label><input type="checkbox">Regular Expressions</label>
    <label><input type="checkbox">Closures</label>
    <label><input type="checkbox">Math Library</label>
    <label><input type="checkbox">Array Library</label>
    <label><input type="checkbox">String Library</label>
    <label><input type="checkbox">Date Library</label>
    <label><input type="checkbox">Functions as first-class objects</label>
    <h3>Options</h3>
    <label><input type="checkbox">Minifier le code source</label>
    <label><input type="checkbox">Sortie en UTF8</label>
    <label><input type="checkbox">Utiliser des retours &quot;CRLF&quot; (Windows)</label>
</div>
<div class="customizer-estimate">
    <strong>Taille du fichier :</strong>
    <span class="customizer-estimate-uncompressed"><span class="value"><span class="no-readable">0 octets</span><span class="readable">0 Ko</span></span><span class="loading"><span class="loader"></span></span> </span> non minifié,
    <span class="customizer-estimate-gzipped" class=""><span class="value"><span class="no-readable">34 octets</span><span class="readable">0.03 Ko</span></span><span class="loading"><span class="loader"></span></span></span> gzippé.
    (<a class="human-size" href="javascript:;"><span class="no-readable">Taille lisible</span><span class="readable">Taille réelle</span></a>)
</div>

<form class="download" action="media/scripts/upload/vanilla.js.gz" method="post">
    <button>Télécharger</button> <a href="https://github.com/Haeresis/vanilla-js">Source sur GitHub</a> / <a href="https://www.npmjs.com/package/vanilla-js-dom">Npm Package</a>
</form>

<p><a href="https://www.paypal.me/BrunoLesieur/5"><img src="https://img.shields.io/badge/don-%E2%9D%A4-ddddff.svg" alt="Faites un don"></a> <a href="https://github.com/Haeresis/NodeAtlas"><img src="https://img.shields.io/badge/build-passing-brightgreen.svg" alt="Build Passing"></a> <a href="https://github.com/Haeresis/NodeAtlas"><img src="https://img.shields.io/badge/version-5.6-brightgreen.svg" alt="Version 5.6"></a> <a href="http://docs.sonarqube.org/display/PLUG/JavaScript+Plugin"><img src="https://img.shields.io/badge/debt_ratio-0%25-brightgreen.svg" alt="Technical Debt Ratio"></a></p>
<h2 id="t-moignages">Témoignages</h2>
<div class="testimonials">
    <blockquote class="testimonial"><em>« Le support natif de HTML5 et les autres technologies modernes on fait de Vanilla JS mon préféré, petit à petit. »</em></blockquote>
    <blockquote class="testimonial is-displayed"><em>« Vanilla JS est un concentré d&#39;objet, il est taillé pour des applications JavaScript Orientées Objet. »</em></blockquote>
<blockquote class="testimonial"><em>« Vanilla JS est le <span class="mask">framework</span> JavaScript le plus simple et compréhensif que j&#39;ai jamais utilisé. »</em></blockquote>
    <blockquote class="testimonial"><em>« Vous ne trouverez pas plus rapide que Vanilla JS ! »</em></blockquote>
</div>





<h2 id="commencer-avec-vanilla-js">Commencer avec Vanilla JS</h2>
<p><a href="https://twitter.com/HaeresisDotFr">L&#39;équipe de <span class="vanillajs">Vanilla JS</span></a> est fière du fait que c&#39;est <strong>le code <span class="mask">de framework</span> le plus léger que vous puissiez trouver</strong> ; en utilisant notre <strong>stratégie de déploiement</strong>, vos visiteurs auront déjà chargés en mémoire <span class="vanillajs">Vanilla JS</span> avant que la moindre requête n&#39;est été faite à votre site !</p>
<p>Pour utiliser <span class="vanillajs">Vanilla JS</span>, mettez juste le code suivant n&#39;importe où dans votre application HTML :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;script src=&quot;chemin/vers/vanilla.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>Quand vous êtes prêt à déployer votre application dans votre environnement de production, optez pour la plus rapide des méthodes, voyez plutôt :</p>
<pre class="prettyprint linenums"><code class="lang-html"> </code></pre>

<p><strong>C&#39;est tout - pas de code</strong>. <span class="vanillajs">Vanilla JS</span> est <em>tellement populaire</em> que les navigateurs le chargent automatiquement !</p>
<h2 id="comparaison-de-vitesse-d-ex-cution">Comparaison de vitesse d&#39;exécution</h2>
<p>Voici quelques exemples démontrant ô combien <span class="vanillajs">Vanilla JS</span> est vraiment rapide. Quand <span class="vanillajs">Vanilla JS</span> réalise 100 opérations, les autres en réalisent :</p>
<h3 id="retrouver-un-l-ment-du-dom-par-id">Retrouver un élément du DOM par ID</h3>
<div class="table three">
<table>
    <tr>
        <th></th>
        <th>100 ops <span class="vanillajs">Vanilla JS</span></th>
        <th>Code</th>
    </tr>
    <tr>
        <td><span class="vanillajs">Vanilla JS</span></td>
        <td><span class="opssec">100</span><span class="bar" style="width:100%"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/RWeqaB">document.getElementById(&quot;vanilla&quot;);</a></td>
    </tr>
    <tr>
        <td>Dojo</td>
        <td><span class="opssec">92</span><span class="bar" style="width:92%"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/yYQjxp">dojo.byId(&quot;dojo&quot;);</a></td>
    </tr>
    <tr>
        <td>Prototype JS</td>
        <td><span class="opssec">57</span><span class="bar" style="width:57%;"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/yYQjEP">$(&quot;prototype&quot;);</a></td>
    </tr>
    <tr>
        <td>jQuery</td>
        <td><span class="opssec">42</span><span class="bar" style="width:42%;"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/EVOLLe">$(&quot;#jquery&quot;);</a></td>
    </tr>
    <tr>
        <td>MooTools</td>
        <td><span class="opssec">24</span><span class="bar" style="width:24%;"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/gaQzQr">document.id(&quot;mootools&quot;);</a></td>
    </tr>
</table>
</div>

<h3 id="retrouver-10-l-ments-du-dom-par-tag-name">Retrouver 10 éléments du DOM par tag name</h3>
<div class="table three">
<table>
    <tr>
        <th></th>
        <th>100 ops <span class="vanillajs">Vanilla JS</span></th>
        <th>Code</th>
    </tr>
    <tr>
        <td><span class="vanillajs">Vanilla JS</span></td>
        <td><span class="opssec">100</span><span class="bar" style="width:100%"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/BoGVzd">document.getElementsByTagName(&quot;div&quot;);</a></td>
    </tr>
    <tr>
        <td>Prototype JS</td>
        <td><span class="opssec">25</span><span class="bar" style="width:25%;"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/LpXrOG">Prototype.Selector.select(&quot;div&quot;, document);</a></td>
    </tr>
    <tr>
        <td>jQuery</td>
        <td><span class="opssec">21</span><span class="bar" style="width:21%;"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/BoGVmJ">$(&quot;div&quot;);</a></td>
    </tr>
    <tr>
        <td>Dojo</td>
        <td><span class="opssec">3</span><span class="bar" style="width:3%;"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/dYQKJX">dojo.query(&quot;div&quot;);</a></td>
    </tr>
    <tr>
        <td>MooTools</td>
        <td><span class="opssec">2</span><span class="bar" style="width:2%;"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/qOQKxO">Slick.search(document, &quot;div&quot;, new Elements);</a></td>
    </tr>
</table>
</div>

<h3 id="vanilla-js-vs-jquery">Vanilla JS vs jQuery</h3>
<h4 id="retrouver-10-l-ments-du-dom-par-class-name">Retrouver 10 éléments du DOM par class name</h4>
<div class="table three">
<table>
    <tr>
        <th></th>
        <th>100 ops <span class="vanillajs">Vanilla JS</span></th>
        <th>Code</th>
    </tr>
    <tr>
        <td><span class="vanillajs">Vanilla JS</span></td>
        <td><span class="opssec">100</span><span class="bar" style="width:100%"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/ZbmRMN">document.getElementsByClassName(&quot;vanilla&quot;);</a></td>
    </tr>
    <tr>
        <td>jQuery</td>
        <td><span class="opssec">17</span><span class="bar" style="width:17%;"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/jbQKeQ">$(&quot;.jquery&quot;);</a></td>
    </tr>
</table>
</div>

<h4 id="retrouver-un-l-ment-du-dom-avec-le-s-lecteur-id-inner-span-">Retrouver un élément du DOM avec le sélecteur <samp>&lt;#id&gt; .inner span</samp></h4>
<div class="table three">
<table>
    <tr>
        <th></th>
        <th>100 ops <span class="vanillajs">Vanilla JS</span></th>
        <th>Code</th>
    </tr>
    <tr>
        <td><span class="vanillajs">Vanilla JS</span></td>
        <td><span class="opssec">100</span><span class="bar" style="width:100%"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/PPxaVQ">document.querySelector(&quot;#vanilla .inner span&quot;);</a></td>
    </tr>
    <tr>
        <td>jQuery</td>
        <td><span class="opssec">33</span><span class="bar" style="width:33%;"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/YyRvgQ">$(&quot;#jquery .inner span&quot;);</a></td>
    </tr>
</table>
</div>

<h4 id="retrouver-10-l-ments-du-dom-avec-le-s-lecteur-classname-inner-span-">Retrouver 10 éléments du DOM avec le sélecteur <samp>&lt;.className&gt; .inner span</samp></h4>
<div class="table three">
<table>
    <tr>
        <th></th>
        <th>100 ops <span class="vanillajs">Vanilla JS</span></th>
        <th>Code</th>
    </tr>
    <tr>
        <td><span class="vanillajs">Vanilla JS</span></td>
        <td><span class="opssec">100</span><span class="bar" style="width:100%"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/gaQKJv">document.querySelectorAll(&quot;.vanilla .inner span&quot;);</a></td>
    </tr>
    <tr>
        <td>jQuery</td>
        <td><span class="opssec">51</span><span class="bar" style="width:51%;"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/ojQyrZ">$(&quot;.jquery .inner span&quot;);</a></td>
    </tr>
</table>
</div>

<h3 id="performance-des-s-lecteurs-vanilla-js">Performance des sélecteurs Vanilla JS</h3>
<p>Les tests sont tous effectués sur le code suivant <samp>&lt;section id=&quot;vanilla&quot; class=&quot;vanilla&quot;&gt;&lt;article class=&quot;inner&quot;&gt;&lt;div class=&quot;target&quot; id=&quot;target&quot;&gt;&lt;/div&gt;&lt;/article&gt;&lt;/section&gt;</samp>.</p>
<div class="table two">
<table>
    <tr>
        <th>100 ops <span class="vanillajs">Vanilla JS</span></th>
        <th>Selectionner le noeud <samp>&lt;div class=&quot;target&quot; id=&quot;target&quot;&gt;&lt;/div&gt;</samp></th>
    </tr>
    <tr>
        <td><span class="opssec">100</span><span class="bar" style="width:100%"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/PPxdWo">document.getElementsByTagName(&quot;div&quot;);</a></td>
    </tr>
    <tr>
        <td><span class="opssec">99</span><span class="bar" style="width:99%"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/xwQaEz">document.getElementById(&quot;target&quot;);</a></td>
    </tr>
    <tr>
        <td><span class="opssec">96</span><span class="bar" style="width:96%"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/epQLBG">document.getElementsByClassName(&quot;target&quot;);</a></td>
    </tr>
    <tr>
        <td><span class="opssec">68</span><span class="bar" style="width:68%"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/qOQMRJ">document.querySelector(&quot;.vanilla .inner div&quot;);</a></td>
    </tr>
    <tr>
        <td><span class="opssec">35</span><span class="bar" style="width:35%"></span></td>
        <td><a href="http://codepen.io/Haeresis/pen/epQLve">document.querySelectorAll(&quot;.vanilla .inner div&quot;);</a></td>
    </tr>
</table>
</div>





<h2 id="passer-de-jquery-vanilla-js">Passer de jQuery à Vanilla JS</h2>
<p>Vous trouverez ici la liste non exhaustive de tâches courantes dans <span class="vanillajs">Vanilla JS</span> en comparaison avec (par exemple) jQuery.</p>
<p><em>Effectivement, lors de la création d&#39;API, il est souvent plus judicieux de développer sans dépendance à jQuery (par exemple) et de lui préférer seulement <span class="mask">une dépendance à</span> <span class="vanillajs">Vanilla JS</span>.</em></p>
<p><strong>Légende</strong></p>
<p>Pour bien comprendre les types d&#39;objets représentés, utilisez cette liste :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;div class=&quot;example&quot;&gt;
  &lt;span&gt;(Text into) Html Element&lt;/span&gt;
  &lt;!-- Comment Element --&gt;
  Text Element
  &lt;span&gt;(Text into) Html Element&lt;/span&gt;
&lt;/div&gt;
</code></pre>
<ul>
<li><samp>querySelector(&quot;.example&quot;)</samp> retourne un <samp>HTMLElement</samp>.</li>
<li><samp>querySelector(&quot;.example&quot;).children</samp> retourne une <samp>HTMLCollection</samp>, chaque item de la collection est un <samp>HTMLElement</samp> soit deux <samp>[span, span]</samp>.</li>
<li><samp>querySelector(&quot;.example&quot;).childNodes</samp> retourne une <samp>NodeList</samp>, chaque item de la collection est un <samp>Node</samp>, ici sept <samp>[text, span, text, comment, text, span, text]</samp>.</li>
<li><samp>querySelector(&quot;.example&quot;).childNodes[0]</samp> retourne un <samp>Node</samp> de <samp>typeNode</samp> 3, soit du texte. (<samp>...nodeList[3]</samp> est de <samp>typeNode</samp> 8 soit un commentaire).</li>
</ul>
<h3 id="-node-selecteur">.Node #Selecteur</h3>
<h4 id="-span-id-span-"><span>#id</span></h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir un noeud par son ID...</p>
        <pre class="prettyprint linenums"><code class="lang-js">var htmlElement = $(&quot;#id&quot;)[0];</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var htmlElement = document.getElementById(&quot;id&quot;);</code></pre>
    </blockquote>
</div>

<h4 id="-classname-id-tagname">.classname #id tagname</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir un noeud avec un sélecteur...</p>
        <pre class="prettyprint linenums"><code class="lang-js">var htmlElement = $(&quot;#id .classname tagname&quot;)[0];</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var htmlElement = document.querySelector(&quot;#id .classname tagname&quot;);</code></pre>
    </blockquote>
</div>

<h4 id="-classname-id-tagname-">[.classname #id tagname]</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir plusieurs noeuds avec un sélecteur...</p>
<pre class="prettyprint linenums"><code class="lang-js">$(&quot;#id .classname tagname&quot;).each(function (i, htmlElement) {
    htmlElement;
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
<pre class="prettyprint linenums"><code class="lang-js">var nodeList = document.querySelectorAll(&quot;#id .classname tagname&quot;); // Not Live (Snapshot)
[].forEach.call(nodeList, function (node) {
    node;
});</code></pre>
    </blockquote>
</div>

<h4 id="-classname-">[.classname]</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir un noeud par son Tag Name...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&quot;.classname&quot;).each(function (i, htmlElement) {
    htmlElement;
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var htmlCollection = document.getElementsByClassName(&quot;classname&quot;); // Live
// var nodeList = document.querySelectorAll(&quot;.classname&quot;); // Not Live (Snapshot)
[].forEach.call(htmlCollection, function (htmlElement) {
    htmlElement;
});</code></pre>
    </blockquote>
</div>

<h4 id="-name-">[name]</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir un noeud par son attribut Name...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&#39;[name=&quot;classname&quot;]&#39;).each(function (i, htmlElement) {
    htmlElement;
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var nodeList = document.getElementsByName(&quot;name&quot;); // Live
// var nodeList = document.querySelectorAll(&quot;[name=name]&quot;); // Not Live (Snapshot)
[].forEach.call(nodeList, function (node) {
    node;
});</code></pre>
    </blockquote>
</div>

<h4 id="-tagname-">[tagname]</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir un noeud par son Tag Name...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&quot;tagname&quot;).each(function (i, htmlElement) {
    htmlElement;
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var htmlCollection = document.getElementsByTagName(&quot;tagname&quot;); // Live
// var nodeList = document.querySelectorAll(&quot;tagname&quot;); // Not Live (Snapshot)
[].forEach.call(htmlCollection, function (htmlElement) {
    htmlElement;
});</code></pre>
    </blockquote>
</div>

<h4 id="inverted-loop">Inverted Loop</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Parcourir les noeuds dans leur ordre inverse...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$($(&quot;.className&quot;).get().reverse()).each(function (i, htmlElement) {
    htmlElement;
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var htmlCollection = document.getElementsByClassName(&quot;className&quot;), // Live
    i = htmlCollection.length;
while (htmlElement = htmlCollection[--i]) {
    htmlElement;
}</code></pre>
    </blockquote>
</div>

<h3 id="attributs">ATTRIBUTS</h3>
<h4 id="add-class">Add Class</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Ajouter une classe...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).addClass(&lt;className&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.classList.add(&lt;className&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="get-attribute">Get Attribute</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir un attribut d&#39;un noeud HTML...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).attr(&lt;attributeName&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.getAttribute(&lt;attributeName&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="get-data">Get Data</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir une donnée d&#39;un noeud HTML...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).data(&lt;dataName&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.getAttribute(&lt;&quot;data-&quot; + dataName&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="get-value">Get Value</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir la valeur d&#39;un champ de formulaire...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).value();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.value;</code></pre>
    </blockquote>
</div>

<h4 id="has-class">Has Class</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Vérifier la présence d&#39;une classe...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).hasClass(&lt;className&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.classList.contains(&lt;className&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="remove-attribute">Remove Attribute</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Retirer un attribut...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).removeAttr(&lt;attributeName&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.removeAttribute(&lt;attributeName&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="remove-class">Remove Class</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Retirer une classe...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).removeClass(&lt;className&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.classList.remove(&lt;className&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="remove-data">Remove Data</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Retirer une donnée d&#39;un noeud HTML...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).removeData(&lt;dataName&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.removeAttribute(&lt;&quot;data-&quot; + dataName&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="set-attribute">Set Attribute</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Définir un attribut d&#39;un noeud HTML...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).attr(&lt;attributeName&gt;, &lt;value&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.setAttribute(&lt;attributeName&gt;, &lt;value&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="set-data">Set Data</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Définir une donnée d&#39;un noeud HTML...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).data(&lt;dataName&gt;, &lt;value&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.setAttribute(&lt;&quot;data-&quot; + dataName&gt;, &lt;value&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="set-value">Set Value</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Définir la valeur d&#39;un champ de formulaire...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).value(&lt;value&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.value = &lt;value&gt;;</code></pre>
    </blockquote>
</div>

<h4 id="toggle-class">Toggle Class</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Retirer ou ajouter une classe...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).toggleClass(&lt;className&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.classList.toggle(&lt;className&gt;);</code></pre>
    </blockquote>
</div>

<h3 id="ajax">AJAX</h3>
<h4 id="get">GET</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Enyoyer des informations à une URL par méthode GET...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.ajax({
  type: &quot;GET&quot;,
  url: &lt;url&gt;,
  data: &lt;data&gt;
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var get = new XMLHttpRequest();
get.open(&quot;GET&quot;, &lt;url&gt;, true);
get.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded; charset=UTF-8&quot;);
get.send(&lt;data&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="json">JSON</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Récupérer des informations au format JSON...</p>
        <pre class="prettyprint linenums"><code class="lang-js">function getJSON(url, next) {
    $.getJSON(url, function (data) {
      next(null, data);
    }).error(function () {
      next(new Error(&quot;There was a connection error of some sort.&quot;));
    });
}

getJSON(&lt;url&gt;, function (err, data) {
    if (err) {
      return err;
    }

    data;
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">function getJSON(url, next) {
    var request = new XMLHttpRequest();
    request.open(&quot;GET&quot;, url, true);
    request.send();

    request.addEventListener(&quot;load&quot;, function () {
        if (request.status &lt; 200 &amp;&amp; request.status &gt;= 400) {
            return next(new Error(&quot;We reached our target server, but it returned an error.&quot;));
        }

        next(null, JSON.parse(request.responseText));
    });

    request.addEventListener(&quot;error&quot;, function () {
        next(new Error(&quot;There was a connection error of some sort.&quot;));
    });
}

getJSON(&lt;url&gt;, function (err, data) {
    if (err) {
      return err;
    }

    data;
});</code></pre>
    </blockquote>
</div>

<h4 id="post">POST</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Enyoyer des informations à une URL par méthode POST...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.ajax({
  type: &quot;POST&quot;,
  url: &lt;url&gt;,
  data: &lt;data&gt;
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var post = new XMLHttpRequest();
post.open(&quot;POST&quot;, &lt;url&gt;, true);
post.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded; charset=UTF-8&quot;);
post.send(&lt;data&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="request-response">Request / Response</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Récupérer le contenu d&#39;une URL...</p>
        <pre class="prettyprint linenums"><code class="lang-js">function request(url, next) {
    $.ajax({
        type: &#39;GET&#39;,
        url: url,
        success: function(response) {
          next(null, response);
        },
        error: function() {
          next(new Error(&quot;There was a connection error of some sort.&quot;));
        }
    });
}

request(&lt;url&gt;, function (err, response) {
    if (err) {
      return err;
    }

    response;
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">function request(url, next) {
    var request = new XMLHttpRequest();
    request.open(&quot;GET&quot;, url, true);
    request.send();

    request.addEventListener(&quot;load&quot;, function () {
        if (request.status &lt; 200 &amp;&amp; request.status &gt;= 400) {
            return next(new Error(&quot;We reached our target server, but it returned an error.&quot;));
        }

        next(null, request.responseText);
    });

    request.addEventListener(&quot;error&quot;, function () {
        return next(new Error(&quot;There was a connection error of some sort.&quot;));
    });
}

request(&gt;url&gt;, function (err, response) {
    if (err) {
      return err;
    }

    response;
});</code></pre>
    </blockquote>
</div>

<h3 id="-ffets">ÉFFETS</h3>
<h4 id="animation">Animation</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Animer une propriété...</p>
        <pre class="prettyprint linenums"><code class="lang-js">function fadeIn($element, speed, next) {
    $element.css(&quot;opacity&quot;, &quot;0&quot;).animate({ opacity: 1 }, speed, next);
}
fadeIn($(&lt;htmlElement&gt;), 2000, function () {
  $(this).css(&quot;opacity&quot;, &quot;&quot;);
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">function fadeIn(htmlElement, speed, next) {
    var last = +new Date(),
        tick = function () {
            htmlElement.style.opacity = +htmlElement.style.opacity + (new Date() - last) / speed;

            last = +new Date();

            if (+htmlElement.style.opacity &lt; 1) {
                requestAnimationFrame(tick);
            } else if (next) {
                next.call(htmlElement);
            }
        };

    htmlElement.style.opacity = 0;
    tick();
}

fadeIn(&lt;htmlElement&gt;, 2000, function () {
    this.style.opacity = &#39;&#39;;
});</code></pre>
    </blockquote>
</div>

<h4 id="hide">Hide</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Cacher un élément...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).hide();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.style.display = &quot;none&quot;;</code></pre>
    </blockquote>
</div>

<h4 id="show">Show</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Afficher un élément...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).show();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.style.display = &quot;&quot;;</code></pre>
    </blockquote>
</div>

<h3 id="-v-nements">ÉVÈNEMENTS</h3>
<h4 id="hover">Hover</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Équivalent du hover CSS en JavaScript...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).hover(&lt;eventHandlerMouseIn&gt;, &lt;eventHandlerMouseOut&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.addEventListener(&quot;mouseenter&quot;, &lt;eventHandlerMouseIn&gt;);
&lt;htmlElement&gt;.addEventListener(&quot;mouseleave&quot;, &lt;eventHandlerMouseOut&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="load">Load</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Attendre que le DOM et les fichiers externes (images, styles, scripts) soient chargés...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(window).load(function () {
    // I am full loaded.
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">window.addEventListener(&quot;load&quot;, function () {
    // I am full loaded.
});</code></pre>
    </blockquote>
</div>

<h4 id="off">Off</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Se désabonner d&#39;un évènement...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).off(&lt;eventName&gt;, &lt;eventHandler&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.removeEventListener(&lt;eventName&gt;, &lt;eventHandler&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="on">On</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>S&#39;abonner à un évènement...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).on(&lt;eventName&gt;, &lt;eventHandler&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.addEventListener(&lt;eventName&gt;, &lt;eventHandler&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="one">One</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>S&#39;abonner à un évènement une seule fois...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).one(&lt;eventName&gt;, function () {});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.addEventListener(&lt;eventName&gt;, function callee(event) {
    event.target.removeEventListener(e.type, callee);
});</code></pre>
    </blockquote>
</div>

<h4 id="ready">Ready</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Attendre que le DOM soit chargé...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(document).ready(function () {
    // I am ready to be manipulate.
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">document.addEventListener(&quot;DOMContentLoaded&quot;, function () {
    // I am ready to be manipulate.
});</code></pre>
    </blockquote>
</div>

<h4 id="trigger">Trigger</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Déclencher un évènement...</p>
        <pre class="prettyprint linenums"><code class="lang-js">var event = jQuery.Event(&quot;click&quot;);
event.test = true;

$(&lt;htmlElement&gt;).click(function (event) {
    event.test; // undefined by click, true by trigger.
});
$(&lt;htmlElement&gt;).trigger(event);
// $(&lt;htmlElement&gt;).trigger(&quot;click&quot;); // Shortcut without test property.</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var event = new Event(&quot;click&quot;);
event.test = true;

&lt;htmlElement&gt;.addEventListener(&quot;click&quot;, function (event) {
    event.test; // undefined by click, true by trigger.
});
&lt;htmlElement&gt;.dispatchEvent(event);</code></pre>
    </blockquote>
</div>

<h3 id="filtres">FILTRES</h3>
<h4 id="filter">Filter</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Retirer des noeuds d&#39;une liste d&#39;après des instructions...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;selector&gt;).filter(function (i, htmlElement) {
    return &lt;filterCondition&gt;;
}).each(function (i, htmlElement) {
    htmlElement;
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var nodeList = document.querySelectorAll(&lt;selector&gt;);

nodeList = [].filter.call(nodeList, function (node) {
    return &lt;filterCondition&gt;;
});

[].forEach.call(nodeList, function (node) {
    node;
});</code></pre>
    </blockquote>
</div>

<h4 id="first">First</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Sélectionner le premier noeud d&#39;une liste...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;selector&gt;).first();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlCollection&gt;.item(0);
// &lt;htmlCollection&gt;[0]</code></pre>
    </blockquote>
</div>

<h4 id="has">Has</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Quels noeuds contiennent l&#39;élément enfant...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;selector&gt;).has(&lt;matchesChildSelector&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var nodeList = document.querySelectorAll(&lt;selector&gt;);
[].filter.call(nodeList, function (node) {
    return node.querySelector(&lt;matchesChildSelector&gt;);
});</code></pre>
    </blockquote>
</div>

<h4 id="is">Is</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Est-ce qu&#39;au moins un noeud correspond...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;selector&gt;).is(&lt;matchesSelector&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var nodeList = document.querySelectorAll(&lt;selector&gt;);
[].some.call(nodeList, function (node) {
    return node.matches(&lt;matchesSelector&gt;);
});</code></pre>
    </blockquote>
</div>

<h4 id="item">Item</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Sélectionner un noeud à l&#39;index souhaité d&#39;une liste...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;selector&gt;).eq(&lt;index&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlCollection&gt;.item(&lt;index&gt;);
// &lt;htmlCollection&gt;[&lt;index&gt;]</code></pre>
    </blockquote>
</div>

<h4 id="last">Last</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Sélectionner le dernier noeud d&#39;une liste...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;selector&gt;).last();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlCollection&gt;.item(&lt;htmlCollection&gt;.length - 1);
// &lt;htmlCollection&gt;[&lt;htmlCollection&gt;.length - 1]</code></pre>
    </blockquote>
</div>

<h4 id="not">Not</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Récupérer les noeuds qui ne correspondent pas...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;selector&gt;).not(&lt;matchesSelector&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var nodeList = document.querySelectorAll(&lt;selector&gt;);
[].filter.call(nodeList, function (node) {
    return !node.matches(&lt;matchesSelector&gt;);
});</code></pre>
    </blockquote>
</div>

<h4 id="slice">Slice</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Sélectionner une portion de noeuds dans une liste...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;selector&gt;).slice(&lt;startIndex&gt;, &lt;endIndex&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var nodeList = document.querySelectorAll(&lt;selector&gt;);
[].slice.call(nodeList, &lt;startIndex&gt;, &lt;endIndex&gt;);</code></pre>
    </blockquote>
</div>

<h3 id="manipulation">MANIPULATION</h3>
<h4 id="append">Append</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Déplacer un noeud dans un autre noeud, à la fin...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).append($(&lt;appendHtmlElement&gt;));
// $(&lt;htmlElement&gt;).append(&lt;htmlString&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.appendChild(&lt;appendHtmlElement&gt;);
// &lt;htmlElement&gt;.insertAdjacentHTML(&quot;beforeEnd&quot;, &quot;&lt;htmlString&gt;&quot;);</code></pre>
    </blockquote>
</div>

<h4 id="clone">Clone</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Dupliquer un noeud...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).clone();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.cloneNode(true);</code></pre>
    </blockquote>
</div>

<h4 id="compare">Compare</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Comparer deux noeuds du DOM...</p>
        <pre class="prettyprint linenums"><code class="lang-js">var $a = $(&lt;selectorToFirstHtmlElement&gt;).find(&lt;selectorToSecondHtmlElement&gt;);
    $b = $(&lt;selectorToSecondElement&gt;);

$a.is($b);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var temp = document.getElementsByTagName(&lt;selectorToFirstHtmlElement&gt;)[0],
    a = temp.getElementsByTagName(&lt;selectorToSecondHtmlElement&gt;)[0],
    b = document.querySelector(&lt;selectorToSecondHtmlElement&gt;);

(a === b);</code></pre>
    </blockquote>
</div>

<h4 id="contains">Contains</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Savoir si un noeud est le fils d&#39;un autre...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.contains($(&lt;htmlElement&gt;), $(&lt;childHtmlElement&gt;));</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">(&lt;htmlElement&gt; !== &lt;childHtmlElement&gt;) &amp;&amp; &lt;htmlElement&gt;.contains(&lt;childHtmlElement&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="create">Create</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Créer un nouveau noeud HTML...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;&lt;tagString&gt;&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">document.createElement(&lt;tagString&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="empty">Empty</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Effacer tout le contenu d&#39;un noeud...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).empty();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.innerHTML = &quot;&quot;;</code></pre>
    </blockquote>
</div>

<h4 id="get-html">Get HTML</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir le HTML interne d&#39;un élément...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).html();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.innerHTML;</code></pre>
    </blockquote>
</div>

<h4 id="get-node-html">Get Node HTML</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir le HTML d&#39;un élément (lui y compris)...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&quot;&lt;div&gt;&quot;).append($(&lt;htmlElement&gt;).clone()).html();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.outerHTML;</code></pre>
    </blockquote>
</div>

<h4 id="get-text">Get Text</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir le texte interne d&#39;un objet...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).text();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.textContent;</code></pre>
    </blockquote>
</div>

<h4 id="index-from-parent">Index From Parent</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Connaître la position d&#39;un noeud dans son parent...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).index();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">[].slice.call(&lt;htmlElement&gt;.parentNode.children).indexOf(&lt;htmlElement&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="insert-after">Insert After</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Créer un noeud après un noeud...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).after($(&lt;afterHtmlElement&gt;));
// $(&lt;htmlElement&gt;).after(&lt;htmlString&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.parentNode.insertBefore(&lt;afterHtmlElement&gt;, &lt;htmlElement&gt;.nextElementSibling);
// &lt;htmlElement&gt;.insertAdjacentHTML(&quot;afterend&quot;, &lt;htmlString&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="insert-before">Insert Before</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Créer un noeud avant un noeud...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).before($(&lt;beforeHtmlElement&gt;));
// $(&lt;htmlElement&gt;).before(&lt;htmlString&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.parentNode.insertBefore(&lt;beforeHtmlElement&gt;, &lt;htmlElement&gt;);
// &lt;htmlElement&gt;.insertAdjacentHTML(&quot;beforebegin&quot;, &lt;htmlString&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="prepend">Prepend</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Déplacer un noeud dans un autre noeud, au début...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).prepend($(&lt;prependHtmlElement&gt;));
// $(&lt;htmlElement&gt;).prepend(&lt;htmlString&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.insertBefore(&lt;prependHtmlElement&gt;, &lt;htmlElement&gt;.firstChild);
// &lt;htmlElement&gt;.insertAdjacentHTML(&quot;afterBegin&quot;, &quot;&lt;htmlString&gt;&quot;);</code></pre>
    </blockquote>
</div>

<h4 id="remove">Remove</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Retirer un noeud du DOM...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).remove();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.parentNode.removeChild(&lt;htmlElement&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="remove-children">Remove Children</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Retirer tous les enfants d&#39;un noeud du DOM...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).empty();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">while (&lt;htmlElement&gt;.firstChild) {
    &lt;htmlElement&gt;.removeChild(&lt;htmlElement&gt;.firstChild);
}
// &lt;htmlElement&gt;.innerHTML = &#39;&#39;;</code></pre>
    </blockquote>
</div>

<h4 id="replace">Replace</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Remplacer un noeud du DOM par un autre...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).replaceWith($(&lt;newHtmlElement&gt;));</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.parentNode.replaceChild(&lt;newHtmlElement&gt;, &lt;htmlElement&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="set-html">Set HTML</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Définir le HTML interne d&#39;un élément...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).html(&lt;htmlString&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.innerHTML = &lt;htmlString&gt;;</code></pre>
    </blockquote>
</div>

<h4 id="set-node-html">Set Node HTML</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Définir le HTML d&#39;un élément (lui y compris)...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).replaceWith(&lt;htmlString&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.outerHTML = &lt;htmlString&gt;;</code></pre>
    </blockquote>
</div>

<h4 id="set-text">Set Text</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Définir le texte interne d&#39;un objet...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).text(&lt;string&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.textContent = &lt;string&gt;;</code></pre>
    </blockquote>
</div>

<h4 id="unwrap">Unwrap</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Retirer le noeud englobant de tous les noeuds enfants...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).unwrap();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">while (&lt;htmlElement&gt;.firstChild) {
    &lt;unwrapHtmlElement&gt;.insertBefore(&lt;htmlElement&gt;.firstChild, &lt;htmlElement&gt;);
}
&lt;unwrapHtmlElement&gt;.removeChild(&lt;htmlElement&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="wrap">Wrap</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Entourer un noeud du DOM par un autre...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).wrap($(&lt;wrapHtmlElement&gt;));</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.parentNode.insertBefore(&lt;wrapHtmlElement&gt;, &lt;htmlElement&gt;);
&lt;wrapHtmlElement&gt;.appendChild(&lt;htmlElement&gt;);</code></pre>
    </blockquote>
</div>

<h3 id="parcourir">PARCOURIR</h3>
<h4 id="all-next">All Next</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir tous les noeuds après...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).nextAll();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var nextAll = false;
nextAll = [].filter.call(&lt;htmlElement&gt;.parentNode.children, function (htmlElement) {
    return (htmlElement.previousElementSibling === &lt;htmlElement&gt;) ? nextAll = true : nextAll;
});</code></pre>
    </blockquote>
</div>

<h4 id="all-parents">All Parents</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir tous les noeuds parents au dessus...</p>
        <pre class="prettyprint linenums"><code class="lang-js">var parents = $(&lt;htmlElement&gt;).parents();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var htmlElement = &lt;htmlElement&gt;,
    parents = [];
while (htmlElement = htmlElement.parentNode) {
    parents.push(htmlElement);
}
parents;</code></pre>
    </blockquote>
</div>

<h4 id="all-previous">All Previous</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir tous les noeuds avant...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).prevAll();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var prevAll = true;
prevAll = [].filter.call(&lt;htmlElement&gt;.parentNode.children, function (htmlElement) {
    return (htmlElement === &lt;htmlElement&gt;) ? prevAll = false : prevAll;
});</code></pre>
    </blockquote>
</div>

<h4 id="children">Children</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir les noeuds fils d&#39;un élément...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).children();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.children;</code></pre>
    </blockquote>
</div>

<h4 id="closest-parent">Closest Parent</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir le premier noeud parent correspondant au sélecteur...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).closest(&lt;parentSelector&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var htmlElement = &lt;htmlElement&gt;,
    parents = [];
while (htmlElement = htmlElement.parentNode) {
    (htmlElement.matches &amp;&amp; htmlElement.matches(&lt;parentSelector&gt;)) ? parents.push(htmlElement) : &quot;&quot;;
}
parents[0];
// &lt;htmlElement&gt;.closest(&lt;parentSelector&gt;); // More fast but not supported by IE/EDGE</code></pre>
    </blockquote>
</div>

<h4 id="find-children">Find Children</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Trouver des noeuds enfants dans un noeud...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).find(&lt;childrenSelector&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.querySelectorAll(&lt;childrenSelector&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="first-child">First Child</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Sélectionner le premier enfant d&#39;un noeud...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).children().first();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.firstChild();</code></pre>
    </blockquote>
</div>

<h4 id="last-child">Last Child</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Sélectionner le dernier enfant d&#39;un noeud...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).children().last();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.lastChild();</code></pre>
    </blockquote>
</div>

<h4 id="matches-selector">Matches Selector</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Savoir si un noeud peut-être trouver avec un sélecteur...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).is(&lt;selector&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.matches(&lt;selector&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="next">Next</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir le noeud immédiatement après...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).next();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.nextElementSibling; // HTMLElement
// &lt;htmlElement&gt;.nextSibling; // Node</code></pre>
    </blockquote>
</div>

<h4 id="next-until">Next Until</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir tous les noeuds suivant jusqu&#39;à croiser le noeud du sélecteur (non inclus)...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).nextUntil(&lt;nextSelector&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var htmlElement = &lt;htmlElement&gt;,
    nextUntil = [],
    until = true;
while (htmlElement = htmlElement.nextElementSibling) {
    (until &amp;&amp; htmlElement &amp;&amp; !htmlElement.matches(&lt;nextSelector&gt;)) ? nextUntil.push(htmlElement) : until = false;
}
nextUntil;</code></pre>
    </blockquote>
</div>

<h4 id="parent">Parent</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir le noeud parent immédiatement au dessus...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).parent();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.parentNode;</code></pre>
    </blockquote>
</div>

<h4 id="parents">Parents</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir tous les noeuds parent correspondant au sélecteur...</p>
        <pre class="prettyprint linenums"><code class="lang-js">var parents = $(&lt;htmlElement&gt;).parents(&lt;parentsSelector&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var htmlElement = &lt;htmlElement&gt;,
    parents = [];
while (htmlElement = htmlElement.parentNode) {
    (htmlElement.matches &amp;&amp; htmlElement.matches(&lt;parentSelector&gt;)) ? parents.push(htmlElement) : &quot;&quot;;
/&#42; // More fast alternative but not supported by IE/Edge
while (htmlElement = htmlElement.parentNode.closest(&lt;parentSelector&gt;)) {
    parents.push(htmlElement); &#42;/
}
parents;</code></pre>
    </blockquote>
</div>

<h4 id="parents-until">Parents Until</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir tous les noeuds parents précédent le noeud parent correspondant au sélecteur...</p>
        <pre class="prettyprint linenums"><code class="lang-js">var parents = $(&lt;htmlElement&gt;).parentsUntil(&lt;parentsSelector&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var htmlElement =  &lt;htmlElement&gt;,
    parentsUntil = [],
    until = true;
while (htmlElement = htmlElement.parentNode) {
    (until &amp;&amp; htmlElement.matches &amp;&amp; !htmlElement.matches(&lt;parentSelector&gt;)) ? parents.push(htmlElement) : until = false;
/&#42; // More fast alternative but not supported by IE/Edge
while (htmlElement = htmlElement.parentNode.closest(&lt;parentSelector&gt;)) {
    (until) ? parents.push(htmlElement) : until = false; &#42;/
}
parentsUntil;</code></pre>
    </blockquote>
</div>

<h4 id="previous">Previous</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir le noeud immédiatement avant...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).prev();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.previousElementSibling; // HTMLElement
// &lt;htmlElement&gt;.previousSibling // Node</code></pre>
    </blockquote>
</div>

<h4 id="previous-until">Previous Until</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir tous les noeuds précédent jusqu&#39;à croiser le noeud du sélecteur (non inclus)...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).prevUtil(&lt;previousSelector&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var htmlElement = &lt;htmlElement&gt;,
    previousUntil = [],
    until = true;
while (htmlElement = htmlElement.nextElementSibling) {
    (until &amp;&amp; htmlElement &amp;&amp; !htmlElement.matches(&lt;previousSelector&gt;)) ? previousUntil.push(htmlElement) : until = false;
}
previousUntil;</code></pre>
    </blockquote>
</div>

<h4 id="siblings">Siblings</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir la liste des noeuds voisins...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).siblings();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">[].filter.call(&lt;htmlElement&gt;.parentNode.children, function (htmlElement) {
    return htmlElement !== &lt;htmlElement&gt;;
});</code></pre>
    </blockquote>
</div>

<h3 id="styles">STYLES</h3>
<h4 id="get-style">Get Style</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir une propriété d&#39;une règle CSS...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).css(&lt;property&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">getComputedStyle(&lt;htmlElement&gt;)[&lt;property&gt;];</code></pre>
    </blockquote>
</div>

<h4 id="get-scroll-left">Get Scroll Left</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir la position de la barre de défilement horizontal...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).scrollLeft();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.scrollLeft;</code></pre>
    </blockquote>
</div>

<h4 id="get-scroll-top">Get Scroll Top</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir la position de la barre de défilement vertical...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).scrollTop();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.scrollTop;</code></pre>
    </blockquote>
</div>

<h4 id="inner-height">Inner Height</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir la hauteur d&#39;un élément en incluant la marge interne sans la bordure...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).innerHeight();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.clientHeight</code></pre>
    </blockquote>
</div>

<h4 id="inner-width">Inner Width</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir la largeur d&#39;un élément en incluant la marge interne sans la bordure...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).innerWidth();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.clientWidth</code></pre>
    </blockquote>
</div>

<h4 id="offset-from-document">Offset from Document</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir les coordonnées d&#39;affichage du noeud par rapport aux bords de la page...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).offset();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var rect = &lt;htmlElement&gt;.getBoundingClientRect()
{
    top: rect.top + document.body.scrollTop,
    left: rect.left + document.body.scrollLeft
}</code></pre>
    </blockquote>
</div>

<h4 id="offset-from-parent">Offset from Parent</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir les coordonnées d&#39;affichage du noeud par rapport aux bords du premier noeud parent...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).position();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">{
    left: &lt;htmlElement&gt;.offsetLeft,
    top: &lt;htmlElement&gt;.offsetTop
}</code></pre>
    </blockquote>
</div>

<h4 id="offset-from-viewport">Offset from Viewport</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir les coordonnées d&#39;affichage du noeud par rapport aux bords de la partie visible de la fenêtre...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).offset();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">var rect = &lt;htmlElement&gt;.getBoundingClientRect()
{
    top: rect.top + document.body.scrollTop,
    left: rect.left + document.body.scrollLeft
}</code></pre>
    </blockquote>
</div>

<h4 id="outer-height">Outer Height</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir la hauteur d&#39;un élément en incluant la marge interne et la bordure...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).outerHeight();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.offsetHeight</code></pre>
    </blockquote>
</div>

<h4 id="outer-width">Outer Width</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtenir la largeur d&#39;un élément en incluant la marge interne et la bordure...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).outerWidth();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.offsetWidth</code></pre>
    </blockquote>
</div>

<h4 id="parent-not-static">Parent Not Static</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Obtient le premier noeud parent qui n&#39;est pas en <samp>position: static</samp> s&#39;il existe...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).offsetParent();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">(&lt;htmlElement&gt;.offsetParent || &lt;htmlElement&gt;)</code></pre>
    </blockquote>
</div>

<h4 id="set-style">Set Style</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Définir une propriété CSS dans l&#39;attribut style...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).css(&lt;property&gt;, &lt;value&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.style.&lt;property&gt; = &lt;value&gt;;</code></pre>
    </blockquote>
</div>

<h4 id="set-scroll-left">Set Scroll Left</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Définir la position de la barre de défilement horizontal...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).scrollLeft(&lt;distance&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.scrollLeft = &lt;distance&gt;;</code></pre>
    </blockquote>
</div>

<h4 id="set-scroll-top">Set Scroll Top</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Définir la position de la barre de défilement vertical...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$(&lt;htmlElement&gt;).scrollTop(&lt;distance&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;htmlElement&gt;.scrollTop = &lt;distance&gt;;</code></pre>
    </blockquote>
</div>

<h3 id="utiles">UTILES</h3>
<h4 id="array-each">Array Each</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Lister les éléments d&#39;un tableau...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.each(&lt;array&gt;, function (i, item) {
    (item === &lt;array&gt;[i]); // true
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;array&gt;.forEach(function (item, i) {
    (item === &lt;array&gt;[i]); // true
});</code></pre>
    </blockquote>
</div>

<h4 id="change-futur-context">Change Futur Context</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Définir le contexte d&#39;execution qui sera utilisé à l&#39;instanciation de la fonction...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.proxy(&lt;fn&gt;, &lt;context&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;fn&gt;.bind(&lt;context&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="extend">Extend</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Étendre un objet avec d&#39;autres objets...</p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;object&gt; = $.extend(&lt;extendingObject&gt;, &lt;object&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">Object.keys(&lt;object&gt;).forEach(function (key) {
    &lt;object&gt;[key] = (&lt;extendingObject&gt;[key]) ? &lt;extendingObject&gt;[key] : &lt;object&gt;[key];
});
&lt;object&gt;;</code></pre>
    </blockquote>
</div>

<h4 id="index-of">Index Of</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Trouver la position d&#39;un élément dans un tableau...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.inArray(&lt;item&gt;, &lt;array&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;array&gt;.indexOf(&lt;item&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="is-array">Is Array</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Savoir si un élément est un tableau...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.isArray(&lt;array&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">Array.isArray(&lt;array&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="map">Map</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Transformer un tableau en un autre suivant des opérations sur chaque élément...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.map(&lt;array&gt;, function (item, i) {
    return &lt;operations&gt;;
});</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;array&gt;.map(function (item, i) {
    return &lt;operations&gt;;
});</code></pre>
    </blockquote>
</div>

<h4 id="now">Now</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Retourner le timestamp courant...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.now();</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">Date.now();</code></pre>
    </blockquote>
</div>

<h4 id="parse-html">Parse HTML</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Transformer une chaine de caractère en objet HTML...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.parseHTML(&lt;htmlString&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">function parseHTML(htmlString) {
    var body = document.implementation.createHTMLDocument().body;
    body.innerHTML = htmlString;
    return body.childNodes;
}

parseHTML(&lt;htmlString&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="parse-json">Parse JSON</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Transformer une chaine de caractère en objet JSON...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.parseJSON(&lt;jsonString&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">JSON.parse(&lt;jsonString&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="parse-xml">Parse XML</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Transformer une chaine de caractère en objet XML...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.parseXML(&lt;htmlString&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">function parseXML(htmlString) {
    return (new DOMParser()).parseFromString(htmlString,&quot;text/xml&quot;);
}

parseXML(&lt;htmlString&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="serialize-array">Serialize Array</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Récupérer tous les champs de formulaire dans un Array JSON...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.serializeArray(&lt;form&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">function serializeArray(form) {
    var field, length, output = [];

    if (typeof form === &quot;object&quot; &amp;&amp; form.nodeName === &quot;FORM&quot;) {
        var length = form.elements.length;
        for (i = 0; i &lt; length; i++) {
            field = form.elements[i];
            if (field.name &amp;&amp; !field.disabled &amp;&amp; field.type !== &quot;file&quot; &amp;&amp; field.type != &quot;reset&quot; &amp;&amp; field.type != &quot;submit&quot; &amp;&amp; field.type != &quot;button&quot;) {
                if (field.type === &quot;select-multiple&quot;) {
                    length = form.elements[i].options.length;
                    for (j = 0; j &lt; length; j++) {
                        if(field.options[j].selected)
                            output[output.length] = { name: field.name, value: field.options[j].value };
                    }
                } else if ((field.type !== &quot;checkbox&quot; &amp;&amp; field.type !== &quot;radio&quot;) || field.checked) {
                    output[output.length] = { name: field.name, value: field.value };
                }
            }
        }
    }

    return output;
}
serializeArray(&lt;form&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="serialize-string">Serialize String</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Récupérer tous les champs de formulaire dans un Array JSON...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.serialize(&lt;form&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">function serialize(form) {
    var field, length, output = [];

    if (typeof form === &quot;object&quot; &amp;&amp; form.nodeName === &quot;FORM&quot;) {
        var length = form.elements.length;
        for (var i = 0; i &lt; length; i++) {
            field = form.elements[i];
            if (field.name &amp;&amp; !field.disabled &amp;&amp; field.type !== &quot;file&quot; &amp;&amp; field.type !== &quot;reset&quot; &amp;&amp; field.type !== &quot;submit&quot; &amp;&amp; field.type !== &#39;button&#39;) {
                if (field.type === &quot;select-multiple&quot;) {
                    length = form.elements[i].options.length;
                    for (var j=0; j &lt; length; j++) {
                        if (field.options[j].selected) {
                            output[output.length] = encodeURIComponent(field.name) + &quot;=&quot; + encodeURIComponent(field.options[j].value);
                        }
                    }
                } else if ((field.type !== &quot;checkbox&quot; &amp;&amp; field.type !== &quot;radio&quot;) || field.checked) {
                    output[output.length] = encodeURIComponent(field.name) + &quot;=&quot; + encodeURIComponent(field.value);
                }
            }
        }
    }

    return output.join(&quot;&amp;&quot;).replace(/%20/g, &quot;+&quot;);
}
serialize(&lt;form&gt;);</code></pre>
    </blockquote>
</div>

<h4 id="trim">Trim</h4>
<div class="from-jquery-to-vanilla-js">
    <blockquote class="jquery">
        <p>Transformer une chaine de caractère en objet JSON...</p>
        <pre class="prettyprint linenums"><code class="lang-js">$.trim(&lt;string&gt;);</code></pre>
    </blockquote>

    <blockquote class="vanilla-js">
        <p><strong><samp></samp></strong>...avec <span class="vanillajs">Vanilla JS</span></p>
        <pre class="prettyprint linenums"><code class="lang-js">&lt;string&gt;.trim();</code></pre>
    </blockquote>
</div>

<h3 id="plus">PLUS</h3>
<p>Je vais maintenir cette liste au fur et à mesure que j&#39;utiliserai moi-même <span class="vanillajs">Vanilla JS</span>. Vous pouvez l&#39;alimenter en postant dans les commentaires.</p>
<h2 id="pour-aller-plus-loin">Pour aller plus loin</h2>
<p>Pour plus d&#39;informations à propos de <span class="vanillajs">Vanilla JS</span> :</p>
<ul>
<li>Jettez un oeil à la <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript">documentation</a> <span class="vanillajs">Vanilla JS</span></li>
<li>Essayez l&#39;un des nombreux <a href="https://en.wikipedia.org/wiki/Comparison_of_JavaScript_frameworks">plugins</a> <span class="vanillajs">Vanilla JS</span>.</li>
</ul>
]]></description>
            <link>http://localhost:7776vanilla-js-france/</link>
            <guid isPermaLink="false">5620ee00d1b7fe136fc20058</guid>
            <category><![CDATA[jQuery]]></category>
            <category><![CDATA[Humour]]></category>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Vanilla JS]]></category>
            <category><![CDATA[Traduction]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[Développement Web]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Mon, 19 Oct 2015 12:30:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Installer n'importe quel module NPM Node.js sous Windows]]></title>
            <description><![CDATA[<p>Si vous avez déjà tenté d&#39;<a href="https://blog.lesieur.name/installer-et-utiliser-nodejs-sous-windows/#la-documentation-les-modules-et-le-principe">installer des modules NPM pour Node.js</a> via la commande <samp>npm install &lt;package&gt; [options]</samp> sous Windows, vous avez probablement déjà eu des soucis d&#39;installation et abandonné l&#39;idée. Peut-être même que vous ne vous êtes pas lancé dans l&#39;aventure Node.js pour ces raisons ? Effectivement, certains modules ont besoin de <strong>Python</strong> pour s&#39;installer et d&#39;autres de <strong>Visual Studio</strong>. Il y en à même, plus rare, qui on besoin de <strong>GIT</strong>.</p>
<p>Par exemple, <a href="https://github.com/Haeresis/NodeAtlas">NodeAtlas</a> est un module qui nécessite que Python soit installé pour que les fonctions permettant l&#39;optimisation d&#39;images s&#39;installent correctement sous Windows. <a href="https://github.com/socketio/socket.io">Socket.io</a> a, lui, besoin de Visual Studio pour être installé sans quoi il ne fonctionnera pas.</p>
<p>Voici <strong>la procédure d&#39;installation des pré-requis nécessaires pour faire fonctionner Node.js et tous ses modules NPM sous Windows</strong> ainsi qu&#39;une aide à la résolution de problèmes divers après installation.</p>
<h2 id="-tape-1-installer-python">Étape 1 : Installer Python</h2>
<p>Python 2.7 (et non les versions 3.X ou 2.6.X et précédente) est requis par l&#39;installeur npm pour installer les addons à compiler.</p>
<ol>
<li><p>Rendez-vous sur <a href="https://www.python.org/">python.org</a> pour <a href="https://www.python.org/download/releases/2.7/">télécharger la dernière version stable de Python 2.7</a> du Windows MSI Installer afin d&#39;installer la version x86 ou x86-64 en fonction de votre système d&#39;exploitation.</p>
</li>
<li><p>Lancez l&#39;installeur et assurez vous d&#39;ajouter Python à votre variable d&#39;environnement PATH.</p>
</li>
<li><p>Acceptez l&#39;« installation pour tous les utilisateurs ».</p>
</li>
<li><p>Acceptez le chemin d&#39;installation par défaut « C:\Python27 ».</p>
</li>
</ol>
<h2 id="-tape-2-installer-git">Étape 2 : Installer GIT</h2>
<p>GIT est nécessaire pour l’installation de package en provenance de GitHub ou autre plateforme GIT. Bien que ces modules soient rares, il ne sont pas inexistant. Vous pourrez donc également les installer.</p>
<ol>
<li>Rendez-vous sur <a href="http://git-scm.com/download">git-scm.com</a> et téléchargez la dernière version pour Windows.</li>
</ol>
<p>2 Lancez l&#39;installeur.</p>
<ol>
<li><p>Acceptez la localisation par défaut.</p>
</li>
<li><p>Accepter l&#39;icône de démarrage menu.</p>
</li>
<li><p>Accepter les composants associés.</p>
</li>
</ol>
<p>6 Modifiez « Adjusting your PATH environment » to « Use Git from Windows Command Prompt ».</p>
<ol>
<li>Acceptez la valeur « Configuring the line ending conversions » par défaut.</li>
</ol>
<h2 id="-tape-3-installer-visual-studio">Étape 3 : Installer Visual Studio</h2>
<p>Visual Studio 2012 ou plus est requis par npm pour installer les addons à compiler. <em>Notez bien que gcc, mingw, cygwin, et les autres compilateurs Windows non-Microsoft ne sont pas supporté par Node.js.</em></p>
<p>Si vous utilisez actuellement Windows 7, 8 ou même 10, vous pouvez à la place utiliser Visual Studio C++ 2013 pour Windows Desktop (Express). Visual Studio Express est gratuit et est plus adéquat pour un support de Node.js.</p>
<ol>
<li><p><a href="https://www.microsoft.com/fr-fr/download/details.aspx?id=44914">Téléchargez Visual Studio</a>.</p>
</li>
<li><p>Cliquez sur « Download » et sélectionnez « wdexpress_full.exe ».</p>
</li>
<li><p>Lancez l&#39;installeur et acceptez la localisation par défaut. C&#39;est une grosse installation qui peut prendre longtemps !</p>
</li>
</ol>
<h2 id="-tape-4-installer-node-js">Étape 4 : Installer Node.js</h2>
<p>Si vous aviez déjà installé Node.js avant de réaliser les étapes de cet article, vous pouvez toujours en profiter pour le mettre à jour avec la dernière version. Sinon téléchargez le pour la première fois.</p>
<ol>
<li><p>Allez sur <a href="https://nodejs.org/en/">nodejs.org</a> et installez la version appropriée pour votre système d&#39;exploitation. </p>
</li>
<li><p>Installez Node.js en suivant les instructions de l&#39;installeur. <a href="https://blog.lesieur.name/installer-et-utiliser-nodejs-sous-windows/">Plus de détails par ici si vous le souhaitez</a>.</p>
</li>
</ol>
<h2 id="v-rifier-que-tout-fonctionne-correctement">Vérifier que tout fonctionne correctement</h2>
<p>Si vous rencontrez des difficultés à installer des modules NPM, essayez les étapes suivantes pour identifier un problème de votre côté.</p>
<ol>
<li><p>Redémarrez Windows pour être sur que toutes les configurations est pris effet.</p>
</li>
<li><p>Vérifiez que tous les pré-requis soient correctement installés et accessibles :</p>
<ul>
<li>La commande <samp>python --version</samp> doit retourner <samp>2.7.x</samp></li>
<li>La commande <samp>node --version</samp> doit retourner <samp>v0.10.x</samp> ou plus.</li>
<li>La commande <samp>npm --version</samp> doit retourner <samp>1.x</samp> ou plus.</li>
</ul>
</li>
<li><p>Assurez vous que <samp>npm -g prefix</samp> pointe au même endroit que <samp>echo %NODE_PATH%</samp>(avec <samp>\node_modules</samp> en plus à la fin).</p>
</li>
<li><p>Vérifiez qu&#39;un simple module NPM peut-être installé :</p>
<ul>
<li>Avec <samp>npm install -g semver</samp></li>
<li>et <samp>semver --help</samp> qui doit afficher l&#39;aide.</li>
</ul>
</li>
<li><p>Assurez vous que si vous avez plusieurs version de Python ou Visual Studio sur votre machine, les astuces dans la partie « Astuces » ci-après ne résolvent pas le problème.</p>
</li>
<li><p>Assurez vous que les addons à compiler peuvent être installées :</p>
<ul>
<li>Avec <samp>npm install -g socket.io</samp> qui doit compiler sans erreur.</li>
</ul>
</li>
</ol>
<p>Si vous avez toujours des erreurs et que toutes les étapes précédentes sont valides, vous pouvez reporter le fichier <samp>npm-debug.log</samp> laissé par npm dans le tracker d&#39;issue du/des développeur(s) du module npm que vous tentez d&#39;installer pour obtenir de l&#39;aide.</p>
<p>N&#39;hésitez pas à laisser plus d&#39;étapes de vérifications dans les commentaires de cet article, je les mettrais à jour ici même.</p>
<h2 id="astuces">Astuces</h2>
<ul>
<li><p>Si vous avez plusieurs versions de Python d&#39;installées, vous pouvez sélectionner celle utilisée par npm pour compiler les addons :</p>
<ul>
<li><samp>npm config set python C:/Python2.7/python</samp></li>
</ul>
</li>
<li><p>Si vous avez plusieurs versions de Microsoft Visual Studio d&#39;installées, vous pouvez sélectionner celle utilisée par npm pour compiler les addons :</p>
<ul>
<li>Par défaut (et récursivement) <samp>npm config set msvs_version 2013</samp> (si votre version est 2013) ou</li>
<li>Ponctuellement <samp>npm install [options] &lt;module-name&gt; --msvs_version=2013</samp> lors de l&#39;installation d&#39;un module.</li>
</ul>
</li>
</ul>
]]></description>
            <link>http://localhost:7776installer-tous-les-modules-npm-node-js-sous-windows/</link>
            <guid isPermaLink="false">5613f26670877cd335a4b897</guid>
            <category><![CDATA[Astuces]]></category>
            <category><![CDATA[Ressources]]></category>
            <category><![CDATA[Node.js]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Tue, 06 Oct 2015 16:10:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Conventions HTML et CSS orientés composants]]></title>
            <description><![CDATA[<p>Je viens de (re)terminer la lecture du <a href="http://guidecss.fr/">Guide CSS Fr</a> et j&#39;ai eu envie d&#39;apporter quelques modifications et ajouts à ces très bons conseils. Cet article va donc en quelque sorte constituer mes conventions en matière de création et maintenance HTML et CSS. Elles sont donc identiques à ce qui est écrit sur <a href="http://guidecss.fr/">Guide CSS Fr</a> à cet article prêt !</p>
<figure>
<img src="media/images/upload/css.jpg" alt="Anatomie d'une règle CSS" style="max-width: 100%">
<figcaption>Affreux sélecteur... <a href="http://www.puce-et-media.com/">http://www.puce-et-media.com/</a></figcaption>
</figure>

<p>N&#39;ayant rien à ajouter aux parties autres que « <a href="http://guidecss.fr/convention.html">4. Convention de nommage</a> », je passe directement à mes propres conventions de nommage en vous sensibilisant à l&#39;anatomie d&#39;une page HTML.</p>
<p><strong>Je finirai néanmoins par pointer du doigt une erreur, sinon la seule, en ce qui concerne la totale inutilité du préfixe <samp>.js-</samp> destiné à séparer le visuel du fonctionnel</strong>.</p>
<p><em>Note : Tous les exemples d&#39;inclusion de fragment HTML sont tirés de <a href="http://haeresis.github.io/NodeAtlas/">NodeAtlas</a> mais c&#39;est la même chose avec vos Frameworks préférés.</em></p>
<h2 id="composition-d-une-page">Composition d&#39;une page</h2>
<p>Chaque page HTML est composée par :</p>
<ul>
<li>un <em>Gabarit</em> de page que nous nommerons ici <strong>Template</strong>,</li>
<li>des <em>Composants</em> que nous nommerons ici <strong>Components</strong> et</li>
<li>des <em>Patrons de conception</em> que nous nommerons ici <strong>Patterns</strong>.</li>
</ul>
<p>Avant de nous attacher au Template qui représente la structure qui va accueillir nos Components sur une page, intéressons nous au plus important : les Components eux-mêmes.</p>
<h3 id="les-components-composants-">Les Components (Composants)</h3>
<h4 id="structure">Structure</h4>
<p>Les Components sont des fragments de HTML qui découpent une page de contenu HTML de manière logique et consistante. Bien qu&#39;ils puissent être spécialisés et quasiment dédiés à un seul endroit —comme le Header de site—, ils sont prévus pour être :</p>
<ul>
<li><strong>Déplaçable</strong> dans une page.</li>
<li><strong>Réutilisable</strong> sur d&#39;autres pages.</li>
</ul>
<p>À cet effet, il est généralement bon d&#39;écrire un Component dans un fichier dédié. Par exemple dans le dossier <samp>components</samp> de <a href="http://haeresis.github.io/NodeAtlas/">NodeAtlas</a>, on pourrait créer un <samp>hearder.htm</samp> et l&#39;utiliser avec <samp>&lt;%- include(&#39;header.htm&#39;) %&gt;</samp> dans un Template de page HTML.</p>
<p>Un Component est obligatoirement composé de deux <samp>&lt;div&gt;</samp> imbriquées (ou toutes autres balises de type <samp>block</samp>) pour pouvoir se suffire à lui-même et respecter n&#39;importe quel design sans être disposé dans un Template Complexe (voir plus loin).</p>
<p>La première <samp>&lt;div&gt;</samp> représente la place totale qu&#39;occupera le Component, design visuel inclus (background généralement) et peut varier sémantiquement avec : <samp>header</samp>, <samp>footer</samp>, <samp>section</samp>, <samp>article</samp>, <samp>aside</samp> ou <samp>nav</samp>. Nous reviendrons plus bas sur cet aspect.</p>
<p>La seconde <samp>&lt;div&gt;</samp> représente la limite du contenu en lui-même (1200px maximum habituellement). Elle contiendra toujours la classe <samp>.ui</samp> (par exemple) qui nous permet de définir la taille maximale d&#39;affichage du contenu des Components, pour tous les Components, quand ils sont libres (utilisés en dehors d&#39;une grille, ce que nous verrons plus loin).</p>
<p><strong>Voici par exemple un Component HTML dans <samp>components/name-of-component.htm</samp></strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;div class=&quot;name-of-component&quot;&gt;
  &lt;div class=&quot;ui&quot;&gt;
    &lt;!-- Subparts of component here. --&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>La <samp>&lt;div&gt;</samp> de classe <samp>.ui</samp> fixe la taille maximale dans chaque composant grâce à par exemple...</p>
<p><strong>...ces directives CSS dans <samp>assets/stylesheets/common.css</samp></strong></p>
<pre class="prettyprint linenums"><code class="lang-css">.ui {
  margin-left: auto;
  margin-right: auto;
  max-width: 1200px;
}
</code></pre>
<p><strong>ou ponctuellement dans <samp>assets/stylesheets/component.name-of-component.css</samp> avec</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">.name-of-component .ui {
  max-width: 1024px;
}
</code></pre>
<p>Mais aucune taille <samp>width</samp> ou <samp>height</samp> ne doit être forcée de manière à ce que le contenu du composant soit toujours fluide, quelque soit sa place dans une grille.</p>
<blockquote>
<p><strong>Pourquoi deux « div » imbriquées et une « .ui » partout ?</strong></p>
<p>Je vais vous laisser voir cela à travers les divers exemples d&#39;affichages réalisables sans Template Complexe (pas de grille) et <strong>à partir du même code HTML</strong>.</p>
<ul>
<li><a href="http://codepen.io/Haeresis/pen/pJMBEg">Toute la place en alternance : type « One Page »</a>,</li>
<li><a href="http://codepen.io/Haeresis/pen/NqQVXv">inclus dans une page : type « Page Standard »</a>,</li>
<li><a href="http://codepen.io/Haeresis/pen/PqMvQW">les deux exemples précédents en alternance : type « Design »</a>,</li>
<li><a href="http://codepen.io/Haeresis/pen/mJNYxE">sur toute la page : type « BackOffice »</a>,</li>
<li><a href="http://codepen.io/Haeresis/pen/vOowjL">grille de composant : type « Bootstrap »</a>,</li>
<li><a href="http://codepen.io/Haeresis/pen/KpOLeR">un affichage hors flux : type « Popup »</a>,</li>
<li><a href="http://codepen.io/Haeresis/pen/jPgopz">un affichage en absolue : type « App Mobile »</a> ou encore</li>
<li><strong><a href="http://codepen.io/Haeresis/pen/bdXymY">la totalité en une page</a></strong>.</li>
</ul>
</blockquote>
<h4 id="nommage">Nommage</h4>
<p>Dans le <a href="http://guidecss.fr/">Guide CSS Fr</a>, il est expliqué que si le nom du Component est : <samp>my-component</samp>, alors celui d&#39;un sous Component serait <samp>my-component__text</samp> et une version alternative de se Component serait permise avec la classe <samp>my-component--alternative</samp> à la place. Pour ma part j&#39;ai opté pour quelque chose de différent pour des questions de lisibilité du <samp>__</samp> ce qui nous permet de ne pas se soucier de séparer les classes par deux espaces.</p>
<ol>
<li><p>Le nom du Component est unique. Par exemple <samp>.presentation-items</samp>.</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;div class=&quot;presentation-items&quot;&gt;
 &lt;div class=&quot;ui&quot;&gt;
   &lt;!-- Subparts --&gt;
 &lt;/div&gt;
&lt;/div&gt;
</code></pre>
</li>
<li><p>Une sous partie de Component est nommée par exemple <samp>.presentation-items--title</samp>, <samp>.presentation-items--content</samp> ou encore <samp>.presentation-items--item--title</samp>.</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;div class=&quot;presentation-items&quot;&gt;
 &lt;div class=&quot;ui&quot;&gt;
   &lt;div class=&quot;presentation-items--title&quot;&gt;
     &lt;!-- Title --&gt;
   &lt;/div&gt;
   &lt;ul class=&quot;presentation-items--items&quot;&gt;
     &lt;li class=&quot;presentation-items--item&quot;&gt;
       &lt;div class=&quot;presentation-items--subtitle&quot;&gt; &lt;!-- ou `presentation-items--item--title` --&gt;
         &lt;!-- Subtitle --&gt;
       &lt;/div&gt;
       &lt;div class=&quot;presentation-items--content&quot;&gt;
         &lt;!-- Content --&gt;
       &lt;/div&gt;
     &lt;/li&gt;
   &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>et est adressé en CSS directement par son sélecteur CSS</p>
<pre class="prettyprint linenums"><code class="lang-css">.presentation-item {
  background-color: #f00;
}
.presentation-item--title {
  font-size: 1.4rem;
}
.presentation-item--content {
  padding: 20px;
}
</code></pre>
</li>
<li><p>La version alternative d&#39;un Component n&#39;est pas préfixée par son nom. Au lieu de cela, le comportement alternatif est nommé et est préfixé par <samp>.as-</samp>. C&#39;est grâce au cumul des classes et non à son changement que l&#39;on appliquera la différence. Par exemple <samp>as-carousel</samp>.</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;div class=&quot;presentation-items as-carousel&quot;&gt;
 &lt;div class=&quot;ui&quot;&gt;
   &lt;!-- ... --&gt;
 &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>qui est adressé en CSS grâce à la cascade</p>
<pre class="prettyprint linenums"><code class="lang-css">/* ... Partie précédente ... */

.presentation-item.as-carousel { /* Cas rare de double sélection permise. */
  background-color: #00f;
}
/*.presentation-item*/.as-carousel .presentation-item--title {
  font-size: 1.2rem;
}
/*.presentation-item*/.as-carousel .presentation-item--content {
  padding: 10px;
}
</code></pre>
<p>ou encore en Less</p>
<pre class="prettyprint linenums"><code class="lang-css">.presentation-item {
  background-color: #f00;
  &amp;.as-carousel {
    background-color: #00f;
  }
}
.presentation-item--title {
  font-size: 1.4rem;
}
.presentation-item--content {
  padding: 20px;
}

/*.presentation-item*/.as-carousel {
  .presentation-item--title {
    font-size: 1.2rem;
  }
  .presentation-item--content {
    padding: 10px;
  }
}
</code></pre>
</li>
</ol>
<h3 id="le-template-gabarit-de-page-">Le Template (Gabarit de page)</h3>
<p>Le Template est la carcasse qui va accueillir les Components. On appel souvent cette carcasse la Grille ou Grid. Dans son état le plus simple c&#39;est une page HTML sans grille, sans classe de Template : une page uniquement composé de Components les uns à la suite des autres.</p>
<p>Le contenu de la page HTML ne doit jamais être immédiatement sous le <samp>&lt;body&gt;</samp> mais dans une <samp>&lt;div&gt;</samp> de classe <samp>layout</samp> par exemple. Cela permet d&#39;ajouter les scripts HTML à l&#39;extérieur et de pouvoir profiter de <samp>:nth-child(x)</samp> à l&#39;intérieur sans que le nombre ou la place des items soient altérés par l&#39;ajout d&#39;un <samp>&lt;script&gt;</samp> (En ce qui concerne les <samp>&lt;link&gt;</samp>, ça se trouve dans le <samp>&lt;head&gt;</samp>).</p>
<h4 id="template-simple-sans-classe-">Template Simple (sans classe)</h4>
<p>Voici à quoi ressemble une page HTML sans grille qui accueil nos Components.</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;body&gt;
  &lt;!-- Minimum of `script` tags for boot --&gt;
  &lt;div class=&quot;layout&quot;&gt;
    &lt;!-- Loop of Components here. --&gt;
  &lt;/div&gt;
  &lt;!-- All `script` tags for 99% of Javascript here. --&gt;
&lt;/body&gt;
</code></pre>
<h4 id="template-nomm-">Template Nommé</h4>
<p>Il est intéressant d&#39;ajouter un nom à chaque Template de manière à pouvoir changer, pour un Template précis, le comportement de n&#39;importe quel Component.</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;body class=&quot;home&quot;&gt; &lt;!-- Name of Template --&gt;
  &lt;div class=&quot;layout&quot;&gt;
    &lt;!-- Loop of Components here. --&gt;
  &lt;div&gt;
&lt;/body&gt;
</code></pre>
<p>En mettant ce nom au sommet de toute balise HTML, cela permet de manipuler les variations CSS de tous les Patterns et Components en fonction du Template. En incluant donc la partie Header et Footer de votre site et même le conteneur <samp>.layout</samp> global. Je peux donc changer l&#39;arrière plan du site, spécifiquement pour le Template de classe <samp>home</samp>.</p>
<p><strong>Avec ce code CSS par exemple dans <samp>assets/stylesheets/common.less</samp></strong></p>
<pre class="prettyprint linenums"><code class="lang-css">.layout {
  background-image: none;
}

/* ... */

.home {

  /**
   * Extend `.layout` in common.less
   */
  .layout {
    background-image: url(&#39;../media/images/ads.png&#39;);
  }
}
</code></pre>
<h4 id="template-complexe">Template Complexe</h4>
<p>Il est possible de créer des Templates plus complexes en permettant de les habiller avec un système de grille pour avoir une page plus ordonnée.</p>
<p><strong>Un exemple de Components répartis dans des <samp>.area</samp> destinées à être habillées par une grille.</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;body class=&quot;home&quot;&gt;
  &lt;div class=&quot;layout&quot;&gt;
    &lt;section class=&quot;area for-main&quot;&gt;
      &lt;div class=&quot;part for-overview&quot;&gt;
        &lt;!-- Loop of Components here. --&gt;
      &lt;/div&gt;
      &lt;aside class=&quot;part for-ads&quot;&gt;
        &lt;!-- Loop of Components here. --&gt;
      &lt;/aside&gt;
    &lt;/section&gt;
    &lt;section class=&quot;area for-presentation&quot;&gt;
      &lt;!-- Loop of Components here. --&gt;
    &lt;/section&gt;
    &lt;aside class=&quot;area for-also&quot;&gt;
      &lt;!-- Loop of Components here. --&gt;
    &lt;/aside&gt;
  &lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p><strong>avec un habillage de grille (LESS avec Bootstrap par exemple)</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">@import (reference) &#39;bootstrap/bootstrap&#39;;

.home {
  .area {
     .container; /* Add padding left and right... */
  }
  .for-presentation {
    padding: 0; /* ...and remove it. */
  }

  .part {
    .make-sm-column(6);
  }
}
</code></pre>
<p>Rien ne vous empêche non plus de changer la grille (l&#39;application CSS sur le Template) en fonction des besoins, ce que vous ne pourriez pas faire si vous appliquer des Patterns comme <samp>.col-xs-6</samp> directement dans la grille (nous verrons cela plus bas).</p>
<p>Par exemple en ajoutant <samp>.with-ads</samp> à votre Template, vous pourriez faire varier votre feuille CSS de manière à accueillir de la publicité de part et d&#39;autre de la page.</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;body class=&quot;home with-ads&quot;&gt;
  &lt;div class=&quot;layout&quot;&gt;
    &lt;!-- Template Grid --&gt;
  &lt;/div&gt;
&lt;/body&gt;
</code></pre>
<h3 id="les-patterns-patrons-de-conception-">Les Patterns (Patrons de conception)</h3>
<p>Ce sont des modèles prêts à l&#39;emploi destinés à être apposés sur une balise, ou, une balise contenant un ensemble de balise. Lors de sa définition, le Pattern nécessite « obligatoirement » un commentaire CSS sur son utilisation dans un code HTML.</p>
<p>Contrairement aux Templates et Components, les Patterns ne sont pas ciblés depuis la feuille CSS vers une classe « sémantique » mais mis à la main sur une balise HTML. En ce sens, ils sont parfait pour permettre à des rédacteurs de contenu de faire de la mise en page ou faire votre grille CSS dans le Template de manière <a href="https://blog.lesieur.name/utilisation-optimisee-de-framework-css-comme-bootstrap-avec-less/">HTML-Driven</a> plutôt que <a href="https://blog.lesieur.name/utilisation-optimisee-de-framework-css-comme-bootstrap-avec-less/">CSS-Driven</a>.</p>
<p>Dans nos exemples précédents, <samp>.container</samp>, <samp>.area</samp> et <samp>.part</samp> pourrait être des Patterns avec chacun un rôle « raccourci » spécifique. Les Patterns peuvent donc servir dans les Components, mais également dans les Templates en fonction du besoin.</p>
<p>Voici des exemples de Patterns :</p>
<pre class="prettyprint linenums"><code class="lang-css">/** 
  &lt;div class=&quot;text-center&quot;&gt;
    Ce texte est centré.
  &lt;/div&gt;
 */
.text-center {
  text-align: center;
}

/** 
  &lt;div class=&quot;img-responsive&quot;&gt;
    &lt;img src=&quot;fit-container-in-all-size.png&quot;&gt;
  &lt;/div&gt;
 * or
  &lt;img class=&quot;img-responsive&quot; src=&quot;fit-container-in-all-size.png&quot;&gt;
 */
.img-responsive {
  max-width: 100%;
  img {
    max-width: 100%;
  }
}

/** 
  &lt;button class=&quot;btn-right-arrow&quot;&gt;
    &lt;span&gt;Click Me&lt;/span&gt;
  &lt;/button&gt;
 */
.btn-right-arrow {
  position: relative;
  span {
    display: inline-block;
    padding: 4px 8px;
    position: relative;
    z-index: 2;
  }
  &amp;:after {
    content: &quot;&quot;;
    position: absolute;
    top: 50%;
    right: 0;
    .translateY();
    background-image: url(&#39;../media/images/arrow.png&#39;);
    width: 16px;
    height: 16px;
  }
}

/** 
  &lt;div class=&quot;container&quot;&gt;
    &lt;!-- Any blocks or inlines --&gt;
  &lt;/div&gt;
 */
.container {
  max-width: 1200px;
  margin-left: auto;
  margin-right: auto;
}
</code></pre>
<p>Les Patterns étant applicables dans tous les Components, un comportement spécifique à un Component peut-être spécifié dans le fichier du Component de cette manière :</p>
<p><strong>Exemple de Pattern CSS surchargé spécifiquement pour un Component</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">/** 
  &lt;div class=&quot;color-alternative&quot;&gt;
    I am white !
  &lt;/div&gt;
 */
.color-alternative {
  color: #fff;
}

/* ... */

.background-white-component {
  background-color: #fff;

  /**
   * Extend `.color-alternative` in common.less
   */
  /* Pattern */.color-alternative {
    color: #888;
  }
}
</code></pre>
<p><strong>Mon conseil : un Pattern doit toujours être placé dans une zone dédiée au Contenu et non au Composant en lui-même. Il est parfait dans du HTML qui pourrait avoir vocation à finir dans une base de donnée de contenu. Aussi n&#39;utilisez jamais un <samp>.text-right</samp> sur un <samp>.component--subcomponent</samp> car rien ne garanti que dans un autre contexte (Template), le texte ne serait pas à gauche. Et en ce qui concerne leur utilisation dans les Template : tout dépend si vous préférez intervertir les Templates HTML quand la carcasse varie ou ajouter une classe <samp>.with-this-variation</samp> comme vu précédemment.</strong></p>
<h3 id="classes-alternatives">Classes Alternatives</h3>
<p><samp>class=&quot;name-of-component&quot;</samp> sert à identifier toutes les portions de HTML relatives à se composant dans une page. En ajoutant des classes, on peut varier l&#39;habillage ou identifier précisément une instance.</p>
<ul>
<li><p><strong>as-*</strong> : permet de faire varier le style/comportement d&#39;un composant/gabarit. <em>Exemple : <samp>class=&quot;name-of-component as-popup&quot;</samp> pour permettre au composant de s&#39;afficher comme une popup.</em></p>
</li>
<li><p><strong>with-*</strong> : un équivalent de <samp>as-*</samp>. <em>Vous pouvez par exemple réserver <samp>as-*</samp> pour les composants et <samp>with-*</samp> pour les gabarits.</em></p>
</li>
<li><p><strong>is-*</strong> : permet de décrire l&#39;état d&#39;un composant/gababrit ou afin d&#39;activer/désactiver des visuels et/ou fonctionnalités ou une capacité à permettre une fonctionnalité. <em>Exemple : <samp>class=&quot;name-of-component is-opened&quot;</samp> pour décrire que la popup est ouverte ou <samp>class=&quot;name-of-component is-closable&quot;</samp> pour dire que la popup peut être manuellement fermée</em>.</p>
</li>
<li><p><strong>for-*</strong> : permet d&#39;identifier précisément un composant/gabarit parmi plusieurs autres du même type. <em>Exemple : class=&quot;part-of-template for-ads&quot; pour identifier le contenu du composant comme étant de la publicité par exemple.</em></p>
</li>
</ul>
<h2 id="css-et-js-une-seule-classe-pour-les-gouverner-toutes">CSS et JS : une seule classe pour les gouverner toutes</h2>
<p>Nous y voilà, au point qui à lui seul m&#39;a donné l&#39;envie d&#39;écrire cet article.</p>
<blockquote>
<p>Le <a href="http://guidecss.fr/convention.html">Guide CSS FR</a> nous dit « <em>N&#39;utilisez jamais une classe de style CSS pour vos ancres JavaScript. Associer un comportement javascript à une classe de style signifie que nous ne pourrons jamais avoir l&#39;un sans l&#39;autre.</em> » et nous donne comme exemple : « <em>is-sortable  js-is-sortable</em> »</p>
<p><strong>Cela est faux.</strong> Je m&#39;explique.</p>
</blockquote>
<ol>
<li><p>Dans le cas des Patterns ; une unique classe doit se suffire à elle-même. C&#39;est précisément parce qu&#39;elle a vocation à être apposée à la main qu&#39;il ne doit pas être possible de gérer le visuel et le JavaScript indépendamment.</p>
<p>Soit tous les <samp>.btn-popup</samp> ouvre une popup, soit aucun. Il n&#39;y a pas de raison que les <samp>.btn-popup</samp> n&#39;ouvre pas les popups et que les <samp>.btn-popup.js-btn-popup</samp> les ouvre. Le <samp>.btn-popup</samp> se suffit à lui-même. Si toutefois on souhaite un bouton identique au <samp>.btn-popup</samp>, sans que celui-ci n&#39;ouvre de popup, c&#39;est dans la CSS et le HTML que ça se passe avec par exemple les règles CSS <samp>.btn-popup, .btn-foo { /* same design */ }</samp> que l&#39;on applique sur l&#39;élément HTML <samp>.btn-foo</samp>.</p>
<p>Une autre manière de faire serait alors les règles CSS <samp>.btn-foo { /* design */ } .is-popup-openable { cursor: pointer; }</samp> appliqué sur un élément HTML <samp>.btn-foo.is-popup-openable</samp>. Comprenez bien ici que le <samp>cursor: pointer</samp> et l&#39;action de rendre cliquable sont encore une fois liés à une unique classe qui est <samp>.is-popup-openable</samp> et qu&#39;il n&#39;y a pas de sens à utiliser <samp>.is-popup-openable.js-is-popup-openable</samp>. Soit la classe y est et l&#39;élément est cliquable avec une main, soit elle n&#39;y ai pas et l&#39;élément n&#39;est pas cliquable sans main.</p>
</li>
<li><p>Dans le cas des Components et des Templates, c&#39;est pareil. Il est cependant envisageable que dans un cas on souhaite afficher un Component de manière standard, et dans un autre cas on souhaite lui faire exécuter un script pour par exemple gérer un défilement automatique d&#39;item ; une visionneuse. </p>
<p>Cela n&#39;a pas de sens que <samp>.presentation-items</samp> ne soit pas un visionneur mais que <samp>.presentation-items.js-presentation-items</samp> en soit un. Non, cela a plus de sens que <samp>.presentation-items</samp> n&#39;en soit pas nécessairement un mais que <samp>.presentation-items.as-viewer</samp> en soit un.</p>
<p>Pas besoin de préciser <samp>.js-</samp> car c&#39;est au moment de sélectionner un Component par la classe le désignant (et sa variation ou non) dans nos fichiers JavaScript qu&#39;on décide qu&#39;un code JavaScript doit s&#39;appliquer dessus : et absolument pas parce que nous l&#39;avons décidé en ajoutant la même classe avec <samp>.js-</samp> devant.</p>
<p><em>Exemple : Il est possible que j&#39;ajoute du JavaScript pour faire fonctionner <samp>.presentation-items</samp> pour par exemple faire du Lazy Loading de contenu ou que je n&#39;en utilise pas sur <samp>.presentation-items.as-viewer</samp> car mes transitions automatiques sont gérées en CSS3 avec transition et animation.</em></p>
</li>
</ol>
<p><strong>En conclusion : style et comportement doivent être liés à la même classe. Si une autre classe doit être ajoutée, c&#39;est pour décrire un <em>Autre</em> comportement visuel et/ou fonctionnel.</strong></p>
<h2 id="des-components-r-ellement-d-pla-able-partout">Des Components réellement déplaçable partout</h2>
<p>La problématique lorsque l&#39;on déplace des fragments de HTML, c&#39;est de ne plus respecter l&#39;arborescence des <samp>&lt;h1-h6&gt;</samp>. Car si un Component possède un <samp>&lt;h1&gt;</samp>, alors il peut difficilement être mis une fois dans le haut de la page et une fois en bas sans faire hurler au scandale les experts SEO. Réglons ce problème.</p>
<h3 id="rappel-sur-les-block-s-mantiques">Rappel sur les <samp>block</samp> sémantiques</h3>
<p>Sachez qu&#39;en HTML5, <a href="https://blog.lesieur.name/les-balises-h1-multiples-autorisees-en-html5/">il peut y avoir plus d&#39;un <samp>&lt;h1&gt;</samp> par page</a> mais pas à n&#39;importes quelles conditions.</p>
<p>Sous la balise <samp>&lt;body&gt;</samp> : l&#39;intégralité des <samp>&lt;h1-h6&gt;</samp> dispersés entre les balises forment un index hiérarchique. L&#39;élément <samp>&lt;h1&gt;</samp> doit être unique. Mais les balises <samp>&lt;section&gt;</samp>, <samp>&lt;article&gt;</samp>, <samp>&lt;aside&gt;</samp> et <samp>&lt;nav&gt;</samp> remettent les compteurs à zéro et sous chacune de ces balises il est de nouveau possible de disperser des <samp>&lt;h1-h6&gt;</samp> avec un seul <samp>&lt;h1&gt;</samp>, etc.</p>
<p>Chaque nouvel espace de <samp>&lt;section&gt;</samp>, <samp>&lt;article&gt;</samp>, <samp>&lt;aside&gt;</samp> et <samp>&lt;nav&gt;</samp> peut lui-même contenir un <samp>&lt;header&gt;</samp> et un <samp>&lt;footer&gt;</samp>. L&#39;importance des <samp>&lt;h1-h6&gt;</samp> est donc à présent bi-directionnel voir tri-directionnel : un <samp>&lt;h2&gt;</samp> est d&#39;autant plus important qu&#39;il se trouve directement dans <samp>&lt;body&gt;</samp> à l&#39;intérieur d&#39;un <samp>&lt;header&gt;</samp> au contraire d&#39;un <samp>&lt;h1&gt;</samp> sous une pile de plusieurs <samp>&lt;section&gt;</samp>. Il est même probable que un <samp>body &gt; article &gt; header &gt; h1</samp> dans une page avec une unique balise <samp>&lt;article&gt;</samp> est plus de poids que le <samp>body &gt; header &gt; h1</samp> du titre de page (mais je spécule, ce n&#39;ai pas moi qui fait les règles des algorithmes).</p>
<p>En tout cas le voilà ! Notre moyen de rendre déplaçable les Components comme des sortes de module pouvant chacun contenir : un <samp>&lt;header&gt;</samp>, un <samp>&lt;footer&gt;</samp> et une hiérarchie <samp>&lt;h1-h6&gt;</samp>.</p>
<h3 id="l-application-simple-faire-g-rer-le-cloisonnement-par-le-template">L&#39;application simple : faire gérer le cloisonnement par le Template</h3>
<p>Le moyen le plus simple est de gérer le cloisonnement avec le Template. Imaginons ce Template :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;body class=&quot;home&quot;&gt;
  &lt;div class=&quot;layout&quot;&gt;
    &lt;header class=&quot;area for-header&quot;&gt;
      &lt;!-- Loop of Components here. --&gt;
    &lt;/header&gt;
    &lt;section class=&quot;area for-main&quot;&gt;
      &lt;div class=&quot;part for-overview&quot;&gt;
        &lt;!-- Loop of Components here. --&gt;
      &lt;/div&gt;
      &lt;aside class=&quot;part for-ads&quot;&gt;
        &lt;!-- Loop of Components here. --&gt;
      &lt;/aside&gt;
    &lt;/section&gt;
    &lt;section class=&quot;area for-presentation&quot;&gt;
      &lt;!-- Loop of Components here. --&gt;
    &lt;/section&gt;
    &lt;aside class=&quot;area for-also&quot;&gt;
      &lt;!-- Loop of Components here. --&gt;
    &lt;/aside&gt;
    &lt;footer class=&quot;area for-footer&quot;&gt;
      &lt;!-- Loop of Components here. --&gt;
    &lt;/footer&gt;
  &lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p>ainsi que ce Component :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;div class=&quot;component&quot;&gt;
  &lt;div class=&quot;ui&quot;&gt;
    &lt;header class=&quot;component--header&quot;&gt;
      &lt;h1&gt;Title&lt;h1&gt;
    &lt;/header&gt;
    &lt;div  class=&quot;component--content&quot;&gt;
      &lt;h2&gt;Subtitle&lt;/h2&gt;
      &lt;p&gt;Text&lt;/p&gt;
      &lt;p&gt;Text&lt;/p&gt;
    &lt;/div&gt;
    &lt;footer class=&quot;component--footer&quot;&gt;
      &lt;h3&gt;Lien&lt;h3&gt;
    &lt;/footer&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>La contrainte avec ce composant est donc qu&#39;il ne pourra jamais être placé dans <samp>.for-header</samp> ni dans <samp>.for-footer</samp> sous peine d&#39;injecter un double <samp>&lt;header&gt;</samp> et <samp>&lt;footer&gt;</samp> dans le <samp>&lt;body&gt;</samp>. Cela peut être évité en estimant que les Components de Header et de Footer globaux sont spécifiques à ses zones et ne seront pas déplaçable (comme c&#39;est pratiquement toujours le cas).</p>
<p>On voit cependant que hors-mi ces zones, notre Component peut atterrir un peu partout ou il le souhaite sans que cela ne pose de soucis.</p>
<h3 id="l-application-complexe-faire-g-rer-le-cloisonnement-au-moment-de-l-injection-du-component-hors-template-et-hors-component">L&#39;application complexe : faire gérer le cloisonnement au moment de l&#39;injection du Component, hors Template et hors Component</h3>
<p>Penchons nous de nouveau sur <a href="https://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/">NodeAtlas</a> qui va nous permettre de créer des injections de Component dynamique ! Vous pouvez faire des systèmes similaires de vos côtés avec vos outils ou Frameworks préférés. Cela n&#39;est qu&#39;un brouillon car on pourrait même envisager l’injection de Component dans des Component, etc.</p>
<p>Avec...</p>
<ol>
<li><p>Le webconfig suivant <samp>webconfig.json</samp> :</p>
<pre class="prettyprint linenums"><code class="lang-js">{
&quot;commonController&quot;: &quot;common.js&quot;,
&quot;routes&quot;: {
 &quot;/&quot; : {
   &quot;template&quot;: &quot;home.htm&quot;,
   &quot;variation&quot;: &quot;home.json&quot;
 }
}
}
</code></pre>
</li>
<li><p>Le Template <samp>templates/home.htm</samp> :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;!-- ... --&gt;
&lt;body class=&quot;home&quot;&gt;
&lt;div class=&quot;layout&quot;&gt;
 &lt;div class=&quot;area for-header&quot;&gt;
   &lt;%- includeComponent(&#39;placeholder-header&#39;) %&gt;
 &lt;/div&gt;
 &lt;div class=&quot;area for-main&quot;&gt;
   &lt;div class=&quot;part for-overview&quot;&gt;
     &lt;%- includeComponent(&#39;placeholder-overview&#39;) %&gt;
   &lt;/div&gt;
   &lt;div class=&quot;part for-ads&quot;&gt;
     &lt;%- includeComponent(&#39;placeholder-ads&#39;) %&gt;
   &lt;/div&gt;
 &lt;/div&gt;
 &lt;div class=&quot;area for-presentation&quot;&gt;
   &lt;%- includeComponent(&#39;placeholder-presentation&#39;) %&gt;
 &lt;/div&gt;
 &lt;div class=&quot;area for-also&quot;&gt;
   &lt;%- includeComponent(&#39;placeholder-also&#39;) %&gt;
 &lt;/div&gt;
 &lt;div class=&quot;area for-footer&quot;&gt;
   &lt;%- includeComponent(&#39;placeholder-footer&#39;) %&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;!-- ... --&gt;
</code></pre>
</li>
<li><p>Le Fichier de variation <samp>variations/home.json</samp> :</p>
<pre class="prettyprint linenums"><code class="lang-js">{
&quot;components&quot;: {

 &quot;placeholder-header&quot;: [{
   &quot;path&quot;: &quot;templates/component.htm&quot;,
   &quot;variation&quot;: {
     &quot;mainTag&quot;: &quot;div&quot;
   }
 }, {
   &quot;path&quot;: &quot;templates/component.htm&quot;,
   &quot;variation&quot;: {
     &quot;mainTag&quot;: &quot;header&quot;
   }
 }],

 &quot;placeholder-overview&quot;: [{
   &quot;path&quot;: &quot;templates/three-boxes.htm&quot;,
   &quot;variation&quot;: {
     &quot;mainTag&quot;: &quot;section&quot;
   }
 }],

 &quot;placeholder-ads&quot;: [{
   &quot;path&quot;: &quot;templates/component.htm&quot;,
   &quot;variation&quot;: {
     &quot;mainTag&quot;: &quot;aside&quot;
   }
 }],

 &quot;placeholder-presentation&quot;: [{
   &quot;path&quot;: &quot;templates/three-boxes.htm&quot;,
   &quot;variation&quot;: {
     &quot;mainTag&quot;: &quot;article&quot;
   }
 }],

 &quot;placeholder-also&quot;: [{
   &quot;path&quot;: &quot;templates/component.htm&quot;,
   &quot;variation&quot;: {
     &quot;mainTag&quot;: &quot;aside&quot;
   }
 }],

 &quot;placeholder-footer&quot;: [{
   &quot;path&quot;: &quot;templates/component.htm&quot;,
   &quot;variation&quot;: {
     &quot;mainTag&quot;: &quot;footer&quot;
   }
 }, {
   &quot;path&quot;: &quot;templates/component.htm&quot;,
   &quot;variation&quot;: {
     &quot;mainTag&quot;: &quot;div&quot;
   }
 }, {
   &quot;path&quot;: &quot;templates/component.htm&quot;,
   &quot;variation&quot;: {
     &quot;mainTag&quot;: &quot;div&quot;
   }
 }]

}
}
</code></pre>
</li>
<li><p>Le Component <samp>components/component.htm</samp> :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;%- sc(&#39;&lt;section class=&quot;banner&quot;&gt;&#39;, component) %&gt;
&lt;div class=&quot;ui&quot;&gt;
 &lt;%- sc(&#39;&lt;header class=&quot;component--header&quot;&gt;&#39;, component) %&gt;
   &lt;%- sc(&#39;&lt;h1&gt;&#39;, component) %&gt;Title&lt;%- sc(&#39;&lt;/h1&gt;&#39;, component) %&gt;
 &lt;%- sc(&#39;&lt;/header&gt;&#39;, component) %&gt;
 &lt;div  class=&quot;component--content&quot;&gt;
   &lt;%- sc(&#39;&lt;h2&gt;&#39;, component) %&gt;Title&lt;%- sc(&#39;&lt;/h2&gt;&#39;, component) %&gt;
   &lt;p&gt;Text&lt;/p&gt;
   &lt;p&gt;Text&lt;/p&gt;
 &lt;/div&gt;
 &lt;%- sc(&#39;&lt;footer class=&quot;component--footer&quot;&gt;&#39;, component) %&gt;
   &lt;%- sc(&#39;&lt;h3&gt;&#39;, component) %&gt;Lien&lt;%- sc(&#39;&lt;/h3&gt;&#39;, component) %&gt;
 &lt;%- sc(&#39;&lt;/footer&gt;&#39;, component) %&gt;
&lt;/div&gt;
&lt;%- sc(&#39;&lt;/section&gt;&#39;, component) %&gt;
</code></pre>
</li>
</ol>
<p>...on pourrait parvenir à nos fins. Pendant la réalisation de nos Components on utilise toujours une <samp>&lt;section&gt;</samp>. C&#39;est au moment d&#39;injecter le Component que l&#39;on décide grâce à mainTag quelle balise globale va remplacée <samp>&lt;section&gt;</samp>. On s&#39;assurerait également de transformer tous les <samp>&lt;header&gt;</samp> en <samp>&lt;div class=&quot;header-like&quot;&gt;</samp> (etc.) dans le cas où le mainTag serait <samp>div</samp>, <samp>header</samp> ou <samp>footer</samp>.</p>
<p>Voici pour les petits curieux le code <a href="https://github.com/Haeresis/NodeAtlas">NodeAtlas</a> de <samp>comtrollers/common.js</samp> qu&#39;il faut pour faire fonctionner tout ça.</p>
<ul>
<li><a href="http://codepen.io/Haeresis/pen/jbNVYa/?editors=001">Contenu du fichier <samp>controller/common.js</samp></a></li>
</ul>
<h4 id="de-la-s-mantique-automatique">De la sémantique automatique</h4>
<p>Bon, <strong>vous conviendrez que notre Component est assez laid</strong>, et ça rend la chose faussement complexe. Je vous propose de plutôt maintenir un fichier <samp>components/component.htm</samp> comme celui-ci :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;section$ class=&quot;banner&quot;&gt;
  &lt;div class=&quot;ui&quot;&gt;
    &lt;header$ class=&quot;component--header&quot;&gt;
      &lt;h1$&gt;Title&lt;/h1$&gt;
    &lt;/header$&gt;
    &lt;div  class=&quot;component--content&quot;&gt;
      &lt;h2$&gt;Title&lt;/h2$&gt;
      &lt;p&gt;Text&lt;/p&gt;
      &lt;p&gt;Text&lt;/p&gt;
    &lt;/div&gt;
    &lt;footer$ class=&quot;component--footer&quot;&gt;
      &lt;h3$&gt;Lien&lt;/h3$&gt;
    &lt;/footer$&gt;
  &lt;/div&gt;
&lt;/section$&gt;
</code></pre>
<p>grâce au projet <a href="https://github.com/Haeresis/ComponentAtlas">ComponentAtlas</a> qui est un module additionnel de <a href="https://github.com/Haeresis/NodeAtlas">NodeAtlas</a>. Il permet l&#39;inclusion de Component en cascade, ne touchera à aucunes balises sans $ et permettra de transformer ceci :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;section$ class=&quot;component&quot;&gt;
  &lt;header$ id=&quot;test&quot;&gt;header&lt;/header$&gt;
  &lt;footer$ class=&quot;test&quot;&gt;footer&lt;/footer$&gt;
  &lt;h1$ class=&#39;test&#39;&gt;h1&lt;/h1$&gt;
  &lt;h2$ class=&#39;test&#39; id=&quot;test&quot;&gt;h2&lt;/h2$&gt;
  &lt;h3$ id=&quot;test&quot; class=&quot;test&quot;&gt;h3&lt;/h3$&gt;
  &lt;h4$ id=&quot;test&quot; class=&#39;test&#39;&gt;h4&lt;/h4$&gt;
  &lt;h5$ id=&#39;test&#39; class=&#39;test&#39;&gt;h5&lt;/h5$&gt;
  &lt;h6$&gt;h6&lt;/h6$&gt;
&lt;/section$&gt;
</code></pre>
<p>en ceci :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;header class=&quot;component&quot;&gt;
  &lt;div class=&quot;header-like&quot; id=&quot;test&quot;&gt;header&lt;/div&gt;
  &lt;div class=&quot;footer-like test&quot;&gt;footer&lt;/div&gt;
  &lt;div class=&#39;h1-like test&#39;&gt;h1&lt;/div&gt;
  &lt;div class=&quot;h2-like test&#39; id=&quot;test&quot;&gt;h2&lt;/div&gt;
  &lt;div class=&quot;h3-like test&quot;&gt;h3&lt;/div&gt;
  &lt;div class=&#39;h4-like test&#39;&gt;h4&lt;/div&gt;
  &lt;div class=&#39;h5-like test&#39;&gt;h5&lt;/div&gt;
  &lt;div class=&quot;h6-like&quot;&gt;h6&lt;/div&gt;
&lt;/header&gt;
</code></pre>
<p>si le <samp>maintTag</samp> était <samp>header</samp> ou de le transformer en ceci :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;section class=&quot;component&quot;&gt;
  &lt;header id=&quot;test&quot;&gt;header&lt;/header&gt;
  &lt;footer class=&quot;test&quot;&gt;footer&lt;/footer&gt;
  &lt;h1 class=&#39;test&#39;&gt;h1&lt;/h1$&gt;
  &lt;h2 class=&#39;test&#39; id=&quot;test&quot;&gt;h2&lt;/h2&gt;
  &lt;h3 id=&quot;test&quot; class=&quot;test&quot;&gt;h3&lt;/h3&gt;
  &lt;h4 id=&quot;test&quot; class=&#39;test&#39;&gt;h4&lt;/h4&gt;
  &lt;h5 id=&#39;test&#39; class=&#39;test&#39;&gt;h5&lt;/h5&gt;
  &lt;h6&gt;h6&lt;/h6&gt;
&lt;/section&gt;
</code></pre>
<p>sans <samp>mainTag</samp> de précisé.</p>
]]></description>
            <link>http://localhost:7776conventions-html-et-css-orientes-composants/</link>
            <guid isPermaLink="false">55df1d924bf5981b0760b95b</guid>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[CSS]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[HTML]]></category>
            <category><![CDATA[Ressources]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Thu, 27 Aug 2015 14:24:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Activer vos effets JavaScript en fonction de vos Media Queries]]></title>
            <description><![CDATA[<p>Je viens de voir un code allembiqué permettant de maintenir la hauteur de deux <samp>&lt;div&gt;</samp> côte à côte. Problème ? Ces éléments ne sont pas côte à côte en version mobile mais l&#39;un sous l&#39;autre : et maintenir la hauteur dans ce cas là ne sert à rien. La semaine d&#39;avant, j&#39;ai vu un code avec une cascade de <samp>if</samp> permettant d&#39;ouvrir une vidéo dans une popup sur PC et d&#39;ouvrir un lien Youtube sur mobile. Bien évidemment, les petits écrans PC ouvraient une popup alors qu&#39;il aurait été intéressant qu&#39;ils ouvrent aussi un lien. Je vous fais l&#39;impasse sur les comportements au redimensionnement de la fenêtre.</p>
<p>Bref, lançons-nous dans un petit exercice pour permettre un code JavaScript Responsive Web Design, sans se soucier de l&#39;appareil qui l’exécute.</p>
<h2 id="la-fonction-javascript-window-matchmedia-">La fonction JavaScript <samp>window.matchMedia</samp></h2>
<p>De la même manière que dans une feuille CSS nous allons nous servir de <samp>@media</samp>, en JavaScript, nous allons nous servir de <samp>window.matchMedia</samp> pour adresser différent comportement en fonction de la taille d&#39;affichage de l&#39;écran. La syntaxe dans les deux cas est identique et une simple ligne gère la condition total d&#39;affichage. Enfin, si votre navigateur ne gère pas <samp>window.matchMedia</samp>, il ne gère pas non plus <samp>@media</samp> ce qui va nous arranger pour le support.</p>
<h2 id="notre-probl-matique">Notre problématique</h2>
<p>Je souhaite ouvrir la vidéo d&#39;une chaine Youtube dans une popup. Si l&#39;écran est trop petit, je préfère allez sur la page Internet de la page. Cela permet aux smartphones de proposer d&#39;ouvrir le lien Internet dans une application tierce dédiée (entre autre) et aux petits écrans de ne pas se manger de popup.</p>
<h3 id="html">HTML</h3>
<p>Tout d&#39;abord, préparons le terrain HTML. Nous avons besoin de deux box côte à côte, la première présentera la chaine Youtube, la seconde permettra de lancer la vidéo dans une popup. Si l&#39;écran est trop petit, les box seront l&#39;une sous l&#39;autre.</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;section class=&quot;youtube-presentation&quot;&gt;
  &lt;div class=&quot;presentation&quot;&gt;
    &lt;h1&gt;Youtube for Playstation&lt;/h1&gt;
    &lt;h2&gt;Description&lt;/h2&gt;
    &lt;p&gt;Welcome to the official home of PlayStation on YouTube.&lt;/p&gt;
    &lt;p&gt;Here you&#39;ll find the latest videos about your favorite
    PlayStation products direct from Sony Computer Entertainment,
    as well as consumer generated clips from other PlayStation
    fans. To stay up to date, be sure to subscribe above and
    check back often for the new game trailers,
    behind-the-scenes footage, in-game moments,
    tips and tricks and exclusive sneak peeks.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&quot;video&quot;&gt;
    &lt;h2&gt;Final Fantasy VII Remake E3 Trailer | PS4&lt;/h2&gt;
    &lt;div class=&quot;link&quot;&gt;
      &lt;a 
        href=&quot;https://www.youtube.com/watch?v=Kznek1uNVsg&quot;&gt;&lt;img 
        src=&quot;https://lh3.googleusercontent.com/[...]&quot; 
        alt=&quot;Final Fantasy VII Remake E3 Trailer | PS4&quot;&gt;&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class=&quot;popup&quot;&gt;
      &lt;div class=&quot;embeded&quot;&gt;
        &lt;div class=&quot;close&quot;&gt;&lt;/div&gt;
        &lt;iframe 
          width=&quot;560&quot; 
          height=&quot;315&quot; 
          src=&quot;https://www.youtube.com/embed/Kznek1uNVsg&quot; 
          frameborder=&quot;0&quot; 
          allowfullscreen&gt;&lt;/iframe&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;
</code></pre>
<h3 id="css">CSS</h3>
<p>Habillons tout ça :</p>
<pre class="prettyprint linenums"><code class="lang-css">/* On créer un container responsive */
* {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}
.youtube-presentation {
  margin-left: -1rem;
  margin-right: -1rem;
  margin-top: 1rem;
  margin-bottom: 1rem;
}
.youtube-presentation:after {
  content: &#39;&#39;;
  clear: left;
  display: block;
}

/* Et deux colonnes Responsive */
.youtube-presentation .presentation,
.youtube-presentation .video {
   padding: 1rem;
   float: left;
   width: calc(100% - 2rem);
   background-color: #e0e0e0;
   margin: 1rem;
   margin: 1rem;
}
@media (min-width: 768px) {
  .youtube-presentation .presentation,
  .youtube-presentation .video {
     width: calc(50% - 2rem);
  }
}

/* Mise en forme de la présentation */
.youtube-presentation .presentation *:first-child {
  margin-top: 0;
}
.youtube-presentation .presentation *:last-child {
  margin-bottom: 0;
}

/* Mise en forme de l&#39;image vidéo */
.youtube-presentation .video *:first-child {
  margin-top: 0;
}
.youtube-presentation .video .link {
  max-width: 100%;  
}
.youtube-presentation .video .link img {
  max-width: 100%;
  background-color: #000;
  padding-top: 1rem;
  padding-bottom: 1rem;
  margin: 0;
  margin-top: 1rem;
}

/* Mise en forme de la popup pour la vidéo */
.youtube-presentation .video .popup {
  background-color: rgba(0, 0, 0, 0.8);
}
.youtube-presentation .video iframe {
  position: absolute;
  width: 100%;
  height: 100%;
}

/* Affichage de la popup */
.youtube-presentation .popup {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
@media (min-width: 768px) {
  .youtube-presentation .popup.opened {
    display: block;
  }
}
.youtube-presentation .popup .embeded {
  position: absolute;
  width: 50%;
  height: 50%;
  top: 50%;
  left: 50%;
  -webkit-transform: translateX(-50%) translateY(-50%);
     -moz-transform: translateX(-50%) translateY(-50%);
      -ms-transform: translateX(-50%) translateY(-50%);
       -o-transform: translateX(-50%) translateY(-50%);
          transform: translateX(-50%) translateY(-50%);
}
.youtube-presentation .popup .close {
  position:absolute;
  right: 0;
  bottom: 100%;
  cursor: pointer;
}
.youtube-presentation .popup .close:before {
  content: &#39;X&#39;;
  display: block;
  color: #000;
  -webkit-border-radius: 50%;
          border-radius: 50%;
  cursor: pointer;
  padding: .2rem;
  font-size: 1rem;
  width: 2rem;
  text-align: center;
  background-color: #fff;
  margin-bottom: .2rem;
}
</code></pre>
<p>Et voyons le résultat !</p>
<section class="youtube-presentation">
  <div class="presentation">
    <div class="like-h1">Youtube for Playstation</div>
    <div class="like-h2">Description</div>
    <p>Welcome to the official home of PlayStation on YouTube.</p>
    <p>Here you&#39;ll find the latest videos about your favorite
    PlayStation products direct from Sony Computer Entertainment,
    as well as consumer generated clips from other PlayStation
    fans. To stay up to date, be sure to subscribe above and 
    check back often for the new game trailers, 
    behind-the-scenes footage, in-game moments, 
    tips and tricks and exclusive sneak peeks.</p>
  </div>
  <div class="video">
    <div class="like-h2">Final Fantasy VII Remake E3 Trailer | PS4</div>
    <div class="link"><a href="https://www.youtube.com/watch?v=Kznek1uNVsg"><svg><path fill-rule="evenodd" clip-rule="evenodd" fill="#1F1F1F" class="ytp-large-play-button-svg" d="M84.15,26.4v6.35c0,2.833-0.15,5.967-0.45,9.4c-0.133,1.7-0.267,3.117-0.4,4.25l-0.15,0.95c-0.167,0.767-0.367,1.517-0.6,2.25c-0.667,2.367-1.533,4.083-2.6,5.15c-1.367,1.4-2.967,2.383-4.8,2.95c-0.633,0.2-1.316,0.333-2.05,0.4c-0.767,0.1-1.3,0.167-1.6,0.2c-4.9,0.367-11.283,0.617-19.15,0.75c-2.434,0.034-4.883,0.067-7.35,0.1h-2.95C38.417,59.117,34.5,59.067,30.3,59c-8.433-0.167-14.05-0.383-16.85-0.65c-0.067-0.033-0.667-0.117-1.8-0.25c-0.9-0.133-1.683-0.283-2.35-0.45c-2.066-0.533-3.783-1.5-5.15-2.9c-1.033-1.067-1.9-2.783-2.6-5.15C1.317,48.867,1.133,48.117,1,47.35L0.8,46.4c-0.133-1.133-0.267-2.55-0.4-4.25C0.133,38.717,0,35.583,0,32.75V26.4c0-2.833,0.133-5.95,0.4-9.35l0.4-4.25c0.167-0.966,0.417-2.05,0.75-3.25c0.7-2.333,1.567-4.033,2.6-5.1c1.367-1.434,2.967-2.434,4.8-3c0.633-0.167,1.333-0.3,2.1-0.4c0.4-0.066,0.917-0.133,1.55-0.2c4.9-0.333,11.283-0.567,19.15-0.7C35.65,0.05,39.083,0,42.05,0L45,0.05c2.467,0,4.933,0.034,7.4,0.1c7.833,0.133,14.2,0.367,19.1,0.7c0.3,0.033,0.833,0.1,1.6,0.2c0.733,0.1,1.417,0.233,2.05,0.4c1.833,0.566,3.434,1.566,4.8,3c1.066,1.066,1.933,2.767,2.6,5.1c0.367,1.2,0.617,2.284,0.75,3.25l0.4,4.25C84,20.45,84.15,23.567,84.15,26.4z M33.3,41.4L56,29.6L33.3,17.75V41.4z"></path><polygon fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" points="33.3,41.4 33.3,17.75 56,29.6"></polygon></svg><img src="https://lh3.googleusercontent.com/proxy/EGUmRlYCgAUhw7F9Hic2auLGZfu3r9rAp1Z3hgouT_iYqgmKzxDtR5xcVimq25AIvdIUdBFC0dESno2LSxH5fd38P3O-jcmecp0A0GFXdCzkfVxDM0PqhVrH=w692-h384" alt="Final Fantasy VII Remake E3 Trailer | PS4"></a></div>
    <div class="popup"><br>      <div class="embeded">
        <div class="close"></div>
        <iframe width="560" height="315" src="https://www.youtube.com/embed/Kznek1uNVsg" frameborder="0" allowfullscreen></iframe>
      </div>
    </div>
  </div>
</section>

<blockquote>
<p><em><samp>Conclusion :</samp></em> Sans JavaScript nous avons été capable d&#39;habiller la totalité des éléments et de créer l&#39;affichage de la popup (que l&#39;on ne voit pas sans la classe <samp>opened</samp>). Nous allons maintenant avoir du JavaScript pour</p>
<ul>
<li>maintenir la hauteur des box à la même taille, uniquement quand ils sont côte à côte,</li>
<li>ouvrir la popup en grand format ou laisser le lien amener à une page Youtube.</li>
</ul>
</blockquote>
<h2 id="notre-solution-window-matchmedia-">Notre solution : <samp>window.matchMedia</samp></h2>
<p>Commençons dans un premier temps, à l&#39;aide de jQuery, par appliquer le script qui va maintenir la hauteur, et ouvrir la popup.</p>
<pre class="prettyprint linenums"><code class="lang-js">/* Variable globale si pas encore défini */
var website = website || {},
    $window = $window || $(window);

/* 
 * Scope pour nos deux nouvelles fonctions, 
 * aucune variable ici ne polluera le reste
 * des scripts.
 */
(function (publics) {

  /* 
   * Création de la fonctionnalité pour maintenir 
   * les hauteurs.
   */
  publics.sameHeight = function ($items) {

    function sameHeight() {
      var maxHeight = 0;

      /* Parmi les éléments recherchés... */
      $items.height(&quot;&quot;).each(function () {
        var $current = $(this);

        /* ...on trouve le plus haut... */
        if ($current.height() &gt; maxHeight) {
          maxHeight = $current.height();
        }

      /* Et on applique cette hauteur à tous les autres. */
      }).height(maxHeight);
    }

    /* 
     * Application de la fonction à la 
     * lecture de celle-ci...
     */
    sameHeight();

    /* 
     * ...puis à chaque redimensionnement de 
     * page.
     */
    $window.resize(function () {
      sameHeight(); 
    });
  };

  /* 
   * Création de la fonctionnalité pour ouvrir/fermer 
   * les popups.
   */
  publics.popupVideo = function ($senders, $targets) {

    /* Sur une popup ouverte... */
    function closePopup($popup) {
      /* ...permettre au clique sur le background qu&#39;elle se ferme... */
      $popup.click(function (e) {
        e.preventDefault();
        $popup.removeClass(&quot;opened&quot;)

      /* ...mais pas que le contenu utile la ferme... */
      }).find(&quot;.content&quot;).click(function (e) {
        e.stopPropagation();

      /* ...mais que le bouton close la ferme. */
      }).find(&quot;.close&quot;).click(function (e) {
        e.preventDefault();
        $popup.removeClass(&quot;opened&quot;)
      });
    }

    /* Chaque élément d&#39;ouverture $sender... */
    function popupVideo() {
      $senders.each(function (i) {
        var $sender = $(this),
            $target = $targets.eq(i);

        /* ...cible sa popup associée $target */
        $sender.click(function (e) {
          /* ...l&#39;ouvre au clique... */
          e.preventDefault();
          $target.addClass(&quot;opened&quot;);
        });

        /* ...et met en place sa fermeture. */
        closePopup($target)
      });
    }

    /* 
     * Application de la fonction à la 
     * lecture de celle-ci...
     */
    popupVideo();

    /* 
     * ...puis à chaque redimensionnement de 
     * page.
     */
    $window.resize(function () {
      popupVideo(); 
    });
  };

}(website));

/* 
 * Application de nos deux fonctions sur le 
 * HTML préparé en amont.
 */
website.sameHeight(
  $(&quot;.youtube-presentation .presentation, .youtube-presentation .video&quot;)
);
website.popupVideo(
  $(&quot;.youtube-presentation .video a&quot;),
  $(&quot;.youtube-presentation .popup&quot;)
);
</code></pre>
<p>Ce qui nous donne au final... ceci !</p>
<section class="youtube-presentation ex1">
  <div class="presentation">
    <div class="like-h1">Youtube for Playstation</div>
    <div class="like-h2">Description</div>
    <p>Welcome to the official home of PlayStation on YouTube.</p>
    <p>Here you&#39;ll find the latest videos about your favorite
    PlayStation products direct from Sony Computer Entertainment,
    as well as consumer generated clips from other PlayStation
    fans. To stay up to date, be sure to subscribe above and 
    check back often for the new game trailers, 
    behind-the-scenes footage, in-game moments, 
    tips and tricks and exclusive sneak peeks.</p>
  </div>
  <div class="video">
    <div class="like-h2">Final Fantasy VII Remake E3 Trailer | PS4</div>
    <div class="link"><a href="https://www.youtube.com/watch?v=Kznek1uNVsg"><svg><path fill-rule="evenodd" clip-rule="evenodd" fill="#1F1F1F" class="ytp-large-play-button-svg" d="M84.15,26.4v6.35c0,2.833-0.15,5.967-0.45,9.4c-0.133,1.7-0.267,3.117-0.4,4.25l-0.15,0.95c-0.167,0.767-0.367,1.517-0.6,2.25c-0.667,2.367-1.533,4.083-2.6,5.15c-1.367,1.4-2.967,2.383-4.8,2.95c-0.633,0.2-1.316,0.333-2.05,0.4c-0.767,0.1-1.3,0.167-1.6,0.2c-4.9,0.367-11.283,0.617-19.15,0.75c-2.434,0.034-4.883,0.067-7.35,0.1h-2.95C38.417,59.117,34.5,59.067,30.3,59c-8.433-0.167-14.05-0.383-16.85-0.65c-0.067-0.033-0.667-0.117-1.8-0.25c-0.9-0.133-1.683-0.283-2.35-0.45c-2.066-0.533-3.783-1.5-5.15-2.9c-1.033-1.067-1.9-2.783-2.6-5.15C1.317,48.867,1.133,48.117,1,47.35L0.8,46.4c-0.133-1.133-0.267-2.55-0.4-4.25C0.133,38.717,0,35.583,0,32.75V26.4c0-2.833,0.133-5.95,0.4-9.35l0.4-4.25c0.167-0.966,0.417-2.05,0.75-3.25c0.7-2.333,1.567-4.033,2.6-5.1c1.367-1.434,2.967-2.434,4.8-3c0.633-0.167,1.333-0.3,2.1-0.4c0.4-0.066,0.917-0.133,1.55-0.2c4.9-0.333,11.283-0.567,19.15-0.7C35.65,0.05,39.083,0,42.05,0L45,0.05c2.467,0,4.933,0.034,7.4,0.1c7.833,0.133,14.2,0.367,19.1,0.7c0.3,0.033,0.833,0.1,1.6,0.2c0.733,0.1,1.417,0.233,2.05,0.4c1.833,0.566,3.434,1.566,4.8,3c1.066,1.066,1.933,2.767,2.6,5.1c0.367,1.2,0.617,2.284,0.75,3.25l0.4,4.25C84,20.45,84.15,23.567,84.15,26.4z M33.3,41.4L56,29.6L33.3,17.75V41.4z"></path><polygon fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" points="33.3,41.4 33.3,17.75 56,29.6"></polygon></svg><img src="https://lh3.googleusercontent.com/proxy/EGUmRlYCgAUhw7F9Hic2auLGZfu3r9rAp1Z3hgouT_iYqgmKzxDtR5xcVimq25AIvdIUdBFC0dESno2LSxH5fd38P3O-jcmecp0A0GFXdCzkfVxDM0PqhVrH=w692-h384" alt="Final Fantasy VII Remake E3 Trailer | PS4"></a></div>
    <div class="popup"><br>      <div class="embeded">
        <div class="close"></div>
        <iframe width="560" height="315" src="https://www.youtube.com/embed/Kznek1uNVsg" frameborder="0" allowfullscreen></iframe>
      </div>
    </div>
  </div>
</section>

<blockquote>
<p>Les mécanismes sont en place et fonctionnels, cependant, au vu du design de ma page dans ses divers formats Responsive, nous allons :</p>
<ul>
<li>Pouvoir changer les règles pour les Media Queries <samp>@media</samp> de ma feuille CSS.</li>
<li>Les implémenter également dans le JavaScript avec <samp>window.matchMedia</samp>.</li>
</ul>
</blockquote>
<h3 id="le-code-javascript-final">Le code JavaScript final</h3>
<p>Au regard de l&#39;affichage de ma zone de contenu, il y a assez de place pour afficher les box côte à côte pour une largeur de fenêtre de 992px à l&#39;infini et entre 480px et 780px. En ce qui concerne l&#39;affichage de la popup, en dessous de 480px de large, je préférerais afficher la vidéo sur une page dédiée Youtube ou dans une application tierce. Je veux également le même comportement si l&#39;affichage est inférieur à 320px de hauteur.</p>
<p>Les deux Media Queries seront donc :</p>
<ul>
<li>Pour les box : <samp>(min-width: 480px) AND (max-width: 779px), (min-width: 992px)</samp></li>
<li>Pour la popup : <samp>(min-width: 480px) AND (min-height: 320px)</samp></li>
</ul>
<p><em>Note : Les valeurs données étant incluses, je mets donc 779px et non 780px pour qu&#39;à 780px les box soient de nouveau en ligne.</em></p>
<p>Cela nous donne les modifications suivantes pour la CSS :</p>
<p><em>CSS</em></p>
<pre class="prettyprint linenums"><code class="lang-css">/* ... */

/* Et deux colonnes Responsive */
.youtube-presentation .presentation,
.youtube-presentation .video {
   padding: 1rem;
   float: left;
   width: calc(100% - 2rem);
   background-color: #e0e0e0;
   margin: 1rem;
   margin: 1rem;
}
@media (min-width: 480px) AND (max-width: 779px), (min-width: 992px) { /* Media Queries des box. */
  .youtube-presentation .presentation,
  .youtube-presentation .video {
     width: calc(50% - 2rem);
  }
}

/* ... */

/* Affichage de la popup */
.youtube-presentation .popup {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
@media (min-width:480px) AND (min-height: 320px) { /* Media Queries de la popup. */
  .youtube-presentation .popup.opened {
    display: block;
  }
}

/* ... */
</code></pre>
<p>et les modifications suivantes pour le JavaScript :</p>
<pre class="prettyprint linenums"><code class="lang-js">/* ... */

(function (publics) {
  var privates = {};

  /*
   * Nous créons une petite fonctionnalité
   * utile uniquement dans notre scope pour
   * autoriser, en fonction de la Media Queries
   * le JavaScript à faire effet.
   */
  privates.allowMechanism = function (mediaQueries) {
    var rtrn = false;

    /*
     * Si le navigateur ne gère pas les Media Queries,
     * la fonctionnalité ne fait rien de notable.
     */
    if (typeof mediaQueries !== &#39;undefined&#39;) {

      /*
       * Si il les gère, appliquer l&#39;effet, uniquement
       * sur ce qui a été demandé dans la Media Queries.
       */
      if (typeof window.matchMedia !== &#39;undefined&#39;) {
       rtrn = window.matchMedia(mediaQueries).matches;

      /*
       * Si il les gère, mais qu&#39;aucune Media Queries n&#39;a été
       * définies, rendre l&#39;effet pour touts les
       * cas de figure.
       */
      } else {
        rtrn = true;
      }
    }

    return rtrn;
  }

  publics.sameHeight = function ($items, mediaQueries) {

    function sameHeight() {
      var maxHeight = 0;
      $items.height(&quot;&quot;);

      /*
       * On ne manage la hauteur des box que
       * si les Media Queries sont validées.
       */
      if (privates.allowMechanism(mediaQueries)) {
        $items.each(function () {
          var $current = $(this);

          if ($current.height() &gt; maxHeight) {
            maxHeight = $current.height();
          }
        }).height(maxHeight);
      }
    }

    /* ... */
  };

  publics.popupVideo = function ($senders, $targets, mediaQueries) {

    /* ... */

    function popupVideo() {
        /* ... */

        $sender.click(function (e) {

          /*
           * On autorise l&#39;ouverture de la Popup uniquement
           * si les Media Queries sont validées.
           */
          if (privates.allowMechanism(mediaQueries)) {
            e.preventDefault();
            $target.addClass(&quot;opened&quot;);
          }
        });

        /* ... */
      });
    }

    /* ... */
  };

}(website));

/* 
 * Application de nos deux fonctions sur le 
 * HTML préparé en amont.
 */
website.sameHeight(
  $(&quot;.youtube-presentation .presentation, .youtube-presentation .video&quot;),
  &quot;(min-width: 480px) AND (max-width: 779px), (min-width: 992px)&quot;
);
website.popupVideo(
  $(&quot;.youtube-presentation .video a&quot;),
  $(&quot;.youtube-presentation .popup&quot;),
  &quot;(min-width: 480px) AND (min-height: 320px)&quot;
);
</code></pre>
<p>Et voilà !</p>
<section class="youtube-presentation2">
  <div class="presentation">
    <div class="like-h1">Youtube for Playstation</div>
    <div class="like-h2">Description</div>
    <p>Welcome to the official home of PlayStation on YouTube.</p>
    <p>Here you&#39;ll find the latest videos about your favorite
    PlayStation products direct from Sony Computer Entertainment,
    as well as consumer generated clips from other PlayStation
    fans. To stay up to date, be sure to subscribe above and 
    check back often for the new game trailers, 
    behind-the-scenes footage, in-game moments, 
    tips and tricks and exclusive sneak peeks.</p>
  </div>
  <div class="video">
    <div class="like-h2">Final Fantasy VII Remake E3 Trailer | PS4</div>
    <div class="link"><a href="https://www.youtube.com/watch?v=Kznek1uNVsg"><svg><path fill-rule="evenodd" clip-rule="evenodd" fill="#1F1F1F" class="ytp-large-play-button-svg" d="M84.15,26.4v6.35c0,2.833-0.15,5.967-0.45,9.4c-0.133,1.7-0.267,3.117-0.4,4.25l-0.15,0.95c-0.167,0.767-0.367,1.517-0.6,2.25c-0.667,2.367-1.533,4.083-2.6,5.15c-1.367,1.4-2.967,2.383-4.8,2.95c-0.633,0.2-1.316,0.333-2.05,0.4c-0.767,0.1-1.3,0.167-1.6,0.2c-4.9,0.367-11.283,0.617-19.15,0.75c-2.434,0.034-4.883,0.067-7.35,0.1h-2.95C38.417,59.117,34.5,59.067,30.3,59c-8.433-0.167-14.05-0.383-16.85-0.65c-0.067-0.033-0.667-0.117-1.8-0.25c-0.9-0.133-1.683-0.283-2.35-0.45c-2.066-0.533-3.783-1.5-5.15-2.9c-1.033-1.067-1.9-2.783-2.6-5.15C1.317,48.867,1.133,48.117,1,47.35L0.8,46.4c-0.133-1.133-0.267-2.55-0.4-4.25C0.133,38.717,0,35.583,0,32.75V26.4c0-2.833,0.133-5.95,0.4-9.35l0.4-4.25c0.167-0.966,0.417-2.05,0.75-3.25c0.7-2.333,1.567-4.033,2.6-5.1c1.367-1.434,2.967-2.434,4.8-3c0.633-0.167,1.333-0.3,2.1-0.4c0.4-0.066,0.917-0.133,1.55-0.2c4.9-0.333,11.283-0.567,19.15-0.7C35.65,0.05,39.083,0,42.05,0L45,0.05c2.467,0,4.933,0.034,7.4,0.1c7.833,0.133,14.2,0.367,19.1,0.7c0.3,0.033,0.833,0.1,1.6,0.2c0.733,0.1,1.417,0.233,2.05,0.4c1.833,0.566,3.434,1.566,4.8,3c1.066,1.066,1.933,2.767,2.6,5.1c0.367,1.2,0.617,2.284,0.75,3.25l0.4,4.25C84,20.45,84.15,23.567,84.15,26.4z M33.3,41.4L56,29.6L33.3,17.75V41.4z"></path><polygon fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" points="33.3,41.4 33.3,17.75 56,29.6"></polygon></svg><img src="https://lh3.googleusercontent.com/proxy/EGUmRlYCgAUhw7F9Hic2auLGZfu3r9rAp1Z3hgouT_iYqgmKzxDtR5xcVimq25AIvdIUdBFC0dESno2LSxH5fd38P3O-jcmecp0A0GFXdCzkfVxDM0PqhVrH=w692-h384" alt="Final Fantasy VII Remake E3 Trailer | PS4"></a></div>
    <div class="popup"><br>      <div class="embeded">
        <div class="close"></div>
        <iframe width="560" height="315" src="https://www.youtube.com/embed/Kznek1uNVsg" frameborder="0" allowfullscreen></iframe>
      </div>
    </div>
  </div>
</section>

<blockquote>
<p><strong><samp>Conclusion :</samp></strong> Et nous voilà aligné avec les Media Queries que ce soit dans les fichiers CSS ou dans les fichiers JavaScript !</p>
<p>Si vous souhaitez obtenir le code final complet, <a href="http://codepen.io/Haeresis/pen/YXEBbK">c&#39;est par ici</a> !</p>
</blockquote>
]]></description>
            <link>http://localhost:7776activer-vos-effets-javascript-en-fonction-de-vos-media-queries/</link>
            <guid isPermaLink="false">558bf17d6868ca087fbf8649</guid>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[CSS3]]></category>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Fri, 26 Jun 2015 12:03:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[La propriété CSS3 calc() pour arrêter avec les balises HTML imbriquées inutilement]]></title>
            <description><![CDATA[<p>Dans de nombreux cas, on utilise des balises superflus pour gérer ;</p>
<ul>
<li>la largeur total d&#39;une grille avec les éléments externes et </li>
<li>l&#39;espacement entre chaque balise avec l&#39;élément interne. Parfois même, </li>
<li>pour appliquer de la couleur de fond, on utilise une troisième balise ! </li>
</ul>
<p>C&#39;est notamment le cas avec le framework CSS Bootstrap qui se fait vieux. Si vous vous ventez de ne plus suporter IE8 parce qu’il à fait son temps, alors il est également temps d&#39;arrêter d&#39;utiliser des balises inutiles !</p>
<p>Voici un exemple d&#39;ancienne pratique et son équivalence avec la propriété CSS3 <samp>calc()</samp>.</p>
<h2 id="la-grille">La Grille</h2>
<h3 id="exemple-old-school-la-bootstrap">Exemple old school à la Bootstrap</h3>
<p><strong>HTML :</strong></p>
<p>Avec le HTML suivant :</p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-xs-4&quot;&gt;
            &lt;div class=&quot;item&quot;&gt;Zone 1&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-xs-4&quot;&gt;
            &lt;div class=&quot;item&quot;&gt;Zone 2&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-xs-4&quot;&gt;
            &lt;div class=&quot;item&quot;&gt;Zone 3&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-xs-6&quot;&gt;
            &lt;div class=&quot;item&quot;&gt;Zone 4&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-xs-6&quot;&gt;
            &lt;div class=&quot;item&quot;&gt;Zone 5&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>et avec la CSS suivante :</p>
<p><strong>CSS :</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">* {
    box-sizing: border-box;
}
.container {
    max-width: 1200px;
    padding-left: 15px;
    padding-right: 15px;
    margin-bottom: 15px;
}
.row {
    margin-top: 15px;
    margin-left: -15px;
    margin-right: -15px;
}
.row:after {
    content: &quot;&quot;;
    display: block;
    clear: left;
}
.col-xs-6 {
    padding-left: 15px;
    padding-right: 15px;
    width: 50%;
    float: left;
}
.col-xs-4 {
    padding-left: 15px;
    padding-right: 15px;
    width: 33.33333333%;
    float: left;
}
.item {
    background-color: #e8e8e8;
    padding: 15px;
}
</code></pre>
<p>nous obtenons :</p>
<p><strong>Résultat :</strong></p>
<div class="example-grid">
    <div class="container">
        <div class="row">
            <div class="col-xs-4">
                <div class="item">Zone 1</div>
            </div>
            <div class="col-xs-4">
                <div class="item">Zone 2</div>
            </div>
            <div class="col-xs-4">
                <div class="item">Zone 3</div>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-6">
                <div class="item">Zone 4</div>
            </div>
            <div class="col-xs-6">
                <div class="item">Zone 5</div>
            </div>
        </div>
    </div>
</div>

<h3 id="m-me-exemple-avec-calc-en-css3">Même exemple avec calc() en CSS3</h3>
<p>Avec le HTML suivant :</p>
<p><strong>HTML :</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;ul class=&quot;component&quot;&gt;
    &lt;li&gt;Zone 1&lt;/li&gt;
    &lt;li&gt;Zone 2&lt;/li&gt;
    &lt;li&gt;Zone 3&lt;/li&gt;
    &lt;li&gt;Zone 4&lt;/li&gt;
    &lt;li&gt;Zone 5&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>et avec la CSS suivante :</p>
<p><strong>CSS :</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">* {
    box-sizing: border-box;
}
.list {
    padding: 0;
    max-width: 1200px;
    margin-top: 0;
    margin-bottom: 15px;
    margin-left: -15px;
    margin-right: -15px;
    list-style-type: none;
}
.list:after {
    content: &quot;&quot;;
    display: block;
    clear: left;
}
.list li {
    margin-top: 15px;
    background-color: #e8e8e8;
    padding: 15px;
    float: left;
    margin-left: 15px;
    margin-right: 15px;
}
.list li:nth-child(n+5) {
    width: calc(50% - 30px);    
}
.list li:nth-child(n+3) {
    width: calc(33.33333333% - 30px);    
}
</code></pre>
<p>nous obtenons :</p>
<p><strong>Résultat :</strong></p>
<div class="example-list">
    <ul class="list">
        <li>Zone 1</li>
        <li>Zone 2</li>
        <li>Zone 3</li>
        <li>Zone 4</li>
        <li>Zone 5</li>
    </ul>
</div>





<h2 id="-propos-de-calc-">À propos de calc()</h2>
<p>La grande force de <samp>calc()</samp> en CSS3 est qu&#39;elle est capable de mélanger le calcul de plusieurs unités en même temps, et en temps réel. Cela permet en plus de conserver des proportions bonnes dès que la fenêtre change de taille.</p>
<h3 id="support-des-navigateurs">Support des navigateurs</h3>
<h4 id="support-ie9">Support IE9</h4>
<p>Comme dit en introduction, si vous souhaitez supporter <samp>calc()</samp> pour des versions plus vieille que IE8, il va falloir vous procurer <a href="https://github.com/closingtag/calc-polyfill">un polyfill comme celui-ci</a>. En ce qui concerne IE9, il est mentionné qu&#39;elle est partiellement supportée. En réalité, cela vient du fait que si vous écrivez <samp>calc(50%-30px)</samp> cela fonctionnera partout sauf sur IE9 ou il faut bien mettre des espaces entre les symboles d&#39;opération comme ceci : <samp>calc(50% - 30px)</samp>.</p>
<h4 id="support-propri-taire">Support propriétaire</h4>
<p>Vous pouvez également supporter des versions plus vieille de la plupard des navigateurs avec les extensions propriétaires suivantes :</p>
<pre class="prettyprint linenums"><code class="lang-css">width: -webkit-calc(50% - 100px);
width:    -moz-calc(50% - 100px);
width:         calc(50% - 100px);
</code></pre>
<h3 id="support-less">Support Less</h3>
<p>En Less, la propriété calc() existe aussi, et c&#39;est peut-être elle qui vous avait fait échouer vos tests si vous aviez déjà tenté le mélange d&#39;unité car elle est incapable de le faire, aussi : <samp>width: calc(50% - 30px);</samp> donnera en sortie CSS <samp>width: 20%</samp>. Qui plus est, le calcul n&#39;est pas effectué en temps réel. Pour réellement utiliser la propriété <samp>calc()</samp> CSS3 il va falloir écrire <samp>width: calc(~&#39;50% - 30px&#39;);</samp> ce qui donnera en sortie CSS <samp>width: calc(50% - 30px);</samp>.</p>
<h4 id="pour-en-savoir-plus">Pour en savoir plus</h4>
<p>Si vous voulez en savoir plus sur <samp>calc()</samp> et ses subtilités <a href="http://caniuse.com/#feat=calc">c&#39;est par ici</a>.</p>
<p><strong>À vous de jouer !</strong></p>
]]></description>
            <link>http://localhost:7776la-propriete-css3-calc-pour-arreter-avec-les-balises-html-imbriquees-inutilement/</link>
            <guid isPermaLink="false">55894a766868ca087fbf8648</guid>
            <category><![CDATA[CSS3]]></category>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <category><![CDATA[Astuces]]></category>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Less]]></category>
            <category><![CDATA[Bootstrap]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Tue, 23 Jun 2015 12:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Bootstrap, lisibilité, propreté, performance, optimisation ; c'est possible !]]></title>
            <description><![CDATA[<p>On me dit souvent que je n&#39;aime pas Bootstrap, et pour cause, je pense que <a href="https://blog.lesieur.name/bootstrap-est-une-regression-pour-un-developpement-front-end-de-qualite/">c&#39;est une regression pour un travail Front-end de qualité</a>. En réalité, ce n&#39;est pas le Framework le fautif, mais la façon dont il est utilisé. Les exemples de mauvaises utilisations sont légions sur le net et les mauvaises intégrations HTML cour les rues.</p>
<p>Suis-je donc entrain de dire qu&#39;il y a une bonne et une mauvaise façon d&#39;utiliser Bootstrap ? C&#39;est exactement ce que je suis entrain de dire, et je vais vous expliquer à travers ce billet le cheminement qui va vous conduire à :</p>
<ul>
<li>Séparer le fond et la forme, pour un gain de lisibilité et de propreté,</li>
<li>Inclure et générer le stricte minimum pour un gain de performance, avec un exemple d&#39;optimisation de CSS 30 fois plus légère.</li>
</ul>
<figure>
<img src="media/images/upload/bootstrap_less.png" alt="Bootstrap et Less" style="max-width: 100%">
<figcaption>Bootstrap et Less, themightycribb.com</figcaption>
</figure>

<p>Non, je suis sérieux, ce billet n&#39;est pas une blague, c&#39;est cadeau, et c&#39;est pour vous.</p>
<h2 id="-ne-vraiment-pas-faire-ou-l-utilisation-standard-de-bootstrap">À ne vraiment pas faire, ou l&#39;utilisation Standard de Bootstrap</h2>
<p>Pour commencer notre réflexion, partons de l&#39;utilisation « standard » de Bootstrap. C&#39;est la majorité du code que nous pourrons trouver à travers le net quand il s&#39;agit de Bootstrap. Si vous êtes farouchement attaché à Bootstrap, ou que vous ne pouvez pas faire autrement que de l&#39;utiliser (certaines personnes ont malheureusement des IT Dictator), oubliez dès aujourd&#39;hui cette méthode de travail.</p>
<p>Voici un petit affichage de grille gratté à la va vite.</p>
<p><strong>HTML</strong></p>
<p><em>La feuille CSS Bootstrap est inclue</em></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;!-- Composant --&gt;
&lt;div class=&quot;container&quot;&gt;
    &lt;!-- En-tête --&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-xs-12 col-md-6 col-md-push-6 text-right&quot;&gt;
            &lt;div&gt;
                &lt;h1&gt;Je suis un titre&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-xs-12 col-md-6 col-md-pull-6&quot;&gt;
            &lt;div&gt;Je suis un petit texte explicatif à propos du site.&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Liste d&#39;élément --&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-xs-12 col-sm-6 col-md-4&quot;&gt;
            &lt;div&gt;Je suis un bloc avec contenu&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-xs-12 col-sm-6 col-md-4&quot;&gt;
            &lt;div&gt;Je suis un bloc avec contenu&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-xs-12 col-sm-6 col-md-4&quot;&gt;
            &lt;div&gt;Je suis un bloc avec contenu&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-xs-12 col-sm-6 col-md-4&quot;&gt;
            &lt;div&gt;Je suis un bloc avec contenu&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>Ajoutons maintenant notre propre surcharge pour faire un rendu de tout ça :</p>
<p><strong>CSS</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">/* Nous colorons la zone de site. */
.container {
    background-color: #f2f2f2;
    padding-bottom: 16px;
}

/* Nous colorons chaque colonne sans sa marge, 
    nous avons donc été obligé de rajouter une 
    div inutile autour. */
.row &gt; div &gt; div {
    background-color: #ddddff;
    margin-top: 16px;
    padding: 10px;
    font-size: 1.5rem;
}

/* Nous devons tout de même gérer de manière custom
    certain comportement, ici je veux que les colonnes
    aient une hauteur fixe à partir de la version
    tablette. */
@media (min-width: 768px) {
  .row &gt; div &gt; div {
    height: 40px;
  }
}

/* Avec Bootstrap, soit le texte est à gauche, soit 
    il est à droite. On ne peut pas changer
    se compontement de façon responsive.
    On va donc surcharger la classe « text-right »
    qui dans notre cas ne veux plus dire grand chose... */
.row:first-child .text-right {
    text-align: left;
}

/* Je redéfini ici qu&#39;il s&#39;aligne à droite
    à partir de la tablette. */
@media (min-width: 992px) {
  .row:first-child .text-right {
    text-align: right;
  }
}

h1 {
    margin: 0;
    font-size: 3rem;
    margin-top: -6px;
}
</code></pre>
<p><strong>Résultat</strong></p>
<ul>
<li><strong><a href="http://codepen.io/Haeresis/pen/yNXXQO">Voir le résultat avec le code</a></strong></li>
</ul>
<blockquote>
<p><em><samp>Mauvaise pratique :</samp></em> On constate au rayon des mauvaises choses :</p>
<ul>
<li>Un DOM pollué par un surplus de balises, dans notre exemple nous avons une <samp>&lt;div&gt;</samp> inutile dans chaque colonne.</li>
<li>Un DOM pollué par un surplus de classe, non seulement elles décrivent visuellement et non sémantiquement la structure, mais en plus elles ne traduisent pas toujours le comportement réel du visuel (exemple avec la classe <samp>text-right</samp> surchargée dans notre exemple).</li>
<li>Une CSS Bootstrap complète et donc excessivement lourde en poids avec en plus notre propre surcharge, actuellement la portion HTML fait <a href="http://codepen.io/Haeresis/pen/yNXXQO?editors=100">657 octets</a> après compression et le fichier CSS fait <a href="http://codepen.io/Haeresis/pen/yNXXQO?editors=010">118ko</a> après compression.</li>
</ul>
</blockquote>
<h2 id="un-d-but-de-bonne-pratique-ou-l-utilisation-de-bootstrap-avec-less">Un début de bonne pratique, ou l&#39;utilisation de Bootstrap avec Less</h2>
<p>Voyons à présent comment nous pouvons nous en sortir en utilisant <a href="https://blog.lesieur.name/utilisation-optimisee-de-framework-css-comme-bootstrap-avec-less/">une méthode CSS-Driven</a>. L&#39;avantage de cette méthode va être de déporter le poids du fichier HTML à l&#39;intérieur des fichiers CSS. C&#39;est une excellente chose puisque les fichiers CSS peuvent être mis en cache, eux. Grâce à la version Less de Bootstrap, nous sommes en mesure de n&#39;inclure que les parties nécessaires à notre habillage. Pour commencer, on arrête avec les affreuses classes Bootstrap partout dans le HTML, et on nomme les classes sémantiquement !</p>
<p><strong>HTML</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;div class=&quot;component&quot;&gt;
    &lt;div class=&quot;header&quot;&gt;
        &lt;div class=&quot;title&quot;&gt;
            &lt;div&gt;
                &lt;h1&gt;Je suis un titre&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;quote&quot;&gt;
            &lt;div&gt;Je suis un petit texte explicatif à propos du site.&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;list&quot;&gt;
        &lt;div class=&quot;item&quot;&gt;
            &lt;div&gt;Je suis un bloc avec contenu&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;item&quot;&gt;
            &lt;div&gt;Je suis un bloc avec contenu&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;item&quot;&gt;
            &lt;div&gt;Je suis un bloc avec contenu&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;item&quot;&gt;
            &lt;div&gt;Je suis un bloc avec contenu&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>On ajoute ensuite les bribes Bootstrap qui nous sont nécessaires, et nous habillons la structure en Less :</p>
<p><strong>Less</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">/* Inclusion Bootstrap nécessaire pour la page */
@import &#39;bootstrap/normalize&#39;;
@import &#39;bootstrap/variables&#39;;
@import &#39;bootstrap/utilities&#39;;

/*  Inclusion Bootstrap nécessaire pour la grille */
@import &#39;bootstrap/grid&#39;;
@import &#39;bootstrap/mixins/hide-text&#39;;
@import &#39;bootstrap/mixins/center-block&#39;;
@import &#39;bootstrap/mixins/clearfix&#39;;
@import &#39;bootstrap/mixins/grid&#39;;
@import &#39;bootstrap/mixins/grid-framework&#39;;

/*  Inclusion Bootstrap nécessaire pour l&#39;alignement */
@import &#39;bootstrap/type&#39;;
@import &#39;bootstrap/mixins/text-overflow.less&#39;;
@import &#39;bootstrap/mixins/text-emphasis.less&#39;;
@import &#39;bootstrap/mixins/background-variant.less&#39;;

/* On se permet de recréer nous même quelques
    comportements nécessitant trop d&#39;inclusion de code. */
html {
    font-size: 62.5%;
}
* {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
}

/* On travaille nos classes en empilement. */
.component {
    /* Ceci est la même chose que `&lt;div class=&quot;container&quot;&gt;` 
        appliqué à `.component`. */
    .container;
    .clearfix;

    .list,
    .header {
        /* Ceci est la même chose que `&lt;div class=&quot;row&quot;&gt;` 
            appliqué à `.header` et `.list`. */
        .row;
    }

    .header {    
        .quote,
        .title {
            /* Ceci est l&#39;équivalent de `&lt;div class=&quot;col-xs-12&quot;&gt;` 
                appliqué à `.title` et `.quote`. */
            .make-xs-column(12);
            /* Ceci est l&#39;équivalent de `&lt;div class=&quot;col-md-6&quot;&gt;` 
                appliqué à `.title` et `.quote`. */
            .make-md-column(6);
        }

        .title {
            /* Ceci est l&#39;équivalent de `&lt;div class=&quot;col-md-push-6&quot;&gt;` 
                appliqué à `.title`. */
            .make-md-column-push(6);

            /* Ceci est l&#39;équivalent de `&lt;div class=&quot;text-left&quot;&gt;` 
                appliqué à `.title`, mais l&#39;avantage, c&#39;est qu&#39;il peut être écrasé facilement. */
            .text-left;

            @media (min-width: @screen-sm-min) {
                /* Ceci est l&#39;équivalent de `&lt;div class=&quot;text-right&quot;&gt;` 
                    appliqué à `.title` uniquement à partir de la tablette.
                    Ceci n&#39;est pas faisable avec une approche classique
                    avec Bootstrap dans le DOM. */
                .text-right;
            }
        }

        .quote {
            /* Ceci est l&#39;équivalent de `&lt;div class=&quot;col-md-pull-6&quot;&gt;` 
                appliqué à `.quote`. */
            .make-md-column-pull(6);
        }
    }

    .list {
        .item {
            /* Ceci est l&#39;équivalent de `&lt;div class=&quot;col-xs-12&quot;&gt;` 
                appliqué à `.item`. */
            .make-xs-column(12);
            /* Ceci est l&#39;équivalent de `&lt;div class=&quot;col-sm-6&quot;&gt;` 
                appliqué à `.item`. */
            .make-sm-column(6);
            /* Ceci est l&#39;équivalent de `&lt;div class=&quot;col-md-4&quot;&gt;` 
                appliqué à `.item`. */
            .make-md-column(4);
        }
    }

    /* Par ici on fait un peu de Less standard */
    .title,
    .quote,
    .item {
        div {
            background-color: #ddddff;
            margin-top: 16px;
            padding: 10px;
            font-size: 1.5rem;

            @media (min-width: @screen-xs-min) {
                height: 40px;
            }
        }
    }

    h1 {
        margin: 0;
        font-size: 3rem;
        margin-top: -6px;
    }

    background-color: #f2f2f2;
    padding-bottom: 16px;
}
</code></pre>
<p><strong>Résultat</strong></p>
<ul>
<li><strong><a href="http://codepen.io/Haeresis/pen/gpRGQX">Voir le résultat avec le code</a></strong></li>
</ul>
<blockquote>
<p>Avec cette technique, on a une sortie CSS qui a été divisée par 7 :</p>
<ul>
<li>Le DOM ne contient plus la CSS Bootstrap complète mais uniquement les classes contenues dans les fichiers inclus avec <samp>@include</samp>. Actuellement le fichier HTML fait <a href="http://codepen.io/Haeresis/pen/gpRGQX?editors=100">504 octets</a> après compression et le fichier CSS fait <a href="http://codepen.io/Haeresis/pen/gpRGQX?editors=010">16 ko</a> après compression.</li>
<li>Mais ce qui est agréable c&#39;est que Le DOM n&#39;est plus pollué par un surplus de classe, elles décrivent maintenant sémantiquement la structure !</li>
<li>Cependant le DOM est toujours pollué par des balises inutiles.</li>
</ul>
</blockquote>
<h3 id="utiliser-la-feature-less-extend-">Utiliser la feature Less :extend()</h3>
<p>En Less, il y a deux approches pour utiliser des raccourcis de classe afin de ne pas écrire de code de manière redondante. Tout d&#39;abord, je créé une classe modèle</p>
<pre class="prettyprint linenums"><code>.model { a; b; c; d; e; f; g; h; i; j; }
</code></pre><ul>
<li><p>La première approche est celle utilisée dans notre exemple précédent, pour l&#39;appliquer j&#39;utilise le code suivant :</p>
<pre class="prettyprint linenums"><code>  .ex-1, .ex-2, .ex-3, .ex-4, .ex-5, .ex-6, .ex-7, .ex-8, .ex-9, .ex-0 { 
      .model;
  }
</code></pre><p>  ce qui génère en sortie CSS :</p>
<pre class="prettyprint linenums"><code>  .model { a; b; c; d; e; f; g; h; i; j; }

  .ex-1 { a; b; c; d; e; f; g; h; i; j; }
  .ex-2 { a; b; c; d; e; f; g; h; i; j; }
  .ex-3 { a; b; c; d; e; f; g; h; i; j; }
  .ex-4 { a; b; c; d; e; f; g; h; i; j; }
  .ex-5 { a; b; c; d; e; f; g; h; i; j; }
  .ex-6 { a; b; c; d; e; f; g; h; i; j; }
  .ex-7 { a; b; c; d; e; f; g; h; i; j; }
  .ex-8 { a; b; c; d; e; f; g; h; i; j; }
  .ex-9 { a; b; c; d; e; f; g; h; i; j; }
  .ex-0 { a; b; c; d; e; f; g; h; i; j; }
</code></pre></li>
<li><p>La seconde approche qui est notre fameuse feature <samp>:extend()</samp> permet de gagner de la place en sortie</p>
<pre class="prettyprint linenums"><code>  .ex-1, .ex-2, .ex-3, .ex-4, .ex-5, .ex-6, .ex-7, .ex-8, .ex-9, .ex-0 { 
      &amp;:extend(.model);
  }
</code></pre><p>  ce qui génère en sortie CSS :</p>
<pre class="prettyprint linenums"><code>  .ex-1, .ex-2, .ex-3, .ex-4, .ex-5, .ex-6, .ex-7, .ex-8, .ex-9, .ex-0,
  .model { a; b; c; d; e; f; g; h; i; j; k; l; m; n; o; p; q; r; s; t; u; v; w; x; y; z; }
</code></pre></li>
</ul>
<p>L&#39;un des problèmes de cette seconde approche est qu&#39;elle ne fonctionne pas avec des fonctions. Ainsi la fonction Bootstrap <samp>.make-xs-column(12)</samp> par exemple n&#39;est pas utilisable :</p>
<pre class="prettyprint linenums"><code>.ex-1, .ex-2, .ex-3, .ex-4, .ex-5, .ex-6, .ex-7, .ex-8, .ex-9, .ex-0 { 
    &amp;:extend(.make-xs-column(12)); /* Ce code plante. */
}
</code></pre><p>Un autre problème est que <samp>:extend()</samp> n&#39;est pas utilisable dans les Media Queries. C&#39;est un formidable atout qui est très limité avec l’utilisation de Bootstrap ou des <a href="https://blog.lesieur.name/les-concepts-autour-du-responsive-web-design/">approches Desktop First</a> mais qui peut se révéler très intéressant sur des grosses feuilles custom Mobile First.</p>
<p>Voyons rapidement en quoi cela changerait notre précédente feuille :</p>
<pre class="prettyprint linenums"><code class="lang-css">
/* ... */

.component {
    /* Ici, `:extend()` est appliquable. */
    &amp;:extend(.container, .clearfix all);

    .list,
    .header {
        /* Ici, `:extend()` est appliquable. */
        &amp;:extend(.row);
    }

    .header {    
        .quote,
        .title {
            /* Ici, `:extend()` n&#39;est pas appliquable
                car ce sont des fonctions. */
            .make-xs-column(12);
            .make-md-column(6);
        }

        .title {
            /* Ici, `:extend()` n&#39;est pas appliquable
                car c&#39;est une fonction */
            .make-md-column-push(6);

            /* Ici, `:extend()` est appliquable. */
            &amp;:extend(.text-left);

            @media (min-width: @screen-sm-min) {
                /* Ici, `:extend()` n&#39;est pas appliquable
                    car on est dans une Media Query. */
                .text-right;
            }
        }

        .quote {
            /* Ici, `:extend()` n&#39;est pas appliquable
                car c&#39;est une fonction */
            .make-md-column-pull(6);
        }
    }

    .list {
        .item {
            /* Ici, `:extend()` n&#39;est pas appliquable
                car ce sont des fonctions. */
            .make-xs-column(12);
            .make-sm-column(6);
            .make-md-column(4);
        }
    }

    /* ... */
}
</code></pre>
<blockquote>
<p><strong><samp>Bonne pratique :</samp></strong> Avec cette technique, on peut donc encore réduire la taille en sortie même si dans notre exemple nous passons seulement d&#39;un code de 16277 bytes à un code de 16038 bytes. Dans de nombreux cas l&#39;écart peut cependant être significatif !</p>
</blockquote>
<h2 id="la-bonne-pratique-ou-l-utilisation-de-bootstrap-avec-less-et-par-r-f-rence">LA bonne pratique, ou l&#39;utilisation de Bootstrap avec Less et par référence</h2>
<p>C&#39;est par ici qu&#39;on touche réellement à un point intéressant, et à la réelle chose qu&#39;il faut faire quand on utilise du Less, et surtout Bootstrap ; l&#39;inclusion par référence ! Avant d&#39;en parler, adaptons rapidement notre HTML pour le rendre encore plus sémantique. Cela n&#39;a rien à voir avec notre propos, mais des <samp>&lt;div&gt;</samp> partouts, ça me donne des boutons !</p>
<p><strong>HTML</strong></p>
<pre class="prettyprint linenums"><code class="lang-html">&lt;section class=&quot;component&quot;&gt;
    &lt;header&gt;
        &lt;div class=&quot;title&quot;&gt;
            &lt;div&gt;
                &lt;h1&gt;Je suis un titre&lt;/h1&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;aside&gt;
            &lt;div&gt;Je suis un petit texte explicatif à propos du site.&lt;/div&gt;
        &lt;/aside&gt;
    &lt;/header&gt;
    &lt;ul class=&quot;list&quot;&gt;
        &lt;li&gt;
            &lt;div&gt;Je suis un bloc avec contenu&lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;div&gt;Je suis un bloc avec contenu&lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;div&gt;Je suis un bloc avec contenu&lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
            &lt;div&gt;Je suis un bloc avec contenu&lt;/div&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/section&gt;
</code></pre>
<p>Le réel intérêt va résider dans l&#39;utilisation de l&#39;inclusion par référence. C&#39;est à dire qu&#39;au lieu d&#39;inclure les portions de Bootstrap utile avec <samp>@import</samp>, nous allons le faire avec <samp>@import (reference)</samp>.</p>
<p><strong>Less</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">@import &#39;bootstrap/normalize&#39;;

/* Inclusion des fichiers, non plus entièrement, mais par
    référence avec « (reference) ». */
@import (reference) &#39;bootstrap/variables&#39;;
@import (reference) &#39;bootstrap/utilities&#39;;
@import (reference) &#39;bootstrap/grid&#39;;
@import (reference) &#39;bootstrap/mixins/hide-text&#39;;
@import (reference) &#39;bootstrap/mixins/center-block&#39;;
@import (reference) &#39;bootstrap/mixins/clearfix&#39;;
@import (reference) &#39;bootstrap/mixins/grid&#39;;
@import (reference) &#39;bootstrap/mixins/grid-framework&#39;;
@import (reference) &#39;bootstrap/type&#39;;
@import (reference) &#39;bootstrap/mixins/text-overflow.less&#39;;
@import (reference) &#39;bootstrap/mixins/text-emphasis.less&#39;;
@import (reference) &#39;bootstrap/mixins/background-variant.less&#39;;

html {
    font-size: 62.5%;
}
* {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
}

/* On permet des listes au rendu vide. */
.ul-reset {
    margin-left: -15px;
    margin-right: -15px;
    padding: 0;
    list-style-type: none;
}

.component {
    &amp;:extend(.container);
    &amp;:extend(.clearfix all);

    .list,
    header {
        &amp;:extend(.row);
    }

    header {    
        aside,
        .title {
            .make-xs-column(12);
            .make-md-column(6);
        }

        .title {
            .make-md-column-push(6);

            &amp;:extend(.text-left);

            @media (min-width: @screen-sm-min) {
                .text-right;
            }
        }

        aside {
            .make-md-column-pull(6);
        }
    }

    .list {

        /* On applique à `.list` un reset. */
        &amp;:extend(.ul-reset);

        li {
            .make-xs-column(12);
            .make-sm-column(6);
            .make-md-column(4);
        }
    }

    .title,
    aside,
    .list li {
        div {
            background-color: #ddddff;
            margin-top: 16px;
            padding: 10px;
            font-size: 1.5rem;

            @media (min-width: @screen-xs-min) {
                height: 40px;
            }
        }
    }

    h1 {
        margin: 0;
        font-size: 3rem;
        margin-top: -6px;
    }

    background-color: #f2f2f2;
    padding-bottom: 16px;
}
</code></pre>
<p><strong>Résultat</strong></p>
<ul>
<li><strong><a href="http://codepen.io/Haeresis/pen/gpRGqX">Voir le résultat avec le code</a></strong></li>
</ul>
<blockquote>
<p><strong><samp>Bonne pratique</samp></strong> Et là, c&#39;est le jackpot, on a une sortie divisée par 30 !</p>
<p>Ce qu&#39;il se passe est que toutes les classes et fonctions des fichiers inclus par référence ne sont générées que si elles sont appelées en tant que raccourci dans le fichier qui les appels par référence.</p>
<p><strong>Ainsi pour la sortie nous avons maintenant un HTML de <a href="http://codepen.io/Haeresis/pen/gpRGqX?editors=100">431 bytes</a> après compression et un fichier CSS de <a href="http://codepen.io/Haeresis/pen/gpRGqX?editors=010">4 ko</a> après compression !</strong></p>
</blockquote>
<h3 id="ne-plus-se-soucier-des-inclusions">Ne plus se soucier des inclusions</h3>
<p>Avec un appel par référence, comme vous l&#39;aurez peut-être deviné, on peut même remplacer l&#39;intégralité des appels suivant :</p>
<pre class="prettyprint linenums"><code class="lang-less">@import (reference) &#39;bootstrap/variables&#39;;
@import (reference) &#39;bootstrap/utilities&#39;;
@import (reference) &#39;bootstrap/grid&#39;;
@import (reference) &#39;bootstrap/mixins/hide-text&#39;;
@import (reference) &#39;bootstrap/mixins/center-block&#39;;
@import (reference) &#39;bootstrap/mixins/clearfix&#39;;
@import (reference) &#39;bootstrap/mixins/grid&#39;;
@import (reference) &#39;bootstrap/mixins/grid-framework&#39;;
@import (reference) &#39;bootstrap/type&#39;;
@import (reference) &#39;bootstrap/mixins/text-overflow.less&#39;;
@import (reference) &#39;bootstrap/mixins/text-emphasis.less&#39;;
@import (reference) &#39;bootstrap/mixins/background-variant.less&#39;;
</code></pre>
<p>uniquement par :</p>
<pre class="prettyprint linenums"><code class="lang-less">@import (reference) &#39;bootstrap/bootstrap&#39;;
</code></pre>
<p>et c&#39;est la référence qui fera le reste, le tout pour une sortie de <a href="http://codepen.io/Haeresis/pen/gpRGqX?editors=010">4 ko</a> totalement identique avant l&#39;inclusion feature par feature. On est bien loin de nos <a href="http://codepen.io/Haeresis/pen/yNXXQO?editors=010">118 ko</a> initiales !</p>
<h2 id="petits-calculs">Petits calculs</h2>
<p>Nous allons voir rapidement la quantité de bande passante sauvée en aillant fait l&#39;effort d&#39;ajouter <samp>(reference)</samp> et <samp>:extend()</samp>. Gardez en tête que ce n&#39;est pas pour une page complète, mais bien le petit fragment d&#39;exemple que nous venons d&#39;étudier.</p>
<p>Nous avons donc :</p>
<ul>
<li>Méthode Standard, avec DOM négligé : HTML = 657 octets, CSS = 116.972 octets.</li>
<li>Méthode Optimisée, avec DOM propre : HTML = 431 octets, CSS = 4.018 octets.</li>
</ul>
<p><strong>Côté serveur</strong>, pour 10000 appels (de différent client) :</p>
<ul>
<li>Méthode Standard : 657 x 10000 = 6.570Mo, 116.972 x 10000 = 1.169.720Mo</li>
<li><p>Méthode Optimisé : 431 x 10000 = 4.310Mo, 4.018 x 10000 = 40.180Mo</p>
<p> Soit une <strong>économie de trafic</strong> :</p>
<ul>
<li>HTML = 6.570Mo - 4.310Mo = <strong>2.260Mo</strong></li>
<li>CSS = 1.169.720Mo - 40.180Mo = <strong>1.129Go</strong></li>
</ul>
</li>
</ul>
<p><strong>Côté client</strong>, pour 100 appels d&#39;un seul ordinateur <strong>sans cache</strong> :</p>
<ul>
<li>Méthode Standard : 657 x 100 = 65.700o, 116.972 x 100 = 11.697.200o</li>
<li><p>Méthode Optimisé : 431 x 100 = 43.100o, 4.018 x 100 = 401.800o</p>
<p> Soit une <strong>économie de trafic</strong> :</p>
<ul>
<li>HTML = 65ko - 43ko = <strong>22ko</strong></li>
<li>CSS = 11.697ko - 401ko = <strong>11Mo</strong></li>
</ul>
</li>
</ul>
<p><strong>Côté client</strong>, pour 100 appels d&#39;un seul ordinateur <strong>avec cache</strong> :</p>
<ul>
<li>Méthode Standard : 657 x 100 = 65.700o, 116.972 x 1 = 116.972o</li>
<li><p>Méthode Optimisé : 431 x 100 = 43.100o, 4.018 x 1 = 4.018o</p>
<p> Soit une <strong>économie de trafic</strong> :</p>
<ul>
<li>HTML = 65ko - 43ko = <strong>22ko</strong></li>
<li>CSS = 117ko - 4ko = <strong>113ko</strong></li>
</ul>
</li>
</ul>
<h2 id="en-bonus">En Bonus</h2>
<p>Pour développer des sites web avec Less en toute transparence, je ne saurais que trop vous conseiller le module <a href="https://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/">NodeAtlas</a> en <a href="https://nodejs.org/">node.js</a>. Cela vous permettra de développer dans vos feuilles Less et d&#39;appeler les résultats CSS. Un exemple d&#39;implémentation est à votre disposition dans le projet <a href="https://github.com/Haeresis/LessAtlas/">LessAtlas</a>.</p>
]]></description>
            <link>http://localhost:7776bootstrap-lisibilite-proprete-performance-optimisation-c-est-possible/</link>
            <guid isPermaLink="false">5579c7c66868ca087fbf8647</guid>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Less]]></category>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[Concept]]></category>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <category><![CDATA[Bootstrap]]></category>
            <category><![CDATA[Performances]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Thu, 11 Jun 2015 18:51:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Pourquoi j'utilise l'unité Rem et non l'unité Pixel]]></title>
            <description><![CDATA[<p>Lors des reviews d&#39;intégration HTML à partir de valeurs fournis dans un PSD, on m&#39;a fait remarquer que « <em>les tailles de polices n&#39;étaient pas bonnes</em> » car elles étaient en <samp>rem</samp> et non en <samp>px</samp>. Aujourd&#39;hui pire, on me somme de remplacer tous les <samp>rem</samp> par des <samp>px</samp>. C&#39;est tout, c&#39;est comme ça. Peut-être parce que l&#39;on a peur que la conversion <samp>rem</samp> en <samp>px</samp> ne soit pas juste ou peut-être simplement parce qu&#39;on ne sait pas bien à quoi sert le <samp>rem</samp>.</p>
<figure>
<img src="media/images/upload/rem-all.png" alt="Balise i en HTML4" style="max-width: 100%">
<figcaption>Comment gérer avec du Rem, css-tricks.com</figcaption>
</figure>

<p><strong>Sans entrer dans des détails techniques poussés, je vais vous expliquer pourquoi j&#39;utilise <samp>rem</samp>.</strong></p>
<p><a href="https://blog.lesieur.name/pourquoi-j-utilise-l-unite-rem-et-non-l-unite-pixel/#exemple">Je vous laisse également une petite démo temps réel plus bas dans l&#39;article</a></p>
<p>Allez, n&#39;ayons pas peur, ce <samp>rem</samp>, il ne va pas nous manger !</p>
<h2 id="pixel-vs-rem">Pixel VS Rem</h2>
<h3 id="le-pixel">Le Pixel</h3>
<p>Notre bon vieux pixel rassurant se comporte de tel sorte que je précise dans ma feuille CSS <samp>font-size: 16px</samp> et que la taille de la police sur laquelle cette propriété s&#39;applique fait bien 16 pixel de hauteur (il y a des histoires de dpi et de faux pixel là dedans mais ça ne nous intéresse pas pour notre explication). Le problème ici est une question d&#39;accessibilité. Si je demande d&#39;agrandir les textes via l&#39;option de mon navigateur ou de mon OS il ne se passera rien. Comme nous avons établie dans le marbre que le texte fait <samp>16px</samp>, il ferra toujours cette hauteur, peut importe ce que l&#39;utilisateur demande.</p>
<h3 id="le-rem">Le Rem</h3>
<p>Cette unité quand à elle est un pourcentage de taille en fonction du zoom texte que l&#39;utilisateur applique sur son navigateur. Elle se base toujours sur la taille du texte défini à la racine du document. Avec un savant petit calcul CSS on arrive à faire en sorte que pour un zoom texte de 100% (qui est le zoom texte par défaut des navigateur) <samp>1.0rem</samp> est strictement la même chose que <samp>10px</samp> ou encore que <samp>1.6rem</samp> est strictement la même chose que <samp>16px</samp>. Cela nous permet de travailler facilement, avec une unité identique mais qui est taillé pour l&#39;accessibilité.</p>
<h2 id="une-histoire-de-responsive-web-design">Une Histoire de Responsive Web Design</h2>
<p>Par conséquent, si je modifie la taille du texte à la racine du document, cela modifiera la taille de tous les textes du document de manière proportionnelle ce qui est impossible avec des unités définis en pixel. Il me suffit alors via des Media Queries de difinir une valeur racine plus ou moins grande pour rendre les textes plus lisible ou plus facile à cliquer, etc.</p>
<p><strong>Le pixel n&#39;est donc pas à bannir, mais à utiliser uniquement pour des éléments qui ne doivent pas varier si le zoom texte est changé. Cela peut-être des cas pour les marges par exemple.</strong></p>
<h2 id="rem-ou-em-">Rem ou Em ?</h2>
<p>Une autre unité existante est le <samp>em</samp>. Cependant, à la différence du <samp>rem</samp> qui rend proportionnelle une taille par rapport à la taille du texte à la racine du document, le <samp>em</samp> la rend proportionnelle par rapport à la taille de l&#39;élément parent dans lequel il est contenu. Cela permet de définir, par exemple, qu&#39;un exposant est <samp>0.8em</samp> de sont parent, soit 80% de sa hauteur.</p>
<h2 id="un-peu-de-concret">Un peu de concret</h2>
<p>Par ici c&#39;est un peu plus concret, on s’arrête donc là pour la théorie.</p>
<h3 id="exemple">Exemple</h3>
<p style="margin-bottom: 8px">Jouez donc avec le slider ou changez la valeur magique de 62.5% qui permet de rendre les valeurs en Rem fluide et constatez la différence entre Pixel et Rem.</p>

<p style="margin-bottom: -16px" data-height="364" data-theme-id="0" data-slug-hash="ZGyGWm" data-default-tab="result" data-user="Haeresis" class='codepen'>See the Pen <a href='http://codepen.io/Haeresis/pen/ZGyGWm/'>Pixel VS Rem</a> by Bruno Lesieur (<a href='http://codepen.io/Haeresis'>@Haeresis</a>) on <a href='http://codepen.io'>CodePen</a>.</p>

<h3 id="explication">Explication</h3>
<p>Pour se mettre à gérer ses tailles en Rem, rien de compliqué. Il suffit de définir la racine du document à 62.5% sur la balise <samp>html</samp> puis de gérer ses tailles en Rem en sachant que 10px correspond à 1.0rem.</p>
<p><strong>En CSS</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">html {
    font-size: 62.5%; /* Ré-équilibrage du Rem face au Pixel pour des calculs simples */
}

/* Exemple d&#39;application */
p {
    font-size: 12px; /* Pour les navigateurs qui ne supportent pas le Rem */
    font-size: 1.2rem; /* Pour les navigateurs « Responsive » */
}
</code></pre>
<p><strong>En Less</strong></p>
<pre class="prettyprint linenums"><code class="lang-css">html {
    font-size: 62.5%;
}

/* Fonction toute prête pour gérer Rem et Pixel en fonction des supports des navigateurs. */
.font-size(@sizeValue) {
    @remValue: @sizeValue;
    @pxValue: (@sizeValue * 10);
    font-size: ~&quot;@{pxValue}px&quot;; 
    font-size: ~&quot;@{remValue}rem&quot;;
}

/* Exemple d&#39;application */
p {
    .font-size(1.2);
}
</code></pre>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>]]></description>
            <link>http://localhost:7776pourquoi-j-utilise-l-unite-rem-et-non-l-unite-pixel/</link>
            <guid isPermaLink="false">5577e6346868ca087fbf8645</guid>
            <category><![CDATA[Astuces]]></category>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Less]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Wed, 10 Jun 2015 11:24:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Icon ou la balise sémantique HTML qui n'existait pas !]]></title>
            <description><![CDATA[<p>Je l&#39;ai encore croisée au détour d&#39;un code ! J&#39;y ai prêté attention pour la première fois sur le Framework CSS <a href="http://semantic-ui.com/elements/icon.html#/icons">Semantic-UI</a> car j&#39;ai vu dans la source qu&#39;il était impossible d&#39;afficher une icône avec ce Framework sans utiliser <strong>la balise qui n&#39;existe pas : la balise Icon</strong> !</p>
<p>Je vous la présente sans plus de suspense avec cet exemple : <samp>&lt;i class=&quot;icon settings&quot;&gt;&lt;/i&gt;</samp>. Et son rendu est une icône, représentant par exemple ici de quoi modifier les <span class="icons settings">paramètres</span>. Il n&#39;y a pas de doute, l&#39;intention première est d&#39;afficher une icône, non pas avec la balise <samp>&lt;img&gt;</samp> estimée réservée à de l&#39;affichage de contenu pure (au contraire d&#39;une décoration), mais en remplacement de <samp>&lt;span&gt;</samp> qui, lui, est trop neutre.</p>
<figure>
<img src="media/images/upload/Basic-HTML.png" alt="Balise i en HTML4" style="max-width: 100%">
<figcaption>La balise &lt;i&gt; en HTML4, miriamposner.com</figcaption>
</figure>

<p>Quoi de mieux qu&#39;une balise qui est inline, courte, dont la seule lettre représente le début du mot « icon » et qui passe même la validation W3C ? Je vous présente la balise <samp>&lt;i&gt;</samp> qui a vu le jour grâce à HTML4 et signifiait « <em>le contenu affiché est italique</em> » et qui tenterait de faire son coming-back en tant que nouvelle icône derrière le dos du W3C !</p>
<p>Mais ça me pause un problème. Parlons en de cette fausse-vrai balise !</p>
<h2 id="une-balise-tomb-e-dans-l-oubli">Une balise tombée dans l’oubli</h2>
<p>Tout commence avec la balise <samp>&lt;i&gt;ce texte est italique&lt;/i&gt;</samp> totalement valide HTML4 et qui représente de la forme. Cela est légion à l&#39;époque avec les cousines <samp>&lt;b&gt;</samp>, <samp>&lt;center&gt;</samp>, <samp>&lt;font&gt;</samp>, etc. Comprenez par là que <samp>&lt;i&gt;</samp> n&#39;a aucune autre utilité que de rendre le texte italique et est un parfait raccourci du mot « italic ».</p>
<p>Et puis, le CSS fait sont petit bonhomme de chemin si bien que l&#39;on peut très vite rendre italique le contenu de n&#39;importe quel groupe de balise si bien que l’existence même de <samp>&lt;i&gt;</samp> (et ses comparses) va être remise en cause. xHTML, le petit frère va enfoncer le clou et un texte ne sera plus <samp>&lt;i&gt;</samp> pour « italic » mais sera <samp>&lt;em&gt;</samp> pour « emphasis » et ce sera alors au CSS de décider si le rendu de son contenu sera italique ou rouge souligné... idem avec <samp>&lt;b&gt;</samp> pour « bold » qui deviendra <samp>&lt;strong&gt;</samp> —c-à-d avec sens fort, important— et qui ne donnera pas nécessairement lieu à un rendu gras si la CSS en a décidé autrement.</p>
<p>Cependant, le rendu « par défaut » des <samp>&lt;em&gt;</samp> étant de l&#39;italique et de <samp>&lt;strong&gt;</samp> étant du gras, il n&#39;en fallait pas plus pour les catégoriser, à tord, comme les « remplaçant » de <samp>&lt;i&gt;</samp> et <samp>&lt;b&gt;</samp> or... il n&#39;en ai rien ! Nous allons voir ça plus loin.</p>
<h2 id="ic-ne-du-contenu-ou-de-la-d-coration-">Icône, du contenu ou de la décoration ?</h2>
<p>Parlons de deux catégories d&#39;images : celles qui sont destinées à représenter du contenu, l&#39;équivalent de ce que raconte le texte mais sous forme d&#39;image et celle destinées à la décoration permettant de rendre ce que l&#39;on consulte plus agréable à l’œil, plus attractif. Il y a donc ;</p>
<ul>
<li>les images de contenu qui <a href="https://blog.lesieur.name/maitriser-les-requetes-au-chargement-d-une-page-web/#les-images">se charger quelque soit le périphérique, la place qu&#39;il y a pour afficher de l&#39;information</a>. Quoi qu&#39;il arrive le réseau doit être en mesure d&#39;aller la chercher sinon un message alternatif doit expliquer pourquoi la ressource manque. C&#39;est pourquoi nous utilisons une balise <samp>&lt;img&gt;</samp>. Et il y a,</li>
<li>les images de décoration, de design qui ne sont que contextuelles, ne pas les afficher ne changerait en rien le sens du message délivré par la page, juste son appréciation par l&#39;utilisateur. C&#39;est pourquoi la magnifique image de background sur écran large ne doit pas être chargée sur mobile, idem pour les petits éléments décoratifs de ci de là car, on manque de réseau (pas toujours), mais surtout, on manque de place ! On utilise donc ici les propriétés CSS <samp>background-image</samp> <a href="https://blog.lesieur.name/maitriser-les-requetes-au-chargement-d-une-page-web/#les-backgrounds">qui ne feront pas d&#39;appel au réseau si elles ne sont pas sollicitées</a> (cachées par les parents, dans une Media Querie non interprétée, etc.).</li>
</ul>
<p>Mais les icônes ? Que sont elles ? Du contenu ? Pas vraiment, elles ne changent pas le contenu du message délivré. De la décoration ? Pas totalement puisque c&#39;est un guide ergonomique pour l’œil qui va bien au delà de la simple décoration (même si dans un sens, un bon design en plus d&#39;être agréable à l’œil est censé aller dans ce sens également).</p>
<h2 id="les-ic-nes-et-les-polices-custom">Les icônes et les polices custom</h2>
<p>Alors comment représenter des icônes ? Mettons les balise <samp>&lt;img&gt;</samp> de côté tout de suite, si on considère qu&#39;une icône n&#39;est pas du contenu pertinent. L&#39;icône sert dans le meilleurs des cas à accompagner un mot, un groupe de mot ou dans le pire des cas à être affiché seule. Par exemple le mot « Paramètre » peut donc être précédé d&#39;une icône d&#39;écrou ou ne pas être affiché et guider l&#39;utilisateur en lui laissant penser que cette icône seule représente le mot ou l&#39;action « Paramètre ».</p>
<p>Qu&#39;est-ce qui —sémantiquement ou d&#39;un point de vu de séparation du fond et de la forme– serait le plus proche de ce comportement ? <strong>Une balise inline, dont la valeur <samp>:before</samp> représenterait une icône</strong> elle même affiché par une <samp>background-image</samp> ou part une police.</p>
<p>Ainsi ceci répond parfaitement au besoin :</p>
<pre class="prettyprint linenums"><code class="lang-html">`&lt;span class=&quot;icon settings&quot;&gt;Paramètres&lt;/span&gt;`
</code></pre>
<p>ou ceci</p>
<pre class="prettyprint linenums"><code class="lang-html">`&lt;span class=&quot;icon settings hidden&quot;&gt;Paramètres&lt;/span&gt;`
</code></pre>
<p>avec comme affichage ceci :</p>
<pre class="prettyprint linenums"><code class="lang-css">.icon:before {
    content: &quot;&quot;;
    width: 0.8em;
    height: 0.8em;
    margin-right: 0.2em;
    display: inline-block;
    background-size: cover;
}
.icon.hidden {
    display: block;
    width: 0.8em;
    text-indent: -7777px;
}
.icon.hidden:before {
    display: none;
}
.icon.hidden:after {
    content: &quot;&quot;;
    width: 0.8em;
    height: 0.8em;
    display: inline-block;
    background-size: cover;
    float: right;
}

.icon.settings:after,
.icon.settings:before {
    background-image: url(&#39;une-image-icone-ici.png&#39;);
    /* À noter que l&#39;on peut également charger une police avec un caractère spéciale représentant l&#39;icône à la place d&#39;images de background. Mais nous ne traiterons pas cet aspect dans cet article */
}
</code></pre>
<blockquote>
<p>Résultat</p>
<p data-height="338" data-theme-id="0" data-slug-hash="pvZmae" data-default-tab="result" data-user="Haeresis" class='codepen'>See the Pen <a href='http://codepen.io/Haeresis/pen/pvZmae/'>Display icon with background-image</a> by Bruno Lesieur (<a href='http://codepen.io/Haeresis'>@Haeresis</a>) on <a href='http://codepen.io'>CodePen</a>.</p>





</blockquote>
<h2 id="la-balise-i-le-retour-discret-">La balise i, le retour discret !</h2>
<p>Mais détrompez-vous. Non, seulement la balise <samp>&lt;i&gt;</samp> n&#39;a pas été remplacé par <samp>&lt;em&gt;</samp> mais elle reste totalement utilisée par le W3C dans la spécification  HTML5 !</p>
<p>Et quoi de plus pratique et séduisant que de remplacer notre exemple précédent par</p>
<pre class="prettyprint linenums"><code class="lang-html">`&lt;i class=&quot;settings&quot;&gt;Paramètres&lt;/i&gt;`
</code></pre>
<p>ou ceci</p>
<pre class="prettyprint linenums"><code class="lang-html">`&lt;i class=&quot;settings hidden&quot;&gt;Paramètres&lt;/i&gt;`
</code></pre>
<p><strong>Malheureusement pour cette pratique, si la balise <samp>&lt;i&gt;</samp> est toujours valide de nos jour, ce n&#39;est pas que pour la rétro-compatibilité HTML5 mais belle et bien parce qu&#39;elle signifie quelque chose, et ce n&#39;est pas « icon ».</strong></p>
<p><a href="https://html.spec.whatwg.org/multipage/semantics.html#the-i-element">La documentation HTML5 nous explique pour <samp>&lt;i&gt;</samp></a> qu&#39;il s&#39;applique à une portion de texte empruntant une autre voix, ou une autre humeur c-à-d étant en décalage avec le propos global dans sa manière de l&#39;aborder bien que son sujet reste le même ;</p>
<ol>
<li><p>comme une pensée :</p>
<blockquote>
<p><samp>&lt;p&gt;</samp>Tu as de très jolies yeux aujourd&#39;hui, dit Salie. <samp>&lt;i&gt;</samp><em>Dommage que tes oreilles les caches...</em><samp>&lt;/i&gt;</samp> pensa t-elle.<samp>&lt;/p&gt;</samp></p>
</blockquote>
</li>
<li><p>une pensée idiomatique d&#39;une autre langue :</p>
<blockquote>
<p><samp>&lt;p&gt;</samp>It&#39;s like a <samp>&lt;i lang=&quot;fr&quot;&gt;</samp>déjà-vu<samp>&lt;/i&gt;</samp> all over again.<samp>&lt;/p&gt;</samp></p>
</blockquote>
</li>
<li><p>un terme technique</p>
<blockquote>
<p><samp>&lt;p&gt;</samp>La notion de <samp>&lt;i class=&quot;term&quot;&gt;</samp>flemme empathique<samp>&lt;/i&gt;</samp> est expliqué dans un autre article.<samp>&lt;/p&gt;</samp></p>
</blockquote>
</li>
<li><p>une taxonomie</p>
<blockquote>
<p><samp>&lt;p&gt;</samp>J&#39;ai <samp>&lt;i class=&quot;taxonomy&quot;&gt;</samp>veni vidi vici<samp>&lt;/i&gt;</samp>.<samp>&lt;/p&gt;</samp></p>
</blockquote>
</li>
</ol>
<p>De la même manière, sachez que <samp>&lt;b&gt;</samp> n&#39;a pas été remplacé par <samp>&lt;strong&gt;</samp> mais tout comme <samp>&lt;i&gt;</samp>, <a href="https://html.spec.whatwg.org/multipage/semantics.html#the-b-element"><samp>&lt;b&gt;</samp> à une utilité précise</a>.</p>
<h2 id="la-balise-i-peut-elle-repr-senter-une-ic-ne-">La balise i peut-elle représenter une icône ?</h2>
<p>Est-ce bien d&#39;utiliser la balise <samp>&lt;i&gt;</samp> pour représenter une icône en lieu et place de la balise <samp>&lt;span&gt;</samp>. On peut clairement objecter que le code suivant <samp>&lt;i class=&quot;icon settings&quot;&gt;&lt;/i&gt;</samp> est une faute absolue puisque dans ce cas, la balise <samp>&lt;i&gt;</samp> ne représente aucun texte. D&#39;une autre manière, <samp>&lt;i class=&quot;settings&quot;&gt;Paramètres&lt;/i&gt;</samp> sans la classe <samp>icon</samp> est déconseillé puisque <samp>&lt;i&gt;</samp> doit avoir son propre rendu quand il ne sert pas à afficher une icône. Il faut donc absolument l&#39;accompagner d&#39;un mot et d&#39;une classe spécifique, quitte à ensuite le masquer pour ne garder que l&#39;icône, comme ceci <samp>&lt;i class=&quot;icon settings hidden&quot;&gt;Paramètres&lt;/i&gt;</samp> (la classe <samp>icon</samp> étant ici une équivalence de <samp>taxonomy</samp> ou <samp>term</samp> dans nos exemples précédents).</p>
<p>Au final, en extrapolant un peu, on peut estimer que l&#39;icône <em>paramètres</em> est une autre manière de parler du message « paramètre ». Cet affichage est donc en décalage avec le propos du mot en lui même puisque c&#39;est une autre manière de l&#39;exprimer —comme le serrait de le signer (avec les mains), ou de l&#39;écrire avec un symbole japonais— mais reste cohérent avec son sujet qui est « je désigne un ensemble de paramètre ». Ainsi ici, il est question de mettre l&#39;accent sur le mot exprimé à travers un dessin.</p>
<p>Pour ma part, c&#39;est une explication qui ne me satisfait pas totalement aussi j&#39;estime que laisser le choix entre l&#39;utilisation de <samp>&lt;i class=&quot;icon settings hidden&quot;&gt;Paramètres&lt;/i&gt;</samp> et <samp>&lt;span class=&quot;icon settings hidden&quot;&gt;Paramètres&lt;/span&gt;</samp> au développeur est la moindre des choses pour un Framework CSS monsieur <a href="http://semantic-ui.com/elements/icon.html#/icons">Semantic-UI</a> !</p>
<p>Et vous ? Que pensez-vous de cette pratique ou de ce « détournement » des spécifications ?</p>
]]></description>
            <link>http://localhost:7776icon-ou-la-balise-html-semantique-qui-n-existait-pas/</link>
            <guid isPermaLink="false">54f8874a8abb243843ee1e77</guid>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[Spécifications]]></category>
            <category><![CDATA[W3C]]></category>
            <category><![CDATA[CSS]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[HTML]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Tue, 07 Apr 2015 12:41:00 GMT</pubDate>
        </item>
    </channel>
</rss>