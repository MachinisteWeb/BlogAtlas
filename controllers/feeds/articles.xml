<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Quelques #ID et beaucoup de .CLASS]]></title>
        <description><![CDATA[Ce blog est une compilation d'articles sur le développement JavaScript Front-end jQuery, Back-end Node.js ou développement web en général.]]></description>
        <link>http://localhost:7776</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Tue, 07 May 2019 10:19:44 GMT</lastBuildDate>
        <atom:link href="http://localhost:7776/feeds/articles.xml" rel="self" type="application/rss+xml"/>
        <author><![CDATA[Bruno Lesieur]]></author>
        <pubDate>Tue, 07 May 2019 10:19:44 GMT</pubDate>
        <copyright><![CDATA[2012-2014 Bruno Lesieur]]></copyright>
        <language><![CDATA[fr]]></language>
        <managingEditor><![CDATA[Bruno Lesieur]]></managingEditor>
        <webMaster><![CDATA[Bruno Lesieur]]></webMaster>
        <ttl>60</ttl>
        <item>
            <title><![CDATA[Comment HTTPS et Tor protègent ensemble vos données et votre anonymat ?]]></title>
            <description><![CDATA[<p>APetit guide interactif pour vérifier en un clin d&#39;œil quels sont les informations disponibles à quels niveaux du réseau avec HTTPS et/ou Tor !</p>
<p>Pour résumé, voici ce que vous pourrez apprendre ici pour aider à garder votre anonymat.</p>
<ul>
<li>Le QUOI : utiliser HTTPS vous aide à empêcher qu&#39;on sache qu&#39;est-ce qui est envoyé.</li>
<li>Le OÙ : utiliser Tor vous aide à empêcher à qu&#39;on sache d&#39;où et vers où c&#39;est envoyé.</li>
<li>Le QUI : ajuster vos habitudes vous aide à empêcher qu&#39;on sache qui a envoyé.</li>
</ul>
<h2 id="le-visuel-interactif">Le visuel interactif</h2>
<p>Ce visuel interactif est adapté de l&#39;article original : « <a href="https://www.eff.org/pages/tor-and-https" target="_blank">How HTTPS and Tor Work Together to Protect Your Anonymity and Privacy</a> ».</p>
<p>Il vous permet de rapidement comprendre parmi les éléments suivants :</p>
<ul>
<li>Qui, Quoi, d&#39;Où, vers Où, Comment ;</li>
</ul>
<p>quelles méthodes :</p>
<ul>
<li>HTTPS ou Tor ;</li>
</ul>
<p>vous protègent des</p>
<ul>
<li>Pirates, Agents, Administrateurs, Webmasters, Police, Avocats, etc.</li>
</ul>
<p><strong>Instructions :</strong></p>
<ul>
<li>Cliquez sur le bouton « Tor » pour voir quelles sont les données visibles par les intermédiaires quand vous utilisez Tor. Le bouton sera en vert pour indiquer que Tor est actif.</li>
<li>Cliquez sur le bouton « HTTPS » pour voir quelles sont les données visibles par les intermédiaires quand vous utilisez HTTPS. Le bouton sera en vert pour indiquer que HTTPS est actif.</li>
<li>Quand les deux boutons sont verts, vous pouvez voir quelles sont les données visibles par les intermédiaires quand HTTPS et Tor sont couplés.</li>
<li>Quand les deux boutons sont gris, vous pouvez voir quelles sont les données visibles par les intermédiaires quand vous n&#39;utilisez aucunes de ces technologies.</li>
</ul>
<p><strong>Explications :</strong></p>
<ul>
<li>Les données potentiellement visibles sont : l&#39;adresse du site que vous visitez (<a href="http://www.site.com">www.site.com</a>), votre nom d&#39;utilisateur et votre mot de passe (Id-MdP), les données que vous transmettez (Données), votre adresse IP publique (Position) et si vous êtes sur le réseau Tor ou pas (Tor).</li>
<li>Vous pouvez suivre le trajet de ces données depuis « Vous » jusqu&#39;à « <a href="http://www.site.com">www.site.com</a> » et voir qui et à quels niveaux peut avoir accès à quoi. Vous croiserez sur cette route le « WiFi » qui est l&#39;accès à vos échanges entre votre appareil et votre box Internet et la portion de câble allant de votre lieu de connexion jusqu&#39;au fournisseur d&#39;accès à Internet (FAI). Ce même accès à Internet existe du côté du service auquel vous accédez. Entre les deux il y a la toile où en se plaçant aux bon endroits on peut intercepter des paquets et pour finir le réseau Tor et ses nœuds d&#39;entrés, intermédiaires et de sorties.</li>
</ul>
<div class="schema">
<button class="tor">Tor</button>
<button class="https">HTTPS</button>
<img class="schema-img s-t-s-h" src="./media/images/upload/pas-tor-pas-https.png" alt="Naviguer sans HTTPS et sans Tor">
<img class="schema-img s-t-a-h" src="./media/images/upload/pas-tor-avec-https.png" alt="Naviguer avec HTTPS et sans Tor">
<img class="schema-img a-t-s-h" src="./media/images/upload/avec-tor-pas-https.png" alt="Naviguer sans HTTPS et avec Tor">
<img class="schema-img a-t-a-h" src="./media/images/upload/avec-tor-avec-https.png" alt="Naviguer avec HTTPS et avec Tor">
</div>





<h2 id="quest-ce-que-cest-https-">Qu&#39;est-ce que c&#39;est HTTPS ?</h2>
<p>Selon <a href="https://fr.wikipedia.org/wiki/HyperText_Transfer_Protocol_Secure" target="_blank">Wikipedia</a>, « HTTPS permet au visiteur de vérifier l&#39;identité du site web auquel il accède, grâce à un certificat d&#39;authentification émis par une autorité tierce, réputée fiable (et faisant généralement partie de la liste blanche des navigateurs internet). Il garantit théoriquement la confidentialité et l&#39;intégrité des données envoyées par l&#39;utilisateur (notamment des informations entrées dans les formulaires) et reçues du serveur. Il peut permettre de valider l&#39;identité du visiteur, si celui-ci utilise également un certificat d&#39;authentification client. »</p>
<h2 id="quest-ce-que-cest-tor-">Qu&#39;est-ce que c&#39;est Tor ?</h2>
<p>Selon <a href="https://fr.wikipedia.org/wiki/Tor_(r%C3%A9seau)" target="_blank">Wikipedia</a>, « Tor est un réseau informatique superposé mondial et décentralisé. Il se compose d&#39;un certain nombre de serveurs, appelés nœuds du réseau et dont la liste est publique. Ce réseau permet d&#39;anonymiser l&#39;origine de connexions TCP. Cela peut entre autres servir à anonymiser la source d&#39;une session de navigation Web ou de messagerie instantanée. Cependant, l&#39;anonymisation du flux n&#39;est pas suffisante, car l&#39;application peut potentiellement transmettre des informations annexes permettant d&#39;identifier la personne : c&#39;est pourquoi le projet Tor développe également un navigateur Web basé sur Firefox, Tor Browser, ainsi que d&#39;autres applications spécialement modifiées pour préserver l&#39;anonymat de leurs usagers. »</p>
<h2 id="utiliser-tor-browser-pour-vos-sites-https">Utiliser Tor Browser pour vos sites HTTPS</h2>
<p>Selon <a href="https://fr.wikipedia.org/wiki/Tor_Browser" target="_blank">Wikipedia</a>, « Développé par The Tor Project, Tor Browser est un navigateur web libre basé sur Mozilla Firefox ESR, destiné à naviguer sur le réseau d&#39;anonymisation Tor. Il permet d&#39;accéder au réseau Tor et Internet de manière techniquement sécurisée parce qu&#39;il bloque par défaut les extensions telles que Flash et JavaScript. De plus, il permet, grâce à une extension intégrée nommée HTTPS Everywhere, de privilégier les connexions sécurisées au moyen du protocole HTTPS. Il inclut également NoScript, un plugin destiné à bloquer les programmes JavaScript de façon sélective. Il est intégré en tant que navigateur web par défaut dans le système d&#39;exploitation Tails. »</p>
<blockquote>
<p><a href="https://www.torproject.org/projects/torbrowser.html.en" target="_blank">Télécharger Tor Browser</a></p>
</blockquote>
<h2 id="les-limites-de-lanonymat-avec-https-et-tor">Les limites de l&#39;anonymat avec HTTPS et Tor</h2>
<p>Vous aurez remarqué que peu importe le fait que vous utilisiez HTTPS et/ou Tor, les Admins (administrateurs systèmes, webmasters, etc.) du service en bout ont accès à vos données (tel que identifiant, email, mot de passe (peut-être même en non hashé selon les services), etc.). C&#39;est ici que la dernière part de travail pour un anonymat complet sur le web vous revient.</p>
<h3 id="création-et-utilisation-de-comptes-anonymes">Création et utilisation de comptes anonymes</h3>
<p>Si vous utilisez le réseau Tor un service avec vos identifiants de compte personnel, en bout de chaine, vous ne serez forcément pas anonyme. Il est donc important d&#39;utiliser des comptes anonymes (sur des services dont les conditions d&#39;utilisation vous le permettent. Cela veut donc dire que vous n&#39;aurez pas accès à tous les services si vous souhaitez préserver votre anonymat).</p>
<p>Cependant, si vous créez un compte anonyme depuis une connexion non Tor, alors votre anonymat et/ou localisation est sabordée dès le début. Idem si vous accédez une seul fois à vos comptes anonymes depuis des connexions non Tor. Autrement dit, « tout ce qui est fait sur Tor, doit rester sur Tor ».</p>
<p>Il en va également de même pour toute communication d&#39;information vous reliant directement avec la connexion (comme, à tout hasard, des cartes de crédits... voir même des mots de passes identiques (même s&#39;ils sont hashés)).</p>
<p>Ce qu&#39;il faut bien comprendre, c&#39;est que sur Internet, vous êtes le dernier nœud (relais Tor) pour le reste du monde. Il n&#39;est alors pas garanti que ce nœud lui-même n&#39;essais pas de récupérer vos informations. Il est donc important que ces informations soient anonymes.</p>
<h2 id="dautres-choses-à-savoir-">D&#39;autres choses à savoir ?</h2>
<blockquote>
<p><strong><samp>Important</samp>À savoir</strong> : vos habitudes, Tor et HTTPS ne préserve pas votre anonymat des gens qui se tiennent derrière vous !</p>
</blockquote>
<p>N&#39;hésitez pas à compléter cette page de vos commentaires ci-dessous, que ce soit pour poser des questions ou apporter des réponses !</p>
]]></description>
            <link>http://localhost:7776/comment-https-et-tor-protegent-ensemble-vos-donnees-et-votre-anonymat/</link>
            <guid isPermaLink="false">5c94e0b85c091602d0f75513</guid>
            <category><![CDATA[Navigateurs]]></category>
            <category><![CDATA[Spécifications]]></category>
            <category><![CDATA[Outils]]></category>
            <category><![CDATA[Sécurité]]></category>
            <category><![CDATA[Ressources]]></category>
            <category><![CDATA[Traduction]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Fri, 22 Mar 2019 13:18:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Comprendre et reproduire les animations de transitions Vue.js en CSS et JavaScript]]></title>
            <description><![CDATA[<p>En tant que traducteur principal de <a href="https://fr.vuejs.org/">la documentation officielle française de Vue.js</a>, lors de la traduction de la page  <a href="https://fr.vuejs.org/v2/guide/transitions.html">Transitions d&#39;entrée, de sortie et de liste</a>, j&#39;ai été bluffé par la simplicité de gestion des animations de transition proposé par <a href="https://vuejs.org/">Vue.js</a>. J&#39;ai mis un peu de temps à comprendre exactement comment ça pouvait fonctionner sous le capot et je vous propose de faire ce cheminement de compréhension ensemble à travers cet article.</p>
<p>Cela vous permettra :</p>
<ul>
<li>De reproduire une fonction permettant de réaliser des animations de transition simple.</li>
<li>De comprendre comment fonctionne le système d&#39;animation de transition de Vue.js.</li>
</ul>
<figure>
<img width="900" height="871" src="https://fr.vuejs.org/images/transition.png" alt="Transitions Vue.js" style="max-width: 100%;height: auto;">
<figcaption>Source : https://fr.vuejs.org/</figcaption>
</figure>





<h2 id="à-la-main">À la main</h2>
<p>Commençons par les bases et évinçons l&#39;idée de transition pour le moment. De façon simple, pour changer l&#39;état d&#39;un composant il suffit d&#39;une classe de changement d&#39;état. Je vais pouvoir ainsi pouvoir indiquer dans ma feuille de style (que nous nommerons dans cet article « la CSS ») sur un élément en indiquant qu&#39;il est dans l&#39;état par défaut en <samp>display: none;</samp> et dire avec la classe d&#39;état <samp>.is-displayed</samp> que l&#39;élément est affiché via la propriété de style <samp>display: block;</samp>. Vous pourrez trouver <a href="https://blog.lesieur.name/conventions-html-css-js-et-architecture-front-end/#changement-d-tat-des-l-ments">plus de détails sur cette notion dans cet article</a>.</p>
<p>Voyons cela simplement avec un élément de classe <samp>.simple-example--message</samp> qui possède son état initial et un état <samp>.is-displayed</samp>.</p>
<p>HTML :</p>
<pre class="prettyprint linenums"><code>&lt;div class=&quot;simple-example&quot;&gt;
    &lt;!-- On créé un bouton --&gt;
    &lt;button class=&quot;simple-example--button&quot;&gt;Afficher/Masquer&lt;/button&gt;

    &lt;!-- qui permet d&#39;afficher ce message. --&gt;
    &lt;div class=&quot;simple-example--message&quot;&gt;Tu me vois !&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>CSS :</p>
<pre class="prettyprint linenums"><code>/* L&#39;état initial. */
.simple-example--message {
    display: none;
}

/* L&#39;état affiché. */
.simple-example--message.is-displayed {
    display: block;
}
</code></pre><p>JavaScript :</p>
<pre class="prettyprint linenums"><code>// On récupère le bouton et le message.
var button = document.getElementsByClassName(&#39;simple-example--button&#39;)[0],
    message = document.getElementsByClassName(&#39;simple-example--message&#39;)[0];

// Quand on clique sur le bouton
button.addEventListener(&#39;click&#39;, function () {

    // on affiche/masque le message.
    message.classList.toggle(&#39;is-displayed&#39;);
});
</code></pre><p>Résultat :</p>
<div class="simple-example-1">
    <button class="simple-example-1--button">Afficher/Masquer</button>
    <div class="simple-example-1--message">Tu me vois !</div>
</div>



<h3 id="changement-détat-avec-transition">Changement d&#39;état avec transition</h3>
<p>Un changement d&#39;état est rapide et abrupte, pour rendre cela plus élégant, nous pouvons accompagner cette disparition d&#39;un effet de transition. Pour transformer ce simple changement d&#39;état en une animation de transition nous allons utiliser la propriété <samp>opacity</samp> à la place de <samp>display</samp>. Nous verrons plus loin pourquoi nous faisons ce changement et allons voir de suite ce que cela peut donner.</p>
<p>HTML :</p>
<pre class="prettyprint linenums"><code>&lt;!-- Note : identique à l&#39;exemple précédent. --&gt;
&lt;div class=&quot;simple-example&quot;&gt;
    &lt;button class=&quot;simple-example--button&quot;&gt;Afficher/Masquer&lt;/button&gt;
    &lt;div class=&quot;simple-example--message&quot;&gt;Tu me vois !&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>CSS :</p>
<pre class="prettyprint linenums"><code>.simple-example--message {

    /* Nous allons permettre de changer */
    /* un élément invisible, */
    opacity: 0;

    /* en 1 seconde, */
    transition: opacity 1s;
}
.simple-example--message.is-displayed {

    /* en un élément visible. */
    opacity: 1;
}
</code></pre><p>JavaScript :</p>
<pre class="prettyprint linenums"><code>// Note : identique à l&#39;exemple précédent.
var button = document.getElementsByClassName(&#39;simple-example--button&#39;)[0],
    message = document.getElementsByClassName(&#39;simple-example--message&#39;)[0];

button.addEventListener(&#39;click&#39;, function () {
    message.classList.toggle(&#39;is-displayed&#39;);
});
</code></pre><p>Résultat :</p>
<div class="simple-example-2">
    <button class="simple-example-2--button">Afficher/Masquer</button>
    <div class="simple-example-2--message">Tu me vois !</div>
</div>



<h3 id="les-défauts-de-cette-approche">Les défauts de cette approche</h3>
<p><em>Règles CSS imcompatibles</em></p>
<p>Vous remarquerez cependant que pour permettre cela nous avons dû faire des choix. Effectivement, nous avons dû nous passer de la propriété <samp>display</samp> pour permettre à la transition de marcher. Un élément non affiché avant démarrage de la transition l&#39;empêche de fonctionner. Cela change quelque peut notre approche puisque vous pouvez remarquer dans ce cas que l&#39;espace sous le bouton existe déjà vu que nous le cachons simplement ici.</p>
<p>Mettons en évidence ce problème en le testant dans cet exemple.</p>
<p>HTML :</p>
<pre class="prettyprint linenums"><code>&lt;!-- Note : identique à l&#39;exemple précédent. --&gt;
&lt;div class=&quot;simple-example&quot;&gt;
    &lt;button class=&quot;simple-example--button&quot;&gt;Afficher/Masquer&lt;/button&gt;
    &lt;div class=&quot;simple-example--message&quot;&gt;Tu me vois !&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>CSS :</p>
<pre class="prettyprint linenums"><code>.simple-example--message {

    /* Ajout de la propriété `display`. */
    display: none;
    opacity: 0;
    transition: opacity 1s;
}
.simple-example--message.is-displayed {

    /* Ajout de la propriété `display`. */
    display: block;
    opacity: 1;
}
</code></pre><p>JavaScript :</p>
<pre class="prettyprint linenums"><code>// Note : identique à l&#39;exemple précédent.
var button = document.getElementsByClassName(&#39;simple-example--button&#39;)[0],
    message = document.getElementsByClassName(&#39;simple-example--message&#39;)[0];

button.addEventListener(&#39;click&#39;, function () {
    message.classList.toggle(&#39;is-displayed&#39;);
});
</code></pre><p>Résultat :</p>
<div class="simple-example-3">
    <button class="simple-example-3--button">Afficher/Masquer</button>
    <div class="simple-example-3--message">Tu me vois !</div>
</div>

<p><em>Ouverture et fermeture identique</em></p>
<p>Quand on effectue une transition, nous pouvons décrire deux états.</p>
<ul>
<li>La transition qui accompagne l&#39;élément de son état standard à son état <samp>.is-display</samp>. Nous appelons cela une <strong>transition entrante</strong> (ou transition d&#39;ouverture).</li>
<li>La transition qui accompagne l&#39;élément de son état <samp>.is-display</samp> à son état standard. Nous appelons cela une <strong>transition sortante</strong> (ou transition de fermeture).</li>
</ul>
<p>Il faut savoir dès lors que notre utilisation actuelle dans la CSS rend impossible de faire une transition entrante différente de la transition sortante. Nous entendons par différente le fait de faire autre chose que l&#39;animation inverse. Il va falloir gérer les transitions ailleurs que dans la classe principale pour résoudre ce point.</p>
<p>Nous allons donc améliorer le code JavaScript pour répondre à ces problématiques !</p>
<h2 id="gestion-de-la-méthode-de-transition">Gestion de la méthode de transition</h2>
<p>La première solution apportée par <a href="https://fr.vuejs.org/v2/guide/transitions.html">Vue.js</a> est de gérer la durée de transition, les étapes de transition et la courbe de transition dans une classe séparée. Il va d&#39;ailleurs y avoir deux classes. Une qui va gérer les instructions pour la transition entrante (de l&#39;état standard à l&#39;état alternatif) et une qui va gérer les instructions pour la transition sortante (de l&#39;état alternatif à l&#39;état standard).</p>
<ul>
<li>C&#39;est la classe <samp>…-enter-active</samp> qui gérera la transition de l&#39;état standard à l&#39;état <samp>.is-displayed</samp>.</li>
<li>C&#39;est la classe <samp>…-leave-active</samp> qui gérera la transition de l&#39;état <samp>.is-displayed</samp> à l&#39;état standard.</li>
</ul>
<p>Il suffit dans ce modèle de remplacer les <samp>…</samp> par le nom que vous souhaitez donner à votre transition. Appelons la <samp>display</samp>. Voyons cela avec le code suivant.</p>
<p>HTML :</p>
<pre class="prettyprint linenums"><code>&lt;!-- Note : similaire à l&#39;exemple précédent avec le nom des classes différent. --&gt;
&lt;div class=&quot;transition-example&quot;&gt;
    &lt;button class=&quot;transition-example--button&quot;&gt;Afficher/Masquer&lt;/button&gt;
    &lt;div class=&quot;transition-example--message&quot;&gt;Tu me vois !&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>CSS :</p>
<pre class="prettyprint linenums"><code>/* Définition de l&#39;état standard. */
.transition-example--message {
    opacity: 0;
    transform: translateX(0)
}

/* Définition de l&#39;état `.is-displayed`. */
.transition-example--message.is-displayed {
    opacity: 1;
    transform: translateX(200px)
}

/* Instruction de transition entrante. */
.transition-example--message.display-enter-active {

    /* Nous plaçons les informations de transition ici maintenant. */
    transition: opacity 1s, transform 1s;
}

/* Instruction de transition sortante. */
.transition-example--message.display-leave-active {

    /* Nous décidons de masquer le message plus lentement qu&#39;il ne s&#39;affiche. */
    transition: opacity 4s, transform 4s;
}
</code></pre><p>JavaScript :</p>
<pre class="prettyprint linenums"><code>var button = document.getElementsByClassName(&#39;transition-example--button&#39;)[0],
    message = document.getElementsByClassName(&#39;transition-example--message&#39;)[0];

button.addEventListener(&#39;click&#39;, function () {

    // On vérifie l&#39;état de notre composant.
    // Renvoi `true` s&#39;il est ouvert.
    // Renvoi `false` s&#39;il est fermé.
    var isDisplayed = message.classList.contains(&#39;is-displayed&#39;);

    // Remise à zéro des transitions.
    message.classList.remove(&#39;display-enter-active&#39;);
    message.classList.remove(&#39;display-leave-active&#39;);

    // On applique la transition souhaitée.
    // On inverse `isDisplayed` pour gérer la
    // transition entrante d&#39;abord,
    if (!isDisplayed) {

        // en appliquant `…-enter-active` pour la transition entrante
        message.classList.add(&#39;display-enter-active&#39;);

        // et en appliquant l&#39;état `.is-displayed`.
        message.classList.add(&#39;is-displayed&#39;);

    // Puis la transition sortante ensuite,
    } else {

        // en appliquant `…-leave-active` pour la transition sortante
        message.classList.add(&#39;display-leave-active&#39;);

        // et en appliquant l&#39;état standard.
        message.classList.remove(&#39;is-displayed&#39;);
    }
});
</code></pre><p>Résultat :</p>
<div class="transition-example-1">
    <button class="transition-example-1--button">Afficher/Masquer</button>
    <div class="transition-example-1--message">Tu me vois !</div>
</div>





<h2 id="état-de-début-et-de-fin-de-transition">État de début et de fin de transition</h2>
<p>La seconde solution apportée par <a href="https://fr.vuejs.org/v2/guide/transitions.html">Vue.js</a> pour gérer l&#39;existence ou non de l&#39;objet, ou le fait qu&#39;il possède des propriétés qui rendent les transitions incompatibles (comme <samp>display</samp>) est de mettre en place un état de début et un état de fin de transition respectivement :</p>
<ul>
<li>en démarrage et fin de transition entrante et</li>
<li>en démarrage et fin de transition sortante.</li>
</ul>
<h3 id="ouverture">Ouverture</h3>
<p>La transition entrante, à laquelle sera associée tout du long l&#39;état <samp>…-enter-active</samp> se gère avec les classes suivantes :</p>
<ul>
<li>La classe <samp>…-enter</samp> vous permettra de définir quelles sont les propriétés de démarrage, juste avant que l&#39;on enclenche la transition entrante.</li>
<li>La classe <samp>…-enter-to</samp> vous permettra de définir quelles sont les propriétés à atteindre en fin de transition entrante.</li>
</ul>
<p>Ainsi l&#39;animation se jouera des valeurs de l&#39;état <samp>…-enter</samp> jusqu&#39;aux valeurs de l&#39;état <samp>…-enter-to</samp> en suivant les instructions de transition dans <samp>…-enter-active</samp>.</p>
<h3 id="fermeture">Fermeture</h3>
<p>La transition sortante, à laquelle sera associée tout du long l&#39;état <samp>…-leave-active</samp> se gère avec les classes suivantes :</p>
<ul>
<li>La classe <samp>…-leave</samp> vous permettra de définir quelles sont les propriétés de démarrage, juste avant que l&#39;on enclenche la transition sortante.</li>
<li>La classe <samp>…-leave-to</samp> vous permettra de définir quelles sont les propriétés à atteindre en fin de transition sortante.</li>
</ul>
<p>Ainsi l&#39;animation se jouera des valeurs de l&#39;état <samp>…-leave</samp> jusqu&#39;aux valeurs de l&#39;état <samp>…-leave-to</samp> en suivant les instructions de transition dans <samp>…-enter-active</samp>.</p>
<h3 id="exemple">Exemple</h3>
<p>Il suffit dans ce modèle de remplacer les <samp>…</samp> par le nom que vous souhaitez donner à votre transition. Voyons cela avec le code suivant :</p>
<p>HTML :</p>
<pre class="prettyprint linenums"><code>&lt;!-- Note : identique à l&#39;exemple précédent. --&gt;
&lt;div class=&quot;transition-example&quot;&gt;
    &lt;button class=&quot;transition-example--button&quot;&gt;Afficher/Masquer&lt;/button&gt;
    &lt;div class=&quot;transition-example--message&quot;&gt;Tu me vois !&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>CSS :</p>
<pre class="prettyprint linenums"><code>/* Définition de l&#39;état standard. */
.transition-example--message {
    display: none;
}

/* Définition de l&#39;état `.is-displayed`. */
.transition-example--message.is-displayed {
    display: block;
}


/* Ici nous définissons l&#39;état de l&#39;élément au début */
/* de la transition entrante. */
.transition-example--message.display-enter {
    transform: translateY(0)
}

/* Ici nous définissons l&#39;état de l&#39;élément à la fin */
/* de la transition entrante. */
.transition-example--message.display-enter-to {
    transform: translateY(50px)
}


/* Ici nous définissons l&#39;état de l&#39;élément au début */
/* de la transition sortante. */
.transition-example--message.display-leave {
    transform: translateX(200px)
}

/* Ici nous définissons l&#39;état de l&#39;élément à la fin */
/* de la transition sortante. */
.transition-example--message.display-leave-to {
    transform: translateY(0)
}


/* Nous définissons ici les animations qui vont opérer */
/* lors de la transition entrante. */
.transition-example--message.display-enter-active {
    transition: transform 1s;
}
/* Nous définissons ici les animations qui vont opérer */
/* lors de la transition sortante. */
.transition-example--message.display-leave-active {
    transition: transform 4s;
}
</code></pre><p>JavaScript :</p>
<pre class="prettyprint linenums"><code>var button = document.getElementsByClassName(&quot;transition-example--button&quot;)[0],
    message = document.getElementsByClassName(&quot;transition-example--message&quot;)[0];

button.addEventListener(&quot;click&quot;, function() {
    var isDisplayed = message.classList.contains(&quot;is-displayed&quot;);

    // Lors de la transition entrante,
    if (!isDisplayed) {

        // on place l&#39;état `.is-diplayed`,
        message.classList.add(&quot;is-displayed&quot;);

        // on retire la classe de fin de la transition sortante et
        message.classList.remove(&quot;display-leave-to&quot;);

        // on place la classe de début de la transition entrante.
        message.classList.add(&quot;display-enter&quot;);

        // Puis une boucle plus tard,
        setTimeout(function() {

            // on explique comment ces propriétés vont varier
            // en appliquant la classe de transition entrante active.
            message.classList.add(&quot;display-enter-active&quot;);

            // Puis une boucle plus tard,
            setTimeout(function() {

                // on déclenche la transition en intervertissant les valeurs
                // de début vers les valeurs de fin de transition entrante.
                message.classList.remove(&quot;display-enter&quot;);
                message.classList.add(&quot;display-enter-to&quot;);

                // Puis à la fin des 1 seconde,
                setTimeout(function() {

                    // On retire la classe de transition entrante active.
                    message.classList.remove(&quot;display-enter-active&quot;);
                }, 1000);
            }, 0);
        }, 0);

    // Lors de la transition sortante.
    } else {

        // on retire la classe de fin de la transition entrante,
        message.classList.remove(&quot;display-enter-to&quot;);

        // On place la classe de début de la transition sortante.
        message.classList.add(&quot;display-leave&quot;);

        // Puis une boucle plus tard,
        setTimeout(function() {

            // on explique comment ces propriétés vont varier
            // en appliquant la classe de transition sortante active.
            message.classList.add(&quot;display-leave-active&quot;);

            // Puis une boucle plus tard,
            setTimeout(function() {

                // on déclenche la transition en intervertissant les valeurs
                // de début vers les valeurs de fin de transition sortante.
                message.classList.remove(&quot;display-leave&quot;);
                message.classList.add(&quot;display-leave-to&quot;);

                // Puis à la fin des 4 secondes,
                setTimeout(function() {

                    // on retire la classe de transition entrante active et
                    message.classList.remove(&quot;display-leave-active&quot;);

                    // on retire l&#39;état `.is-diplayed`.
                    message.classList.remove(&quot;is-displayed&quot;);
                }, 4000);
            }, 0);
        }, 0);
    }
});
</code></pre><p>Résultat :</p>
<div class="transition-example-2">
    <button class="transition-example-2--button">Afficher/Masquer</button>
    <div class="transition-example-2--message">Tu me vois !</div>
</div>





<h2 id="aller-plus-loin">Aller plus loin</h2>
<p>Dans notre exemple, le système se base sur l&#39;état <samp>.is-displayed</samp> pour savoir s&#39;il doit enclencher une transition entrante ou une transition sortante. Mais il y a d&#39;autre moyen de prendre cette décision, notamment la présence de <samp>…-enter</samp> ou <samp>…-leave-to</samp> sur l&#39;élément par exemple. Il est également possible, comme cela peut-être le cas pour Vue.js de se baser sur la présence ou non de l&#39;élément dans le DOM avant transition.</p>
<h3 id="la-cible-la-transition-et-létat">La cible, la transition et l&#39;état</h3>
<p>Nous allons maintenant automatiser notre système dans une fonction que nous nommerons —et là je sens que je vais vous étonner— <samp>transition</samp>.</p>
<p>HTML :</p>
<pre class="prettyprint linenums"><code>&lt;!-- Note : similaire à l&#39;exemple précédent avec le nom des classes différent. --&gt;
&lt;div class=&quot;animation-example&quot;&gt;
    &lt;button class=&quot;animation-example--button&quot;&gt;Afficher/Masquer&lt;/button&gt;
    &lt;div class=&quot;animation-example--message&quot;&gt;Tu me vois !&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>CSS :</p>
<pre class="prettyprint linenums"><code>/* Définition de l&#39;état standard et alternatif. */
.animation-example--message {
    display: none;
}
.animation-example--message.is-displayed {
    display: block;
}

/* On créé une animation. */
@keyframes bounce-in {
  0% {
    transform: scale(0);
    opacicy: 0;
  }
  50% {
    transform: scale(1.5);
    opacicy: 0.8;
  }
  100% {
    transform: scale(1);
    opacicy: 1;
  }
}

/* On applique l&#39;animation pour transition entrante. */
.animation-example--message.animate-enter-active {
    animation: bounce-in 1s;
}

/* On applique l&#39;animation pour transition sortante. */
.animation-example--message.animate-leave-active {
    animation: bounce-in 4s reverse;
}
</code></pre><p>JavaScript :</p>
<pre class="prettyprint linenums"><code>var button, message;

// On déplace tout dans une fonction avec 3 paramètres qui représentent la cible, le nom de transition et le nom de l&#39;état.

/**
 * Permet d&#39;exécuter une transition entre deux états pour un élément spécifique.
 * @param  {HTMLElement} target     - L&#39;élément HTML qui doit être animé.
 * @param  {string}      transition - Le nom de la transition remplaçant `…` pour les classes `…-enter`, `…-leave`, etc.
 * @param  {string}      state      - L&#39;état placé au début d&#39;une transition entrante et retiré en fin d&#39;une transition sortante.
 */
function transition(target, transition, state) {
    // On test s&#39;il n&#39;existe pas d&#39;état de sortie.
    var hasNoState = !target.classList.contains(state);

    // Transition entrante s&#39;il n&#39;existe pas d&#39;état.
    if (hasNoState) {

        // On gère le nom des classes d&#39;état via le paramètre `state`.
        target.classList.add(state);

        // On gère les noms des classes de transition via le paramètre `transition`.
        target.classList.remove(transition + &quot;-leave-to&quot;);

        // On gère l&#39;élément HTML ciblé via le paramètre `target`.
        target.classList.add(transition + &quot;-enter&quot;);

        setTimeout(function() {
            target.classList.add(transition + &quot;-enter-active&quot;);

            setTimeout(function() {
                target.classList.remove(transition + &quot;-enter&quot;);
                target.classList.add(transition + &quot;-enter-to&quot;);

                setTimeout(function() {
                    target.classList.remove(transition + &quot;-enter-active&quot;);
                }, 1000);
            }, 0);
        }, 0);

    // Transition sortante s&#39;il existe un état.
    } else {
        target.classList.remove(transition + &quot;-enter-to&quot;);
        target.classList.add(transition + &quot;-leave&quot;);

        setTimeout(function() {
            target.classList.add(transition + &quot;-leave-active&quot;);

            setTimeout(function() {
                target.classList.remove(transition + &quot;-leave&quot;);
                target.classList.add(transition + &quot;-leave-to&quot;);

                setTimeout(function() {
                    target.classList.remove(transition + &quot;-leave-active&quot;);
                    target.classList.remove(state);
                }, 4000);
            }, 0);
        }, 0);
    }
}

button = document.getElementsByClassName(&quot;animation-example--button&quot;)[0];
message = document.getElementsByClassName(&quot;animation-example--message&quot;)[0];

button.addEventListener(&quot;click&quot;, function() {

    // On applique les transitions en définissant
    // l&#39;élément HTML `.transition-example--message` comme cible de l&#39;animation,
    // le nom `display` comme préfixe remplaçant `…` dans les noms de transition et
    // le nom `is-displayed` comme état alternatif après animation entrante.
    transition(message, &quot;animate&quot;, &quot;is-displayed&quot;);
});
</code></pre><p>Résultat :</p>
<div class="transition-example-3">
    <button class="transition-example-3--button">Afficher/Masquer</button>
    <div class="transition-example-3--message">Tu me vois !</div>
</div>



<h3 id="létat-facultatif">L&#39;état facultatif</h3>
<p>Imaginons à présent que la totalité des propriétés CSS pour les transitions que l&#39;on applique est compatible pour une transition (pas de présence de la propriété CSS <samp>display</samp> par exemple). Nous n&#39;aurions alors pas besoin de gérer d&#39;état. Sans état, nous ferrions alors le choix de deviner si nous devons effectuer une transition entrante ou sortante. Pour cela, nous pourrions nous baser sur la présence des classes <samp>…-enter-to</samp> ou de <samp>…-leave</samp> qui sont deux cas possibles qui indiquent que l&#39;animation doit être une transition sortante. Dans le cas inverse, ce serait une transition entrante.</p>
<p>Nous allons donc rendre cela possible avec la fonction <samp>transition</samp> en utilisant le HTML et la CSS suivants :</p>
<p>HTML :</p>
<pre class="prettyprint linenums"><code>&lt;!-- Note : similaire à l&#39;exemple précédent avec le nom --&gt;
&lt;!-- des classes et textes différents. --&gt;
&lt;div class=&quot;stateless-example&quot;&gt;
    &lt;button class=&quot;stateless-example--button&quot;&gt;Animer&lt;/button&gt;
    &lt;div class=&quot;stateless-example--message&quot;&gt;Animez-moi !&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>CSS :</p>
<pre class="prettyprint linenums"><code>/* Dans notre exemple, */
/* l&#39;état de début de la transition entrante */
/* et l&#39;état de fin de la transition sortante */
/* sont les mêmes. */
.stateless-example--message.animate-enter,
.stateless-example--message.animate-leave-to {
    transform: translateX(0)
}

/* Dans notre exemple, */
/* l&#39;état de début de la transition sortante */
/* et l&#39;état de fin de la transition entrante */
/* sont les mêmes. */
.stateless-example--message.animate-leave,
.stateless-example--message.animate-enter-to {
    transform: translateX(200px)
}

/* Nous continuons cependant à utiliser une asymétrie de temps. */
.stateless-example--message.animate-enter-active {
    transition: transform 1s;
}
.stateless-example--message.animate-leave-active {
    transition: transform 4s;
}
</code></pre><p>JavaScript</p>
<pre class="prettyprint linenums"><code>var button, message;

// Nous allons rendre le `state` facultatif et dans ce cas faire gérer
// le changement d&#39;état par la présence des classes de transition.

/**
 * Permet d&#39;exécuter une transition entre deux états pour un élément spécifique.
 * @param  {HTMLElement} target     - L&#39;élément HTML qui doit être animé.
 * @param  {string}      transition - Le nom de la transition remplaçant `…` pour les classes `…-enter`, `…-leave`, etc.
 * @param  {string}      [state]    - L&#39;état placé au début d&#39;une transition entrante et retiré en fin d&#39;une transition sortante.
 */
function transition(target, transition, state) {
    var switchBase,
        // Est-ce qu&#39;un état a été sciemment défini ?
        hasState = typeof state === &#39;string&#39;;

    // Gestion du critère de choix de transition entrante ou sortante.
    if (hasState) {

        // On utilise la présence de l&#39;état défini.
        switchBase = target.classList.contains(state);
    } else {

        // On devine l&#39;état suivant à partir des classes de transition sur l&#39;élément.
        switchBase = target.classList.contains(transition + &quot;-enter-to&quot;) || target.classList.contains(transition + &quot;-leave&quot;)
    }

    // Transition entrante.
    if (!switchBase) {

        // On vérifie s&#39;il y a un état avant d&#39;appliquer
        // le changement d&#39;état qui indique l&#39;état alternatif.
        hasState &amp;&amp; target.classList.add(state);

        target.classList.remove(transition + &quot;-leave-to&quot;);
        target.classList.add(transition + &quot;-enter&quot;);

        setTimeout(function() {
            target.classList.add(transition + &quot;-enter-active&quot;);

            setTimeout(function() {
                target.classList.remove(transition + &quot;-enter&quot;);
                target.classList.add(transition + &quot;-enter-to&quot;);

                setTimeout(function() {
                    target.classList.remove(transition + &quot;-enter-active&quot;);
                }, 1000);
            }, 0);
        }, 0);

    // Transition sortante.
    } else {
        target.classList.remove(transition + &quot;-enter-to&quot;);
        target.classList.add(transition + &quot;-leave&quot;);

        setTimeout(function() {
            target.classList.add(transition + &quot;-leave-active&quot;);

            setTimeout(function() {
                target.classList.remove(transition + &quot;-leave&quot;);
                target.classList.add(transition + &quot;-leave-to&quot;);

                setTimeout(function() {
                    target.classList.remove(transition + &quot;-leave-active&quot;);

                    // On vérifie s&#39;il y a un état avant d&#39;appliquer
                    // le changement d&#39;état qui indique l&#39;état standard.
                    hasState &amp;&amp; target.classList.remove(state);
                }, 4000);
            }, 0);
        }, 0);
    }
}

button = document.getElementsByClassName(&quot;stateless-example--button&quot;)[0];
message = document.getElementsByClassName(&quot;stateless-example--message&quot;)[0];

button.addEventListener(&quot;click&quot;, function() {

    // On applique les transitions en définissant
    // l&#39;élément HTML `.transition-example--message` comme cible de l&#39;animation et
    // le nom `animate` comme préfixe remplaçant `…` dans les noms de transition.
    transition(message, &quot;animate&quot;);
});
</code></pre><p>Résultat :</p>
<div class="stateless-example">
    <button class="stateless-example--button">Animer</button>
    <div class="stateless-example--message">Animez-moi !</div>
</div>



<h3 id="temps-automatiquement-calculé">Temps automatiquement calculé</h3>
<p>Il ne vous aura certainement pas échappé que jusqu&#39;à maintenant, nous indiquions manuellement que la transition entrante s&#39;arrête au bout de <samp>1000</samp> millisecondes et que la transition sortante s&#39;arrête au bout de <samp>4000</samp> millisecondes directement dans le code JavaScript. Nous allons créer une fonction qui calcule ce temps en fonction des instructions de transition dans la CSS. Profitons en également pour permettre de définir manuellement cette valeur lors de l&#39;utilisation de la fonction <samp>transition</samp>.</p>
<p>HTML :</p>
<pre class="prettyprint linenums"><code>&lt;!-- Note : identique à l&#39;exemple précédent. --&gt;
&lt;div class=&quot;stateless-example&quot;&gt;
    &lt;button class=&quot;stateless-example--button&quot;&gt;Animer&lt;/button&gt;
    &lt;div class=&quot;stateless-example--message&quot;&gt;Animez-moi !&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>CSS :</p>
<pre class="prettyprint linenums"><code>/* Note : identique à l&#39;exemple précédent. */
.stateless-example--message.animate-enter,
.stateless-example--message.animate-leave-to {
    transform: translateX(0)
}

.stateless-example--message.animate-leave,
.stateless-example--message.animate-enter-to {
    transform: translateX(200px)
}

.stateless-example--message.animate-enter-active {
    transition: transform 1s;
}
.stateless-example--message.animate-leave-active {
    transition: transform 4s;
}
</code></pre><p>JavaScript</p>
<pre class="prettyprint linenums"><code>var button, message;

// Nous allons permettre de définir nous même les transitions
// ou de les calculer automatiquement sans précisions à l&#39;utilisation.

/**
 * Permet d&#39;exécuter une transition entre deux états pour un élément spécifique.
 * @param  {HTMLElement}   target           - L&#39;élément HTML qui doit être animé.
 * @param  {string}        transition       - Le nom de la transition remplaçant `…` pour les classes `…-enter`, `…-leave`, etc.
 * @param  {string}        [state]          - L&#39;état placé au début d&#39;une transition entrante et retiré en fin d&#39;une transition sortante.
 * @param  {number|Object} [time]           - Si c&#39;est un `number`, spécifie la durée de la transition entrante et sortante.
                                              Si elle n&#39;est pas précisée, cette durée est calculée à partir de la propriété `transition` ou `animation`.
 * @param  {number}        [time.enterTime] - Spécifie la durée de la transition entrante.
                                              Le temps pour la transition sortante sera calculé si `time.leaveTime` n&#39;est pas définie.
 * @param  {number}        [time.leaveTime] - Spécifie la durée de la transition sortante.
                                              Le temps pour la transition entrante sera calculé si `time.leaveTime` n&#39;est pas définie.
 */
function transition(target, transition, state, time) {
    var switchBase,

        // Un état est défini ?
        hasState = typeof state === &#39;string&#39;,

        // Un temps de transition entrante est défini ?
        hasEnterTime = time &amp;&amp; typeof time.enterTime === &#39;number&#39;,

        // Un temps de transition sortante est défini ?
        hasLeaveTime = time &amp;&amp; typeof time.leaveTime === &#39;number&#39;,

        // Au moins un temps est défini ?
        hasTime = typeof time === &#39;number&#39; || hasEnterTime || hasLeaveTime;

    // Nous créons une fonction qui extrais le temps le plus
    // long dans une série de transition.
    function mostLongest(target) {
        var max = 0,
            hasTransition = getComputedStyle(target)[&#39;transition&#39;],
            hasAnimation = getComputedStyle(target)[&#39;animation&#39;],
            directive = hasTransition + &#39;, &#39; + hasAnimation;

        // On parcours toutes les transitions/animations.
        directive.split(&#39;,&#39;).forEach(function (item) {

            // On extrait les valeurs te temps
            item.match(/([.0-9]+)s/g).forEach(function (item) {

                // et on retire les `s` et convertissons le temps
                // en milliseconde (ex `&#39;4s&#39;` devient `4000`).
                var time = item.replace(/s/g, &#39;&#39;) * 1000;
                if (time &gt; max) {

                    // On ne garde que le temps le plus long.
                    max = time;
                }
            });
        });

        return max;
    }

    // Si le temps est précisé par l&#39;utilisateur.
    if (hasTime) {

        // Alors on affecte ce temps globalement
        // ou spécifiquement pour la transition d&#39;entrée
        enterTime = (hasEnterTime) ? time.enterTime : time;

        // ou spécifiquement pour la transition de sortie.
        leaveTime = (hasLeaveTime) ? time.leaveTime : time;
    }

    if (hasState) {
        switchBase = target.classList.contains(state);
    } else {
        switchBase = target.classList.contains(transition + &quot;-enter-to&quot;) || target.classList.contains(transition + &quot;-leave&quot;)
    }

    // Transition entrante.
    if (!switchBase) {
        hasState &amp;&amp; target.classList.add(state);

        target.classList.remove(transition + &quot;-leave-to&quot;);
        target.classList.add(transition + &quot;-enter&quot;);

        setTimeout(function() {
            target.classList.add(transition + &quot;-enter-active&quot;);

            // Si rien n&#39;est précisé globalement,
            // ou rien n&#39;est spécifié spécifiquement pour la transition entrante,
            if (!hasTime || (hasTime &amp;&amp; !hasEnterTime &amp;&amp; hasLeaveTime)) {

                // on récupère cette valeur depuis la CSS.
                enterTime = mostLongest(target);
            }

            setTimeout(function() {
                target.classList.remove(transition + &quot;-enter&quot;);
                target.classList.add(transition + &quot;-enter-to&quot;);

                setTimeout(function() {
                    target.classList.remove(transition + &quot;-enter-active&quot;);
                }, enterTime);
            }, 0);
        }, 0);

    // Transition sortante.
    } else {
        target.classList.remove(transition + &quot;-enter-to&quot;);
        target.classList.add(transition + &quot;-leave&quot;);

        setTimeout(function() {
            target.classList.add(transition + &quot;-leave-active&quot;);

            // Si rien n&#39;est précisé globalement,
            // ou rien n&#39;est spécifié spécifiquement pour la transition sortante,
            if (!hasTime || (hasTime &amp;&amp; !hasLeaveTime &amp;&amp; hasEnterTime)) {

                // on récupère cette valeur depuis la CSS.
                leaveTime = mostLongest(target);
            }

            setTimeout(function() {
                target.classList.remove(transition + &quot;-leave&quot;);
                target.classList.add(transition + &quot;-leave-to&quot;);

                setTimeout(function() {
                    target.classList.remove(transition + &quot;-leave-active&quot;);

                    hasState &amp;&amp; target.classList.remove(state);
                }, leaveTime);
            }, 0);
        }, 0);
    }
}

button = document.getElementsByClassName(&quot;stateless-example--button&quot;)[0];
message = document.getElementsByClassName(&quot;stateless-example--message&quot;)[0];

button.addEventListener(&quot;click&quot;, function() {

    // Temps auto-calculé depuis la CSS.
    transition(message, &quot;animate&quot;);

    // Exemple de temps mis à la main.
    /* transition(message, &quot;animate&quot;, undefined, {
        timeEnter: 1000,
        timeLeave: 4000
    }); */

    // Temps mis à la main en mode raccourci si les temps
    // pour la transition entrante et sortante sont identiques.
    /* transition(message, &quot;animate&quot;, undefined, 2000); */
});
</code></pre><p>Résultat :</p>
<div class="stateless-example-1">
    <button class="stateless-example-1--button">Animer</button>
    <div class="stateless-example-1--message">Animez-moi !</div>
</div>



<h3 id="fonctions-de-rappel">Fonctions de rappel</h3>
<p>Maintenant que nous sommes capable de gérer le temps de l&#39;animation, nous allons gérer des fonctions que nous pourrons appeler quand l&#39;animation sera terminée. Cela nous permettra de faire des animations en chaîne ou simplement de changer l&#39;état manuellement, sans que ce soit la fonction de transition qui s&#39;en occupe.</p>
<p>Nous allons également rassembler la totalité de ces actions sous un unique troisième paramètre pour avoir à éviter de mettre des valeurs de paramètre à <samp>undefined</samp> comme c&#39;est le cas ici : <samp>transition(message, &quot;animate&quot;, undefined, 2000)</samp>. Aussi si le troisième paramètre est une <samp>string</samp>, il s&#39;agira de faire gérer une classe d&#39;état par la fonction <samp>transition</samp>, si c&#39;est un <samp>number</samp> de créer un temps avant fin d&#39;animation identique pour les transitions entrante ou sortante et si c&#39;est un objet, nous gérerons la totalité des options.</p>
<p>Notez que toutes ces fonctions de rappels sont gérés en tant que point d&#39;ancrage (« hooks ») par <a href="https://fr.vuejs.org/v2/guide/transitions.html#hooks-JavaScript">Vue.js</a>. Vous pouvez vous en inspirer pour ajouter autant de fonction de rappel que vous le souhaitez aux moments clés de la fonction <samp>transition</samp>.</p>
<p>HTML :</p>
<pre class="prettyprint linenums"><code>&lt;!-- Note : identique à l&#39;exemple précédent. --&gt;
&lt;div class=&quot;stateless-example&quot;&gt;
    &lt;button class=&quot;stateless-example--button&quot;&gt;Animer&lt;/button&gt;
    &lt;div class=&quot;stateless-example--message&quot;&gt;Animez-moi !&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>CSS :</p>
<pre class="prettyprint linenums"><code>.stateless-example--message {
    color: #000;
}
.stateless-example--message.is-highlighted {
    color: #ccc;
}

.stateless-example--message.animate-enter,
.stateless-example--message.animate-leave-to {
    transform: translateX(0)
}

.stateless-example--message.animate-leave,
.stateless-example--message.animate-enter-to {
    transform: translateX(200px)
}

.stateless-example--message.animate-enter-active {
    transition: transform 1s;
}
.stateless-example--message.animate-leave-active {
    transition: transform 4s;
}
</code></pre><p>JavaScript</p>
<pre class="prettyprint linenums"><code>var button, message;

// Nous allons permettre de définir nous même des fonctions de rappel en début et fin de transition.

/**
 * Permet d&#39;exécuter une transition entre deux états pour un élément spécifique.
 * @param  {HTMLElement}                   target                    - L&#39;élément HTML qui doit être animé.
 * @param  {string}                        transition                - Le nom de la transition remplaçant `…` pour les classes `…-enter`, `…-leave`, etc.
 * @param  {string|number|function|Object} [options]                 - Si c&#39;est une `string`, spécifie l&#39;état placé au début d&#39;une transition entrante
                                                                       et retiré en fin d&#39;une transition sortante.
                                                                     - Si c&#39;est un `number`, spécifie la durée de la transition entrante et sortante.
                                                                     - Si c&#39;est une `function`, défini la fonction de rappel de début de transition entrante `enterCallback`
                                                                       et de fin de transition sortante `leaveToCallback`.
                                                                     - Si c&#39;est un objet, voir le détail de chaque propriété.
 * @param  {string}                        [options.state]           - Spécifie l&#39;état placé au début d&#39;une transition entrante et retiré en fin d&#39;une transition sortante.
 * @param  {number}                        [options.time]            - Spécifie la durée de la transition entrante et sortante.
 * @param  {number}                        [options.enterTime]       - Spécifie la durée de la transition entrante.
                                                                       Le temps pour la transition sortante sera calculé si `time.leaveTime` n&#39;est pas définie.
 * @param  {number}                        [options.leaveTime]       - Spécifie la durée de la transition sortante.
                                                                       Le temps pour la transition entrante sera calculé si `time.leaveTime` n&#39;est pas définie.
 * @param  {function}                      [options.enterCallback]   - Spécifie une fonction a exécuter au début de la transtion entrante.
                                                                       Paramètres de la fonction de rappel : `target`, `transition`, `params`, `options`.
 * @param  {function}                      [options.enterToCallback] - Spécifie une fonction a exécuter à la fin de la transtion entrante.
                                                                       Paramètres de la fonction de rappel : `target`, `transition`, `params`, `options`.
 * @param  {function}                      [options.leaveCallback]   - Spécifie une fonction a exécuter au début de la transtion sortante.
                                                                       Paramètres de la fonction de rappel : `target`, `transition`, `params`, `options`.
 * @param  {function}                      [options.leaveToCallback] - Spécifie une fonction a exécuter à la fin de la transtion sortante.
                                                                       Paramètres de la fonction de rappel : `target`, `transition`, `params`, `options`.
 */
function transition(target, transition, options) {
    var hasNoState,
        params = {};

    function mostLongest(target) {
        var max = 0,
            hasTransition = getComputedStyle(target)[&#39;transition&#39;],
            hasAnimation = getComputedStyle(target)[&#39;animation&#39;],
            directive = hasTransition + &#39;, &#39; + hasAnimation;

        directive.split(&#39;,&#39;).forEach(function (item) {
            item.match(/([.0-9]+)s/g).forEach(function (item) {
                var time = item.replace(/s/g, &#39;&#39;) * 1000;
                if (time &gt; max) {
                    max = time;
                }
            });
        });
        return max;
    }

    // Si aucune options n&#39;est passée, la liste des options sera un objet vide.
    if (options === undefined || options === null) {
        options = {};
    }

    // Nous gérons la présence ou nom d&#39;un état d&#39;avant et d&#39;après transition.
    params.state = options.state || (typeof options === &#39;string&#39; ? options : undefined);

    // Nous gérons la présence d&#39;un temps souhaité plutôt que calculé automatiquement.
    params.enterTime = options.enterTime || options.time || (typeof options === &#39;number&#39; ? options : undefined);
    params.leaveTime = options.leaveTime || options.time || (typeof options === &#39;number&#39; ? options : undefined);

    // Nous gérons la possibilité de faire appel à des fonctions de rappel en début et fin de transition entrante et de sortante.
    params.enterCallback = options.enterCallback || (typeof options === &#39;function&#39; ? options : undefined);
    params.enterToCallback = options.enterToCallback;
    params.leaveCallback = options.leaveCallback;
    params.leaveToCallback = options.enterToCallback || (typeof options === &#39;function&#39; ? options : undefined);

    // Élément permettant de savoir si on est sur une transition entrante ou sortante.
    if (params.state) {
        hasNoState = target.classList.contains(params.state);
    } else {
        hasNoState = target.classList.contains(transition + &quot;-enter-to&quot;) || target.classList.contains(transition + &quot;-leave&quot;)
    }

    // Transiditon entrante.
    if (!hasNoState) {

        // Si un état est précisé, on l&#39;applique en début de transition entrante.
        params.state &amp;&amp; target.classList.add(params.state);

        // Appel de la fonction de début de transition entrante.
        if (params.enterCallback) {
            params.enterCallback(target, transition, params, options);
        }

        target.classList.remove(transition + &quot;-leave-to&quot;);
        target.classList.add(transition + &quot;-enter&quot;);

        setTimeout(function() {
            target.classList.add(transition + &quot;-enter-active&quot;);
            if (!params.enterTime) {
                params.enterTime = mostLongest(target);
            }

            setTimeout(function() {
                target.classList.remove(transition + &quot;-enter&quot;);
                target.classList.add(transition + &quot;-enter-to&quot;);

                setTimeout(function() {
                    target.classList.remove(transition + &quot;-enter-active&quot;);

                    // Appel de la fonction de fin de transition sortante.
                    if (params.enterToCallback) {
                        params.enterToCallback(target, transition, params, options);
                    }
                }, params.enterTime);
            }, 0);
        }, 0);

    // Transition sortante.
    } else {

        // Appel de la fonction de début de transition sortante.
        if (params.leaveCallback) {
            params.leaveCallback(target, transition, params, options);
        }

        target.classList.remove(transition + &quot;-enter-to&quot;);
        target.classList.add(transition + &quot;-leave&quot;);

        setTimeout(function() {
            target.classList.add(transition + &quot;-leave-active&quot;);
            if (!params.leaveTime) {
                params.leaveTime = mostLongest(target);
            }

            setTimeout(function() {
                target.classList.remove(transition + &quot;-leave&quot;);
                target.classList.add(transition + &quot;-leave-to&quot;);

                setTimeout(function() {
                    target.classList.remove(transition + &quot;-leave-active&quot;);

                    // Si un état est précisé, on l&#39;applique en fin de transition sortante.
                    params.state &amp;&amp; target.classList.remove(params.state);

                    // Appel de la fonction de fin de transition sortante.
                    if (params.leaveToCallback) {
                        params.leaveToCallback(target, transition, params, options);
                    }
                }, params.leaveTime);
            }, 0);
        }, 0);
    }
}

button = document.getElementsByClassName(&quot;stateless-example--button&quot;)[0];
message = document.getElementsByClassName(&quot;stateless-example--message&quot;)[0];

button.addEventListener(&quot;click&quot;, function() {

    // On utilise la même fonction appelé en début de
    // transition entrante et en fin de transition sortante.
    transition(message, &quot;animate&quot;, function (target, transition, params, options) {
        target.classList.toggle(&quot;is-highlighted&quot;);
    });

    // On spécifie ici des fonctions différentes en début de
    // transition entrante et en fin de transition sortante.
    /* transition(message, &quot;animate&quot;, {
        enterCallback: function (target, transition, params, options) {
            target.classList.add(&quot;is-highlighted&quot;);
        },
        leaveToCallback: function (target, transition, params, options) {
            target.classList.remove(&quot;is-highlighted&quot;);
        }
    }); */
});
</code></pre><p>Résultat :</p>
<div class="stateless-example-2">
    <button class="stateless-example-2--button">Animer</button>
    <div class="stateless-example-2--message">Animez-moi !</div>
</div>



<h3 id="media-queries-et-délai-de-boucle">Media Queries et délai de boucle</h3>
<p>En fonction de la taille d&#39;affichage, il est possible que vous ne souhaitez pas initier de transition. Nous allons gérer cela en conditionnant le mécanisme de transition par une Média Query. Également, dans certains cas, il est possible que vous préfériez que la transition s&#39;exécute à tout les coups au détriment de la précision au millième de milliseconde. Nous allons pour cela vous laisser la main sur le temps qu&#39;il va se passer entre chaque <samp>setTimeout</samp> dans notre fonction.</p>
<pre class="prettyprint linenums"><code>&lt;!-- Note : similaire à l&#39;exemple précédent avec les nom des classes différent. --&gt;
&lt;div class=&quot;larger-example&quot;&gt;
    &lt;button class=&quot;larger-example--button&quot;&gt;Animer&lt;/button&gt;
    &lt;div class=&quot;larger-example--message&quot;&gt;Animez-moi !&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>CSS :</p>
<pre class="prettyprint linenums"><code>.larger-example--message.is-highlighted {
    transform: translateX(200px);
    color: #000;
}
.larger-example--message:not(.is-highlighted) {
    transform: translateX(0);
    color: #ccc;
}

/* On autorise l&#39;animation que si */
/* l&#39;affichage est supérieur à 720px. */
@media (min-width: 720px) {
    .larger-example--message.animate-enter,
    .larger-example--message.animate-leave-to {
        transform: translateX(0);
    }

    .larger-example--message.animate-leave,
    .larger-example--message.animate-enter-to {
        transform: translateX(200px);
    }

    .larger-example--message.animate-enter-active {
        transition: transform 1s;
    }
    .larger-example--message.animate-leave-active {
        transition: transform 4s;
    }
}
</code></pre><p>JavaScript</p>
<pre class="prettyprint linenums"><code>var button, message;

// Nous allons permettre de gérer les animations que pour une certaine taille d&#39;affichage (ou pour des appareils plus lents).

/**
 * Permet d&#39;exécuter une transition entre deux états pour un élément spécifique.
 * @param  {HTMLElement}                   target                    - L&#39;élément HTML qui doit être animé.
 * @param  {string}                        transition                - Le nom de la transition remplaçant `…` pour les classes `…-enter`, `…-leave`, etc.
 * @param  {string|number|function|Object} [options]                 - Si c&#39;est une `string`, spécifie l&#39;état placé au début d&#39;une transition entrante
                                                                       et retiré en fin d&#39;une transition sortante.
                                                                     - Si c&#39;est un `number`, spécifie la durée de la transition entrante et sortante.
                                                                     - Si c&#39;est une `function`, défini la fonction de rappel de début de transition entrante `enterCallback`
                                                                       et de fin de transition sortante `leaveToCallback`.
                                                                     - Si c&#39;est un objet, voir le détail de chaque propriété.
 * @param  {string}                        [options.state]           - Spécifie l&#39;état placé au début d&#39;une transition entrante et retiré en fin d&#39;une transition sortante.
 * @param  {number}                        [options.time]            - Spécifie la durée de la transition entrante et sortante.
 * @param  {number}                        [options.enterTime]       - Spécifie la durée de la transition entrante.
                                                                       Le temps pour la transition sortante sera calculé si `time.leaveTime` n&#39;est pas définie.
 * @param  {number}                        [options.leaveTime]       - Spécifie la durée de la transition sortante.
                                                                       Le temps pour la transition entrante sera calculé si `time.leaveTime` n&#39;est pas définie.
 * @param  {number}                        [options.tickDelay]       - Spécifie le délai utilisé entre chaque étape de gestion de transition.
 * @param  {number}                        [options.mediaQueries]    - Spécifie des instructions de Media Queries pour la transition courante.
 * @param  {function}                      [options.fallback]        - Spécifie une fonction a exécuter quand les Media Queries ne sont pas respectées.
                                                                       Paramètres de la fonction de secour : `target`, `transition`, `params`, `options`.
 * @param  {function}                      [options.enterCallback]   - Spécifie une fonction a exécuter au début de la transtion entrante.
                                                                       Paramètres de la fonction de rappel : `target`, `transition`, `params`, `options`.
 * @param  {function}                      [options.enterToCallback] - Spécifie une fonction a exécuter à la fin de la transtion entrante.
                                                                       Paramètres de la fonction de rappel : `target`, `transition`, `params`, `options`.
 * @param  {function}                      [options.leaveCallback]   - Spécifie une fonction a exécuter au début de la transtion sortante.
                                                                       Paramètres de la fonction de rappel : `target`, `transition`, `params`, `options`.
 * @param  {function}                      [options.leaveToCallback] - Spécifie une fonction a exécuter à la fin de la transtion sortante.
                                                                       Paramètres de la fonction de rappel : `target`, `transition`, `params`, `options`.
 */
function transition(target, transition, options) {
    var hasNoState
        mediaQueriesTest = false,
        params = {};

    function mostLongest(target) {
        var max = 0,
            hasTransition = getComputedStyle(target)[&#39;transition&#39;],
            hasAnimation = getComputedStyle(target)[&#39;animation&#39;],
            directive = hasTransition + &#39;, &#39; + hasAnimation;

        directive.split(&#39;,&#39;).forEach(function (item) {
            item.match(/([.0-9]+)s/g).forEach(function (item) {
                var time = item.replace(/s/g, &#39;&#39;) * 1000;
                if (time &gt; max) {
                    max = time;
                }
            });
        });
        return max;
    }

    if (options === undefined || options === null) {
        options = {};
    }

    params.state = options.state || (typeof options === &#39;string&#39; ? options : undefined);
    params.enterTime = options.enterTime || options.time || (typeof options === &#39;number&#39; ? options : undefined);
    params.leaveTime = options.leaveTime || options.time || (typeof options === &#39;number&#39; ? options : undefined);
    params.enterCallback = options.enterCallback || (typeof options === &#39;function&#39; ? options : undefined);
    params.enterToCallback = options.enterToCallback;
    params.leaveCallback = options.leaveCallback;
    params.leaveToCallback = options.enterToCallback || (typeof options === &#39;function&#39; ? options : undefined);

    // Nous attachons une fonction de rappel en cas de non respect des Media Queries.
    params.fallback = options.fallback;

    // Nous permettons de fixer le temps entre chaque `tick` d&#39;étape de gestion de la transition.
    params.tickDelay = options.tickDelay || 0;

    // Nous gérons les conditions de fonctionnement de la transition.
    mediaQueriesTest = (options.mediaQueries) ? window.matchMedia(options.mediaQueries).matches : false;

    if (params.state) {
        hasNoState = target.classList.contains(params.state);
    } else {
        hasNoState = target.classList.contains(transition + &quot;-enter-to&quot;) || target.classList.contains(transition + &quot;-leave&quot;)
    }

    // On enclenche le mécanisme uniquement s&#39;il existe des Media Queries respectées où s&#39;il n&#39;en existe pas.
    if (options.mediaQueries &amp;&amp; mediaQueriesTest || !options.mediaQueries) {

        // Transition entrante.
        if (!hasNoState) {
            params.state &amp;&amp; target.classList.add(params.state);

            if (params.enterCallback) {
                params.enterCallback(target, transition, params, options);
            }

            target.classList.remove(transition + &quot;-leave-to&quot;);
            target.classList.add(transition + &quot;-enter&quot;);

            setTimeout(function() {
                target.classList.add(transition + &quot;-enter-active&quot;);
                if (!params.enterTime) {
                    params.enterTime = mostLongest(target);
                }

                setTimeout(function() {
                    target.classList.remove(transition + &quot;-enter&quot;);
                    target.classList.add(transition + &quot;-enter-to&quot;);

                    setTimeout(function() {
                        target.classList.remove(transition + &quot;-enter-active&quot;);

                        if (params.enterToCallback) {
                            params.enterToCallback(target, transition, params, options);
                        }
                    }, params.enterTime);

                // On applique les délais.
                }, params.tickDelay);
            }, params.tickDelay);

        // Transition sortante.
        } else {
            if (params.leaveCallback) {
                params.leaveCallback(target, transition, params, options);
            }

            target.classList.remove(transition + &quot;-enter-to&quot;);
            target.classList.add(transition + &quot;-leave&quot;);

            setTimeout(function() {
                target.classList.add(transition + &quot;-leave-active&quot;);
                if (!params.leaveTime) {
                    params.leaveTime = mostLongest(target);
                }

                setTimeout(function() {
                    target.classList.remove(transition + &quot;-leave&quot;);
                    target.classList.add(transition + &quot;-leave-to&quot;);

                    setTimeout(function() {
                        target.classList.remove(transition + &quot;-leave-active&quot;);

                        params.state &amp;&amp; target.classList.remove(params.state);

                        if (params.leaveToCallback) {
                            params.leaveToCallback(target, transition, params, options);
                        }
                    }, params.leaveTime);

                // On applique les délais.
                }, params.tickDelay);
            }, params.tickDelay);
        }
    } else {

        // Si les Media Queries ne sont pas respectées
        // on retire les classes de transitions.
        target.classList.remove(transition + &quot;-enter&quot;);
        target.classList.remove(transition + &quot;-enter-to&quot;);
        target.classList.remove(transition + &quot;-leave&quot;);
        target.classList.remove(transition + &quot;-leave-to&quot;);

        // On laisse alors la possibilité de gérer ce qu&#39;il se passe dans ce cas.
        if (params.fallback) {
            params.fallback(target, transition, params, options);
        }
    }
}

button = document.getElementsByClassName(&quot;larger-example--button&quot;)[0];
message = document.getElementsByClassName(&quot;larger-example--message&quot;)[0];

button.addEventListener(&quot;click&quot;, function() {

    // Redimentionnez votre fenêtre pour voir la différence entre une
    // taille supérieure et inférieure à 720px.
    transition(message, &quot;animate&quot;, {
        state: &#39;is-highlighted&#39;,
        mediaQueries: &#39;(min-width: 720px)&#39;,
        fallback: function (target, transition, params, options) {
            target.classList.toggle(&quot;is-highlighted&quot;);
        }
    });
});
</code></pre><p>Résultat :</p>
<div class="stateless-example-3">
    <button class="stateless-example-3--button">Animer</button>
    <div class="stateless-example-3--message">Animez-moi !</div>
</div>





<h2 id="le-mot-de-la-fin">Le mot de la fin</h2>
<p>Je suppose qu&#39;il existe des tas d&#39;idées pour rendre cette fonction encore plus cool. Il y a sûrement également des cas limites ou elle ne fonctionne plus. Je vous laisse voir ça de votre côté mais vous avez les bases pour continuer un tel travail. N&#39;oubliez pas également que une fonctionnalité équivalence qui gère sûrement ces cas limites existe déjà dans <a href="https://fr.vuejs.org/v2/guide/transitions.html">Vue.js : allez tester !</a></p>
<p>Si vous trouvez des bugs et solutions dans les exemples suivants, n&#39;hésitez pas à le faire savoir en commentaire !</p>
]]></description>
            <link>http://localhost:7776/comprendre-et-reproduire-les-animations-de-transitions-vuejs-en-css-et-javascript/</link>
            <guid isPermaLink="false">5c6c002fb0193869db9084db</guid>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[Vue.js]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Vanilla JS]]></category>
            <category><![CDATA[CSS3]]></category>
            <category><![CDATA[Animations]]></category>
            <category><![CDATA[Concept]]></category>
            <category><![CDATA[Astuces]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Tue, 19 Feb 2019 13:10:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[JavaScript plus Homme de Paille et HOP : La cohérence aux chiottes]]></title>
            <description><![CDATA[<p>Allez, on casse un petit homme de paille en informatique avec un jolie exemple JavaScript qui nous est joliment illustré par <a href="http://www.luc-damas.fr/humeurs/a-propos/">Luc Damas</a> sur le site <a href="https://www.luc-damas.fr/humeurs/js-array-keys/">HOP</a> (pour Houblon Oriented Programming. Oui, il y a de la bière !).</p>
<figure>
<img width="900" height="871" src="https://www.luc-damas.fr/humeurs/images/js_array_keys.png" alt="Homme de paille sur JS array keys
" style="max-width: 100%;height: auto;">
<figcaption>Source : https://www.luc-damas.fr/</figcaption>
</figure>

<p>Si vous ne le savez pas, JavaScript souffre de harcèlement de la part de ses petits camarades à l&#39;école car il est différent. Même si j&#39;ai trouvé aussi cela drôle (oui, j&#39;aime me moquer parfois) encore faut t-il que ce le soit pour de bonne raison. Nous avons ici à faire à de mauvaises raisons.</p>
<blockquote>
<p><strong><samp>Définition</samp></strong> <strong>Qu&#39;est ce qu&#39;un homme de paille ?</strong></p>
</blockquote>
<blockquote>
<p><em>“L’épouvantail, parfois appelé « argument de l&#39;homme de paille » par traduction littérale de l&#39;expression anglaise « straw man », est un sophisme qui consiste à présenter la position de son adversaire de façon volontairement erronée. Créer un argument épouvantail consiste à formuler un argument facilement réfutable puis à l&#39;attribuer à son opposant.” — Wikipédia</em></p>
</blockquote>
<p>PS : je ne dis pas qu&#39;il n&#39;existe pas de bonnes raisons de se moquer du JavaScript.</p>
<p>PS2 : je ne dis pas que c&#39;est bien de se moquer.</p>
<p>PS3 : (PS signifie Post-scriptum et non pas PlayStation).</p>
<p>Bref, soyons un peu plus critique.</p>
<h2 id="les-faits">Les faits</h2>
<p>Exposons plusieurs faits de ce pas.</p>
<h2 id="boucle-for">Boucle for</h2>
<p>Seul le premier type de boucle garanti que <samp>i</samp> soit de type <samp>number</samp> puisque nous décidons nous même d&#39;en faire un tel type (<samp>let i = 0</samp>, puis <samp>i++</samp>).</p>
<p>Rien ne nous empêcherait, par exemple, d&#39;en faire un type <samp>string</samp> à chaque itération.</p>
<p>Ainsi <samp>i</samp> dans l&#39;exemple suivant...</p>
<pre class="prettyprint linenums"><code>let t = [&#39;h&#39;, &#39;o&#39;, &#39;p&#39;];
for (let i = &#39;0&#39;; i &lt; t.length; i = +i + 1 + &#39;&#39;) {
    console.log(i);
    console.log(typeof i);
}
</code></pre><p>...sera de type <samp>string</samp>.</p>
<h2 id="boucle-for--of">Boucle for ... of</h2>
<p>En ce qui concerne l&#39;opérateur <samp>for ... of</samp>, l&#39;exemple est fallacieux puisqu&#39;en réalité <samp>i</samp> n&#39;est pas censé représenter nécessairement un nombre, mais l&#39;objet qui se trouve dans le tableau.</p>
<p>Aussi l&#39;exemple suivant...</p>
<pre class="prettyprint linenums"><code>var t = [&#39;h&#39;, &#39;o&#39;, &#39;p&#39;];
for (var i of t) {
    console.log(i);
    console.log(typeof i);
}
</code></pre><p>...retournera des types <samp>string</samp> (et pas <samp>number</samp> comme l&#39;utilisation de <samp>t.keys()</samp>.</p>
<p>Donc naturellement, l&#39;exemple suivant...</p>
<pre class="prettyprint linenums"><code>var t = [true, false, true];
for (var i of t) {
    console.log(i);
    console.log(typeof i);
}
</code></pre><p>...retournera pour <samp>i</samp> un type <samp>boolean</samp>.</p>
<p>Le fait qu&#39;avec l&#39;utilisation de <samp>.keys()</samp> la valeur soit un <samp>number</samp> n&#39;est donc pas de notre ressors mais de celui de cette fonction (qui retourne l&#39;indice qui est un <samp>number</samp>).</p>
<h2 id="boucle-for--in">Boucle for ... in</h2>
<p>Pour finir, l&#39;opérateur <samp>for ... in</samp> semble, lui, affecter à <samp>i</samp> une <samp>string</samp> (ce qui effectivement n&#39;est pas la même chose que l&#39;utilisation de <samp>for</samp> ou de <samp>for ... of</samp> couplé <samp>.keys()</samp>). Je me serai également attendu à ce qu&#39;il affecte un <samp>number</samp> comme ça sans trop y réfléchir mais il n&#39;y a rien d’étonnant non plus : <samp>for ... in</samp> n&#39;est pas réservé aux <samp>Array</samp> mais peut également fonctionner avec des <samp>Object</samp>. Et les indices des objets ne sont pas nécessairement des nombres.</p>
<p>Regardez l&#39;exemple suivant :</p>
<pre class="prettyprint linenums"><code>let v = {
    &#39;str1&#39;: &#39;h&#39;,
    &#39;str2&#39;: &#39;o&#39;,
    &#39;str3&#39;: &#39;p&#39;,
};

for (var i in v) {
    console.log(i);
    console.log(typeof i);
}
</code></pre><p>Logique que ça retourne un type <samp>string</samp> (<samp>str1</samp>, <samp>str2</samp>, <samp>str3</samp>).</p>
<p>Regardez également l&#39;exemple suivant :</p>
<pre class="prettyprint linenums"><code>const symbol1 = Symbol(&#39;h&#39;);
const symbol2 = Symbol(&#39;o&#39;);
const symbol3 = Symbol(&#39;p&#39;);

let t = {
    symbol1: &#39;h&#39;,
    symbol2: &#39;o&#39;,
    symbol3: &#39;p&#39;,
};

for (var i in t) {
    console.log(i);
    console.log(typeof i);
}
</code></pre><p>Ainsi on utilise <samp>.toString()</samp> pour « représenter » le <samp>Symbol</samp>.</p>
<p>Il n&#39;est pas illogique que le système nous retourne une string (<samp>symbol1</samp>, <samp>symbol2</samp> et <samp>symbol3</samp>). Puisque <samp>for ... in</samp> doit être en mesure de retourner différent type de valeur.</p>
<h2 id="mon-opinion">Mon opinion</h2>
<p>Il a été décidé « arbitrairement » que le système retourne les indices en utilisant la valeur <samp>toString()</samp> (ce qui est quand même pratique pour les <samp>string</samp> ou les <samp>Symbol</samp> et accessoirement, fonctionne également avec <samp>number</samp>.</p>
<p>Bref, c&#39;est bien marrant à première vu, mais il n&#39;y a rien qui me choque nécessairement. Faire le choix de la <samp>string</samp> ou du <samp>number</samp> est quelque chose « d&#39;arbitraire ».</p>
<p>Si vous êtes sur que votre indice sera de type <samp>number</samp>, vous pouvez tout simplement convertir la valeur en <samp>number</samp> avec l&#39;opérateur <samp>+</samp> si cela est réellement nécessaire.</p>
<pre class="prettyprint linenums"><code>var t = [&#39;h&#39;, &#39;o&#39;, &#39;p&#39;];
for (var i in t) {
    console.log(+i);
    console.log(typeof +i);
}
</code></pre><p>Et oui, « si l&#39;objet est de type <samp>Array</samp> », alors faire que <samp>for ... in</samp> retourne un <samp>number</samp> plutôt qu&#39;une <samp>string</samp> était quelque chose que arbitrairement il aurait été convenable de faire : pour preuve, cette image le montre. Mais ce n&#39;était pas nécessairement plus « logique » que l&#39;état actuelle en fonction du point de vu adopté.</p>
<p>Maintenant, au delà de ça, l&#39;argument « j&#39;aime pas le JavaScript » est une idée valide (et une opinion) pour justifier le fait de jeter son PC dans les chiottes (même si la finalité me semble un peu excessive :D).</p>
<h2 id="ma-nouvelle-illustration">Ma nouvelle illustration</h2>
<p>Pas besoin d&#39;homme de paille donc, rectifions ça !</p>
<figure>
<img width="900" height="871" src="https://scontent-cdt1-1.xx.fbcdn.net/v/t1.0-9/46519383_10217227221213248_1114006382190788608_n.jpg?_nc_cat=106&_nc_ht=scontent-cdt1-1.xx&oh=8fd4a23092eb47d87baa858d2e3bb2e5&oe=5CBA7CF3" alt="Homme de paille sur JS array keys
" style="max-width: 100%;height: auto;">
<figcaption>Source : https://www.luc-damas.fr/</figcaption>
</figure>

<p>Merci à <a href="http://pierre.ammeloot.fr/">Pierre Ammeloot</a> pour le partage ;)</p>
]]></description>
            <link>http://localhost:7776/javascript-plus-homme-de-paille-et-hop-la-coherence-aux-chiottes/</link>
            <guid isPermaLink="false">5c387e91b0193869db9084da</guid>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[ECMAScript]]></category>
            <category><![CDATA[Zététique]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Fri, 11 Jan 2019 11:31:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Outil Munchkin : Listez, Mélangez, Classez, Triez et Créez vos Jeux !]]></title>
            <description><![CDATA[<p>Je suis fan de Munchkin depuis des années maintenant ! Mais j&#39;ai un assez gros problème depuis quelques temps avec le Munchkin : plus les extensions augmentes et plus j&#39;ai des difficultés à pouvoir jouer avec des jeux équilibrés. Vous avez peut-être le même sentiment et si vous vous êtes déjà confronté aux problèmes listés ci-après, cette page peut vous être utile !</p>
<figure>
<img width="1018" height="847" src="https://www.espritjeu.com/upload/image/munchkin-p-image-55929-grande.jpg" alt="J'ai créé ce petit outil qui va vous permettre de gérer votre jeu Munchkin ainsi que ses extensions plus facilement !" style="max-width: 100%;height: auto;">
<figcaption>Source : https://www.espritjeu.com/</figcaption>
</figure>

<p>Elle va vous permettre de :</p>
<ul>
<li><a href="https://blog.lesieur.name/liste-des-cartes-munchkin-editions-francaises/#comment-trier-vos-cartes-munchkin">Trier vos cartes</a></li>
<li><a href="https://blog.lesieur.name/liste-des-cartes-munchkin-editions-francaises/#comment-m-langer-vos-cartes-munchkin">Mélanger vos cartes</a></li>
<li><a href="https://blog.lesieur.name/liste-des-cartes-munchkin-editions-francaises/#-liste-des-cartes-du-munchkin-des-ditions-fran-aises">Lister vos cartes</a></li>
</ul>
<h2 id="présentation">Présentation</h2>
<p>Vous avez peut-être des difficultés à :</p>
<ul>
<li>Ajouter/Retirer des extensions/règles car vous en possédez un bon nombre toutes mélangés. Et si vous avez les premières versions sans couleurs, là vous ne pouvez pas les distinguer.</li>
<li>Mélanger vos cartes pour obtenir un jeu équilibré car il est difficile de mélanger facilement autant de carte ensemble.</li>
</ul>
<p>J&#39;ai donc créé ce petit outil qui va vous permettre de gérer votre jeu Munchkin ainsi que ses extensions plus facilement !</p>
<p>Il va par exemple vous permettre de :</p>
<ul>
<li>Classer vos cartes Munchkin par extension ou</li>
<li>Trier vos cartes Munchkin par type ou</li>
<li>Compter vos cartes Munchkin pour être sur qu&#39;il ne vous en manque pas ou</li>
<li>Créer vos propres Deck/Pioche Munchkin par pourcentage d&#39;apparition,</li>
<li>Simuler des pioches pour jouer à la distribution temps réel, ou pré-créer des mélanges à partir de vos boîtes de rangement.</li>
<li>Etc.</li>
</ul>
<blockquote>
<p>Si vous êtes développeur Front-end et que vous cherchez un exemple d&#39;utilisation de <a href="https://vuejs.org/">Vue.js</a> qui est SEO compliant, je peux vous conseiller de jeter un oeil au code source de cet outil derrière ce CodePen : <a href="http://codepen.io/Haeresis/pen/zBzWgQ">http://codepen.io/Haeresis/pen/zBzWgQ</a></p>
</blockquote>
<h2 id="comment-trier-vos-cartes-munchkin">Comment <strong>trier</strong> vos cartes Munchkin</h2>
<p>Il n&#39;est pas facile de s&#39;y repérer dans les différents types de cartes dans le Munchkin. Beaucoup ont la même couleur, et les versions dérivées du Munchkin original n&#39;ont pas de distinctions colorées. Il est également possible de souhaiter jouer avec des règles en moins.</p>
<h3 id="trier-vos-cartes-munckin-par-extension">Trier vos cartes Munckin par extension</h3>
<p>Ce cas de figure peut vous servir pour jouer à des parties avec des débutants afin de limiter les règles. Avant de pouvoir mélanger vos cartes à partir des extensions souhaités, il va falloir les triers. Pour ce faire,</p>
<p>Voici comment reconnaître les cartes par extension :</p>
<ul>
<li><strong>Munchkin</strong>                                            <em>si</em>     Pas d&#39;icone et indiqué au dos « Munchkin »</li>
<li><strong>Munchkin 2 : Hachement Mieux</strong>                        <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m2.gif" alt="Munchkin 2"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin 3 : Clerc et (pas) net</strong>                     <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m3.gif" alt="Munchkin 3"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin 4 : Ton destin est sellé !</strong>                 <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m4.gif" alt="Munchkin 4"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin 5 : On Zeu Rôde Again</strong>                      <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m5.gif" alt="Munchkin 5"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin 6 : Le Donjon de la Farce</strong>                  <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m6.gif" alt="Munchkin 6"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin 7 : Et pour quelques cartes de plus...</strong>     <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m7o.gif" alt="Munchkin 7"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin 7 : Oh le gros tricheuuuuuuuur !</strong>           <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m7.gif" alt="Munchkin 7"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin 8 : Centaure et Sans Reproche</strong>              <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/m8.gif" alt="Munchkin 8"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkin : Petit Papa Munchkin</strong>                      <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/n1.gif
" alt="Petit Papa Munchkin"> ou <img style="height: 10px" src="media/images/upload/n2.gif
" alt="Petit Papa Munchkin"> ou <img style="height: 10px" src="media/images/upload/n3.gif
" alt="Petit Papa Munchkin"> ou <img style="height: 10px" src="media/images/upload/n4.gif
" alt="Petit Papa Munchkin"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Munchkinomicon</strong>                                      <em>si</em>     Icones <img style="height: 10px" src="media/images/upload/mm.gif" alt="Munchkinomicon"> ou <img style="height: 10px" src="media/images/upload/mm1.gif" alt="Munchkinomicon"> ou <img style="height: 10px" src="media/images/upload/mm2.gif" alt="Munchkinomicon"> ou <img style="height: 10px" src="media/images/upload/mm3.gif" alt="Munchkinomicon"> et indiqué au dos <em>Munchkin</em></li>
<li><strong>Star Munchkin</strong>                                       <em>si</em>     Pas d&#39;icone et indiqué au dos <em>Star Munchkin</em></li>
<li><strong>Star Munchkin 2 : La Guerre des Clowns</strong>              <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/st2.gif" alt="Star Munchkin 2"> et indiqué au dos <em>Star Munchkin</em></li>
<li><strong>Super Munchkin</strong>                                      <em>si</em>     Pas d&#39;icone et indiqué au dos <em>Super Munchkin</em></li>
<li><strong>Munchkin Zombies</strong>                                    <em>si</em>     Pas d&#39;icone et indiqué au dos <em>Munchkin Zombies</em></li>
<li><strong>Munchkin Zombies 2 : Ça zigouille à tour de bras !</strong>  <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/mz2.gif" alt="Munchkin Zombies 2"> et indiqué au dos <em>Munchkin Zombies</em></li>
<li><strong>Munchkin Cthulhu</strong>                                    <em>si</em>     Pas d&#39;icone et indiqué au dos <em>Munchkin Cthulhu</em></li>
<li><strong>Munchkin Cthulhu 2 : L&#39;Appel de la Vachthulhu</strong>       <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/mc2.gif" alt="Munchkin Cthulhu 2"> et indiqué au dos <em>Munchkin Cthulhu</em></li>
<li><strong>Munchkin Cthulhu 3 : La Crypte de l&#39;Indicible</strong>       <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/mc3.gif" alt="Munchkin Cthulhu 3"> et indiqué au dos <em>Munchkin Cthulhu</em></li>
<li><strong>Munchkin Cthulhu 4 : Oh my grottes !</strong>                <em>si</em>     Icone <img style="height: 10px" src="media/images/upload/mc4.gif" alt="Munchkin Cthulhu 4"> et indiqué au dos <em>Munchkin Cthulhu</em></li>
<li><strong>Munchkin Apocalypse</strong>                                 <em>si</em>     Pas d&#39;icone et indiqué au dos <em>Munchkin Apocalypse</em></li>
</ul>
<p><em>Note : Le Munchkin original (sans couleur) ainsi que les deux premières extensions n&#39;ont pas d&#39;icone. Il n&#39;est donc pas possible de les différencier à moins de se référer à la <a href="https://blog.lesieur.name/liste-des-cartes-munchkin-editions-francaises/#-liste-des-cartes-du-munchkin-des-ditions-fran-aises">liste ci-après</a> dans cette page. Puisque les extensions en question apporte du nouveau contenu mais pas de règle à proprement parler (il y a tout de même les améliorations d&#39;objet), vous pouvez décider que quoi qu&#39;il arrive cette extension reste uni pour ne pas avoir à les trier à chaque fois.</em></p>
<h3 id="trier-vos-cartes-munckin-par-types">Trier vos cartes Munckin par types</h3>
<p>Si vous avez l&#39;intention de jouer au Munchkin avec toutes les extensions, il va être impossible de mélanger un jeu équilibré. C&#39;est là que le tri par type peut-être utile. Dans un premier temps vous créez des tas par type de carte, puis vous mélanger chaque tas. Pour finir vous sélectionnez une carte depuis chaque tas pour construire les 200 ou 300 premières cartes en utilisant, par exemple, le mélangeur de la partie suivante.</p>
<p>Voici comment reconnaître les cartes par type :</p>
<p>Dans les Portes</p>
<ul>
<li><span class="actions">Amélioration</span>             <em>si</em>    Aucunes des mentions listés ci-après <em>(Vert dans Munchkin)</em>.</li>
<li><span class="classes">Classe</span>                   <em>si</em>    « Classe » est indiqué <em>(Marron dans Munchkin)</em>.</li>
<li><span class="madnesses">Démence</span>                <em>si</em>    « Démence ! » est dans le titre.</li>
<li><span class="acolytes">Fidèle Serviteur</span>        <em>si</em>    « Fidèle Serviteur » ou « Acolyte » est dans le titre <em>(Vert dans Munchkin sauf Monture en solde)</em>.</li>
<li><span class="curses">Malédiction</span>               <em>si</em>    « Malédiction ! », « Piège ! » ou « Catastrophe ! » est dans le titre <em>(Vert dans Munchkin)</em>.</li>
<li><span class="mojos">Mojo</span>                       <em>si</em>    « Mojo » est indiqué.</li>
<li><span class="monsters">Monstre</span>                 <em>si</em>    Possède des trésors ou/et des niveaux <em>(Orange dans Munchkin)</em>.</li>
<li><span class="mounts">Monture</span>                   <em>si</em>    « Monture » est indiqué <em>(Violet dans Munchkin sauf Big Joe)</em>.</li>
<li><span class="origins">Origine</span>                  <em>si</em>    « Origine » est dans le titre.</li>
<li><span class="rooms">Pièce</span>                      <em>si</em>    « Pièce » est dans le titre.</li>
<li><span class="warps">Portail</span>                    <em>si</em>    « Portail » est indiqué <em>(Jaune dans Munchkin)</em>.</li>
<li><span class="powers">Pouvoir</span>                   <em>si</em>    « Pouvoir » est dans le titre.</li>
<li><span class="races">Race</span>                       <em>si</em>    « Race » est indiqué <em>(Gris dans Munchkin)</em>.</li>
</ul>
<p>Dans les Trésors</p>
<ul>
<li><span class="bonuses">Actions</span>                  <em>si</em>    Pas de prix <em>(Vert dans Munchkin)</em></li>
<li><span class="stuffs">Équipement</span>                <em>si</em>    Possède un prix et est à usage permanent <em>(Violet dans Munchkin)</em>.</li>
<li><span class="slaves">Fidèle Serviteur</span>          <em>si</em>    « Fidèle Serviteur » ou « Acolyte » est dans le titre <em>(Vert dans Munchkin)</em>.</li>
<li><span class="levels">Gain de Niveau</span>            <em>si</em>    « Gagner un Niveau » est écrit <em>(Vert dans Munchkin)</em>.</li>
<li><span class="munchkinomicon">Munchkinomicon</span>    <em>si</em>    Tête du grimoire au dos <em>(Violet dans Munchkin)</em>.</li>
<li><span class="objects">Objets</span>                   <em>si</em>    Un prix et à usage unique <em>(Bleu dans Munchkin)</em>.</li>
</ul>
<p>Pour les Donjons, Sorts et Sceaux pas de soucis, se sont des défausses séparés. Vous reconnaîtrez aisément les grands formats des Donjons, les têtes de Munchkinomicon au dos des Sorts et les formats carrés des Sceaux.</p>
<h2 id="comment-mélanger-vos-cartes-munchkin">Comment <strong>mélanger</strong> vos cartes Munchkin</h2>
<ol>
<li>Sélectionnez les cartes que vous souhaitez inclure dans votre jeu grâce à la <a href="https://blog.lesieur.name/liste-des-cartes-munchkin-editions-francaises/#-liste-des-cartes-du-munchkin-des-ditions-fran-aises">liste ci-après</a>.</li>
<li>Lancez des mélanges virtuels avec le lien ci-dessous (Avec F12, si votre navigateur le permet, vous pouvez également surveiller l&#39;état de vos pioches ét défausses).</li>
<li>Créez votre pioche en créant le Deck en sélectionnant exactement les noms de cartes cités ou vraiment plus rapidement, en n&#39;affectant qu&#39;une carte du type indiqué (Amélioration, Monture, etc.).</li>
</ol>
<div class="shuffle">
    <br>
    <div class="init" v-on:click="initShuffle()">Créez vos Pioches et testez-les !</div>
    <div class="shuffle-card">
        <div class="shuffle-card-inner">
            <div class="stop" v-on:click="stopShuffle()">Stop</div>
            <div class="twelve">F12</div>
            <div class="stack-doors">
                <div class="open" v-on:click="openDoors()">
                    <span class="title">Ouvrir une <strong>Porte</strong></span>
                </div>
                <div class="discard" v-bind:class="{ 'is-visible': doorsLastDiscard }">
                    <span class="title"></span>
                    <span class="stack">Porte</span>
                    <span class="extension"></span>
                    <span class="type"></span>
                    <span class="progress"></span>
                </div>
            </div>
            <div class="stack-treasures">
                <div class="open" v-on:click="openTreasures()">
                    <span class="title">Trouver un <strong>Trésor</strong></span>
                </div>
                <div class="discard" v-bind:class="{ 'is-visible': treasuresLastDiscard }">
                    <span class="title"></span>
                    <span class="stack">Trésor</span>
                    <span class="extension"></span>
                    <span class="type"></span>
                    <span class="progress"></span>
                </div>
            </div>
            <div class="stack-donjons">
                <div class="open" v-on:click="openDonjons()">
                    <span class="title">Entrer dans un <strong>Donjon</strong></span>
                </div>
                <div class="discard" v-bind:class="{ 'is-visible': donjonsLastDiscard }">
                    <span class="title"></span>
                    <span class="stack">Donjon</span>
                    <span class="extension"></span>
                    <span class="type"></span>
                    <span class="progress"></span>
                </div>
            </div>
            <div class="stack-books">
                <div class="open" v-on:click="openBooks()">
                    <span class="title">Lancer un <strong>Sort</strong></span>
                </div>
                <div class="discard" v-bind:class="{ 'is-visible': booksLastDiscard }">
                    <span class="title"></span>
                    <span class="stack">Sort</span>
                    <span class="extension"></span>
                    <span class="type"></span>
                    <span class="progress"></span>
                </div>
            </div>
            <div class="stack-seals">
                <div class="open" v-on:click="openSeals()">
                    <span class="title">Ouvrir un <strong>Sceau</strong></span>
                </div>
                <div class="discard" v-bind:class="{ 'is-visible': sealsLastDiscard }">
                    <span class="title"></span>
                    <span class="stack">Sceau</span>
                    <span class="extension"></span>
                    <span class="type"></span>
                    <span class="progress"></span>
                </div>
            </div>
        </div>
    </div>
</div>






<h2 id="liste-des-cartes-du-munchkin-des-éditions-françaises"><strong>Liste</strong> des cartes du Munchkin des Éditions Françaises</h2>
<div class="all-cards">
    <div class="all">
        <div class="details" v-bind:class="{ 'is-displayed': all.filters }">
            <h3 id="munchkin-filtres">Filtres : Jeux et Extensions</h3>
            <p><button v-on:click="allToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                <p>
                    <label>
                        <input type="checkbox" value="on" v-model="all.munchkin"> Munchkin
                    </label><br>
                    <label>
                        <input type="checkbox" value="on" v-model="all.munchkin2"> Munchkin 2 : Hachement Mieux
                    </label><br>
                    <label>
                        <input type="checkbox" value="on" v-model="all.munchkin3"> Munchkin 3 : Clerc et (pas) net
                    </label><br>
                    <label>
                        <input type="checkbox" value="on" v-model="all.munchkin4"> Munchkin 4 : Ton destin est sellé !
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkin5"> Munchkin 5 : On Zeu Rôde Again
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkin6"> Munchkin 6 : Le Donjon de la Farce
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkin7o"> Munchkin 7 : Et pour quelques cartes de plus...
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkin7"> Munchkin 7 : Oh le gros tricheuuuuuuuur !
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkin8"> Munchkin 8 : Centaure et Sans Reproche
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinN"> Munchkin : Petit Papa Munchkin
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinM"> Munchkinomicon
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinSt"> Star Munchkin
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinSt2"> Star Munchkin 2 : La Guerre des Clowns
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinSu"> Super Munchkin
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinZ"> Munchkin Zombies
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinZ2"> Munchkin Zombies 2 : Ça zigouille à tour de bras !
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinC"> Munchkin Cthulhu
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinC2"> Munchkin Cthulhu 2 : L'Appel de la Vachthulhu
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinC3"> Munchkin Cthulhu 3 : La Crypte de l'Indicible
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinC4"> Munchkin Cthulhu 4 : Oh my grottes !
                    </label><br>
                     <label>
                        <input type="checkbox" value="on" v-model="all.munchkinA"> Munchkin Apocalypse
                    </label>
                </p>
            </div>
        </div>
        <p>**<span v-text="allCardsNumber">2095</span> cartes affichées** au total pour votre Munchkin</p>
        <ul>
            <li>Il y a **<span v-text="allDoorsNumber">1242</span> cartes portes** pour votre Munchkin.
                <ul>
                    <li v-if="allActionsNumber">dont <span class="actions"><span v-text="allActionsNumber">285</span> carte<span v-show="allActionsNumber > 1">s</span> Amélioration<span v-show="allActionsNumber > 1">s</span> (<span v-text="allActionsPercent || 0">23</span>%)</span>.</li>
                    <li v-if="allClassesNumber">dont <span class="classes"><span v-text="allClassesNumber">96</span> carte<span v-show="allClassesNumber > 1">s</span> Classe<span v-show="allClassesNumber > 1">s</span> (<span v-text="allClassesPercent || 0">8</span>%)</span>.</li>
                    <li v-if="allAcolytesNumber">dont <span class="acolytes"><span v-text="allAcolytesNumber">33</span> carte<span v-show="allAcolytesNumber > 1">s</span> Fidèle<span v-show="allAcolytesNumber > 1">s</span> Serviteur<span v-show="allActionsNumber > 1">s</span> (<span v-text="allAcolytesPercent || 0">3</span>%)</span>.</li>
                    <li v-if="allCursesNumber">dont <span class="curses"><span v-text="allCursesNumber">150</span> carte<span v-show="allCursesNumber > 1">s</span> Malédiction<span v-show="allCursesNumber > 1">s</span> (<span v-text="allCursesPercent || 0">12</span>%)</span>.</li>
                    <li v-if="allMadnessesNumber">dont <span class="curses"><span v-text="allMadnessesNumber">10</span> carte<span v-show="allMadnessesNumber > 1">s</span> Démence<span v-show="allMadnessesNumber > 1">s</span> (<span v-text="allMadnessesPercent || 0">1</span>%)</span>.</li>
                    <li v-if="allMojosNumber">dont <span class="mojos"><span v-text="allMojosNumber">16</span> carte<span v-show="allMojosNumber > 1">s</span> Mojos<span v-show="allMojosNumber > 1">s</span> (<span v-text="allMojosPercent || 0">1</span>%)</span>.</li>
                    <li v-if="allMonstersNumber">dont <span class="monsters"><span v-text="allMonstersNumber">445</span> carte<span v-show="allMonstersNumber > 1">s</span> Monstre<span v-show="allMonstersNumber > 1">s</span> (<span v-text="allMonstersPercent || 0">36</span>%)</span>.</li>
                    <li v-if="allMountsNumber">dont <span class="mounts"><span v-text="allMountsNumber">16</span> carte<span v-show="allMountsNumber > 1">s</span> Monture<span v-show="allMountsNumber > 1">s</span> (<span v-text="allMountsPercent || 0">1</span>%)</span>.</li>
                    <li v-if="allOriginsNumber">dont <span class="origins"><span v-text="allOriginsNumber">6</span> carte<span v-show="allOriginsNumber > 1">s</span> Origine<span v-show="allOriginsNumber > 1">s</span> (<span v-text="allOriginsPercent || 0">0</span>%)</span>.</li>
                    <li v-if="allRoomsNumber">dont <span class="rooms"><span v-text="allRoomsNumber">6</span> carte<span v-show="allRoomsNumber > 1">s</span> Pièce<span v-show="allRoomsNumber > 1">s</span> (<span v-text="allRoomsPercent || 0">0</span>%)</span>.</li>
                    <li v-if="allWarpsNumber">dont <span class="warps"><span v-text="allWarpsNumber">32</span> carte<span v-show="allWarpsNumber > 1">s</span> Portail<span v-show="allWarpsNumber > 1">s</span> (<span v-text="allWarpsPercent || 0">3</span>%)</span>.</li>
                    <li v-if="allPowersNumber">dont <span class="powers"><span v-text="allPowersNumber">44</span> carte<span v-show="allPowersNumber > 1">s</span> Pouvoir<span v-show="allPowersNumber > 1">s</span> (<span v-text="allPowersPercent || 0">4</span>%)</span>.</li>
                    <li v-if="allRacesNumber">dont <span class="races"><span v-text="allRacesNumber">103</span> carte<span v-show="allRacesNumber > 1">s</span> Race<span v-show="allRacesNumber > 1">s</span> (<span v-text="allRacesPercent || 0">8</span>%)</span>.</li>
                </ul>
            </li>
            <li>Il y a **<span v-text="allTreasuresNumber">799</span> cartes trésors** pour votre Munchkin.
                <ul>
                    <li v-if="allBonusesNumber">dont <span class="bonuses"><span v-text="allBonusesNumber">123</span> carte<span v-show="allBonusesNumber > 1">s</span> Action<span v-show="allBonusesNumber > 1">s</span> (<span v-text="allBonusesPercent || 0">15</span>%)</span>.</li>
                    <li v-if="allStuffsNumber">dont <span class="stuffs"><span v-text="allStuffsNumber">386</span> carte<span v-show="allStuffsNumber > 1">s</span> Équipement<span v-show="allStuffsNumber > 1">s</span> (<span v-text="allStuffsPercent || 0">48</span>%)</span>.</li>
                    <li v-if="allSlavesNumber">dont <span class="slaves"><span v-text="allSlavesNumber">5</span> carte<span v-show="allSlavesNumber > 1">s</span> Fidèle<span v-show="allSlavesNumber > 1">s</span> Serviteur<span v-show="allSlavesNumber > 1">s</span> (<span v-text="allSlavesPercent || 0">1</span>%)</span>.</li>
                    <li v-if="allLevelsNumber">dont <span class="levels"><span v-text="allLevelsNumber">111</span> carte<span v-show="allLevelsNumber > 1">s</span> Gain<span v-show="allLevelsNumber > 1">s</span> de Niveau<span v-show="allLevelsNumber > 1">x</span> (<span v-text="allLevelsPercent || 0">14</span>%)</span>.</li>
                    <li v-if="munchkinMMunchkinomiconNumber">dont <span class="munchkinomicon"><span v-text="munchkinMMunchkinomiconNumber">1</span> carte Munchkinomicon (<span v-text="allMunchkinomiconPercent || 0">0</span>%)</span>.</li>
                    <li v-if="allObjectsNumber">dont <span class="objects"><span v-text="allObjectsNumber">173</span> carte<span v-show="allObjectsNumber > 1">s</span> Objet<span v-show="allObjectsNumber > 1">s</span> (<span v-text="allObjectsPercent || 0">22</span>%)</span>.</li>
                </ul>
            </li>
            <li>Il y a **<span v-text="allDonjonsNumber">40</span> cartes donjons** pour votre Munchkin.</li>
            <li>Il y a **<span v-text="allSpellsNumber">14</span> cartes sorts** pour votre Munchkin.</li>
            <li>Il y a **<span v-text="allSealsNumber">12</span> cartes sceaux** pour votre Munchkin.</li>
        </ul>
    </div>
    <div class="munchkin munchkin-all" v-bind:class="{ 'is-visible': all.munchkin }">
        <img class="demo" height="200" src="media/images/upload/51vcdk0ID7L.jpg" alt="Munchkin">
        <h2 id="munchkin">Munchkin</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin.filters }">
            <h3 id="munchkin-filtres">Filtres</h3>
            <p><button v-on:click="munchkinToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Éditions**
                <div class="edition">
                    <p>
                        <label>
                            <input type="radio" value="nocol" v-model="munchkin.version"> Édition originale
                        </label><br>
                        <label>
                            <input type="radio" value="color" v-model="munchkin.version"> Seconde Édition - (Couleur)
                        </label>
                    </p>
                </div>
                **Types de carte**
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin.bonuses"> Actions (<span v-text="munchkinBonusesNumber">2</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin.actions"> Améliorations (<span v-text="munchkinActionsNumber">16</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkin.classes"> Classes (<span v-text="munchkinClassesNumber">12</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin.stuffs"> Équipements (<span v-text="munchkinStuffsNumber">37</span>)
                    </label><br>
                    <label class="slaves">
                        <input type="checkbox" value="on" v-model="munchkin.slaves"> Fidèles Serviteurs (<span v-text="munchkinSlavesNumber">1</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkin.levels"> Gains de Niveaux (<span v-text="munchkinLevelsNumber">10</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin.curses"> Malédictions (<span v-text="munchkinCursesNumber">19</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkin.monsters"> Monstres (<span v-text="munchkinMonstersNumber">37</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin.objects"> Objets (<span v-text="munchkinObjectsNumber">23</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin.races"> Races (<span v-text="munchkinRacesNumber">11</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-details">Détails</h3>
            <p>**Nombre total de cartes : <span v-text="munchkinCardsNumber">168</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinDoorsNumber">95</span></p>
                <ol>
                    <li class="monsters color nocol">3872 Orques</li>
                    <li class="monsters color nocol">Amazone</li>
                    <li class="monsters color nocol">Balrog Charolais</li>
                    <li class="actions color nocol">Bébé !</li>
                    <li class="monsters color nocol">Belvédère Sauvage</li>
                    <li class="monsters color nocol">Bigfoot, alias Grand-Pied</li>
                    <li class="monsters color nocol">Binoclard Hurleur</li>
                    <li class="monsters color nocol">Céphalopodzilla</li>
                    <li class="monsters color nocol">Cheval Zombie</li>
                    <li class="monsters color nocol">Dragon de Plutonium</li>
                    <li class="races color nocol">Elfe</li>
                    <li class="races color nocol">Elfe</li>
                    <li class="races color nocol">Elfe</li>
                    <li class="actions color nocol">Énoooorme !</li>
                    <li class="actions color nocol">Enragé</li>
                    <li class="monsters color nocol">Escargots sous Acide</li>
                    <li class="monsters color nocol">Fan de Vampire</li>
                    <li class="monsters color nocol">Gerbosaure</li>
                    <li class="monsters color nocol">Goblin Estropié</li>
                    <li class="monsters color nocol">Golem Fracassé</li>
                    <li class="monsters color nocol">Grenouilles Volantes</li>
                    <li class="classes color nocol">Guerrier</li>
                    <li class="classes color nocol">Guerrier</li>
                    <li class="classes color nocol">Guerrier</li>
                    <li class="actions color nocol">Illusion</li>
                    <li class="actions color nocol">Intervention Divine</li>
                    <li class="actions color nocol">Intelligent</li>
                    <li class="races color nocol">Halfelin</li>
                    <li class="races color nocol">Halfelin</li>
                    <li class="races color nocol">Halfelin</li>
                    <li class="monsters color nocol">~~Harpistes~~ Harpies</li>
                    <li class="monsters color nocol">Hippogriffe</li>
                    <li class="monsters color nocol">Horreur non-euclidienne indicible</li>
                    <li class="monsters color nocol">Huissier</li>
                    <li class="monsters color nocol">Lépreuxchaun</li>
                    <li class="classes color nocol">Magicien</li>
                    <li class="classes color nocol">Magicien</li>
                    <li class="classes color nocol">Magicien</li>
                    <li class="curses color nocol">Malédiction !</li>
                    <li class="curses color nocol">Malédiction !</li>
                    <li class="curses color nocol">Malédiction !</li>
                    <li class="curses color nocol">Malédiction !</li>
                    <li class="curses color nocol">Malédiction !</li>
                    <li class="curses color nocol">Malédiction ! Canard de l'Apocalypse</li>
                    <li class="curses color nocol">Malédiction ! Changement de Classe</li>
                    <li class="curses color nocol">Malédiction ! Changement de Race</li>
                    <li class="curses color nocol">Malédiction ! Changement de Sexe</li>
                    <li class="curses color nocol">Malédiction ! Commun des Mortels</li>
                    <li class="curses color nocol">Malédiction ! Déclassé !</li>
                    <li class="curses color nocol">Malédiction ! Impôt sur le Revenu</li>
                    <li class="curses color nocol">Malédiction ! Grosse Perte</li>
                    <li class="curses color nocol">Malédiction ! Miroir Perfide</li>
                    <li class="curses color nocol">Malédiction ! Perdez deux cartes</li>
                    <li class="curses color nocol">Malédiction ! Petite Perte</li>
                    <li class="curses color nocol">Malédiction ! Petite Perte</li>
                    <li class="curses color nocol">Malédiction ! Poulet sur la Tête</li>
                    <li class="curses color nocol">Malédiction Vraiment Trop Injuste !</li>
                    <li class="monsters color nocol">Manticor-nithorynque</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="monsters color nocol">Morpions</li>
                    <li class="monsters color nocol">Mr. Nonos</li>
                    <li class="monsters color nocol">Mucus Baveux</li>
                    <li class="races color nocol">Nain</li>
                    <li class="races color nocol">Nain</li>
                    <li class="races color nocol">Nain</li>
                    <li class="monsters color nocol">Nez Flottant</li>
                    <li class="monsters color nocol">Octaèdre Gélatineux</li>
                    <li class="actions color nocol">Pause Déjeuner</li>
                    <li class="actions color nocol">Petite Amie</li>
                    <li class="monsters color nocol">Pit Bull</li>
                    <li class="monsters color nocol">Plante d'Ornement</li>
                    <li class="monsters color nocol">Poulet Élevé aux Stéroïdes</li>
                    <li class="classes color nocol">Prêtre</li>
                    <li class="classes color nocol">Prêtre</li>
                    <li class="classes color nocol">Prêtre</li>
                    <li class="monsters color nocol">Rat Musclé</li>
                    <li class="monsters color nocol">René Crophage et Fils, Dépanneurs en Chirurgie</li>
                    <li class="monsters color nocol">Représentant en Assurances</li>
                    <li class="races color nocol">Sang-mêlè</li>
                    <li class="races color nocol">Sang-mêlè</li>
                    <li class="monsters color nocol">Succube Lange-de-Belle-Mère</li>
                    <li class="monsters color nocol">Suceur de Tête</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="actions color nocol">Tire-moi de là !</li>
                    <li class="actions color nocol">Tricheur !</li>
                    <li class="monsters color nocol">Trôliste</li>
                    <li class="monsters color nocol">Tut-Tuuut-Ankh-Ammon</li>
                    <li class="monsters color nocol">Vamps...ires !?!</li>
                    <li class="actions color nocol">Vénérable</li>
                    <li class="classes color nocol">Voleur</li>
                    <li class="classes color nocol">Voleur</li>
                    <li class="classes color nocol">Voleur</li>
                    <template v-for="(item, index) in munchkin.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin.version) !== -1) && ((munchkin.curses && item.class.indexOf('curses') !== -1) || (munchkin.classes && item.class.indexOf('classes') !== -1) || (munchkin.races && item.class.indexOf('races') !== -1) || (munchkin.monsters && item.class.indexOf('monsters') !== -1) || (munchkin.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin.version) !== -1) && all.munchkinDoorsEach[index] }">
                                        <input type="checkbox" v-model="all.munchkinDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinTreasuresNumber">73</span></p>
                <ol>
                    <li class="levels color nocol">1000 pièces d'or</li>
                    <li class="objects color nocol">Anneau de Souhait</li>
                    <li class="objects color nocol">Anneau de Souhait</li>
                    <li class="stuffs color nocol">Arc Enrubanné</li>
                    <li class="stuffs color nocol">Armure de Cuir</li>
                    <li class="stuffs color nocol">Armure de Flamme</li>
                    <li class="stuffs color nocol">Armure de Mithril</li>
                    <li class="stuffs color nocol">Armure Gluante</li>
                    <li class="stuffs color nocol">Armure Trapue</li>
                    <li class="objects color nocol">Baguette de Sourcier</li>
                    <li class="stuffs color nocol">Bandana de Gros Dur</li>
                    <li class="stuffs color nocol">Bâton de Napalm</li>
                    <li class="objects color nocol">Boisson Énergisante Éventée</li>
                    <li class="stuffs color nocol">Bouclier Surdimensionné</li>
                    <li class="stuffs color nocol">Bottes de Convocation d'Hémorroïdes</li>
                    <li class="stuffs color nocol">Bottes de Déplacement Frénetique</li>
                    <li class="stuffs color nocol">Brochette de Rat</li>
                    <li class="stuffs color nocol">Casque de Courage</li>
                    <li class="stuffs color nocol">Casque de Virilité Ostentatoire</li>
                    <li class="stuffs color nocol">Cape d'Ombre</li>
                    <li class="objects color nocol">Champagne</li>
                    <li class="stuffs color nocol">Chapeau Pointu de Thaumaturgie</li>
                    <li class="stuffs color nocol">Collants de Force de Géant</li>
                    <li class="objects color nocol">Cotion de Ponfusion</li>
                    <li class="stuffs color nocol">Dague de Traitrise</li>
                    <li class="levels color nocol">Don de Chips Désintressé au MJ</li>
                    <li class="objects color nocol">Doppelganger</li>
                    <li class="objects color nocol">Dé Pipé</li>
                    <li class="stuffs color nocol">Énorme Rocher</li>
                    <li class="stuffs color nocol">Escabeau</li>
                    <li class="stuffs color nocol">Épée (de) Bâtard(e)</li>
                    <li class="stuffs color nocol">Épée de Féminisme Exacerbé</li>
                    <li class="stuffs color nocol">Épée Karaoké</li>
                    <li class="levels color nocol">Erreur de Calcul Avantageuse</li>
                    <li class="slaves color nocol">Fidèle Serviteur</li>
                    <li class="objects color nocol">Flaque de Colle</li>
                    <li class="levels color nocol">Génocide de Fourmis à l'Huile Bouillante</li>
                    <li class="stuffs color nocol">Genouillères de Séduction</li>
                    <li class="stuffs color nocol">Genouillères Perforantes</li>
                    <li class="stuffs color nocol">Gourdin de Misogynie Fracassante</li>
                    <li class="stuffs color nocol">Hallebrde Suisse Multifonctions</li>
                    <li class="levels color nocol">Invocation de Règles Obscures</li>
                    <li class="objects color nocol">Lampe Merveilleuse</li>
                    <li class="stuffs color nocol">Lance de 3,50 m</li>
                    <li class="stuffs color nocol">Masse d'Armes de Répartie Piquante</li>
                    <li class="stuffs color nocol">Marteau des Rotules Douloureuses</li>
                    <li class="objects color nocol">Missile Magique</li>
                    <li class="levels color nocol">Mutiler les Cadavres</li>
                    <li class="objects color nocol">Mur Instantané</li>
                    <li class="objects color nocol">Oh, Les Jolis Ballons !</li>
                    <li class="bonuses color nocol">Pillaaaaaaage !</li>
                    <li class="levels color nocol">Pleurer dans les Jupes du MJ</li>
                    <li class="objects color nocol">Potion Acide Radioactive et Électrique</li>
                    <li class="objects color nocol">Potion d'Invisibilité</li>
                    <li class="objects color nocol">Potion d'Amitié</li>
                    <li class="objects color nocol">Potion de bravoure hystérique</li>
                    <li class="levels color nocol">Potion de Machisme Triomphant</li>
                    <li class="objects color nocol">Potion de Mauvaise Halleine</li>
                    <li class="objects color nocol">Potion de Poison Enflammé</li>
                    <li class="objects color nocol">Potion de Polly-morphie</li>
                    <li class="objects color nocol">Potion de Sommeil</li>
                    <li class="objects color nocol">Potion de Transfert</li>
                    <li class="objects color nocol">Potion Glaciale Explosive</li>
                    <li class="stuffs color nocol">Rape à Fromage de la Paix</li>
                    <li class="stuffs color nocol">Rapière d'Injustice Flagrante</li>
                    <li class="stuffs color nocol">Sandales de Protection</li>
                    <li class="stuffs color nocol">Sandwich Chocolat-Moules-Anchois</li>
                    <li class="stuffs color nocol">Targe d'Inconscience Suicidaire</li>
                    <li class="bonuses color">Titre qui en Jette Vraiment Grave</li>
                    <li class="stuffs nocol">Titre qui en Jette Vraiment Grave</li>
                    <li class="stuffs color nocol">Tronçonneuse de la Mort</li>
                    <li class="stuffs color nocol">Tuba d'Envoutement</li>
                    <li class="levels color nocol">Tuer le Fidèle Serviteur</li>
                    <li class="levels color nocol">Vol de Niveau</li>
                    <template v-for="(item, index) in munchkin.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin.version) !== -1) && ((munchkin.slaves && item.class.indexOf('slaves') !== -1) || (munchkin.levels && item.class.indexOf('levels') !== -1) || (munchkin.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin.objects && item.class.indexOf('objects') !== -1) || (munchkin.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin.version) !== -1) && all.munchkinTreasuresEach[index] }">
                                        <input type="checkbox" v-model="all.munchkinTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-2 munchkin-all" v-bind:class="{ 'is-visible': all.munchkin2 }">
        <img class="demo" src="media/images/upload/51CHPcSgexL._AC_UL320_SR248,320_.jpg" alt="Munchkin 2">
        <h2 id="munchkin-2">Munchkin 2 : Hachement Mieux</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin2.filters }">
            <h3 id="munchkin-2-filtres">Filtres</h3>
            <p><button v-on:click="munchkin2ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Éditions**
                <div class="edition">
                    <p>
                        <label>
                            <input type="radio" value="nocol" v-model="munchkin2.version"> Édition originale
                        </label><br>
                        <label>
                            <input type="radio" value="color" v-model="munchkin2.version"> Seconde Édition - (Couleur)
                        </label>
                    </p>
                </div>
                **Types de carte**
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin2.bonuses"> Actions (<span v-text="munchkin2BonusesNumber">3</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin2.actions"> Améliorations (<span v-text="munchkin2ActionsNumber">14</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkin2.classes"> Classes (<span v-text="munchkin2ClassesNumber">4</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin2.stuffs"> Équipements (<span v-text="munchkin2StuffsNumber">25</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkin2.levels"> Gains de Niveaux (<span v-text="munchkin2LevelsNumber">7</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin2.curses"> Malédictions (<span v-text="munchkin2CursesNumber">11</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkin2.monsters"> Monstres (<span v-text="munchkin2MonstersNumber">29</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin2.objects"> Objets (<span v-text="munchkin2ObjectsNumber">10</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin2.races"> Races (<span v-text="munchkin2RacesNumber">8</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-2-details">Détails</h3>
            <p><img src="media/images/upload/m2.gif" alt="Munchkin 2"> Cette icone en bas à droite d'une carte marque l'appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>Les améliorations d'objets</li>
                <li>La Race des Orques</li>
                <li>Les très inutiles Cartes Vides</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkin2CardsNumber">111</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-2-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin2DoorsNumber">66</span></p>
                <ol>
                    <li class="actions color nocol">Amical</li>
                    <li class="actions color nocol">Annihilation</li>
                    <li class="monsters color nocol">Avocat fantôme</li>
                    <li class="monsters color nocol">Cafard Géant</li>
                    <li class="actions color nocol">Cartes excessivement merveilleuses</li>
                    <li class="monsters color nocol">Champi Gnons</li>
                    <li class="monsters color nocol">Clowns de la Mort</li>
                    <li class="monsters color nocol">Créature de Stupre et de Luxure</li>
                    <li class="monsters color nocol">Démon Tentaculaire</li>
                    <li class="monsters color nocol">Écureuil Psychopathe</li>
                    <li class="monsters color nocol">Élémentaire de Morve</li>
                    <li class="races color nocol">Elfe</li>
                    <li class="actions color nocol">Endormi</li>
                    <li class="actions color nocol">Fauché</li>
                    <li class="monsters color nocol">Géant de Givre</li>
                    <li class="classes color nocol">Guerrier</li>
                    <li class="races color nocol">Halfelin</li>
                    <li class="actions color nocol">Hé, une carte !</li>
                    <li class="monsters color nocol">Herbeux Dégueu</li>
                    <li class="monsters color nocol">Hydreolique</li>
                    <li class="monsters color nocol">Jabberwock</li>
                    <li class="monsters color nocol">Judge Fredd</li>
                    <li class="monsters color nocol">L'Ombre du Nez Flottant</li>
                    <li class="monsters color nocol">La Chose au Nom si Long</li>
                    <li class="monsters color nocol">Le Germe du Mal</li>
                    <li class="actions color nocol">Les cadavres ne se battent pas</li>
                    <li class="classes color nocol">Magicien</li>
                    <li class="monsters color nocol">Main Rampante</li>
                    <li class="curses color nocol">Malédiction ! Bidule Maudit</li>
                    <li class="curses color nocol">Malédiction ! Bidule Maudit</li>
                    <li class="curses color nocol">Malédiction ! Générosité</li>
                    <li class="curses color nocol">Malédiction ! Grands Pieds</li>
                    <li class="curses color nocol">Malédiction ! Mains Minuscules</li>
                    <li class="curses color nocol">Malédiction ! Nécrophobie</li>
                    <li class="curses color nocol">Malédiction ! Odeur Corporelle</li>
                    <li class="curses color nocol">Malédiction ! Or des fous</li>
                    <li class="curses color nocol">Malédiction ! Perte d'un Gros Objet</li>
                    <li class="curses color nocol">Malédiction ! Perte d'un Petit Objet</li>
                    <li class="curses color nocol">Malédiction ! Règles de la Nouvelle Édition</li>
                    <li class="monsters color nocol">Minette Sanguinaire</li>
                    <li class="monsters color nocol">Mobile</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="monsters color nocol">Monstre fait maison</li>
                    <li class="actions color nocol">MoÔoman</li>
                    <li class="actions color nocol">Mort-Vivant</li>
                    <li class="monsters color nocol">Moufette Géante</li>
                    <li class="races color nocol">Nain</li>
                    <li class="actions color nocol">Nichée</li>
                    <li class="monsters color nocol">Nounours</li>
                    <li class="races color nocol">Orque</li>
                    <li class="races color nocol">Orque</li>
                    <li class="races color nocol">Orque</li>
                    <li class="races color nocol">Orque</li>
                    <li class="monsters color nocol">Père Noël</li>
                    <li class="classes color nocol">Prêtre</li>
                    <li class="monsters color nocol">Ptérodactyle</li>
                    <li class="monsters color nocol">Rats pestiférés</li>
                    <li class="races color nocol">Sang-Mêlé</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="monsters color nocol">Tortue-garou</li>
                    <li class="actions color">Tricheur</li>
                    <li class="monsters color nocol">Vestales de l'Ordrede la Pleine Lune</li>
                    <li class="monsters color nocol">Vide</li>
                    <li class="monsters color nocol">Vide</li>
                    <li class="actions nocol">Vide</li>
                    <li class="classes color nocol">Voleur</li>
                    <template v-for="(item, index) in munchkin2.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin2.version) !== -1) && ((munchkin2.curses && item.class.indexOf('curses') !== -1) || (munchkin2.curses && item.class.indexOf('curses') !== -1) || (munchkin2.classes && item.class.indexOf('classes') !== -1) || (munchkin2.races && item.class.indexOf('races') !== -1) || (munchkin2.monsters && item.class.indexOf('monsters') !== -1) || (munchkin2.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin2.version) !== -1) && all.munchkin2DoorsEach[index] }">
                                        <input type="checkbox" v-model="all.munchkin2DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-2-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkin2TreasuresNumber">45</span></p>
                <ol>
                    <li class="bonuses nocol">...du Destin !</li>
                    <li class="stuffs color">...du Destin !</li>
                    <li class="objects color nocol">Anneau de Souhait</li>
                    <li class="stuffs color nocol">Boomdague</li>
                    <li class="stuffs color nocol">Braguette Cloutée</li>
                    <li class="stuffs color nocol">Casque de vision périphérique</li>
                    <li class="stuffs color nocol">Casquelette</li>
                    <li class="stuffs color nocol">Chapeau en Papier d'Alu</li>
                    <li class="bonuses color nocol">Cheval de Troie</li>
                    <li class="levels color nocol">Contemplation du Nombril</li>
                    <li class="objects color nocol">Crème de bébé</li>
                    <li class="levels color nocol">Cruauté Gratuite</li>
                    <li class="objects color nocol">Dé Subtilement Pipé</li>
                    <li class="objects color nocol">Dé Subtilement Pipé</li>
                    <li class="stuffs color nocol">Dentier de l'Effroi</li>
                    <li class="stuffs color nocol">Dragon Nain Tout Mignon</li>
                    <li class="levels color nocol">Échange de feuilles de personnage</li>
                    <li class="stuffs color nocol">Engin de Siège</li>
                    <li class="stuffs color nocol">Épée Super Zarbi</li>
                    <li class="stuffs color nocol">Épée Tueuse de Tout (à l'exception notable des poulpes)</li>
                    <li class="stuffs color nocol">Exoarmure</li>
                    <li class="stuffs color nocol">Familier</li>
                    <li class="stuffs color nocol">Fausse Barbe</li>
                    <li class="stuffs color nocol">Fourchette à Barbecue</li>
                    <li class="stuffs color nocol">Gastérofronde</li>
                    <li class="stuffs color nocol">Hache Surnaturelle</li>
                    <li class="stuffs color nocol">Imperméable</li>
                    <li class="objects nocol">Lampe Merveilleuse</li>
                    <li class="levels color nocol">Laver la Voiture MJ</li>
                    <li class="stuffs color nocol">Le Maillet Béni de Saint Aieuuuu !</li>
                    <li class="stuffs color nocol">Lumière Éternelle (piles non incluses)</li>
                    <li class="levels color nocol">Payer la Pizza</li>
                    <li class="stuffs color nocol">Pince à Épiler de la Terreur</li>
                    <li class="levels color nocol">Plier, Embrocher et Mutiler</li>
                    <li class="objects color nocol">Poil à Gratter</li>
                    <li class="objects color nocol">Potage Sauvage</li>
                    <li class="objects color nocol">Potion de Lâcheté</li>
                    <li class="objects color nocol">Potion de Vol</li>
                    <li class="objects color nocol">Potion d'Incrédulité</li>
                    <li class="levels color nocol">Promettre au MJ d'arrêter de lui parler de votre Personnage</li>
                    <li class="stuffs color nocol">Rouleau de l'Ordre</li>
                    <li class="stuffs color nocol">Sac de Clous</li>
                    <li class="objects color nocol">Sauce Tartare Barbare</li>
                    <li class="bonuses color nocol">Ton lacet est défait !</li>
                    <li class="stuffs color nocol">Très Saint Livre</li>
                    <li class="objects nocol">Vide</li>
                    <li class="stuffs color nocol">Vide</li>
                    <li class="bonuses color nocol">Vide Grenier</li>
                    <template v-for="(item, index) in munchkin2.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin2.version) !== -1) && ((munchkin2.levels && item.class.indexOf('levels') !== -1) || (munchkin2.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin2.objects && item.class.indexOf('objects') !== -1) || (munchkin2.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin2.version) !== -1) && all.munchkin2TreasuresEach[index] }">
                                        <input type="checkbox" v-model="all.munchkin2TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-3 munchkin-all" v-bind:class="{ 'is-visible': all.munchkin3 }">
        <img class="demo" src="media/images/upload/munchkin-3.gif" alt="Munchkin 3">
        <h2 id="munchkin-3">Munchkin 3 : Clerc et (pas) net</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin3.filters }">
            <h3 id="munchkin-3-filtres">Filtres</h3>
            <p><button v-on:click="munchkin3ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Éditions**
                <div class="edition">
                    <p>
                        <label>
                            <input type="radio" value="nocol" v-model="munchkin3.version"> Édition originale
                        </label><br>
                        <label>
                            <input type="radio" value="color" v-model="munchkin3.version"> Seconde Édition - (Couleur)
                        </label>
                    </p>
                </div>
                **Types de carte**
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin3.bonuses"> Actions (<span v-text="munchkin3BonusesNumber">10</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin3.actions"> Améliorations (<span v-text="munchkin3ActionsNumber">12</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkin3.classes"> Classes (<span v-text="munchkin3ClassesNumber">9</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin3.stuffs"> Équipements (<span v-text="munchkin3StuffsNumber">17</span>)
                    </label><br>
                    <label class="slaves">
                        <input type="checkbox" value="on" v-model="munchkin3.slaves"> Fidèles Serviteurs (<span v-text="munchkin3SlavesNumber">1</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkin3.levels"> Gains de Niveaux (<span v-text="munchkin3LevelsNumber">7</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin3.curses"> Malédictions (<span v-text="munchkin3CursesNumber">8</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkin3.monsters"> Monstres (<span v-text="munchkin3MonstersNumber">27</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin3.objects"> Objets (<span v-text="munchkin3ObjectsNumber">11</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin3.races"> Races (<span v-text="munchkin3RacesNumber">10</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-3-details">Détails</h3>
            <p><img src="media/images/upload/m3.gif" alt="Munchkin 2"> Cette icone en bas à droite d'une carte marque l'appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>La Classe des Bardes</li>
                <li>La Race des Gnomes</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkin3CardsNumber">112</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-3-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin3DoorsNumber">66</span></p>
                <ol>
                    <li class="actions color nocol">...de l'Enfer</li>
                    <li class="monsters color nocol">Baal-Y-Nacee,Grand Antien de la Basse-Cour des Enfers</li>
                    <li class="classes color nocol">Barde</li>
                    <li class="classes color nocol">Barde</li>
                    <li class="classes color nocol">Barde</li>
                    <li class="classes color nocol">Barde</li>
                    <li class="classes color nocol">Barde</li>
                    <li class="monsters color nocol">Camulot</li>
                    <li class="monsters color nocol">Cécil Vanien, déménageur en entrailles</li>
                    <li class="monsters color nocol">Dessin de votre petit frère</li>
                    <li class="monsters color nocol">Dopplegangsters</li>
                    <li class="monsters color nocol">Dryade</li>
                    <li class="races color nocol">Elfe</li>
                    <li class="actions color nocol">En pleine dépression</li>
                    <li class="actions color nocol">En sous-vêtements</li>
                    <li class="actions color nocol">Énorme Épée de passage à tabac de personnage</li>
                    <li class="actions color nocol">Erreur de typo</li>
                    <li class="monsters color nocol">Géants de la raclette</li>
                    <li class="monsters color nocol">Gobe-mouche urticant bio-mutant</li>
                    <li class="races color nocol">Gnome</li>
                    <li class="races color nocol">Gnome</li>
                    <li class="races color nocol">Gnome</li>
                    <li class="races color nocol">Gnome</li>
                    <li class="races color nocol">Gnome</li>
                    <li class="monsters color nocol">Golem de Chewing-gum</li>
                    <li class="monsters color nocol">Gothyanki</li>
                    <li class="monsters color nocol">Gros Bourrin</li>
                    <li class="monsters color nocol">Gros porc macho</li>
                    <li class="classes color nocol">Guerrier</li>
                    <li class="races color nocol">Halfelin</li>
                    <li class="monsters color nocol">Homme-hochet</li>
                    <li class="monsters color nocol">Kali</li>
                    <li class="monsters color nocol">Kobolds kamikazes</li>
                    <li class="monsters color nocol">Les Manes occis de la mer morte</li>
                    <li class="actions color nocol">Les Monstres sont occupés</li>
                    <li class="classes color nocol">Magicien</li>
                    <li class="curses color nocol">Malédiction ! ...de la mort qui tue !</li>
                    <li class="curses color nocol">Malédiction ! amnésie temporaire</li>
                    <li class="curses color nocol">Malédiction ! bière des nains</li>
                    <li class="curses color nocol">Malédiction ! échec christique !</li>
                    <li class="curses color nocol">Malédiction ! les genoux explosés</li>
                    <li class="curses color nocol">Malédiction ! piège à touristes</li>
                    <li class="curses color nocol">Malédiction ! sac à dos affamé</li>
                    <li class="curses color nocol">Malédiction ! vous trebuchez sur votre trésors</li>
                    <li class="monsters color nocol">Méduse</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Mort-vivant</li>
                    <li class="monsters color nocol">Mort-Ylin Moncroc</li>
                    <li class="races color nocol">Nain</li>
                    <li class="monsters color nocol">Nounours sanguinaire géant</li>
                    <li class="actions color nocol">Obscènement riche</li>
                    <li class="races color nocol">Orque</li>
                    <li class="monsters color nocol">Petit lapin tout ce qu'il y a de plus ordinaire...</li>
                    <li class="monsters color nocol">Poisson rouge</li>
                    <li class="classes color nocol">Prêtre</li>
                    <li class="monsters color nocol">Resident débile, le charancon mutant</li>
                    <li class="races color nocol">Sang-mêlé</li>
                    <li class="monsters color nocol">Sire Hupeux</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="monsters color nocol">Tati Paladin</li>
                    <li class="monsters color nocol">Tequila Piaf</li>
                    <li class="monsters color nocol">Tonneau sans fond</li>
                    <li class="actions color nocol">Tricheur !</li>
                    <li class="classes color nocol">Voleur</li>
                    <li class="monsters color nocol">Zozo le zusticier</li>
                    <template v-for="(item, index) in munchkin3.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin3.version) !== -1) && ((munchkin3.curses && item.class.indexOf('curses') !== -1) || (munchkin3.classes && item.class.indexOf('classes') !== -1) || (munchkin3.races && item.class.indexOf('races') !== -1) || (munchkin3.monsters && item.class.indexOf('monsters') !== -1) || (munchkin3.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin3.version) !== -1) && all.munchkin3DoorsEach[index] }">
                                        <input type="checkbox" v-model="all.munchkin3DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-3-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkin3TreasuresNumber">46</span></p>
                <ol>
                    <li class="levels color nocol">Acte de bonté absurde</li>
                    <li class="objects color nocol">Anneau de Souhait</li>
                    <li class="bonuses color nocol">Béni</li>
                    <li class="stuffs color nocol">Bikini en cotte de mailles</li>
                    <li class="stuffs color nocol">C'est le luth finaAaleuuu !</li>
                    <li class="objects color nocol">Canard d'abondance</li>
                    <li class="stuffs color nocol">Chaussettes de Pestilence</li>
                    <li class="stuffs color nocol">Chaussons de Coming-out</li>
                    <li class="objects color nocol">Cocktail Molotroll</li>
                    <li class="stuffs color nocol">Costume en gnomex</li>
                    <li class="bonuses color nocol">Coup quasi-fatal</li>
                    <li class="objects color nocol">Croquettes pour monstres</li>
                    <li class="objects color nocol">Dé pipé</li>
                    <li class="bonuses color nocol">Descente de dieux</li>
                    <li class="stuffs color nocol">Divan de psi</li>
                    <li class="bonuses color nocol">Empoisonné</li>
                    <li class="stuffs color nocol">Épée à deux mains</li>
                    <li class="levels color nocol">Faire un dessin de son personnage</li>
                    <li class="stuffs color nocol">Farces et attrapes de Manufacture Gnome</li>
                    <li class="slaves color nocol">Fidèle Serviteur</li>
                    <li class="stuffs color nocol">Fouet "Plein-la-goule™"</li>
                    <li class="objects color nocol">Gelée royale</li>
                    <li class="stuffs color nocol">Grelots tueurs</li>
                    <li class="objects color nocol">Injonction</li>
                    <li class="bonuses color nocol">Intervention féline</li>
                    <li class="stuffs color nocol">Lame vorpale</li>
                    <li class="bonuses color nocol">Lancer de nain</li>
                    <li class="stuffs color nocol">L'amulette à fiabilité relative</li>
                    <li class="stuffs color nocol">L'autre Anneau</li>
                    <li class="bonuses color nocol">Le casino du donjon</li>
                    <li class="stuffs color nocol">Mangnifique chapeau</li>
                    <li class="stuffs color nocol">Masse d'arme de cheville improvisée</li>
                    <li class="levels color nocol">Menacer de changer de système de jeu</li>
                    <li class="bonuses color nocol">Moi ! Moi ! Moi !</li>
                    <li class="stuffs color nocol">Oreilles factices</li>
                    <li class="stuffs color nocol">Poignard-o-matic</li>
                    <li class="bonuses color nocol">Poignées de transport</li>
                    <li class="objects color nocol">Potion d'apathie</li>
                    <li class="objects color nocol">Potion de greluche instantanée</li>
                    <li class="levels color nocol">Regarde le dé, il tourne, il toune...</li>
                    <li class="levels color nocol">Remettre sa vieille fiche de perso au propre...</li>
                    <li class="objects color nocol">Sauce pimentée</li>
                    <li class="levels color nocol">Se souvenir de l'anniversaire du MJ</li>
                    <li class="objects color nocol">Tarte savoureuse</li>
                    <li class="bonuses color nocol">Taille unique</li>
                    <li class="levels color nocol">Voler la vedette</li>
                    <template v-for="(item, index) in munchkin3.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin3.version) !== -1) && ((munchkin3.slaves && item.class.indexOf('slaves') !== -1) || (munchkin3.levels && item.class.indexOf('levels') !== -1) || (munchkin3.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin3.objects && item.class.indexOf('objects') !== -1) || (munchkin3.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin3.version) !== -1) && all.munchkin3TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkin3TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-4 munchkin-all" v-bind:class="{ 'is-visible': all.munchkin4 }">
        <img class="demo" src="media/images/upload/512ADEdYO8L._AC_UL320_SR252,320_.jpg" alt="Munchkin 4">
        <h2 id="munchkin-4">Munchkin 4 : Ton destin est sellé !</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin4.filters }">
            <h3 id="munchkin-4-filtres">Filtres</h3>
            <p><button v-on:click="munchkin4ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Éditions**
                <div class="edition">
                    <p>
                        <label>
                            <input type="radio" value="nocol" v-model="munchkin4.version"> Édition originale
                        </label><br>
                        <label>
                            <input type="radio" value="color" v-model="munchkin4.version"> Seconde Édition - (Couleur)
                        </label>
                    </p>
                </div>
                **Types de carte**
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin4.bonuses"> Actions (<span v-text="munchkin4BonusesNumber">11</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin4.actions"> Améliorations (<span v-text="munchkin4ActionsNumber">13</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkin4.classes"> Classes (<span v-text="munchkin4ClassesNumber">5</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin4.stuffs"> Équipements (<span v-text="munchkin4StuffsNumber">11</span>)
                    </label><br>
                    <label class="acolytes">
                        <input type="checkbox" value="on" v-model="munchkin4.acolytes"> Fidèles Serviteurs (<span v-text="munchkin4AcolytesNumber">13</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkin4.levels"> Gains de Niveaux (<span v-text="munchkin4LevelsNumber">6</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin4.curses"> Malédictions (<span v-text="munchkin4CursesNumber">5</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkin4.monsters"> Monstres (<span v-text="munchkin4MonstersNumber">27</span>)
                    </label><br>
                    <label class="mounts">
                        <input type="checkbox" value="on" v-model="munchkin4.mounts"> Montures (<span v-text="munchkin4MountsNumber">9</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin4.objects"> Objets (<span v-text="munchkin4ObjectsNumber">6</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin4.races"> Races (<span v-text="munchkin4RacesNumber">6</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-4-details">Détails</h3>
            <p><img src="media/images/upload/m4.gif" alt="Munchkin 4"> Cette icone en bas à droite d'une carte marque l'appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>Les Fidèles serviteurs</li>
                <li>Les Montures</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkin4CardsNumber">112</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-4-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin4DoorsNumber">78</span></p>
                <ol>
                    <li class="actions color nocol">...jouant de la cornemuse</li>
                    <li class="actions color nocol">...surgi de l'enfer</li>
                    <li class="actions color nocol">À dents de sable</li>
                    <li class="actions color nocol">Affamé</li>
                    <li class="mounts color nocol">Aigle de selle</li>
                    <li class="monsters color nocol">Bête égarante</li>
                    <li class="classes color nocol">Barde</li>
                    <li class="actions color nocol">Big Joe</li>
                    <li class="monsters color nocol">Bugs Beuh-Ni</li>
                    <li class="monsters color nocol">Camionosaure (Monstertruckosaurus Rex)</li>
                    <li class="monsters color nocol">Crâne en peluche</li>
                    <li class="actions color nocol">Demi...</li>
                    <li class="mounts color nocol">Dragon de selle</li>
                    <li class="races color nocol">Elfe</li>
                    <li class="actions color nocol">En armure</li>
                    <li class="acolytes color nocol">Fidèle serviteur barde</li>
                    <li class="acolytes color nocol">Fidèle serviteur Chappendale</li>
                    <li class="acolytes color nocol">Fidèle serviteur elfe</li>
                    <li class="acolytes color nocol">Fidèle serviteur en solde</li>
                    <li class="acolytes color nocol">Fidèle serviteur gnome</li>
                    <li class="acolytes color nocol">Fidèle serviteur guerrier</li>
                    <li class="acolytes color nocol">Fidèle serviteur halfelin</li>
                    <li class="acolytes color nocol">Fidèle serviteur magicien</li>
                    <li class="acolytes color nocol">Fidèle serviteur nain</li>
                    <li class="acolytes color nocol">Fidèle serviteur orque</li>
                    <li class="acolytes color nocol">Fidèle serviteur prètre</li>
                    <li class="acolytes color nocol">Fidèle ~~serviteur~~ ~~serviteuse~~ gourgandine pas farouche, quoi...</li>
                    <li class="acolytes color nocol">Fidèle serviteur voleur</li>
                    <li class="actions color nocol">Furtif</li>
                    <li class="monsters color nocol">Harry Pot-d'terre</li>
                    <li class="monsters color nocol">Géant Ninja</li>
                    <li class="monsters color nocol">Gelée au caramel fondu</li>
                    <li class="mounts color nocol">Gerbille mutante géante de selle</li>
                    <li class="races color nocol">Gnome</li>
                    <li class="monsters color nocol">Godefroy de Court Bouillon</li>
                    <li class="monsters color nocol">Gros type velu et barbu qu'on connait pas...</li>
                    <li class="classes color nocol">Guerrier</li>
                    <li class="races color nocol">Halfelin</li>
                    <li class="monsters color nocol">Katrina</li>
                    <li class="monsters color nocol">La nuée des morts-vivants</li>
                    <li class="monsters color nocol">Le Mauvais oeil</li>
                    <li class="mounts color nocol">Loup de selle</li>
                    <li class="monsters color nocol">~~Ma marraine~~ Mon parrain la fée</li>
                    <li class="classes color nocol">Magicien</li>
                    <li class="curses color nocol">Malédiction ! Charges patronales</li>
                    <li class="curses color nocol">Malédiction ! Monture flatulente</li>
                    <li class="curses color nocol">Malédiction ! Plancher en papier tue-mouche !</li>
                    <li class="curses color nocol">Malédiction ! Rations gatées</li>
                    <li class="curses color nocol">Malédiction ! Tout est relatif !</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="races color nocol">Nain</li>
                    <li class="monsters color nocol">Oeuf</li>
                    <li class="races color nocol">Orque</li>
                    <li class="monsters color nocol">Ours bipolaire</li>
                    <li class="monsters color nocol">Ours pigeon</li>
                    <li class="monsters color nocol">Petit coin d'ombre tout à fait inoffensif</li>
                    <li class="monsters color nocol">Petit toutou tout ce qu'il y a de plus ordinaire</li>
                    <li class="monsters color nocol">Polly Èdre</li>
                    <li class="mounts color nocol">Poulet de selle</li>
                    <li class="classes color nocol">Prêtre</li>
                    <li class="mounts color nocol">Puissant destrier</li>
                    <li class="mounts color nocol">Raptor de selle</li>
                    <li class="actions color nocol">Résistant à la magie</li>
                    <li class="monsters color nocol">Réveil matin</li>
                    <li class="races color nocol">Sang-mêlé</li>
                    <li class="monsters color nocol">Sphinx farceur</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="mounts color nocol">Tigre de selle</li>
                    <li class="monsters color nocol">Toison Noire, le Fleau des Sept Mers, brebis égarée</li>
                    <li class="monsters color nocol">Touffu, élémentaire de poils</li>
                    <li class="monsters color nocol">Toute pitite araignée mignonne</li>
                    <li class="mounts color nocol">Tortue de selle</li>
                    <li class="actions color nocol">Tricheur !</li>
                    <li class="monsters color nocol">Vase naze à l'uzi usé</li>
                    <li class="classes color nocol">Voleur</li>
                    <li class="monsters color nocol">William Jexpire, auteur du Songe d'une pluie d'XP</li>
                    <li class="monsters color nocol">Yack Yack Yack !</li>
                    <template v-for="(item, index) in munchkin4.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin4.version) !== -1) && ((munchkin4.curses && item.class.indexOf('curses') !== -1) || (munchkin4.acolytes && item.class.indexOf('acolytes') !== -1) || (munchkin4.mounts && item.class.indexOf('mounts') !== -1) || (munchkin4.classes && item.class.indexOf('classes') !== -1) || (munchkin4.races && item.class.indexOf('races') !== -1) || (munchkin4.monsters && item.class.indexOf('monsters') !== -1) || (munchkin4.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin4.version) !== -1) && all.munchkin4DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkin4DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-4-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkin4TreasuresNumber">34</span></p>
                <ol>
                    <li class="bonuses color nocol">...du Destin</li>
                    <li class="bonuses color nocol">Ailes de précipitation</li>
                    <li class="objects color nocol">Anneau de souhait</li>
                    <li class="objects color nocol">Appât à monture "Oui-y-s'casse"</li>
                    <li class="stuffs color nocol">Arc souffrant d'hypertension</li>
                    <li class="stuffs color nocol">Armure en épluchures de patates</li>
                    <li class="stuffs color nocol">Armure en solde</li>
                    <li class="stuffs color nocol">Batte de braise-ball</li>
                    <li class="stuffs color nocol">Bottes Deux Chevals</li>
                    <li class="bonuses color nocol">Bride lance-flammes</li>
                    <li class="bonuses color nocol">Brillant</li>
                    <li class="stuffs color nocol">Casque de fier-à-bras</li>
                    <li class="objects color nocol">Chant nuptial</li>
                    <li class="bonuses color nocol">Crise d'Intelligence aiguë</li>
                    <li class="stuffs color nocol">Combat à pied nus</li>
                    <li class="bonuses color nocol">Crise de Jalousie</li>
                    <li class="objects color nocol">Dé Pipé</li>
                    <li class="stuffs color nocol">Faux et usage de faux</li>
                    <li class="bonuses color nocol">Maîtrise de gestion en management</li>
                    <li class="stuffs color nocol">Masque d'Halloween</li>
                    <li class="bonuses color nocol">Mécano-...</li>
                    <li class="levels color nocol">Piller son propre temple</li>
                    <li class="stuffs color nocol">Planche à ~~repasser~~ trepasser</li>
                    <li class="objects color nocol">Potin de changement de sexe</li>
                    <li class="bonuses color nocol">Potion de volubilité</li>
                    <li class="objects color nocol">Poudre rétrécissante</li>
                    <li class="stuffs color nocol">Pulvérisatueur</li>
                    <li class="levels color nocol">Réveiller un volcan sous la ville ennemie</li>
                    <li class="levels color nocol">S'habiller comme son personnage</li>
                    <li class="bonuses color nocol">Sanfouane et l'oie</li>
                    <li class="bonuses color nocol">Soudoyer un Fidèle serviteur</li>
                    <li class="levels color nocol">Tuer des nazis</li>
                    <li class="levels color nocol">Tuer un Fidèle Serviteur</li>
                    <li class="levels color nocol">Tuer une Monture</li>
                    <template v-for="(item, index) in munchkin4.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin4.version) !== -1) && ((munchkin4.levels && item.class.indexOf('levels') !== -1) || (munchkin4.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin4.objects && item.class.indexOf('objects') !== -1) || (munchkin4.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin4.version) !== -1) && all.munchkin4TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkin4TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-5 munchkin-all" v-bind:class="{ 'is-visible': all.munchkin5 }">
        <img class="demo" src="media/images/upload/munchkin-5-on-ze-rode-again-edge_2345.jpg" alt="Munchkin 5">
        <h2 id="munchkin-5">Munchkin 5 : On Zeu Rôde Again</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin5.filters }">
            <h3 id="munchkin-5-filtres">Filtres</h3>
            <p><button v-on:click="munchkin5ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Éditions**
                <div class="edition">
                    <p>
                        <label>
                            <input type="radio" value="nocol" v-model="munchkin5.version"> Édition originale
                    </label>
                        <br>
                        <label>
                            <input type="radio" value="color" v-model="munchkin5.version"> Seconde Édition - (Couleur)
                    </label>
                    </p>
                </div>
                **Types de carte**
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin5.bonuses"> Actions (<span v-text="munchkin5BonusesNumber">13</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin5.actions"> Améliorations (<span v-text="munchkin5ActionsNumber">8</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkin5.classes"> Classes (<span v-text="munchkin5ClassesNumber">6</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin5.stuffs"> Équipements (<span v-text="munchkin5StuffsNumber">24</span>)
                    </label><br>
                    <label class="acolytes">
                        <input type="checkbox" value="on" v-model="munchkin5.acolytes"> Fidèles Serviteurs (<span v-text="munchkin5AcolytesNumber">1</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkin5.levels"> Gains de Niveaux (<span v-text="munchkin5LevelsNumber">7</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin5.curses"> Malédictions (<span v-text="munchkin5CursesNumber">9</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkin5.monsters"> Monstres (<span v-text="munchkin5MonstersNumber">27</span>)
                    </label><br>
                    <label class="mounts">
                        <input type="checkbox" value="on" v-model="munchkin5.mounts"> Montures (<span v-text="munchkin5MountsNumber">3</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin5.objects"> Objets (<span v-text="munchkin5ObjectsNumber">8</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin5.races"> Races (<span v-text="munchkin5RacesNumber">6</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-5-details">Détails</h3>
            <p><img src="media/images/upload/m5.gif" alt="Munchkin 5"> Cette icone en bas à droite d'une carte marque l'appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>La Races des Gnomes</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkin5CardsNumber">112</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-5-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin5DoorsNumber">60</span></p>
                <ol>
                    <li class="actions color nocol">À deux têtes</li>
                    <li class="monsters color nocol">Anubis</li>
                    <li class="mounts color nocol">Araignée de selle</li>
                    <li class="actions color nocol">Au sourire sinistre</li>
                    <li class="monsters color nocol">Blobgobelin</li>
                    <li class="monsters color nocol">Boeuf Pour-qui-l'gnon</li>
                    <li class="monsters color nocol">~~Bonus de base~~ Bonnasse de bouse à l'attaque</li>
                    <li class="monsters color nocol">Clowns morts-vivants</li>
                    <li class="monsters color nocol">Coq qu'est triste</li>
                    <li class="monsters color nocol">Cyclope</li>
                    <li class="monsters color nocol">Druide</li>
                    <li class="races color nocol">Elfe</li>
                    <li class="monsters color nocol">Ex di MJ</li>
                    <li class="monsters color nocol">Fée des dents</li>
                    <li class="acolytes color nocol">Fidèle serviteur porteur de torche</li>
                    <li class="races color nocol">Gnome</li>
                    <li class="actions color nocol">Gonflable</li>
                    <li class="races color nocol">Halfelin</li>
                    <li class="monsters color nocol">Insectricheurs</li>
                    <li class="monsters color nocol">Karateka Rapace (spectral, qui plus est...)</li>
                    <li class="monsters color nocol">La colère du Khan</li>
                    <li class="monsters color nocol">La main du destin</li>
                    <li class="monsters color nocol">Les J'tue-mpfs</li>
                    <li class="monsters color nocol">Les frères Grimm</li>
                    <li class="monsters color nocol">Les trois munchquetaires</li>
                    <li class="monsters color nocol">Mâchoire de verre</li>
                    <li class="curses color nocol">Malédiction ! Catalogue</li>
                    <li class="curses color nocol">Malédiction ! "Et moi j'ai... un vieux caillou..."</li>
                    <li class="curses color nocol">Malédiction ! Musette de rétention brachiale inopinée</li>
                    <li class="curses color nocol">Malédiction ! Perte du dé porte-bonheur</li>
                    <li class="curses color nocol">Malédiction ! Pluie de belettes</li>
                    <li class="curses color nocol">Malédiction ! Poupée vaudou</li>
                    <li class="curses color nocol">Malédiction ! Règles arbitrairement égalitaires</li>
                    <li class="curses color nocol">Malédiction ! Souhait prononcé sur un coup de tête</li>
                    <li class="curses color nocol">Malédiction ! Souhaiter qu'on vous retire une épine du pied</li>
                    <li class="monsters color nocol">Monstre (subtilement) caché sous le lit</li>
                    <li class="actions color nocol">Monstre Érrant</li>
                    <li class="actions color nocol">Monstre Érrant</li>
                    <li class="mounts color nocol">Monture en solde</li>
                    <li class="races color nocol">Nain</li>
                    <li class="races color nocol">Orque</li>
                    <li class="monsters color nocol">Orque perdu</li>
                    <li class="actions color nocol">Politiquement correct</li>
                    <li class="monsters color nocol">Pou de foudre</li>
                    <li class="monsters color nocol">Pouletergeist</li>
                    <li class="monsters color nocol">Rapace caparaçonne</li>
                    <li class="monsters color nocol">Salaad</li>
                    <li class="races color nocol">Sang-mêlé</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="classes color nocol">Rôdeur</li>
                    <li class="classes color nocol">Rôdeur</li>
                    <li class="classes color nocol">Rôdeur</li>
                    <li class="classes color nocol">Rôdeur</li>
                    <li class="classes color nocol">Rôdeur</li>
                    <li class="classes color nocol">Rôdeur</li>
                    <li class="mounts color nocol">Tapis volant</li>
                    <li class="monsters color nocol">Téléprospecteur</li>
                    <li class="monsters color nocol">Tout ptit dieu</li>
                    <li class="actions color nocol">Tricheur</li>
                    <li class="monsters color nocol">Vendeur de montures d'occasion</li>
                    <template v-for="(item, index) in munchkin5.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin5.version) !== -1) && ((munchkin5.curses && item.class.indexOf('curses') !== -1) || (munchkin5.acolytes && item.class.indexOf('acolytes') !== -1) || (munchkin5.mounts && item.class.indexOf('mounts') !== -1) || (munchkin5.classes && item.class.indexOf('classes') !== -1) || (munchkin5.races && item.class.indexOf('races') !== -1) || (munchkin5.monsters && item.class.indexOf('monsters') !== -1) || (munchkin5.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin5.version) !== -1) && all.munchkin5DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkin5DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-5-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkin5TreasuresNumber">52</span></p>
                <ol>
                    <li class="objects color nocol">Anneau de Souhait</li>
                    <li class="objects color nocol">Anneau de Souhait</li>
                    <li class="stuffs color nocol">Arbre de transmission de gnons</li>
                    <li class="stuffs color nocol">Arc de désequilibre éhonté des combats</li>
                    <li class="stuffs color nocol">Armure d'écuelles</li>
                    <li class="bonuses color nocol">Armure de plaques chauffantes</li>
                    <li class="stuffs color nocol">Armure ~~lourde~~ gourde</li>
                    <li class="bonuses color nocol">Baron de Münchkinhausen</li>
                    <li class="bonuses color nocol">Bénédiction</li>
                    <li class="stuffs color nocol">Bottes de sept dieux</li>
                    <li class="stuffs color nocol">Bouclier humain</li>
                    <li class="stuffs color nocol">Casque de l'horreur indicible et effroyablement terrifiante</li>
                    <li class="stuffs color nocol">Casque invisible</li>
                    <li class="stuffs color nocol">Cloche à gros mage</li>
                    <li class="objects color nocol">Corde de saut à l'élastique</li>
                    <li class="bonuses color nocol">Coup critique</li>
                    <li class="stuffs color nocol">Cordon d'insécurité</li>
                    <li class="stuffs color nocol">Cotte de mailles en spandex</li>
                    <li class="objects color nocol">Dé pipé</li>
                    <li class="bonuses color nocol">Deux pieds de plus</li>
                    <li class="stuffs color nocol">Diadème de dextérité suspecte</li>
                    <li class="objects color nocol">Eau gazeuse bénite</li>
                    <li class="levels color nocol">Écrire l'histoire de votre personnage</li>
                    <li class="bonuses color nocol">Enflammé</li>
                    <li class="stuffs color nocol">Épée à trois mains</li>
                    <li class="stuffs color nocol">Espadon</li>
                    <li class="stuffs color nocol">Épée courte</li>
                    <li class="levels color nocol">Faire cracher du soda par le nez au MJ</li>
                    <li class="levels color nocol">Faire rire le MJ</li>
                    <li class="bonuses color nocol">Faux ~~sein~~ saint en plastique</li>
                    <li class="stuffs color nocol">Harnois à la noix</li>
                    <li class="bonuses color nocol">Il ne peut en rester qu'un et c'est moi</li>
                    <li class="bonuses color nocol">Invitation à prendre une bière</li>
                    <li class="levels color nocol">Jeter un froid</li>
                    <li class="stuffs color nocol">Joli petit haut perforant</li>
                    <li class="bonuses color nocol">Judicieusement interchangeable</li>
                    <li class="stuffs color nocol">LA hache</li>
                    <li class="stuffs color nocol">Lame ~~vorpale~~ morfale</li>
                    <li class="stuffs color nocol">Marteau de guerre de destruction massive</li>
                    <li class="stuffs color nocol">Moulin à gruyère</li>
                    <li class="levels color nocol">Nouveau MJ crédule</li>
                    <li class="stuffs color nocol">Pantoufles de P'yen-Hu</li>
                    <li class="objects color nocol">Pierre fine aux os de poil</li>
                    <li class="bonuses color nocol">Plaque personnalisée</li>
                    <li class="bonuses color nocol">~~Port des armures légères...~~ Peur des ordres d'une mégère</li>
                    <li class="objects color nocol">Potion ~~de torero~~ d'eau de terreur</li>
                    <li class="stuffs color nocol">Poulaines</li>
                    <li class="levels color nocol">Rire des répliques empruntées par le MJ aux Monty Python</li>
                    <li class="objects color nocol">Sandwich aux épinards</li>
                    <li class="stuffs color nocol">Sceptre d'éveil Playsghoule©</li>
                    <li class="levels color nocol">Trouver l'entrée secrète</li>
                    <li class="bonuses color nocol">Tuning de monture</li>
                    <template v-for="(item, index) in munchkin5.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin5.version) !== -1) && ((munchkin5.levels && item.class.indexOf('levels') !== -1) || (munchkin5.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin5.objects && item.class.indexOf('objects') !== -1) || (munchkin5.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin5.version) !== -1) && all.munchkin5TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkin5TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-6 munchkin-all" v-bind:class="{ 'is-visible': all.munchkin6 }">
        <img class="demo" src="media/images/upload/01ec5a2846c8ecc0bc8b3fa3ad606c169c3a.jpeg" alt="Munchkin 6">
        <h2 id="munchkin-6">Munchkin 6 : Le Donjon de la Farce</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin6.filters }">
            <h3 id="munchkin-6-filtres">Filtres</h3>
            <p><button v-on:click="munchkin6ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Éditions**
                <div class="edition">
                    <p>
                        <label>
                            <input type="radio" value="nocol" v-model="munchkin6.version"> Édition originale
                        </label><br>
                        <label>
                            <input type="radio" value="color" v-model="munchkin6.version"> Seconde Édition - (Couleur)
                        </label>
                    </p>
                </div>
                **Types de carte**
                <p>
                    <label class="fields">
                        <input type="checkbox" value="on" v-model="munchkin6.fields"> Donjons (<span v-text="munchkin6DonjonsNumber">20</span>)
                    </label><br>
                    <label class="warps">
                        <input type="checkbox" value="on" v-model="munchkin6.warps"> Portails  (<span v-text="munchkin6WarpsNumber">16</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-6-details">Détails</h3>
            <p><img src="media/images/upload/m6.gif" alt="Munchkin 6"> Cette icone en bas à droite d'une carte marque l'appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>Les Portails</li>
                <li>Les Donjons</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkin6CardsNumber">36</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-6-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin6DoorsNumber">16</span></p>
                <ol>
                    <li class="warps color nocol">Éboulement</li>
                    <li class="warps color nocol">Éboulement</li>
                    <li class="warps color nocol">La fortune sourit aux gros nuls</li>
                    <li class="warps color nocol">La fortune sourit aux gros nuls</li>
                    <li class="warps color nocol">Passage étroit</li>
                    <li class="warps color nocol">Passage étroit</li>
                    <li class="warps color nocol">Tous les chemin mènent à Rome</li>
                    <li class="warps color nocol">Tous les chemin mènent à Rome</li>
                    <li class="warps color nocol">Tourner en rond</li>
                    <li class="warps color nocol">Tourner en rond</li>
                    <li class="warps color nocol">Porte secrète</li>
                    <li class="warps color nocol">Porte secrète</li>
                    <li class="warps color nocol">Donjon néttoyé !</li>
                    <li class="warps color nocol">Donjon néttoyé !</li>
                    <li class="warps color nocol">Téléportation !</li>
                    <li class="warps color nocol">Téléportation !</li>
                    <template v-for="(item, index) in munchkin6.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin6.version) !== -1) && (munchkin6.warps && item.class.indexOf('warps') !== -1) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin6.version) !== -1) && all.munchkin6DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkin6DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="donjons">
                <h3 id="munchkin-6-donjons">Donjons</h3>
                <p>Nombre total de donjons : <span v-text="munchkin6DonjonsNumber">20</span></p>
                <ol>
                    <li class="fields color nocol">Chez Joe, le donjon à prix discount !</li>
                    <li class="fields color nocol">Donjon au sol en papier tue-mouche dégueu</li>
                    <li class="fields color nocol">Donjon de l'effet manga libidineux</li>
                    <li class="fields color nocol">Donjon de la prodigalité du MD</li>
                    <li class="fields color nocol">Donjon de la révoltante mesquinerie</li>
                    <li class="fields color nocol">Donjon de la surabondance elfique</li>
                    <li class="fields color nocol">Donjon de la tricherie encore plus éhontée que d'habitude</li>
                    <li class="fields color nocol">Donjon des adversaires en guimauve</li>
                    <li class="fields color nocol">Donjon des malédictions contagieuses</li>
                    <li class="fields color nocol">Donjon des monstres militants</li>
                    <li class="fields color nocol">Donjon des morts-vivants omniprésents</li>
                    <li class="fields color nocol">Donjon des prouesses inattendues</li>
                    <li class="fields color nocol">Donjon des races ridicules</li>
                    <li class="fields color nocol">Donjon des règles d'emcombrement truquées</li>
                    <li class="fields color nocol">Donjon du butin opulent</li>
                    <li class="fields color nocol">Donjon du changement de sexe</li>
                    <li class="fields color nocol">Donjon du meurtre obligatoire</li>
                    <li class="fields color nocol">Donjon du petit effort en plus...</li>
                    <li class="fields color nocol">Donjon du talent prodigieux</li>
                    <li class="fields color nocol">Donjon du trépas létal mortel qui tue</li>
                    <template v-for="(item, index) in munchkin6.donjonsList">
                        <li v-bind:class="(item.class.indexOf(munchkin6.version) !== -1) && (munchkin6.fields && item.class.indexOf('fields') !== -1) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin6.version) !== -1) && all.munchkin6DonjonsEach[index] }">
                                <input type="checkbox" v-model="all.munchkin6DonjonsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-7-o munchkin-all" v-bind:class="{ 'is-visible': all.munchkin7o }">
        <img class="demo" src="media/images/upload/munchkin-7-et-pour-q-1372-1294056786.jpg" alt="Munchkin 7">
        <h2 id="munchkin-7-o">Munchkin 7 : Et pour quelques cartes de plus...</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin7o.filters }">
            <h3 id="munchkin-7-filtres">Filtres</h3>
            <p><button v-on:click="munchkin7oToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Éditions**
                <div class="edition">
                    <p>
                        <label>
                            <input type="radio" value="nocol" v-model="munchkin7o.version"> Édition originale
                        </label><br>
                        <label>
                            <input type="radio" value="color" v-model="munchkin7o.version"> Seconde Édition - (Couleur)
                        </label>
                    </p>
                </div>
                **Types de carte**
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin7o.bonuses"> Actions (<span v-text="munchkin7oBonusesNumber">14</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin7o.actions"> Améliorations (<span v-text="munchkin7oActionsNumber">25</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin7o.stuffs"> Équipements (<span v-text="munchkin7oStuffsNumber">3</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin7o.curses"> Malédictions (<span v-text="munchkin7oCursesNumber">3</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin7o.objects"> Objets (<span v-text="munchkin7oObjectsNumber">7</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin7o.races"> Races (<span v-text="munchkin7oRacesNumber">4</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-7-o-details">Détails</h3>
            <p><img src="media/images/upload/m7o.gif" alt="Munchkin 7"> Cette icone en bas à droite d'une carte marque l'appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>Un peu plus de triche !</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkin7oCardsNumber">56</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-7-o-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin7oDoorsNumber">32</span></p>
                <ol>
                    <li class="actions color nocol">... et ses petits copains</li>
                    <li class="actions color nocol">... et ses petits copains</li>
                    <li class="races color nocol">Chimère</li>
                    <li class="actions color nocol">Dans de beaux draps</li>
                    <li class="actions color nocol">Indiciblement...</li>
                    <li class="actions color nocol">Invisible</li>
                    <li class="curses color nocol">Malédiction! Et ne m'appelez pas Ginette</li>
                    <li class="curses color nocol">Malédiction! Expiration de garantie !</li>
                    <li class="curses color nocol">Malédiction! Peinture au plomb !</li>
                    <li class="actions color nocol">Meurtrier</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Monstre Errant</li>
                    <li class="actions color nocol">Sauvage</li>
                    <li class="actions color nocol">Séduisant(e)</li>
                    <li class="actions color nocol">Standard</li>
                    <li class="races color nocol">Sang-mêlé</li>
                    <li class="races color nocol">Sang-mêlé</li>
                    <li class="races color nocol">Sang-méli-mélo</li>
                    <li class="actions color nocol">Super Maousse Munchkin</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="actions color nocol">Super Munchkin</li>
                    <li class="actions color nocol">Tricheur !</li>
                    <li class="actions color nocol">Tricheur !</li>
                    <li class="actions color nocol">Tricheur !</li>
                    <li class="actions color nocol">Tricheur !</li>
                    <li class="actions color nocol">Tromperie dur la marchandise</li>
                    <li class="actions color nocol">Ultra Munchkin</li>
                    <li class="actions color nocol">Vraiment très...</li>
                    <li class="actions color nocol">Voleur de niveaux</li>
                    <template v-for="(item, index) in munchkin7o.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin7o.version) !== -1) && ((munchkin7o.curses && item.class.indexOf('curses') !== -1) || (munchkin7o.actions && item.class.indexOf('actions') !== -1) || (munchkin7o.classes && item.class.indexOf('classes') !== -1) || (munchkin7o.races && item.class.indexOf('races') !== -1) || (munchkin7o.monsters && item.class.indexOf('monsters') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin7o.version) !== -1) && all.munchkin7oDoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkin7oDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-7-o-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkin7oTreasuresNumber">24</span></p>
                <ol>
                    <li class="bonuses color nocol">...À coque en acier renforcé</li>
                    <li class="bonuses color nocol">...À talons aiguille</li>
                    <li class="bonuses color nocol">...Au multiples bouts pointus et tranchants</li>
                    <li class="bonuses color nocol">...Autonettoyant(e)</li>
                    <li class="bonuses color nocol">...Monté sur ressorts</li>
                    <li class="bonuses color nocol">...Perce-armure</li>
                    <li class="bonuses color nocol">...Plaqué or</li>
                    <li class="bonuses color nocol">...Renforcé(e)</li>
                    <li class="bonuses color nocol">...Thème musical</li>
                    <li class="bonuses color nocol">...Ventilé</li>
                    <li class="objects color nocol">1001 astuces de survie en donjon</li>
                    <li class="objects color nocol">Anneau de Souhait</li>
                    <li class="stuffs color nocol">Bon pour des objets gratuits</li>
                    <li class="stuffs color nocol">Costume ne laissant (quasiment) rien à l'imagination</li>
                    <li class="objects color nocol">Dé Pipé</li>
                    <li class="bonuses color nocol">Deux ~~pieds dans le même sabot~~ sabots sur le même pied</li>
                    <li class="bonuses color nocol">Oh le gros tricheuuuuuuuur!</li>
                    <li class="objects color nocol">Potion magique de transmutation d'ADN</li>
                    <li class="objects color nocol">Sou porte-bonheur</li>
                    <li class="objects color nocol">Talisman porte-bonheur</li>
                    <li class="objects color nocol">Talisman porte-bonheur</li>
                    <li class="bonuses color nocol">Triche éhontée</li>
                    <li class="bonuses color nocol">Triche éhontée</li>
                    <li class="stuffs color nocol">Trou portatif</li>
                    <template v-for="(item, index) in munchkin7o.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin7o.version) !== -1) && ((munchkin7o.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin7o.objects && item.class.indexOf('objects') !== -1) || (munchkin7o.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin7o.version) !== -1) && all.munchkin7oTreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkin7oTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-7 munchkin-all" v-bind:class="{ 'is-visible': all.munchkin7 }">
        <img class="demo" src="media/images/upload/ubimu07.png" alt="Munchkin 7">
        <h2 id="munchkin-7">Munchkin 7 : Oh le gros tricheuuuuuuuur !</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin7.filters }">
            <h3 id="munchkin-7-filtres">Filtres</h3>
            <p><button v-on:click="munchkin7ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Types de carte**
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin7.bonuses"> Actions (<span v-text="munchkin7BonusesNumber">19</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin7.actions"> Améliorations (<span v-text="munchkin7ActionsNumber">50</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin7.stuffs"> Équipements (<span v-text="munchkin7StuffsNumber">5</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkin7.levels"> Gains de Niveaux (<span v-text="munchkin7LevelsNumber">4</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin7.curses"> Malédictions (<span v-text="munchkin7CursesNumber">2</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkin7.monsters"> Monstres (<span v-text="munchkin7MonstersNumber">11</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin7.objects"> Objets (<span v-text="munchkin7ObjectsNumber">14</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin7.races"> Races (<span v-text="munchkin7RacesNumber">7</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-7-details">Détails</h3>
            <p><img src="media/images/upload/m7.gif" alt="Munchkin 7"> Cette icone en bas à droite d'une carte marque l'appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>De la triche de malade !</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkin7CardsNumber">112</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-7-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin7DoorsNumber">70</span></p>
                <ol>
                    <li class="actions color">...de l'Amour</li>
                    <li class="actions color">...avec supplément de fromage</li>
                    <li class="actions color">Acheté au prix de gros</li>
                    <li class="actions color">Alité</li>
                    <li class="actions color">Ancienne Édition</li>
                    <li class="actions color">Ancienne Édition</li>
                    <li class="actions color">Ancienne Édition</li>
                    <li class="actions color">Blindé</li>
                    <li class="races color">Chimère</li>
                    <li class="actions color">Dans de beaux draps</li>
                    <li class="actions color">Dans de beaux draps</li>
                    <li class="actions color">Deuxième round</li>
                    <li class="actions color">Édenté</li>
                    <li class="monsters color">Empreintes de pas</li>
                    <li class="actions color">Épique Junior</li>
                    <li class="actions color">Épique Junior</li>
                    <li class="actions color">Épique Junior</li>
                    <li class="actions color">Épouvantable</li>
                    <li class="actions color">Explosif</li>
                    <li class="actions color">Extraordinairement</li>
                    <li class="actions color">Extrèmement</li>
                    <li class="actions color">Foire aux monstres</li>
                    <li class="actions color">Foire aux monstres</li>
                    <li class="monsters color">Frites</li>
                    <li class="monsters color">Gérant de magasin de jeux</li>
                    <li class="actions color">Gonflé aux stéroïdes</li>
                    <li class="monsters color">Graffiti</li>
                    <li class="actions color">Inconcevablement</li>
                    <li class="actions color">Incroyablement</li>
                    <li class="actions color">Invraisemblablement</li>
                    <li class="monsters color">Linge sale</li>
                    <li class="curses color">Malédiction! Et ne m'appelez pas Ginette</li>
                    <li class="curses color">Malédiction! Le MJ fait respecter les règles !</li>
                    <li class="monsters color">Marionnette chaussette</li>
                    <li class="monsters color">Mauvais odeur</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Mort-vivant</li>
                    <li class="actions color">Mort-vivant</li>
                    <li class="actions color">Mort-vivant</li>
                    <li class="monsters color">Petits soldats en plastique</li>
                    <li class="actions color">Saoul</li>
                    <li class="races color">Sang-mêlé</li>
                    <li class="races color">Sang-mêlé</li>
                    <li class="races color">Sang-mêlé</li>
                    <li class="races color">Sang-méli-mélo</li>
                    <li class="races color">Sang-méli-mélo</li>
                    <li class="races color">Sang-méli-mélo</li>
                    <li class="monsters color">Silhouette en carton</li>
                    <li class="monsters color">Smiley</li>
                    <li class="actions color">Sournois</li>
                    <li class="actions color">Super Maousse Munchkin</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="monsters color">Télévision</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Ultra Munchkin</li>
                    <li class="actions color">Ultra Munchkin</li>
                    <li class="actions color">Ultra Munchkin</li>
                    <li class="actions color">Ultra-rare</li>
                    <li class="actions color">Velu</li>
                    <li class="actions color">Vomitivement</li>
                    <template v-for="(item, index) in munchkin7.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin7.version) !== -1) && ((munchkin7.curses && item.class.indexOf('curses') !== -1) || (munchkin7.actions && item.class.indexOf('actions') !== -1) || (munchkin7.classes && item.class.indexOf('classes') !== -1) || (munchkin7.races && item.class.indexOf('races') !== -1) || (munchkin7.monsters && item.class.indexOf('monsters') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin7.version) !== -1) && all.munchkin7DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkin7DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-7-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkin7TreasuresNumber">42</span></p>
                <ol>
                    <li class="objects color">1001 astuces de survie en donjon</li>
                    <li class="bonuses color">À revêtement en Téflon®</li>
                    <li class="bonuses color">À coque en acier renforcé</li>
                    <li class="bonuses color">À talons aiguille</li>
                    <li class="bonuses color">Au multiples bouts pointus et tranchants</li>
                    <li class="bonuses color">Autonettoyant(e)</li>
                    <li class="stuffs color">Bon pour des objets gratuits</li>
                    <li class="stuffs color">Costume ne laissant (quasiment) rien à l'imagination</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="stuffs color">Deux ~~pieds dans le même sabot~~ sabots sur le même pied</li>
                    <li class="objects color">Mites dressées</li>
                    <li class="bonuses color">Moi, je monte jusqu'à II</li>
                    <li class="bonuses color">Monté sur ressorts</li>
                    <li class="objects color">Munchkin gonflable</li>
                    <li class="levels color">Nourrir l'obsession du MJ pour les dés</li>
                    <li class="bonuses color">Oh le gros tricheuuuuuuuur!</li>
                    <li class="objects color">Parchemin de désamélioration</li>
                    <li class="bonuses color">Perce-armure</li>
                    <li class="bonuses color">Plaqué or</li>
                    <li class="objects color">Potion de taille démesurée</li>
                    <li class="objects color">Potion magique de transmutation d'ADN</li>
                    <li class="bonuses color">Pour me prendre mon jouet, il faudra l'arracher à mes mains froides et sans vie</li>
                    <li class="bonuses color">Pour me prendre mon jouet, il faudra l'arracher à mes mains froides et sans vie</li>
                    <li class="bonuses color">Pour me prendre mon jouet, il faudra l'arracher à mes mains froides et sans vie</li>
                    <li class="levels color">Retourner le cerveau du MJ</li>
                    <li class="bonuses color">Renforcé(e)</li>
                    <li class="levels color">Se réincarner sans mourir</li>
                    <li class="objects color">Sou porte-bonheur</li>
                    <li class="objects color">Talisman porte-bonheur</li>
                    <li class="objects color">Talisman porte-bonheur</li>
                    <li class="objects color">Talisman porte-bonheur</li>
                    <li class="objects color">Talisman porte-bonheur</li>
                    <li class="stuffs color">Thème musical</li>
                    <li class="bonuses color">Tonitruant</li>
                    <li class="bonuses color">Triche éhontée</li>
                    <li class="bonuses color">Triche éhontée</li>
                    <li class="bonuses color">Triche éhontée</li>
                    <li class="stuffs color">Trou portatif</li>
                    <li class="objects color">Vendre père et mère</li>
                    <li class="bonuses color">Ventilé</li>
                    <li class="levels color">Zieuter le scénario</li>
                    <template v-for="(item, index) in munchkin7.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin7.version) !== -1) && ((munchkin7.levels && item.class.indexOf('levels') !== -1) || (munchkin7.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin7.objects && item.class.indexOf('objects') !== -1) || (munchkin7.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin7.version) !== -1) && all.munchkin7TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkin7TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-8 munchkin-all" v-bind:class="{ 'is-visible': all.munchkin8 }">
        <img class="demo" src="media/images/upload/munchkin8.jpg" alt="Munchkin 8">
        <h2 id="munchkin-8">Munchkin 8 : Centaure et Sans Reproche</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkin8.filters }">
            <h3 id="munchkin-8-filtres">Filtres</h3>
            <p><button v-on:click="munchkin8ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Types de carte**
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkin8.bonuses"> Actions (<span v-text="munchkin8BonusesNumber">11</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkin8.actions"> Améliorations (<span v-text="munchkin8ActionsNumber">7</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkin8.stuffs"> Équipements (<span v-text="munchkin8StuffsNumber">22</span>)
                    </label><br>
                    <label class="acolytes">
                        <input type="checkbox" value="on" v-model="munchkin8.acolytes"> Fidèles Serviteurs (<span v-text="munchkin8AcolytesNumber">3</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkin8.levels"> Gains de Niveaux (<span v-text="munchkin8LevelsNumber">6</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkin8.curses"> Malédictions (<span v-text="munchkin8CursesNumber">14</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkin8.monsters"> Monstres (<span v-text="munchkin8MonstersNumber">24</span>)
                    </label><br>
                    <label class="mounts">
                        <input type="checkbox" value="on" v-model="munchkin8.mounts"> Montures (<span v-text="munchkin8MountsNumber">4</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkin8.objects"> Objets (<span v-text="munchkin8ObjectsNumber">6</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkin8.races"> Races (<span v-text="munchkin8RacesNumber">25</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-8-details">Détails</h3>
            <p><img src="media/images/upload/m8.gif" alt="Munchkin 8"> Cette icone en bas à droite d'une carte marque l'appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>La Race des Centaures</li>
                <li>La Race des Hommes-lézards</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkin8CardsNumber">112</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-8-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkin8DoorsNumber">77</span></p>
                <ol>
                    <li class="races color">Ancien</li>
                    <li class="races color">Ancien</li>
                    <li class="races color">Ancien</li>
                    <li class="monsters color">Accros qu'aux deals</li>
                    <li class="monsters color">~~Angle~~ Ange adroit</li>
                    <li class="monsters color">~~Angle~~ Ange droit</li>
                    <li class="monsters color">~~Angle~~ Ange obtus</li>
                    <li class="actions color">Barabare</li>
                    <li class="mounts color">Bélier de selle</li>
                    <li class="mounts color">Bouc et mystère</li>
                    <li class="races color">Centaure</li>
                    <li class="races color">Centaure</li>
                    <li class="races color">Centaure</li>
                    <li class="races color">Centaure</li>
                    <li class="races color">Centaure</li>
                    <li class="races color">Centaure</li>
                    <li class="races color">Centaure</li>
                    <li class="monsters color">Centaure Tillard</li>
                    <li class="monsters color">Cheval de bataille</li>
                    <li class="races color">D'élite</li>
                    <li class="races color">D'élite</li>
                    <li class="races color">D'élite</li>
                    <li class="monsters color">Des serpents dans le bus</li>
                    <li class="acolytes color">Fidèle serviteur Centaure</li>
                    <li class="acolytes color">Fidèle serviteur Homme-lézard</li>
                    <li class="acolytes color">Fidèle Serviteur Médium</li>
                    <li class="monsters color">Flipper le ~~Dauphin~~ Saurien</li>
                    <li class="actions color">Grincheux</li>
                    <li class="races color">Homme-lézard</li>
                    <li class="races color">Homme-lézard</li>
                    <li class="races color">Homme-lézard</li>
                    <li class="races color">Homme-lézard</li>
                    <li class="races color">Homme-lézard</li>
                    <li class="races color">Homme-lézard</li>
                    <li class="races color">Homme-lézard</li>
                    <li class="monsters color">Homme des Tavernes</li>
                    <li class="monsters color">Jockey</li>
                    <li class="monsters color">~~La nuit des morts vivants~~ L'ami des mors luisants</li>
                    <li class="monsters color">Lapin en chocolat</li>
                    <li class="monsters color">Le cavalier sans tête (et sans cheval, de surcroît)</li>
                    <li class="races color">Légendaire</li>
                    <li class="races color">Légendaire</li>
                    <li class="races color">Légendaire</li>
                    <li class="monsters color">Lézards et essais</li>
                    <li class="mounts color">Licorne de selle</li>
                    <li class="monsters color">Lord Alfred Tennis-on</li>
                    <li class="curses color">Malédiction ! Appel de la forêt</li>
                    <li class="curses color">Malédiction ! Avoine avarée !</li>
                    <li class="curses color">Malédiction ! Bobos</li>
                    <li class="curses color">Malédiction ! Curieuse impression que les choses vont mal se passer...</li>
                    <li class="curses color">Malédiction ! Dé-coiffe-é</li>
                    <li class="curses color">Malédiction ! Dérive génétique</li>
                    <li class="curses color">Malédiction! Des fourmis (géantes rouges et carnivores) dans les jambes</li>
                    <li class="curses color">Malédiction! Gasterocotte de mailles</li>
                    <li class="curses color">Malédiction ! Perte du sens de l'orientation sexuelle</li>
                    <li class="curses color">Malédiction ! Petits doigts gourds, gluants et gauches</li>
                    <li class="curses color">Malédiction ! Poussée d'incompétence</li>
                    <li class="curses color">Malédiction! Ta race !</li>
                    <li class="curses color">Malédiction! Tu n'étais *pas* l'Élu</li>
                    <li class="curses color">Malédiction! Vide !</li>
                    <li class="mounts color">Monture Complètement Speed</li>
                    <li class="actions color">Névrosé</li>
                    <li class="actions color">Obsessionnel</li>
                    <li class="monsters color">Père Glu</li>
                    <li class="actions color">Placide</li>
                    <li class="monsters color">Prince crapaud</li>
                    <li class="monsters color">Roc Star</li>
                    <li class="monsters color">Salamandre</li>
                    <li class="monsters color">Salamandre Montypythonesque</li>
                    <li class="races color">Sang-mêlé</li>
                    <li class="races color">Sang-mêlé</li>
                    <li class="monsters color">Serpent de Midgard</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="monsters color">Tikbalang</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="monsters color">Varan navrant des écrans</li>
                    <li class="mounts color">Phénix de selle</li>
                    <template v-for="(item, index) in munchkin8.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkin8.version) !== -1) && ((munchkin8.curses && item.class.indexOf('curses') !== -1) || (munchkin8.acolytes && item.class.indexOf('acolytes') !== -1) || (munchkin8.mounts && item.class.indexOf('mounts') !== -1) || (munchkin8.races && item.class.indexOf('races') !== -1) || (munchkin8.monsters && item.class.indexOf('monsters') !== -1) || (munchkin8.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin8.version) !== -1) && all.munchkin8DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkin8DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-8-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkin8TreasuresNumber">35</span></p>
                <ol>
                    <li class="levels color">À quelque chose malheur est bon</li>
                    <li class="stuffs color">Accessoires assortis</li>
                    <li class="levels color">Acheter de nouvelles figurines au MJ</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="objects color">Anneau qui donne la pêche !</li>
                    <li class="stuffs color">Appeau à cheval</li>
                    <li class="levels color">Arriver en avance à la partie</li>
                    <li class="bonuses color">Avatar</li>
                    <li class="stuffs color">Avertisseur sonore absolument pas kitsch</li>
                    <li class="stuffs color">Bardes</li>
                    <li class="stuffs color">Bottes en peau de mammifère</li>
                    <li class="levels color">Centaure et Sans Reproche</li>
                    <li class="stuffs color">Chaussures pour voyager à pinces</li>
                    <li class="stuffs color">Cotte ~~de mailles~~ d'écailles</li>
                    <li class="stuffs color">Couverture d'invisibilité</li>
                    <li class="stuffs color">Cravache enragée</li>
                    <li class="objects color">Dé pipé</li>
                    <li class="objects color">Dé ultrapipé</li>
                    <li class="stuffs color">Encensoir de censure</li>
                    <li class="stuffs color">Halo</li>
                    <li class="stuffs color">Lance et casque magiques</li>
                    <li class="stuffs color">Marmite de cassoulet William Saurien</li>
                    <li class="stuffs color">Masse à ailettes</li>
                    <li class="stuffs color">Mattraque du matin...</li>
                    <li class="stuffs color">Mattraque du soir...</li>
                    <li class="stuffs color">Oeillères</li>
                    <li class="stuffs color">Plumes de cheval</li>
                    <li class="stuffs color">Pull-over de Noël</li>
                    <li class="levels color">Regarder des films de monstres japonais</li>
                    <li class="stuffs color">Serpent ~~à sonnette~~ des toilettes</li>
                    <li class="objects color">Sirop des Râles</li>
                    <li class="objects color">Sirop des vrais bonhommes</li>
                    <li class="levels color">Trahir le groupe</li>
                    <li class="stuffs color">Truc sphérique, pointu et sacré</li>
                    <li class="stuffs color">Turbo</li>
                    <template v-for="(item, index) in munchkin8.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkin8.version) !== -1) && ((munchkin8.levels && item.class.indexOf('levels') !== -1) || (munchkin8.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkin8.objects && item.class.indexOf('objects') !== -1) || (munchkin8.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkin8.version) !== -1) && all.munchkin8TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkin8TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-n munchkin-all" v-bind:class="{ 'is-visible': all.munchkinN }">
        <img class="demo" src="media/images/upload/ubimub01.png" alt="Munchkin : Petit Papa Munchkin">
        <h2 id="munchkin-n">Munchkin : Petit Papa Munchkin</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinN.filters }">
            <h3 id="munchkin-n-filtres">Filtres</h3>
            <p><button v-on:click="munchkinNToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Types de carte**
                <p>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinN.actions"> Améliorations (<span v-text="munchkinNActionsNumber">8</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinN.stuffs"> Équipements (<span v-text="munchkinNStuffsNumber">19</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinN.levels"> Gains de Niveaux (<span v-text="munchkinNLevelsNumber">3</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinN.curses"> Malédictions (<span v-text="munchkinNCursesNumber">2</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinN.monsters"> Monstres (<span v-text="munchkinNMonstersNumber">26</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinN.objects"> Objets (<span v-text="munchkinNObjectsNumber">2</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-n-details">Détails</h3>
            <p>
            <img style="float: none;" src="media/images/upload/n1.gif" alt="Munchkin : Petit Papa Munchkin">
            <img style="float: none;" src="media/images/upload/n2.gif" alt="Munchkin : Petit Papa Munchkin">
            <img style="float: none;" src="media/images/upload/n3.gif" alt="Munchkin : Petit Papa Munchkin">
            <img style="float: none;" src="media/images/upload/n4.gif" alt="Munchkin : Petit Papa Munchkin">
            </p>
            <p>Les icones précédentes en bas à droite d'une carte marque l'appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>Les Vilains et Gentils</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkinNCardsNumber">60</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-n-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinNDoorsNumber">36</span></p>
                <ol>
                    <li class="actions color">... armé d'une bûche de Noël</li>
                    <li class="monsters color">Aides du père Noël</li>
                    <li class="monsters color">Ange de Bonté (mais aux manières un tantinet brutales)</li>
                    <li class="monsters color">Anti-Noël</li>
                    <li class="monsters color">Bergers allemands</li>
                    <li class="monsters color">Bon Anges de Neige</li>
                    <li class="monsters color">Casse-noisette</li>
                    <li class="monsters color">Camelot de Noěl</li>
                    <li class="monsters color">Dinde de Noël</li>
                    <li class="monsters color">Esprits de Noël</li>
                    <li class="monsters color">Éléphant blanc</li>
                    <li class="actions color">Gentil</li>
                    <li class="actions color">Gentil</li>
                    <li class="monsters color">Jouets défectueux</li>
                    <li class="actions color">Joyeux</li>
                    <li class="monsters color">Krampus</li>
                    <li class="monsters color">L'enfant au (satané bon sang d')Tambour (qui casse les oreilles)</li>
                    <li class="monsters color">Le Crado de Noël</li>
                    <li class="monsters color">Le Vent d'Hiver</li>
                    <li class="monsters color">Les p'tits rennes qui voient rouge</li>
                    <li class="monsters color">Les trois rois mafieux</li>
                    <li class="curses color">Malédiction : ~~Joyeux~~ Facheux Noël</li>
                    <li class="curses color">Malédiction ! Pas la bonne taille !</li>
                    <li class="monsters color">Mère Noël</li>
                    <li class="monsters color">Perce oreilles</li>
                    <li class="monsters color">Père Noël</li>
                    <li class="monsters color">Petits chanteurs à la Noix de Bois</li>
                    <li class="monsters color">Petit tambour</li>
                    <li class="monsters color">Pôle Mords Express</li>
                    <li class="actions color">Police des vacances</li>
                    <li class="monsters color">Sapin de Noël</li>
                    <li class="monsters color">Scrooge</li>
                    <li class="monsters color">Spectre ~~du Noël présent~~ des présents de Noël</li>
                    <li class="actions color">Quand on perd Noël...</li>
                    <li class="actions color">Vilain</li>
                    <li class="actions color">Vilain</li>
                    <template v-for="(item, index) in munchkinN.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinN.version) !== -1) && ((munchkinN.curses && item.class.indexOf('curses') !== -1) || (munchkinN.mounts && item.class.indexOf('mounts') !== -1) || (munchkinN.races && item.class.indexOf('races') !== -1) || (munchkinN.monsters && item.class.indexOf('monsters') !== -1) || (munchkinN.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinN.version) !== -1) && all.munchkinNDoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinNDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-n-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinNTreasuresNumber">24</span></p>
                <ol>
                    <li class="levels color">Affrontez les fêtes de faim damnée</li>
                    <li class="levels color">Avec tes souhaits par milliers</li>
                    <li class="stuffs color">Boîte à chaussures</li>
                    <li class="stuffs color">Bottes de neige</li>
                    <li class="stuffs color">Bottes de Père Noël</li>
                    <li class="objects color">Boule de neige</li>
                    <li class="stuffs color">Boulet de ~~canon~~ charbon</li>
                    <li class="stuffs color">Cane à sucre (d'orge)</li>
                    <li class="stuffs color">Cake au fruit un tout petit peu rassis, mais vraiment un tout petit peu</li>
                    <li class="stuffs color">Chandelle festive</li>
                    <li class="stuffs color">Chausson de Noël</li>
                    <li class="stuffs color">Chapeau de Père Noël</li>
                    <li class="stuffs color">Chapeau de Renne</li>
                    <li class="objects color">Coincé dans la cheminée</li>
                    <li class="stuffs color">Écharpe</li>
                    <li class="stuffs color">Étoile de Noël</li>
                    <li class="levels color">Lait de poule très légèrement alcoolisé</li>
                    <li class="stuffs color">Mât de Cocagne qui cogne</li>
                    <li class="stuffs color">Mon beau gourdin</li>
                    <li class="stuffs color">Mon petit soulier (innocent et parfaitement inoffensif, promis)</li>
                    <li class="stuffs color">Ôôôô tannen bombe, ôôô tannen bombe...</li>
                    <li class="stuffs color">Pagne en Guirlande</li>
                    <li class="stuffs color">Papier crado</li>
                    <li class="stuffs color">Pic ~~à~~ de glace</li>
                    <template v-for="(item, index) in munchkinN.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinN.version) !== -1) && ((munchkinN.levels && item.class.indexOf('levels') !== -1) || (munchkinN.objects && item.class.indexOf('objects') !== -1) || (munchkinN.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinN.version) !== -1) && all.munchkinNTreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinNTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-m munchkin-all" v-bind:class="{ 'is-visible': all.munchkinM }">
        <img class="demo" src="media/images/upload/ubimub2.png" alt="Munchkinomicon">
        <h2 id="munchkin-m">Munchkinomicon</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinM.filters }">
            <h3 id="munchkin-m-filtres">Filtres</h3>
            <p><button v-on:click="munchkinMToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Types de carte**
                <p>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinM.actions"> Améliorations (<span v-text="munchkinMActionsNumber">17</span>)
                    </label><br>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinM.bonuses"> Actions (<span v-text="munchkinMBonusesNumber">1</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinM.classes"> Classes (<span v-text="munchkinMClassesNumber">1</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinM.stuffs"> Équipements (<span v-text="munchkinMStuffsNumber">4</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinM.levels"> Gains de Niveaux (<span v-text="munchkinMLevelsNumber">2</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinM.curses"> Malédictions (<span v-text="munchkinMCursesNumber">1</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinM.monsters"> Monstres (<span v-text="munchkinMMonstersNumber">3</span>)
                    </label><br>
                    <label class="munchkinomicon">
                        <input type="checkbox" value="on" v-model="munchkinM.munchkinomicon"> Munchkinomicon (<span v-text="munchkinMMunchkinomiconNumber">1</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinM.objects"> Objets (<span v-text="munchkinMObjectsNumber">6</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkinM.races"> Races (<span v-text="munchkinMRacesNumber">10</span>)
                    </label><br>
                    <label class="spells">
                        <input type="checkbox" value="on" v-model="munchkinM.spells"> Sorts (<span v-text="munchkinMSpellsNumber">14</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-m-details">Détails</h3>
            <p>
            <img style="float: none;" src="media/images/upload/mm.gif" alt="Munchkinomicon">
            <img style="float: none;" src="media/images/upload/mm1.gif" alt="Munchkinomicon">
            <img style="float: none;" src="media/images/upload/mm2.gif" alt="Munchkinomicon">
            <img style="float: none;" src="media/images/upload/mm3.gif" alt="Munchkinomicon">
            </p>
            <p>Les icones précédentes en bas à droite d'une carte marque l'appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>Le Munchkinomicon</li>
                <li>Les Sorts</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkinMCardsNumber">60</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-m-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinMDoorsNumber">32</span></p>
                <ol>
                    <li class="actions color">... et ses petits copains</li>
                    <li class="actions color">... et ses petits copains</li>
                    <li class="actions color">De Hollywood</li>
                    <li class="races color">Elfe</li>
                    <li class="actions color">Enragé</li>
                    <li class="monsters color">Golem de savon</li>
                    <li class="classes color">Guerrier</li>
                    <li class="races color">Haut</li>
                    <li class="races color">Haut</li>
                    <li class="races color">Haut</li>
                    <li class="actions color">Indiciblement</li>
                    <li class="actions color">Invisible</li>
                    <li class="monsters color">Jeanne d'Orque</li>
                    <li class="races color">Maître</li>
                    <li class="races color">Maître</li>
                    <li class="races color">Maître</li>
                    <li class="curses color">Malédiction ! Condamné par le Destin !</li>
                    <li class="actions color">Meurtrier</li>
                    <li class="actions color">Miniature</li>
                    <li class="monsters color">Peau de vache de la cour de récré</li>
                    <li class="actions color">Plein de préjugés</li>
                    <li class="actions color">Sauvage</li>
                    <li class="actions color">Séduisant(e)</li>
                    <li class="races color">Sombre</li>
                    <li class="races color">Sombre</li>
                    <li class="races color">Sombre</li>
                    <li class="actions color">Standard</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tromperie sur la marchandise</li>
                    <li class="actions color">Ultime</li>
                    <li class="actions color">Voleur de niveaux</li>
                    <li class="actions color">Vraiment très...</li>
                    <template v-for="(item, index) in munchkinM.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinM.version) !== -1) && ((munchkinM.curses && item.class.indexOf('curses') !== -1) || (munchkinM.classes && item.class.indexOf('classes') !== -1) || (munchkinM.races && item.class.indexOf('races') !== -1) || (munchkinM.monsters && item.class.indexOf('monsters') !== -1) || (munchkinM.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinM.version) !== -1) && all.munchkinMDoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinMDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-m-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinMTreasuresNumber">14</span></p>
                <ol>
                    <li class="stuffs color">Bottes de pas de deux</li>
                    <li class="bonuses color">Chutte de rochers : pas de survivant</li>
                    <li class="objects color">Dé ultrapipé</li>
                    <li class="objects color">Dé ultrapipé</li>
                    <li class="objects color">Dé ultrapipé</li>
                    <li class="objects color">Dé ultrapipé</li>
                    <li class="stuffs color">Enclume</li>
                    <li class="stuffs color">Greffier Griffu Grognon à une main</li>
                    <li class="munchkinomicon color">Munchkinomicon</li>
                    <li class="objects color">Potion d'éructation déplacée</li>
                    <li class="objects color">Potion de continuité rétroactive</li>
                    <li class="levels color">Recalculez vos XP</li>
                    <li class="stuffs color">Tondeuse à gazon</li>
                    <li class="levels color">Un coup de polsh sur le matos !</li>
                    <template v-for="(item, index) in munchkinM.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinM.version) !== -1) && ((munchkinM.levels && item.class.indexOf('levels') !== -1) || (munchkinM.munchkinomicon && item.class.indexOf('munchkinomicon') !== -1) || (munchkinM.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinM.objects && item.class.indexOf('objects') !== -1) || (munchkinM.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinM.version) !== -1) && all.munchkinMTreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinMTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
             <div class="books">
                <h3 id="munchkin-m-books">Sorts</h3>
                <p>Nombre total de sorts : <span v-text="munchkinMSpellsNumber">14</span></p>
                <ol>
                    <li class="spells color">À vot' bon coeur !</li>
                    <li class="spells color">Gloire contagieuse</li>
                    <li class="spells color">Hachoir occulte</li>
                    <li class="spells color">Invocation de horde</li>
                    <li class="spells color">Invocation du livre</li>
                    <li class="spells color">Le pouvoir par la terreur</li>
                    <li class="spells color">La Crypte de Zyvakomanksébo</li>
                    <li class="spells color">Marque-page</li>
                    <li class="spells color">Mettez-y un peu du vôtre</li>
                    <li class="spells color">Monstre, je t'ordonne de paraître !</li>
                    <li class="spells color">Ni vu ni connu j't'embrouille</li>
                    <li class="spells color">Résurrection</li>
                    <li class="spells color">Sortilèche</li>
                    <li class="spells color">Un pour tous, tous pour moi</li>
                    <template v-for="(item, index) in munchkinM.spellsList">
                        <li v-bind:class="(item.class.indexOf(munchkinM.version) !== -1) && (munchkinM.spells && item.class.indexOf('spells') !== -1) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinM.version) !== -1) && all.munchkinMSpellsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinMSpellsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-st munchkin-all" v-bind:class="{ 'is-visible': all.munchkinSt }">
        <img class="demo" src="media/images/upload/ubism01.png" alt="Star Munchkin">
        <h2 id="munchkin-st">Star Munchkin</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinSt.filters }">
            <h3 id="munchkin-st-filtres">Filtres</h3>
            <p><button v-on:click="munchkinStToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Types de carte**
                <p>
                    <label class="acolytes">
                        <input type="checkbox" value="on" v-model="munchkinSt.acolytes"> Acolytes (Serviteurs) (<span v-text="munchkinStAcolytesNumber">8</span>)
                    </label><br>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinSt.bonuses"> Actions (<span v-text="munchkinStBonusesNumber">4</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinSt.actions"> Améliorations (<span v-text="munchkinStActionsNumber">13</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinSt.classes"> Classes (<span v-text="munchkinStClassesNumber">12</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinSt.stuffs"> Équipements (<span v-text="munchkinStStuffsNumber">40</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinSt.levels"> Gains de Niveaux (<span v-text="munchkinStLevelsNumber">10</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinSt.monsters"> Monstres (<span v-text="munchkinStMonstersNumber">36</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinSt.curses"> Pièges (Malédictions) (<span v-text="munchkinStCursesNumber">15</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkinSt.races"> Races (<span v-text="munchkinStRacesNumber">9</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinSt.objects"> Objets (<span v-text="munchkinStObjectsNumber">21</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-st-details">Détails</h3>
            <p>Sont apparut avec ce jeu :</p>
            <ul>
                <li>Les Acolytes (similaire aux Fidèles Serviteurs)</li>
                <li>Les Pièges (similaire aux Malédictions)</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkinStCardsNumber">168</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-st-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinStDoorsNumber">93</span></p>
                <ol>
                    <li class="acolytes color">Acolyte Assistant(e) Sexy</li>
                    <li class="acolytes color">Acolyte Androïde</li>
                    <li class="acolytes color">Acolyte Cible Vivante</li>
                    <li class="acolytes color">Acolyte Cible Vivante</li>
                    <li class="acolytes color">Acolyte Extra-Terrestre Sonore et Velu</li>
                    <li class="acolytes color">Acolyte Fidèle Robot</li>
                    <li class="acolytes color">Acolyte Petit Génie</li>
                    <li class="acolytes color">Acolyte Voleur</li>
                    <li class="actions color">...d'une Autre Dimension</li>
                    <li class="actions color">...et son Clone</li>
                    <li class="monsters color">Affreux Machin Vert</li>
                    <li class="monsters color">Amazone de l'Espace</li>
                    <li class="monsters color">Astrorat Musqué Pirate de l'Espace</li>
                    <li class="monsters color">Bimbo Bionique</li>
                    <li class="monsters color">Blob</li>
                    <li class="monsters color">Boule de Poils</li>
                    <li class="monsters color">Boule de Poils à Dents de Sabre</li>
                    <li class="monsters color">Capitaine Beurk</li>
                    <li class="monsters color">Cerveau en Bocal</li>
                    <li class="monsters color">Chaise</li>
                    <li class="classes color">Chasseur de Primes</li>
                    <li class="classes color">Chasseur de Primes</li>
                    <li class="classes color">Chasseur de Primes</li>
                    <li class="monsters color">Chose sur laquelle les Yeux de l'Homme ne devraient Point se Poser</li>
                    <li class="monsters color">Cow-Boy de l'Espace</li>
                    <li class="monsters color">Créatures Minuscules mais Incroyablement Avancées</li>
                    <li class="actions color">Cybernétique</li>
                    <li class="races color">Cyborg</li>
                    <li class="races color">Cyborg</li>
                    <li class="races color">Cyborg</li>
                    <li class="monsters color">Étoile ~~de mer~~ de l'Espace...</li>
                    <li class="monsters color">Être de Pensée Impure</li>
                    <li class="races color">Félin</li>
                    <li class="races color">Félin</li>
                    <li class="races color">Félin</li>
                    <li class="monsters color">Fourmis Géantes</li>
                    <li class="monsters color">Frank le Tank Facétieux</li>
                    <li class="monsters color">Géant Gazeux</li>
                    <li class="monsters color">Jarre Jarre</li>
                    <li class="monsters color">L'Étrange Créature du Lac Rose</li>
                    <li class="monsters color">L'Horreur aux Mille Yeux (Comptez pas, on vous dit...)</li>
                    <li class="monsters color">La Chèvre de Monsieur Spock</li>
                    <li class="actions color">Le Dernier de sa Race</li>
                    <li class="monsters color">Le Grand Cthulhu</li>
                    <li class="monsters color">Massacrobot</li>
                    <li class="actions color">Miniature</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="races color">Mutan</li>
                    <li class="races color">Mutan</li>
                    <li class="races color">Mutan</li>
                    <li class="classes color">Négociant Interstellaire</li>
                    <li class="classes color">Négociant Interstellaire</li>
                    <li class="classes color">Négociant Interstellaire</li>
                    <li class="monsters color">Parasite Facial Extrêmement Attachant</li>
                    <li class="monsters color">Petits Gris</li>
                    <li class="monsters color">Petit Homme Vert</li>
                    <li class="curses color">Piège ! Accident de Téléportation</li>
                    <li class="curses color">Piège ! Amnésie</li>
                    <li class="curses color">Piège ! Antimatière</li>
                    <li class="curses color">Piège ! Bonbons Extra-Terrestres</li>
                    <li class="curses color">Piège ! Déversement Accidentel de Produits Chimiques (et accessoirement mutagènes)</li>
                    <li class="curses color">Piège ! Éruption Solaire</li>
                    <li class="curses color">Piège ! Expérience Extra-Terestre</li>
                    <li class="curses color">Piège ! Inversion de Chromosome</li>
                    <li class="curses color">Piège ! Inversion de la Gravité</li>
                    <li class="curses color">Piège ! Monofilament</li>
                    <li class="curses color">Piège ! Ouvre-Boîte</li>
                    <li class="curses color">Piège ! Poulpisateur</li>
                    <li class="curses color">Piège ! Régression Génétique</li>
                    <li class="curses color">Piège ! Touillage de Cerveau</li>
                    <li class="monsters color">Plasmoïde</li>
                    <li class="monsters color">Plante Carnivore</li>
                    <li class="monsters color">Pshérif Psi</li>
                    <li class="classes color">Psi</li>
                    <li class="classes color">Psi</li>
                    <li class="classes color">Psi</li>
                    <li class="actions color">Radioactif</li>
                    <li class="monsters color">Robalayeur</li>
                    <li class="actions color">Sang-Mêlé</li>
                    <li class="actions color">Sang-Mêlé</li>
                    <li class="classes color">Savant Fou</li>
                    <li class="classes color">Savant Fou</li>
                    <li class="classes color">Savant Fou</li>
                    <li class="monsters color">Sonde Spatiale</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="monsters color">Tank O.G.R.E.</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="monsters color">Vampire de l'Espace</li>
                    <li class="monsters color">Verminator</li>
                    <li class="monsters color">Virus Informatique</li>
                    <li class="monsters color">Yip</li>
                    <template v-for="(item, index) in munchkinSt.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinSt.version) !== -1) && ((munchkinSt.curses && item.class.indexOf('curses') !== -1) || (munchkinSt.acolytes && item.class.indexOf('acolytes') !== -1) || (munchkinSt.races && item.class.indexOf('races') !== -1) || (munchkinSt.classes && item.class.indexOf('classes') !== -1) || (munchkinSt.monsters && item.class.indexOf('monsters') !== -1) || (munchkinSt.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinSt.version) !== -1) && all.munchkinStDoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinStDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-st-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinStTreasuresNumber">75</span></p>
                <ol>
                    <li class="bonuses color">"J'ai une meilleure offre..."</li>
                    <li class="objects color">"Nous venons en paix... juré craché !"</li>
                    <li class="stuffs color">Amplificateur Mental (avec caisson de basses psychiques)</li>
                    <li class="stuffs color">Antennes à Ressort</li>
                    <li class="stuffs color">Armure Énergétique</li>
                    <li class="stuffs color">Armure de Combat</li>
                    <li class="stuffs color">Baguette Paralysante</li>
                    <li class="stuffs color">Bananoventilolaser</li>
                    <li class="stuffs color">Bobaser</li>
                    <li class="objects color">Boite de Schrödinger</li>
                    <li class="objects color">Bombe Sangsue</li>
                    <li class="stuffs color">Bottes à Propulsion</li>
                    <li class="stuffs color">Bottes Magnétiques</li>
                    <li class="levels color">Bouton Innocemment Dégrafé</li>
                    <li class="bonuses color">Casier d'Armes</li>
                    <li class="stuffs color">Casque Bulle</li>
                    <li class="stuffs color">Chamé de Stupidité</li>
                    <li class="objects color">Champ de Stase</li>
                    <li class="stuffs color">Cimeterre Photonique</li>
                    <li class="stuffs color">Combinaison Spatiale en Cellophane</li>
                    <li class="objects color">Coupons de Réduction</li>
                    <li class="stuffs color">Dazer</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="objects color">Dénoument Inattendu</li>
                    <li class="stuffs color">Dents en Diamantoïde</li>
                    <li class="stuffs color">Électro-Combinaison</li>
                    <li class="objects color">Fausse Carte d'Identité</li>
                    <li class="stuffs color">Fouet Neuronal</li>
                    <li class="bonuses color">Fourrière Intergalactique</li>
                    <li class="objects color">Gaz de Contrôle Mental</li>
                    <li class="objects color">Grenade à Flash très Intense (bronzage au 3ème degré garanti)</li>
                    <li class="objects color">Grenade à la Bierre Secouée</li>
                    <li class="objects color">Grenade à Nanomachines Hallucinogènes</li>
                    <li class="objects color">Grenade à Virus Vibratoire</li>
                    <li class="objects color">Grenade Gerbante à Plasma Sonique</li>
                    <li class="objects color">Gros Bouton Rouge</li>
                    <li class="levels color">Illumination Cosmique</li>
                    <li class="stuffs color">Interface de Piratage Cybernétique</li>
                    <li class="stuffs color">Laser</li>
                    <li class="stuffs color">Laser</li>
                    <li class="stuffs color">Lunettes à Rayons X</li>
                    <li class="stuffs color">Maser</li>
                    <li class="stuffs color">Mécha-Na-P</li>
                    <li class="objects color">Médikit</li>
                    <li class="objects color">Médikit</li>
                    <li class="stuffs color">Mitrailleuse de Queue</li>
                    <li class="levels color">Monolithe</li>
                    <li class="stuffs color">Mutation Digitocéphale</li>
                    <li class="levels color">Oblitération Totale de Planète Pacifique</li>
                    <li class="stuffs color">Orbe de Prédiction</li>
                    <li class="stuffs color">Orteils Préhensiles</li>
                    <li class="stuffs color">Pacificateur Low-Tech</li>
                    <li class="stuffs color">Paraboles de Détection</li>
                    <li class="stuffs color">Partenaire Symbiote</li>
                    <li class="bonuses color">Pelote de Laine</li>
                    <li class="levels color">Piratage Informatique</li>
                    <li class="stuffs color">Pistolet à Rayons R</li>
                    <li class="stuffs color">Pistolet à Plop !</li>
                    <li class="stuffs color">Pistolet Décérébrant pour Décérébré</li>
                    <li class="levels color">Préter vos Bandes Dessinées au MJ</li>
                    <li class="levels color">Préter vos Vidéos au MJ</li>
                    <li class="stuffs color">Razer</li>
                    <li class="objects color">Rhum Dénébien</li>
                    <li class="stuffs color">Robochien</li>
                    <li class="stuffs color">Ruban de Scotch</li>
                    <li class="stuffs color">Shmazer</li>
                    <li class="levels color">Serum du Super-Soldat</li>
                    <li class="levels color">Soutenir le MJ à Coup d'Arguments Scientifiques Bidon</li>
                    <li class="objects color">Time Warp</li>
                    <li class="objects color">Time Warp</li>
                    <li class="stuffs color">Toutou Extra-Terrestre</li>
                    <li class="stuffs color">Tronço-Gants</li>
                    <li class="stuffs color">Vibrolame</li>
                    <li class="levels color">Visite de Votre Double du Futur</li>
                    <template v-for="(item, index) in munchkinSt.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinSt.version) !== -1) && ((munchkinSt.levels && item.class.indexOf('levels') !== -1) || (munchkinSt.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinSt.objects && item.class.indexOf('objects') !== -1) || (munchkinSt.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinSt.version) !== -1) && all.munchkinStTreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinStTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-st-2 munchkin-all" v-bind:class="{ 'is-visible': all.munchkinSt2 }">
        <img class="demo" src="media/images/upload/ubism02.png" alt="Star Munchkin 2">
        <h2 id="munchkin-st-2">Star Munchkin 2 : La Guerre des Clowns</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinSt2.filters }">
            <h3 id="munchkin-st-2-filtres">Filtres</h3>
            <p><button v-on:click="munchkinSt2ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Types de carte**
                <p>
                    <label class="acolytes">
                        <input type="checkbox" value="on" v-model="munchkinSt2.acolytes"> Acolytes (Serviteurs) (<span v-text="munchkinSt2AcolytesNumber">5</span>)
                    </label><br>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinSt2.bonuses"> Actions (<span v-text="munchkinSt2BonusesNumber">7</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinSt2.actions"> Améliorations (<span v-text="munchkinSt2ActionsNumber">13</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinSt2.classes"> Classes (<span v-text="munchkinSt2ClassesNumber">8</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinSt2.stuffs"> Équipements (<span v-text="munchkinSt2StuffsNumber">20</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinSt2.levels"> Gains de Niveaux (<span v-text="munchkinSt2LevelsNumber">7</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinSt2.monsters"> Monstres (<span v-text="munchkinSt2MonstersNumber">27</span>)
                    </label><br>
                    <label class="rooms">
                        <input type="checkbox" value="on" v-model="munchkinSt2.rooms"> Pièces (<span v-text="munchkinSt2RoomsNumber">6</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinSt2.curses"> Pièges (Malédictions) (<span v-text="munchkinSt2CursesNumber">6</span>)
                    </label><br>
                    <label class="races">
                        <input type="checkbox" value="on" v-model="munchkinSt2.races"> Races (<span v-text="munchkinSt2RacesNumber">7</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinSt2.objects"> Objets (<span v-text="munchkinSt2ObjectsNumber">6</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-st-2-details">Détails</h3>
            <p><img src="media/images/upload/st2.gif" alt="Star Munchkin 2"> Cette icone en bas à droite d'une carte marque l'appartenance à cette extension. Sont apparut avec cette extension :</p>
            <ul>
                <li>Les Pièces</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkinSt2CardsNumber">112</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-st-2-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinSt2DoorsNumber">72</span></p>
                <ol>
                    <li class="acolytes color">Acolyte Cible Vivante</li>
                    <li class="acolytes color">Acolyte Le Professeur</li>
                    <li class="acolytes color">Acolyte Ralph le Super Chien</li>
                    <li class="acolytes color">Acolyte Petite Soeur</li>
                    <li class="acolytes color">Acolyte Tadboulons</li>
                    <li class="monsters color">Ambassadeur Bourdon</li>
                    <li class="monsters color">Bob Ascète</li>
                    <li class="monsters color">Cadettes de Star-Flirt</li>
                    <li class="classes color">Chasseur de Primes</li>
                    <li class="monsters color">Cantatrice de Space Opera</li>
                    <li class="monsters color">Clowntrooper</li>
                    <li class="monsters color">Cosplayer un Poil (voire plusieurs poils) trop Enthousiaste</li>
                    <li class="races color">Cyborg</li>
                    <li class="monsters color">Dark Cador, le Musichien de l'Espace</li>
                    <li class="monsters color">Elvis Bicéphale de l'Espace</li>
                    <li class="actions color">Erreur de Continuité</li>
                    <li class="monsters color">Esprit de Ruche</li>
                    <li class="races color">Félin</li>
                    <li class="actions color">Fou</li>
                    <li class="actions color">Je suis ton Père !</li>
                    <li class="monsters color">Jumeau de Télétransporteur</li>
                    <li class="monsters color">La Pince de l'Espace</li>
                    <li class="monsters color">Le Mec aux Oreilles Factices</li>
                    <li class="monsters color">Le Zéro Absolu</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="races color">Insectoïde</li>
                    <li class="races color">Insectoïde</li>
                    <li class="races color">Insectoïde</li>
                    <li class="races color">Insectoïde</li>
                    <li class="monsters color">L'Oeil Électrique</li>
                    <li class="monsters color">La Momie de l'Espace</li>
                    <li class="monsters color">La Raclette Maléfique de la Voie Lactée</li>
                    <li class="monsters color">Le Cruel et Crapuleux Dr Cranedechrome</li>
                    <li class="monsters color">Miss Île</li>
                    <li class="races color">Mutant</li>
                    <li class="monsters color">Nain Rouge</li>
                    <li class="monsters color">Nana peu Farouches de Films de Série Bzzzz</li>
                    <li class="classes color">Négociant Interstellaire</li>
                    <li class="monsters color">Offres Spatiales : Soldes Monstres</li>
                    <li class="rooms color">Pièce : Boudoir Extra-Terrestre</li>
                    <li class="rooms color">Pièce : Cantina</li>
                    <li class="rooms color">Pièce : Compacteur à Ordures</li>
                    <li class="rooms color">Pièce : Dehors</li>
                    <li class="rooms color">Pièce : Laboratoire</li>
                    <li class="rooms color">Pièce : Salle de Bain Extra-Terrestre</li>
                    <li class="curses color">Piège ! Big Bang</li>
                    <li class="curses color">Piège ! Champ Inhibiteur</li>
                    <li class="curses color">Piège ! Désintégration Spontanée</li>
                    <li class="curses color">Piège ! Jet d'Acide</li>
                    <li class="curses color">Piège ! Le Plus Pernicieux des Pièges Jamais Conçus</li>
                    <li class="curses color">Piège ! Trou Noir</li>
                    <li class="monsters color">Pingouins Tueurs</li>
                    <li class="actions color">Polymorphe</li>
                    <li class="classes color">Psi</li>
                    <li class="monsters color">Ptérodactyle Fractal</li>
                    <li class="monsters color">Public Volatil</li>
                    <li class="actions color">Sang-Mêlé</li>
                    <li class="classes color">Savant Fou</li>
                    <li class="actions color">Super-Munchkin</li>
                    <li class="classes color">Ranger de l'Espace</li>
                    <li class="classes color">Ranger de l'Espace</li>
                    <li class="classes color">Ranger de l'Espace</li>
                    <li class="classes color">Ranger de l'Espace</li>
                    <li class="monsters color">RDC</li>
                    <li class="actions color">Télépathe</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="monsters color">Ultra-Violette</li>
                    <li class="actions color">Victime d'une Terrible Méprise</li>
                    <li class="actions color">Vide</li>
                    <li class="actions color">Vide</li>
                    <li class="monsters color">XQWZZMP</li>
                    <template v-for="(item, index) in munchkinSt2.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinSt2.version) !== -1) && ((munchkinSt2.rooms && item.class.indexOf('rooms') !== -1) || (munchkinSt2.curses && item.class.indexOf('curses') !== -1) || (munchkinSt2.acolytes && item.class.indexOf('acolytes') !== -1) || (munchkinSt2.races && item.class.indexOf('races') !== -1) || (munchkinSt2.classes && item.class.indexOf('classes') !== -1) || (munchkinSt2.monsters && item.class.indexOf('monsters') !== -1) || (munchkinSt2.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinSt2.version) !== -1) && all.munchkinSt2DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinSt2DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-st-2-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinSt2TreasuresNumber">40</span></p>
                <ol>
                    <li class="levels color">Amélioration des Micro-Chloridiens</li>
                    <li class="levels color">Astronourriture</li>
                    <li class="stuffs color">Autofuite 1000</li>
                    <li class="bonuses color">Aux Effets Spéciaux Améliorés</li>
                    <li class="bonuses color">Animation Suspendue</li>
                    <li class="objects color">Bombe Intelligente</li>
                    <li class="stuffs color">Canon à Plasma</li>
                    <li class="stuffs color">Casque Psi</li>
                    <li class="stuffs color">Ceinture d'Astéroïdes</li>
                    <li class="levels color">Charabia Technologique</li>
                    <li class="stuffs color">Complexe Exoskeleton</li>
                    <li class="stuffs color">Complexe Gratte-Dos Extra-Terrestre</li>
                    <li class="stuffs color">Complexe Laser Optique</li>
                    <li class="stuffs color">Complexe Le ~~Pont~~ Front de l'Enterprise</li>
                    <li class="stuffs color">Cravatou Barada Nikto</li>
                    <li class="levels color">Dans l'Espace, Personne ne vous Entend Tricher</li>
                    <li class="levels color">Découverte d'une Nouvelle Forme de Vie</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="levels color">Écrire les Caractéristiques de son Personnage en Base 8</li>
                    <li class="bonuses color">Édition Spéciale du Director's Cut</li>
                    <li class="bonuses color">Expérimental</li>
                    <li class="stuffs color">Fil de la Trame Spatio-Temporelle</li>
                    <li class="levels color">Gagner la Reconnaissance de toutes les Races Intelligentes de l'Univers</li>
                    <li class="objects color">Grenade Multiplicatrice</li>
                    <li class="objects color">Grenade au Yaourt Parfumé au Nacho</li>
                    <li class="objects color">Grenade Ouvre-Boîte</li>
                    <li class="stuffs color">Lampe ~~Torche~~ Chalumeau</li>
                    <li class="stuffs color">Lance-Boulettes Perce-Armure à Tête Chercheuse</li>
                    <li class="stuffs color">Laser à Rayons X</li>
                    <li class="stuffs color">Laser à Commande Digitale</li>
                    <li class="stuffs color">Minces Rubans Judicieusement Placés</li>
                    <li class="stuffs color">Peinture Verte</li>
                    <li class="stuffs color">Pulvérilaser</li>
                    <li class="bonuses color">Ramper par les Conduits d'Aération</li>
                    <li class="stuffs color">Roues Rétractables</li>
                    <li class="stuffs color">Télécommande de Porte de Garage</li>
                    <li class="stuffs color">Tronçobottes</li>
                    <li class="bonuses color">Vide</li>
                    <li class="bonuses color">Vide</li>
                    <template v-for="(item, index) in munchkinSt2.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinSt2.version) !== -1) && ((munchkinSt2.levels && item.class.indexOf('levels') !== -1) || (munchkinSt2.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinSt2.objects && item.class.indexOf('objects') !== -1) || (munchkinSt2.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinSt2.version) !== -1) && all.munchkinSt2TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinSt2TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-su munchkin-all" v-bind:class="{ 'is-visible': all.munchkinSu }">
        <img class="demo" src="media/images/upload/super_munchkin_Boite.jpg" alt="Super Munchkin">
        <h2 id="munchkin-su">Super Munchkin</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinSu.filters }">
            <h3 id="munchkin-su-filtres">Filtres</h3>
            <p><button v-on:click="munchkinSuToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Types de carte**
                <p>
                    <label class="acolytes">
                        <input type="checkbox" value="on" v-model="munchkinSu.acolytes" v-on:click="munchkinSuAcolytesGroup()"> Acolytes (Serviteurs) (<span v-text="munchkinSuAcolytesNumber + munchkinSuSlavesNumber">6</span>)
                    </label><br>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinSu.bonuses"> Actions (<span v-text="munchkinSuBonusesNumber">6</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinSu.actions"> Améliorations (<span v-text="munchkinSuActionsNumber">12</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinSu.classes"> Classes (<span v-text="munchkinSuClassesNumber">12</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinSu.stuffs"> Équipements (<span v-text="munchkinSuStuffsNumber">37</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinSu.levels"> Gains de Niveaux (<span v-text="munchkinSuLevelsNumber">8</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinSu.monsters"> Monstres (<span v-text="munchkinSuMonstersNumber">39</span>)
                    </label><br>
                    <label class="origins">
                        <input type="checkbox" value="on" v-model="munchkinSu.origins"> Origines (<span v-text="munchkinSuOriginsNumber">6</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinSu.curses"> Pièges (Malédictions) (<span v-text="munchkinSuCursesNumber">14</span>)
                    </label><br>
                    <label class="powers">
                        <input type="checkbox" value="on" v-model="munchkinSu.powers"> Pouvoirs (<span v-text="munchkinSuPowersNumber">20</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinSu.objects"> Objets (<span v-text="munchkinSuObjectsNumber">8</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-m-details">Détails</h3>
            <p>Sont apparut avec ce jeu :</p>
            <ul>
                <li>Les Pouvoirs</li>
                <li>Les Origins</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkinSuCardsNumber">168</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-su-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinSuDoorsNumber">106</span></p>
                <ol>
                    <li class="actions color">"Il n'était pas vraiment mort..."</li>
                    <li class="powers color">2D</li>
                    <li class="acolytes color">Acolytes : Ami Imaginaire</li>
                    <li class="acolytes color">Acolytes : Femme reporter pleine d'aplomb</li>
                    <li class="acolytes color">Acolytes : Gamin doté des mêmes Pouvoirs</li>
                    <li class="monsters color">Agent du Fisc</li>
                    <li class="monsters color">Anonyman</li>
                    <li class="powers color">Aura Radioactive</li>
                    <li class="monsters color">Balèzman</li>
                    <li class="monsters color">Baron Bidon</li>
                    <li class="powers color">Caméléon</li>
                    <li class="monsters color">Captain Corrosion</li>
                    <li class="powers color">Charisme</li>
                    <li class="monsters color">Chasseur de Frime</li>
                    <li class="monsters color">Clicman</li>
                    <li class="origins color">Contact avec une Idole Mystérieuse</li>
                    <li class="powers color">Corps Vachement Résistant (mais un truc de ouf, Quoi...)</li>
                    <li class="actions color">Costume moins Naze que le Vôtre</li>
                    <li class="powers color">Cri Supersonique</li>
                    <li class="monsters color">D'autres voyous mous du genou</li>
                    <li class="monsters color">Dangerousse Girl</li>
                    <li class="powers color">Décolleté Foudroyant</li>
                    <li class="actions color">Dirigeant d'un Petit Pays d'Europe</li>
                    <li class="monsters color">Docteur Abiquitor</li>
                    <li class="monsters color">Docteur Halitos</li>
                    <li class="actions color">Duplicato-Rayon</li>
                    <li class="powers color">Élasticité</li>
                    <li class="classes color">Exotique</li>
                    <li class="classes color">Exotique</li>
                    <li class="classes color">Exotique</li>
                    <li class="origins color">Expérience du Gouvernement qui à mal Tourné</li>
                    <li class="monsters color">Explosiman</li>
                    <li class="powers color">Flammes</li>
                    <li class="monsters color">Glandouilleman</li>
                    <li class="monsters color">Godzillarbre</li>
                    <li class="powers color">Griffes</li>
                    <li class="monsters color">Gamins pénibles</li>
                    <li class="monsters color">Gerbeman</li>
                    <li class="monsters color">Grand type qui bouffe les planètes</li>
                    <li class="monsters color">Héros de l'Ancienne République Soviétique</li>
                    <li class="monsters color">Horde d'Aliens Baveux</li>
                    <li class="powers color">Hypnotisme</li>
                    <li class="origins color">Immergé dans une substance étrange</li>
                    <li class="actions color">Irrésistible tendance à Laisser des Indices</li>
                    <li class="powers color">Invisibilité</li>
                    <li class="actions color">Kidnapping de votre Tante Marge</li>
                    <li class="monsters color">L'Armée sans Visage</li>
                    <li class="monsters color">L'Imposteur</li>
                    <li class="monsters color">La Vachouette Landaise du Dr Alain Therville</li>
                    <li class="monsters color">Le Big Boss</li>
                    <li class="monsters color">Le Spaminator</li>
                    <li class="monsters color">Le Tueur à Gags</li>
                    <li class="monsters color">Marc Delabête, le Grizzly-Garou de l'Apocalypse</li>
                    <li class="monsters color">Matériel-de-Bureau-Man</li>
                    <li class="monsters color">Miss Intello</li>
                    <li class="monsters color">Miss Wonder-Chépaquoi</li>
                    <li class="monsters color">Mister DCA, spécialiste en Tir aux Super-Pigeons</li>
                    <li class="monsters color">Mister Incompris</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="origins color">Mordu par un Chihuahua Radioactif</li>
                    <li class="classes color">Mutan</li>
                    <li class="classes color">Mutan</li>
                    <li class="classes color">Mutan</li>
                    <li class="classes color">Mystique</li>
                    <li class="classes color">Mystique</li>
                    <li class="classes color">Mystique</li>
                    <li class="origins color">Orteil écrasé</li>
                    <li class="monsters color">Piaf Man</li>
                    <li class="curses color">Piège ! Bégonia Mangeurs d'Hommes</li>
                    <li class="curses color">Piège ! Changement de Scénariste</li>
                    <li class="curses color">Piège ! Condamnation pour trouble sur la voie publique</li>
                    <li class="curses color">Piège ! Couictonite</li>
                    <li class="curses color">Piège ! Démasqué !</li>
                    <li class="curses color">Piège ! Dinosaure</li>
                    <li class="curses color">Piège ! Falaise Incroyablement Fragile</li>
                    <li class="curses color">Piège ! Immondes Produits Chimiques</li>
                    <li class="curses color">Piège ! Mixeur à Superhéros</li>
                    <li class="curses color">Piège ! Péril Invisible</li>
                    <li class="curses color">Piège ! Propulsé dans l'Espace</li>
                    <li class="curses color">Piège ! Réacteur Nucléaire</li>
                    <li class="curses color">Piège ! Robot Compresseur</li>
                    <li class="curses color">Piège ! Un sort pire que la mort</li>
                    <li class="monsters color">Professeur Onsley Jell</li>
                    <li class="origins color">Radio tombée dans la Baignoire</li>
                    <li class="powers color">Rafale Psi</li>
                    <li class="monsters color">Rayon de la Morve</li>
                    <li class="powers color">Rayons Oculaires</li>
                    <li class="powers color">Rot Supersonique</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="actions color">Super-Tricheur !</li>
                    <li class="monsters color">Supervers-Man</li>
                    <li class="powers color">Supervitesse</li>
                    <li class="classes color">Techno</li>
                    <li class="classes color">Techno</li>
                    <li class="classes color">Techno</li>
                    <li class="powers color">Téléportation</li>
                    <li class="monsters color">Toujours des voyous mous du genou</li>
                    <li class="monsters color">Triple Idiot</li>
                    <li class="powers color">Vision à Rayons X</li>
                    <li class="powers color">Vol</li>
                    <li class="actions color">Votre Ennemi Juré</li>
                    <li class="monsters color">Voyous mous du genou</li>
                    <li class="monsters color">Wonder Bimbo</li>
                    <li class="powers color">Wonder Bras</li>
                    <template v-for="(item, index) in munchkinSu.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinSu.version) !== -1) && ((munchkinSu.curses && item.class.indexOf('curses') !== -1) || (munchkinSu.acolytes && item.class.indexOf('acolytes') !== -1) || (munchkinSu.origins && item.class.indexOf('origins') !== -1) || (munchkinSu.classes && item.class.indexOf('classes') !== -1) || (munchkinSu.powers && item.class.indexOf('powers') !== -1) || (munchkinSu.monsters && item.class.indexOf('monsters') !== -1) || (munchkinSu.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinSu.version) !== -1) && all.munchkinSuDoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinSuDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-su-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinSuTreasuresNumber">62</span></p>
                <ol>
                    <li class="bonuses color">"Tu peux être sûr qu'ils vont faire une suite..."</li>
                    <li class="slaves color">Acolyte Voiture Parlante</li>
                    <li class="slaves color">Acolyte Double Robotique</li>
                    <li class="slaves color">Acolyte Singe avec un costume comme le votre</li>
                    <li class="stuffs color">Aimant Géant</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="stuffs color">Anneau Lazérospidouilleur</li>
                    <li class="stuffs color">Armure à la Limite de la Décence</li>
                    <li class="stuffs color">Armure Ailée</li>
                    <li class="stuffs color">Armure en Cristal</li>
                    <li class="stuffs color">Bagette Magique</li>
                    <li class="stuffs color">Balai à Chiottes</li>
                    <li class="stuffs color">Balai à Réaction</li>
                    <li class="stuffs color">Basket à Ventouses</li>
                    <li class="stuffs color">Batte Mobile</li>
                    <li class="stuffs color">Batteur Électrique</li>
                    <li class="stuffs color">Bottes pour Shooter</li>
                    <li class="stuffs color">Boum-rang</li>
                    <li class="objects color">Café Noir</li>
                    <li class="stuffs color">Cape</li>
                    <li class="stuffs color">Casque Électropsychique</li>
                    <li class="stuffs color">Ceinture Multi-Usage</li>
                    <li class="stuffs color">Club de Golf</li>
                    <li class="stuffs color">Couettes Préhensiles</li>
                    <li class="stuffs color">Costume Peint à même la Peau</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="stuffs color">Déguisement d'individu sans Histoire</li>
                    <li class="stuffs color">Détecteur de Vilains</li>
                    <li class="objects color">Effroyable Machine de Mort et de Destruction</li>
                    <li class="bonuses color">Évasion organisée</li>
                    <li class="stuffs color">Haltères</li>
                    <li class="bonuses color">Incohérence de Scénario</li>
                    <li class="stuffs color">La Torche (contondante) de la Liberté</li>
                    <li class="bonuses color">Labo Secret</li>
                    <li class="stuffs color">Montre-Radio Légère Pratique et Maniable</li>
                    <li class="stuffs color">Obsession Délirante</li>
                    <li class="objects color">Pavé de Bonnes Intentions</li>
                    <li class="stuffs color">Permis de Démolir</li>
                    <li class="bonuses color">Petit Raté Vestimentaire</li>
                    <li class="stuffs color">Pistolet à Grappin</li>
                    <li class="stuffs color">Pistolet Extra-Terrestre qui fait Pschiiiiiiiiwww</li>
                    <li class="stuffs color">Psycho-Électrodes</li>
                    <li class="stuffs color">QG : En Orbite</li>
                    <li class="stuffs color">QG : Grotte Secrète</li>
                    <li class="stuffs color">QG en Solde</li>
                    <li class="stuffs color">Sandales Ailées</li>
                    <li class="stuffs color">Skate en Molybdène</li>
                    <li class="stuffs color">Super Armure</li>
                    <li class="stuffs color">Super Bouclier</li>
                    <li class="objects color">Super Sérum</li>
                    <li class="stuffs color">Télézapinateur</li>
                    <li class="bonuses color">Version d'un Univers Alternatif</li>
                    <li class="objects color">Violation de Copyright</li>
                    <li class="levels color">Acheter une Figurine au MJ</li>
                    <li class="levels color">Adaptation en Film</li>
                    <li class="levels color">Caleçon par-dessus le Pantalon</li>
                    <li class="levels color">Colère du Juste</li>
                    <li class="levels color">Recherches dans un Magasin de Comics</li>
                    <li class="levels color">Récompense d'un montant Inconcevable</li>
                    <li class="levels color">Nouveau Costume</li>
                    <li class="levels color">Meurtre Accidentel d'un Acolyte</li>
                    <template v-for="(item, index) in munchkinSu.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinSu.version) !== -1) && ((munchkinSu.slaves && item.class.indexOf('slaves') !== -1) || (munchkinSu.levels && item.class.indexOf('levels') !== -1) || (munchkinSu.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinSu.objects && item.class.indexOf('objects') !== -1) || (munchkinSu.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinSu.version) !== -1) && all.munchkinSuTreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinSuTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-z munchkin-all" v-bind:class="{ 'is-visible': all.munchkinZ }">
        <img class="demo" src="media/images/upload/ubimz01.png" alt="Munchkin Zombies">
        <h2 id="munchkin-z">Munchkin Zombies</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinZ.filters }">
            <h3 id="munchkin-z-filtres">Filtres</h3>
            <p><button v-on:click="munchkinZToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Types de carte**
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinZ.bonuses"> Actions (<span v-text="munchkinZBonusesNumber">8</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinZ.actions"> Améliorations (<span v-text="munchkinZActionsNumber">13</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinZ.stuffs"> Équipements (<span v-text="munchkinZStuffsNumber">40</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinZ.levels"> Gains de Niveaux (<span v-text="munchkinZLevelsNumber">11</span>)
                    </label><br>
                    <label class="mojos">
                        <input type="checkbox" value="on" v-model="munchkinZ.mojos"> Mojos (<span v-text="munchkinZMojosNumber">9</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinZ.monsters"> Monstres (<span v-text="munchkinZMonstersNumber">38</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinZ.curses"> Malédictions (<span v-text="munchkinZCursesNumber">20</span>)
                    </label><br>
                    <label class="powers">
                        <input type="checkbox" value="on" v-model="munchkinZ.powers"> Pouvoirs (<span v-text="munchkinZPowersNumber">15</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinZ.objects"> Objets (<span v-text="munchkinZObjectsNumber">14</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-z-details">Détails</h3>
            <p>Sont apparut avec ce jeu :</p>
            <ul>
                <li>Les Mojos</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkinZCardsNumber">168</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-z-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinZDoorsNumber">95</span></p>
                <ol>
                    <li class="monsters color">3872 Bin-Ork-Lards</li>
                    <li class="monsters color">Adepte de l'Herbe qui Vide la Tête</li>
                    <li class="actions color">Au Volant d'un Rouleau Compresseur</li>
                    <li class="actions color">Avec un Gros Sifflet</li>
                    <li class="actions color">Attrape-Cerveau</li>
                    <li class="monsters color">Baby-Sitter</li>
                    <li class="monsters color">Barista</li>
                    <li class="actions color">Bodybuildé</li>
                    <li class="monsters color">Boucher</li>
                    <li class="monsters color">Bureaucrate Zombie</li>
                    <li class="monsters color">Cannibale</li>
                    <li class="monsters color">Cheftaine Scout (aux méthodes de vente un tantinet agressives)</li>
                    <li class="monsters color">Chihuahua Zombie</li>
                    <li class="monsters color">Concierge</li>
                    <li class="powers color">Costaud</li>
                    <li class="powers color">Costaud</li>
                    <li class="powers color">Costaud</li>
                    <li class="powers color">Coriace</li>
                    <li class="powers color">Coriace</li>
                    <li class="monsters color">Croque-Mort</li>
                    <li class="powers color">Furtif</li>
                    <li class="powers color">Furtif</li>
                    <li class="powers color">Futé</li>
                    <li class="powers color">Futé</li>
                    <li class="powers color">Futé</li>
                    <li class="monsters color">Gang de Bikers</li>
                    <li class="monsters color">Glandeur</li>
                    <li class="monsters color">Golfeur</li>
                    <li class="monsters color">Héros de Film d'Action</li>
                    <li class="actions color">Inconscient</li>
                    <li class="monsters color">Infirmière</li>
                    <li class="monsters color">La Dame de la Cafet'</li>
                    <li class="monsters color">Livreur de Pizza</li>
                    <li class="curses color">Malédiction ! Arrêt de Mort</li>
                    <li class="curses color">Malédiction ! Article(s) de la Mort</li>
                    <li class="curses color">Malédiction ! Bière et Paix</li>
                    <li class="curses color">Malédiction ! Bobooooooooo</li>
                    <li class="curses color">Malédiction ! C'est Chauuuuuud !</li>
                    <li class="curses color">Malédiction ! Capital Décès</li>
                    <li class="curses color">Malédiction ! Cerveauuuuuuu !</li>
                    <li class="curses color">Malédiction ! De l'eaaaaauuuuuuu</li>
                    <li class="curses color">Malédiction ! Doberman très Attaché</li>
                    <li class="curses color">Malédiction ! Double Mojo</li>
                    <li class="curses color">Malédiction ! Double Mojo</li>
                    <li class="curses color">Malédiction ! Feinté par un Mannequin</li>
                    <li class="curses color">Malédiction ! Fourmis</li>
                    <li class="curses color">Malédiction ! Jeuuunoooooot !</li>
                    <li class="curses color">Malédiction ! Les Bras vous en tombent</li>
                    <li class="curses color">Malédiction ! Locooooooo !</li>
                    <li class="curses color">Malédiction ! Mais où aviez-vous la Tête ?</li>
                    <li class="curses color">Malédiction ! Mort à l'arrivée (et au départ aussi)</li>
                    <li class="curses color">Malédiction ! Perplexité Cadaverique</li>
                    <li class="curses color">Malédiction ! Tue par-dessus Quête</li>
                    <li class="actions color">Maniant un Fusil</li>
                    <li class="actions color">Maniant un Fusil à Canon Double</li>
                    <li class="actions color">Maniant une Tondeuse à Gazon</li>
                    <li class="monsters color">Manifestante</li>
                    <li class="monsters color">Mascotte</li>
                    <li class="monsters color">Mère de Famille</li>
                    <li class="monsters color">Monsieur tout le Monde</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="monsters color">Ninja</li>
                    <li class="monsters color">Nonne</li>
                    <li class="monsters color">Percepteur</li>
                    <li class="monsters color">Petit Gamin Mignon</li>
                    <li class="monsters color">Poivrot</li>
                    <li class="monsters color">Pompier</li>
                    <li class="monsters color">Postier</li>
                    <li class="monsters color">Présentateur de Jeu Télévisé</li>
                    <li class="powers color">Putrescent</li>
                    <li class="powers color">Putrescent</li>
                    <li class="powers color">Rapide</li>
                    <li class="powers color">Rapide</li>
                    <li class="powers color">Rapide</li>
                    <li class="monsters color">Requin Zombie</li>
                    <li class="monsters color">Sécurité de l'Aéroport</li>
                    <li class="monsters color">Shérif du Comté</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="monsters color">Type en Chemise Hawaïenne</li>
                    <li class="monsters color">Vendeur de Voiture d'Occasion</li>
                    <li class="monsters color">Zombie de l'Administration</li>
                    <li class="mojos color">Zombie Nucléaire</li>
                    <li class="mojos color">Zombie Nucléaire</li>
                    <li class="mojos color">Zombie Nucléaire</li>
                    <li class="mojos color">Zombie Pestiféré</li>
                    <li class="mojos color">Zombie Pestiféré</li>
                    <li class="mojos color">Zombie Pestiféré</li>
                    <li class="mojos color">Zombie Vaudou</li>
                    <li class="mojos color">Zombie Vaudou</li>
                    <li class="mojos color">Zombie Vaudou</li>
                    <li class="monsters color">Zombiologiste</li>
                    <template v-for="(item, index) in munchkinZ.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinZ.version) !== -1) && ((munchkinZ.curses && item.class.indexOf('curses') !== -1) || (munchkinZ.powers && item.class.indexOf('powers') !== -1) || (munchkinZ.mojos && item.class.indexOf('mojos') !== -1) || (munchkinZ.monsters && item.class.indexOf('monsters') !== -1) || (munchkinZ.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinZ.version) !== -1) && all.munchkinZDoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinZDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-z-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinZTreasuresNumber">73</span></p>
                <ol>
                    <li class="bonuses color">À son Corps Défendant</li>
                    <li class="levels color">Allez les Pourris !</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="objects color">Astuces pour Survivre à une Invasion de Zombies</li>
                    <li class="stuffs color">Barrière Grillagée</li>
                    <li class="stuffs color">Bâton à Ressort</li>
                    <li class="levels color">Bi-Zombie</li>
                    <li class="levels color">Blague Humerus-Tique</li>
                    <li class="stuffs color">Blanche Armure de Porcelaine</li>
                    <li class="stuffs color">Boîte aux Lettres</li>
                    <li class="stuffs color">Borne Anti-Incendie</li>
                    <li class="stuffs color">Bras</li>
                    <li class="objects color">Brique</li>
                    <li class="stuffs color">Boule de Bowling</li>
                    <li class="objects color">Bouteille d'Acide</li>
                    <li class="stuffs color">Cabane à Oiseaux</li>
                    <li class="bonuses color">Cachette Idéale</li>
                    <li class="stuffs color">Canettes de Soda</li>
                    <li class="stuffs color">Casserole</li>
                    <li class="levels color">Cerveaauuux !</li>
                    <li class="stuffs color">Chariot de Supermarché</li>
                    <li class="objects color">Chat Furibard</li>
                    <li class="stuffs color">Chaussures de Pointure</li>
                    <li class="bonuses color">Clef au Bras (un poil brutale)</li>
                    <li class="levels color">Conseils Diététiques</li>
                    <li class="stuffs color">Côte de Porc</li>
                    <li class="stuffs color">Coupe de Bowling</li>
                    <li class="stuffs color">Crachat Contaminé</li>
                    <li class="stuffs color">Cravate en Papier Tue-Mouche</li>
                    <li class="stuffs color">Crocs</li>
                    <li class="levels color">Croque-Madame</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="levels color">En-Cas Diététique</li>
                    <li class="bonuses color">En Feu</li>
                    <li class="stuffs color">Fétiche</li>
                    <li class="bonuses color">Fuite des Cerveaux</li>
                    <li class="stuffs color">Graisse en Putréfaction</li>
                    <li class="stuffs color">Griffes Phosphorescentes</li>
                    <li class="stuffs color">Gueule Béante</li>
                    <li class="stuffs color">Guirlande de Noël</li>
                    <li class="objects color">~~Intestin Grêle~~ Grêle d'intestins</li>
                    <li class="stuffs color">Jambe</li>
                    <li class="stuffs color">Jouet Tape-à-l'Oeil</li>
                    <li class="levels color">La Main sur le ~~Berceau~~ Cerveau</li>
                    <li class="stuffs color">Langue Fourchue</li>
                    <li class="stuffs color">Longs Doigts Osseux</li>
                    <li class="objects color">Main Armée (pour les attaques éponymes)</li>
                    <li class="stuffs color">Mauvais Oeil</li>
                    <li class="stuffs color">Os de Mort-Bon-Vivant</li>
                    <li class="stuffs color">Panneau de Stop</li>
                    <li class="stuffs color">Parapluie</li>
                    <li class="bonuses color">Patin à Roulettes</li>
                    <li class="stuffs color">Pelle de Fossoyeur</li>
                    <li class="stuffs color">Piège à Rat</li>
                    <li class="stuffs color">Portière de Voiture</li>
                    <li class="stuffs color">Pots de Fleur</li>
                    <li class="stuffs color">Punaises</li>
                    <li class="levels color">Repas Chaud (comme la braise)</li>
                    <li class="levels color">S'Attaquer à l'Homme de Tête</li>
                    <li class="stuffs color">Singe Domestique</li>
                    <li class="bonuses color">Sosie Moisi</li>
                    <li class="stuffs color">Superglou, la Colle qui Colle ~~à Mort~~ les Morts</li>
                    <li class="objects color">Tête de Clown</li>
                    <li class="objects color">Tête de Lard</li>
                    <li class="stuffs color">Tripes qui Agrippent</li>
                    <li class="stuffs color">Un Autre Zombie</li>
                    <li class="stuffs color">Un Bras et une Jambe</li>
                    <li class="bonuses color">Une Cervelle pour Deux</li>
                    <li class="objects color">Vieux Restes</li>
                    <li class="levels color">Visite au Musée</li>
                    <li class="objects color">Vinyl Vintage</li>
                    <li class="stuffs color">Votre propre Pancreas et/ou votre Rate</li>
                    <li class="objects color">Zombies</li>
                    <template v-for="(item, index) in munchkinZ.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinZ.version) !== -1) && ((munchkinZ.levels && item.class.indexOf('levels') !== -1) || (munchkinZ.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinZ.objects && item.class.indexOf('objects') !== -1) || (munchkinZ.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinZ.version) !== -1) && all.munchkinZTreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinZTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-z-2 munchkin-all" v-bind:class="{ 'is-visible': all.munchkinZ2 }">
        <img class="demo" src="media/images/upload/ubimz02.png" alt="Munchkin Zombies 2">
        <h2 id="munchkin-z-2">Munchkin Zombies 2 : Ça zigouille à tour de bras !</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinZ2.filters }">
            <h3 id="munchkin-z-2-filtres">Filtres</h3>
            <p><button v-on:click="munchkinZ2ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Types de carte**
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinZ2.bonuses"> Actions (<span v-text="munchkinZ2BonusesNumber"></span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinZ2.actions"> Améliorations (<span v-text="munchkinZ2ActionsNumber"></span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinZ2.stuffs"> Équipements (<span v-text="munchkinZ2StuffsNumber"></span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinZ2.levels"> Gains de Niveaux (<span v-text="munchkinZ2LevelsNumber"></span>)
                    </label><br>
                    <label class="mojos">
                        <input type="checkbox" value="on" v-model="munchkinZ2.mojos"> Mojos (<span v-text="munchkinZ2MojosNumber"></span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinZ2.monsters"> Monstres (<span v-text="munchkinZ2MonstersNumber"></span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinZ2.curses"> Malédictions (<span v-text="munchkinZ2CursesNumber"></span>)
                    </label><br>
                    <label class="powers">
                        <input type="checkbox" value="on" v-model="munchkinZ2.powers"> Pouvoirs (<span v-text="munchkinZ2PowersNumber"></span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinZ2.objects"> Objets (<span v-text="munchkinZ2ObjectsNumber"></span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-z-2-details">Détails</h3>
            <p><img src="media/images/upload/mz2.gif" alt="Munchkin Zombies 2"> Cette icone en bas à droite d'une carte marque l'appartenance à cette extension.</p>
            <p>**Nombre total de cartes : <span v-text="munchkinZ2CardsNumber">112</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-z-2-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinZ2DoorsNumber">66</span></p>
                <ol>
                    <li class="powers color">Affamé</li>
                    <li class="powers color">Affamé</li>
                    <li class="powers color">Affamé</li>
                    <li class="actions color">Au Dernier ~~Rang~~ Range</li>
                    <li class="actions color">Au Téléphone</li>
                    <li class="monsters color">Batte-Man</li>
                    <li class="monsters color">Bébé Zombie</li>
                    <li class="monsters color">Bibliothécaire</li>
                    <li class="actions color">Cerveauphage</li>
                    <li class="monsters color">Chirurgien du Dimanche</li>
                    <li class="monsters color">Conducteur de Cyclopousse</li>
                    <li class="powers color">Coriace</li>
                    <li class="powers color">Costaud</li>
                    <li class="monsters color">Diplômée de l'Unversité</li>
                    <li class="actions color">Doté du Pouvoir de la Science !</li>
                    <li class="actions color">Double Mojo</li>
                    <li class="monsters color">Fermier</li>
                    <li class="powers color">Furtif</li>
                    <li class="powers color">Futé</li>
                    <li class="monsters color">Imposteur Zombie</li>
                    <li class="monsters color">Joueur de Basket</li>
                    <li class="monsters color">Joueur de Hockey</li>
                    <li class="monsters color">Joueur ~~de~~ Zombie</li>
                    <li class="curses color">Malédiction ! À Corps Perdu...</li>
                    <li class="curses color">Malédiction ! Complètement Creuvé !</li>
                    <li class="curses color">Malédiction ! Fuite des Cerveaux</li>
                    <li class="curses color">Malédiction ! Garroooooooot !</li>
                    <li class="curses color">Malédiction ! Kesakoooooooo !</li>
                    <li class="curses color">Malédiction ! Noyauuuuuuux !</li>
                    <li class="curses color">Malédiction ! Ostrogoths !</li>
                    <li class="curses color">Malédiction ! Travaaaaaaaaux !</li>
                    <li class="curses color">Malédiction ! Traversée du Ciment</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="monsters color">Orang-Outan</li>
                    <li class="actions color">Pas de Cerveau, pas de Bobo</li>
                    <li class="monsters color">Pierroooooooot !</li>
                    <li class="monsters color">Politicard</li>
                    <li class="monsters color">Prof de Mécanique</li>
                    <li class="powers color">Putrescent</li>
                    <li class="actions color">Qu'a du Cran</li>
                    <li class="monsters color">Pervenche</li>
                    <li class="monsters color">Plombier</li>
                    <li class="monsters color">Prof de Sport</li>
                    <li class="powers color">Rapide</li>
                    <li class="monsters color">Représentant en Feux d'Artifice</li>
                    <li class="monsters color">Reporter</li>
                    <li class="actions color">Robin des Doigts</li>
                    <li class="monsters color">Skateur de l'Extrême</li>
                    <li class="monsters color">Sosie d'Elvis Zombie</li>
                    <li class="monsters color">Soubrette</li>
                    <li class="monsters color">Survivant</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="monsters color">Végétalienne</li>
                    <li class="monsters color">Vieille Dame aux Chats</li>
                    <li class="monsters color">Vieux Grincheux</li>
                    <li class="actions color">Zombie qui (se) Déchire</li>
                    <li class="mojos color">Zombie Rafistolé</li>
                    <li class="mojos color">Zombie Rafistolé</li>
                    <li class="mojos color">Zombie Rafistolé</li>
                    <li class="mojos color">Zombie Rafistolé</li>
                    <li class="mojos color">Zombie Nucléaire</li>
                    <li class="mojos color">Zombie Pestiféré</li>
                    <li class="mojos color">Zombie Vaudou</li>
                    <template v-for="(item, index) in munchkinZ2.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinZ2.version) !== -1) && ((munchkinZ2.curses && item.class.indexOf('curses') !== -1) || (munchkinZ2.powers && item.class.indexOf('powers') !== -1) || (munchkinZ2.mojos && item.class.indexOf('mojos') !== -1) || (munchkinZ2.monsters && item.class.indexOf('monsters') !== -1) || (munchkinZ2.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinZ2.version) !== -1) && all.munchkinZ2DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinZ2DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-z-2-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinZ2TreasuresNumber">46</span></p>
                <ol>
                    <li class="stuffs color">Abat-Jour</li>
                    <li class="levels color">Alimentation Riche</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="stuffs color">~~Attaché-case~~ Attaché-Crève</li>
                    <li class="stuffs color">Baguette à Bulles</li>
                    <li class="objects color">Billes</li>
                    <li class="stuffs color">Bois de Cerf</li>
                    <li class="stuffs color">Bonne Vieille Planche des Familles</li>
                    <li class="levels color">Ça à un Goût de Poulet</li>
                    <li class="levels color">Ça Zigouille à Tour de Bras !</li>
                    <li class="stuffs color">Cactus</li>
                    <li class="stuffs color">Cercueil</li>
                    <li class="objects color">Champaaaaaaagne !</li>
                    <li class="stuffs color">Chaussures de Bowling</li>
                    <li class="stuffs color">Chemise de Bowling</li>
                    <li class="stuffs color">Compteur Geiger</li>
                    <li class="stuffs color">Cou à Rallonge</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="objects color">Dé Ultrapipé</li>
                    <li class="objects color">Dentier Mécanique</li>
                    <li class="bonuses color">Des Richesses dépassant vos Rêves les plus Fou !</li>
                    <li class="levels color">Devine qui vient (te) manger ce soir !</li>
                    <li class="levels color">Équilibre Alimentaire</li>
                    <li class="objects color">Fluide d'Embaumement</li>
                    <li class="objects color">Fluide d'Embrasement</li>
                    <li class="stuffs color">Fourche</li>
                    <li class="stuffs color">Girouette</li>
                    <li class="stuffs color">Gros Doigts</li>
                    <li class="levels color">La Mort vous vas si Bien</li>
                    <li class="stuffs color">Langue Préhensile</li>
                    <li class="objects color">Lingo d'Or</li>
                    <li class="stuffs color">Mauvaise Haleine</li>
                    <li class="stuffs color">Mouche de Combat</li>
                    <li class="stuffs color">Moto</li>
                    <li class="stuffs color">Narguilé</li>
                    <li class="stuffs color">Pancarte d'homme-sandwich</li>
                    <li class="objects color">Piège à Ours</li>
                    <li class="stuffs color">Pierre Tombale</li>
                    <li class="stuffs color">Poisson</li>
                    <li class="stuffs color">Poubelles en Feu</li>
                    <li class="levels color">Restauration Rapide</li>
                    <li class="bonuses color">Réutilisation, Recyclage, Réanimation</li>
                    <li class="stuffs color">Sabre de Samouraï</li>
                    <li class="stuffs color">Sourire de Winner</li>
                    <li class="stuffs color">Tête Chercheuse</li>
                    <li class="stuffs color">Tuyau d'Arrosage</li>
                    <template v-for="(item, index) in munchkinZ2.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinZ2.version) !== -1) && ((munchkinZ2.levels && item.class.indexOf('levels') !== -1) || (munchkinZ2.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinZ2.objects && item.class.indexOf('objects') !== -1) || (munchkinZ2.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinZ2.version) !== -1) && all.munchkinZ2TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinZ2TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-c munchkin-all" v-bind:class="{ 'is-visible': all.munchkinC }">
        <img class="demo" src="media/images/upload/b28668707a5461de055da1bb129d18f368b4.jpeg" alt="Munchkin Cthulhu">
        <h2 id="munchkin-c">Munchkin Cthulhu</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinC.filters }">
            <h3 id="munchkin-c-filtres">Filtres</h3>
            <p><button v-on:click="munchkinCToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Types de carte**
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinC.bonuses"> Actions (<span v-text="munchkinCBonusesNumber">8</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinC.actions"> Améliorations (<span v-text="munchkinCActionsNumber">32</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinC.classes"> Classes (<span v-text="munchkinCClassesNumber">18</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinC.stuffs"> Équipements (<span v-text="munchkinCStuffsNumber">38</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinC.levels"> Gains de Niveaux (<span v-text="munchkinCLevelsNumber">10</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinC.monsters"> Monstres (<span v-text="munchkinCMonstersNumber">37</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinC.curses"> Malédictions (<span v-text="munchkinCCursesNumber">13</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinC.objects"> Objets (<span v-text="munchkinCObjectsNumber">12</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-c-details">Détails</h3>
            <p>Est apparut dans ce jeu :</p>
            <ul>
                <li>La Classe spéciale Cultiste</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkinCCardsNumber">168</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-c-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinCDoorsNumber">100</span></p>
                <ol>
                    <li class="actions color">... et sa Progéniture</li>
                    <li class="actions color">Blasphématoire</li>
                    <li class="actions color">C'est çui qui dit qui R'Lyeh !</li>
                    <li class="monsters color">Celle qui Suçotait dans les Ténèbres</li>
                    <li class="monsters color">Celui qui Chapardait dans les Ténèbres</li>
                    <li class="monsters color">Ceux qui Chipotaient dans les Ténèbres</li>
                    <li class="monsters color">Chibithulhu</li>
                    <li class="actions color">Créé avec des Règles Cinématographiques !</li>
                    <li class="actions color">Complètement Barge</li>
                    <li class="actions color">Convention de Cultistes</li>
                    <li class="actions color">Corrompu par le Pouvoir !</li>
                    <li class="classes color">Cultiste</li>
                    <li class="classes color">Cultiste</li>
                    <li class="classes color">Cultiste</li>
                    <li class="classes color">Cultiste</li>
                    <li class="classes color">Cultiste</li>
                    <li class="classes color">Cultiste</li>
                    <li class="actions color">D'une Indescriptible Hideur</li>
                    <li class="actions color">Écume de Bave</li>
                    <li class="actions color">En pleine Élucubration</li>
                    <li class="monsters color">Escarggoth</li>
                    <li class="monsters color">Goulaschoggoth</li>
                    <li class="actions color">Grand Coup sur la Tête</li>
                    <li class="actions color">Grand Coup sur la Tête</li>
                    <li class="monsters color">H.P. Munchcraft</li>
                    <li class="actions color">Iïa R'Lyeh !</li>
                    <li class="actions color">Illumination Inopportune</li>
                    <li class="actions color">Innommable</li>
                    <li class="classes color">Investigateur</li>
                    <li class="classes color">Investigateur</li>
                    <li class="classes color">Investigateur</li>
                    <li class="classes color">Investigateur</li>
                    <li class="actions color">Je ne suis pas Digne de cet Honneur...</li>
                    <li class="monsters color">Joggoth</li>
                    <li class="monsters color">Kermitoggoth</li>
                    <li class="monsters color">L_ Ch_s_ s_ns V___ll_s</li>
                    <li class="monsters color">L'Abomination du Sandwich</li>
                    <li class="monsters color">L'Avocat d'Affaires Charles Dexter Ward</li>
                    <li class="monsters color">L'Horreur Inçonon... impon... imprononçable</li>
                    <li class="monsters color">Les Beaufonds</li>
                    <li class="monsters color">Le Clochard d'Innsmouth</li>
                    <li class="monsters color">Le Funky de Yuggoth</li>
                    <li class="monsters color">Le Grand Cthulhu</li>
                    <li class="monsters color">Le Peuple Serpent à Lunettes</li>
                    <li class="monsters color">Le Roi en Rose</li>
                    <li class="actions color">Les Étoiles sont Alignées</li>
                    <li class="actions color">Les Étoiles sont Complètement Stone</li>
                    <li class="actions color">Les Étoiles sont Troublées</li>
                    <li class="monsters color">Lloigor (ou Lloichka) Bogdanoff (on les reconnaît plus...)</li>
                    <li class="monsters color">Maigre Bêtes de la Nuisette</li>
                    <li class="curses color">Malédiction ! Aller-simple pour l'Asile de Snarkham</li>
                    <li class="curses color">Malédiction ! Amnésie</li>
                    <li class="curses color">Malédiction ! Changement de Sexe</li>
                    <li class="curses color">Malédiction ! Cheveux Blanchis sous le Coup de l'Horreur</li>
                    <li class="curses color">Malédiction ! Cheveux Dressés sur la Tête</li>
                    <li class="curses color">Malédiction ! Encore une Affreuse Prise de Conscience</li>
                    <li class="curses color">Malédiction ! Hastur Hastur Hastur</li>
                    <li class="curses color">Malédiction ! J'me sens tout Visqueux, d'un Coup...</li>
                    <li class="curses color">Malédiction ! La Malédiction de Savath</li>
                    <li class="curses color">Malédiction ! Par-delà la Frontière de la Démence</li>
                    <li class="curses color">Malédiction ! Piles de la Lampe Torche Usées !</li>
                    <li class="curses color">Malédiction ! Sac à Dos Dévoré</li>
                    <li class="curses color">Malédiction ! Votre Arme devient Maléfique</li>
                    <li class="actions color">Méphitique</li>
                    <li class="monsters color">Mesquins Byakhees Taquins Kakis</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="monsters color">Morves de Dieu Extérieur</li>
                    <li class="monsters color">Mouchoggoth, La Mite de Cthulhu</li>
                    <li class="actions color">Mutation</li>
                    <li class="monsters color">Paahrdeulhah, Lémure du Sommeil</li>
                    <li class="actions color">Plongé dans son Sommeil Millénaire</li>
                    <li class="monsters color">Polly le Polype Violent</li>
                    <li class="actions color">Portail du Mystère</li>
                    <li class="classes color">Professeur</li>
                    <li class="classes color">Professeur</li>
                    <li class="classes color">Professeur</li>
                    <li class="classes color">Professeur</li>
                    <li class="actions color">Quadri-Dimensionnel</li>
                    <li class="monsters color">~~Rejeton~~ Gueuleton d'Azathoth</li>
                    <li class="monsters color">Rideauggoth</li>
                    <li class="monsters color">Roboggoth</li>
                    <li class="monsters color">Shog Goth</li>
                    <li class="monsters color">Shoggoth (même pas de jeu de mot, rien...)</li>
                    <li class="monsters color">Sombre Bouton de Shub-Niggurath (en pleine floraison, qui plus est...)</li>
                    <li class="monsters color">Souchoggoth</li>
                    <li class="actions color">Squameux</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="classes color">Tabasseur de Monstres</li>
                    <li class="classes color">Tabasseur de Monstres</li>
                    <li class="classes color">Tabasseur de Monstres</li>
                    <li class="classes color">Tabasseur de Monstres</li>
                    <li class="monsters color">Tchou-Tchou</li>
                    <li class="monsters color">Tony Harlathotep (dit « Hawk »)</li>
                    <li class="monsters color">Témoins de Cthulhu</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Vésiculeux</li>
                    <li class="monsters color">Vigne des Anciens, Avatar de Yog-Sauterne</li>
                    <template v-for="(item, index) in munchkinC.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinC.version) !== -1) && ((munchkinC.curses && item.class.indexOf('curses') !== -1) || (munchkinC.classes && item.class.indexOf('classes') !== -1) || (munchkinC.monsters && item.class.indexOf('monsters') !== -1) || (munchkinC.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC.version) !== -1) && all.munchkinCDoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinCDoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-c-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinCTreasuresNumber">68</span></p>
                <ol>
                    <li class="bonuses color">...des Plutôt Grands et Relativement Anciens</li>
                    <li class="bonuses color">... Officiel du Mythe</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="stuffs color">Appareil de Protection Électrique du Professeur Tesla (Prototype)</li>
                    <li class="levels color">Appeler l'Armée à la Rescousse</li>
                    <li class="levels color">Apprendre ce que l'Homme n'était pas Censé Savoir</li>
                    <li class="stuffs color">Autocollant de Pare-Choc Cthulhu</li>
                    <li class="levels color">Avertir le FBI de l'Existence des Créatures</li>
                    <li class="levels color">Avertir le Président</li>
                    <li class="stuffs color">Baguette de Mémorable Raclée</li>
                    <li class="stuffs color">Bottes en Caoutchouc</li>
                    <li class="stuffs color">Carte de Membre d'un Culte Maléfique</li>
                    <li class="stuffs color">Carte Non-Euclidienne</li>
                    <li class="stuffs color">Casque de Mineur</li>
                    <li class="stuffs color">Clou Lourd</li>
                    <li class="objects color">Corned-Beef</li>
                    <li class="stuffs color">Cornemuse</li>
                    <li class="stuffs color">Couteau à Sushi du Destin</li>
                    <li class="stuffs color">Couvre... Poulpe-Chef</li>
                    <li class="bonuses color">Cri Perçant</li>
                    <li class="stuffs color">Cthulhututu Chapeau Pointu</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="levels color">Découverte Troublante dans l'Album de Famille</li>
                    <li class="bonuses color">Éclipse Solaire</li>
                    <li class="stuffs color">Enseigne des Anciens</li>
                    <li class="levels color">Entrainement</li>
                    <li class="levels color">Être Interviewé au Journal de Vingt Heures</li>
                    <li class="stuffs color">Fusil à Triple Canon</li>
                    <li class="stuffs color">Hache Préhistorique</li>
                    <li class="objects color">Ichor : Le Cancan Fielleux</li>
                    <li class="objects color">Ichor : Le Élan des Preux</li>
                    <li class="objects color">Ichor : Le Flan Visqueux</li>
                    <li class="objects color">Ichor : Le P'tit Blanc des Dieux</li>
                    <li class="objects color">Ichor : Le Sang Dégueu</li>
                    <li class="objects color">Ichor : Le Sang des Dieux</li>
                    <li class="objects color">Ichor : Moins Lent, c'est Mieux...</li>
                    <li class="bonuses color">Incommensurable Richesse</li>
                    <li class="levels color">Informer les Autorités Locales</li>
                    <li class="stuffs color">Insecticide</li>
                    <li class="objects color">La Douleur tombée du Ciel</li>
                    <li class="stuffs color">Lance-Flammes</li>
                    <li class="stuffs color">Lattes à latter du Monstre</li>
                    <li class="bonuses color">Le Chant qui Rend Fou</li>
                    <li class="stuffs color">Les Tatanes Hallucinées</li>
                    <li class="stuffs color">Maîîîîîîître !</li>
                    <li class="stuffs color">Manuscrit Ésotérique</li>
                    <li class="stuffs color">Mythailleuse</li>
                    <li class="stuffs color">Necrocomicon</li>
                    <li class="stuffs color">Necrognomicon</li>
                    <li class="stuffs color">Necronomicon</li>
                    <li class="stuffs color">Necrononichons</li>
                    <li class="stuffs color">Nécrotélécom</li>
                    <li class="stuffs color">Pages Jaunes d'Innsmouth</li>
                    <li class="stuffs color">Poing Américain Vachement Stylé</li>
                    <li class="stuffs color">Poncho Imperméable aux Substances Dégueu</li>
                    <li class="stuffs color">Quille de Bowling</li>
                    <li class="bonuses color">Rire Dément</li>
                    <li class="stuffs color">Sac à Dos Rempli de Dynamite</li>
                    <li class="levels color">Seul Survivant</li>
                    <li class="stuffs color">Shogulateur</li>
                    <li class="stuffs color">Tentacule</li>
                    <li class="stuffs color">Tentacule Factice</li>
                    <li class="stuffs color">T-Shirt de l'Université de Miskatronic</li>
                    <li class="stuffs color">Torche Électrique à Deux Mains</li>
                    <li class="stuffs color">Veste en Tweed</li>
                    <li class="levels color">Vision Mystiques</li>
                    <li class="bonuses color">Voleur d'Ichor</li>
                    <template v-for="(item, index) in munchkinC.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinC.version) !== -1) && ((munchkinC.levels && item.class.indexOf('levels') !== -1) || (munchkinC.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinC.objects && item.class.indexOf('objects') !== -1) || (munchkinC.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC.version) !== -1) && all.munchkinCTreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinCTreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-c-2 munchkin-all" v-bind:class="{ 'is-visible': all.munchkinC2 }">
        <img class="demo" src="media/images/upload/ubicm02.png" alt="Munchkin Cthulhu 2">
        <h2 id="munchkin-c-2">Munchkin Cthulhu 2 : L'Appel de la Vachthulhu</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinC2.filters }">
            <h3 id="munchkin-c-2-filtres">Filtres</h3>
            <p><button v-on:click="munchkinC2ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Types de carte**
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinC2.bonuses"> Actions (<span v-text="munchkinC2BonusesNumber">8</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinC2.actions"> Améliorations (<span v-text="munchkinC2ActionsNumber">32</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinC2.classes"> Classes (<span v-text="munchkinC2ClassesNumber">18</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinC2.stuffs"> Équipements (<span v-text="munchkinC2StuffsNumber">38</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinC2.levels"> Gains de Niveaux (<span v-text="munchkinC2LevelsNumber">10</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinC2.monsters"> Monstres (<span v-text="munchkinC2MonstersNumber">37</span>)
                    </label><br>
                    <label class="madnesses">
                        <input type="checkbox" value="on" v-model="munchkinC2.madnesses"> Démences (<span v-text="munchkinC2MadnessesNumber">13</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinC2.objects"> Objets (<span v-text="munchkinC2ObjectsNumber">12</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-c-2-details">Détails</h3>
            <p><img src="media/images/upload/mc2.gif" alt="Munchkin Cthulhu 2"> Cette icone en bas à droite d'une carte marque l'appartenance à cette extension. Est apparut dans cette extension :</p>
            <ul>
                <li>Les Démences</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkinC2CardsNumber">56</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-c-2-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinC2DoorsNumber">32</span></p>
                <ol>
                    <li class="actions color">Agité de Soubresauts</li>
                    <li class="monsters color">Arkhamster</li>
                    <li class="actions color">Batracien</li>
                    <li class="monsters color">Cochonien</li>
                    <li class="monsters color">Chatzatoth</li>
                    <li class="monsters color">Chiot-Goth</li>
                    <li class="monsters color">Chiots de Tindalos</li>
                    <li class="monsters color">Cotchk-Cotchk-Codêêêêtchk</li>
                    <li class="classes color">Cultiste</li>
                    <li class="classes color">Cultiste</li>
                    <li class="actions color">D'une Hideuse Indescriptibilitude</li>
                    <li class="madnesses color">Démence ! Double Personnalité</li>
                    <li class="madnesses color">Démence ! Gammaphobie</li>
                    <li class="madnesses color">Démence ! Kleptomanie</li>
                    <li class="madnesses color">Démence ! Névrose Obsessionnelle Compulsive</li>
                    <li class="madnesses color">Démence ! Paranoïa</li>
                    <li class="actions color">Grand Coup sur la Tête</li>
                    <li class="classes color">Investigateur</li>
                    <li class="monsters color">La Douleur Tombée du Miel</li>
                    <li class="monsters color">La Vache Milkhathulhu</li>
                    <li class="monsters color">Les Chariots des Dieux Vieux</li>
                    <li class="monsters color">Les Enfants du Maïs</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="classes color">Professeur</li>
                    <li class="monsters color">Salade de Chèvres Chauggoth</li>
                    <li class="monsters color">Shub-Ni-Goret</li>
                    <li class="monsters color">Sombres Moutons de Shub-Niggurath</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="classes color">Tabasseur de Monstres</li>
                    <li class="monsters color">Tcha-Tcha</li>
                    <li class="actions color">Tout(e) Pitit(e) Pitit(e)...</li>
                    <li class="actions color">Tricheur !</li>
                    <template v-for="(item, index) in munchkinC2.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinC2.version) !== -1) && ((munchkinC2.madnesses && item.class.indexOf('madnesses') !== -1) || (munchkinC2.classes && item.class.indexOf('classes') !== -1) || (munchkinC2.monsters && item.class.indexOf('monsters') !== -1) || (munchkinC2.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC2.version) !== -1) && all.munchkinC2DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinC2DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-c-2-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinC2TreasuresNumber">24</span></p>
                <ol>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="stuffs color">Bottes en Peau de Poulpe</li>
                    <li class="stuffs color">Canon à Patates</li>
                    <li class="stuffs color">Chapeau de Paille</li>
                    <li class="levels color">Conserves de Concours</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="bonuses color">Doc Igor l'Ichor</li>
                    <li class="stuffs color">Faux</li>
                    <li class="stuffs color">Fourche de Foule en Colère (mais néanmoins prudente...)</li>
                    <li class="objects color">Ichor : Le Nectar du Feu de Dieu ! Boudiou !</li>
                    <li class="bonuses color">Infecté</li>
                    <li class="bonuses color">Hurlement Délirant</li>
                    <li class="bonuses color">Intervention Bovine</li>
                    <li class="stuffs color">Le Barattor ! (et à travers...)</li>
                    <li class="bonuses color">Le Chant qui rend Fou, 2e Couplet</li>
                    <li class="levels color">Méditer au Temple de la Pleine Lune Fendue</li>
                    <li class="stuffs color">Moissonneuse Tabasseuse</li>
                    <li class="stuffs color">Pelle à Crottes qui déchire sa Race (surtout sa Race Ancienne)</li>
                    <li class="bonuses color">Poignée de Main Secrète</li>
                    <li class="levels color">Poser pour un Portrait de Famille</li>
                    <li class="bonuses color">Puits aux Souhaits</li>
                    <li class="stuffs color">Rouleau à Pâtisserie</li>
                    <li class="stuffs color">Veste de l'Université de Rat-Musquétonic</li>
                    <li class="objects color">Vieux Poêle Curieusement Aérodynamique</li>
                    <template v-for="(item, index) in munchkinC2.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinC2.version) !== -1) && ((munchkinC2.levels && item.class.indexOf('levels') !== -1) || (munchkinC2.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinC2.objects && item.class.indexOf('objects') !== -1) || (munchkinC2.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC2.version) !== -1) && all.munchkinC2TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinC2TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-c-3 munchkin-all" v-bind:class="{ 'is-visible': all.munchkinC3 }">
        <img class="demo" src="media/images/upload/ubicm03.png" alt="Munchkin Cthulhu 3">
        <h2 id="munchkin-c-3">Munchkin Cthulhu 3 : La Crypte de l'Indicible</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinC3.filters }">
            <h3 id="munchkin-c-3-filtres">Filtres</h3>
            <p><button v-on:click="munchkinC3ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Types de carte**
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinC3.bonuses"> Actions (<span v-text="munchkinC3BonusesNumber">8</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinC3.actions"> Améliorations (<span v-text="munchkinC3ActionsNumber">32</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinC3.classes"> Classes (<span v-text="munchkinC3ClassesNumber">18</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinC3.stuffs"> Équipements (<span v-text="munchkinC3StuffsNumber">38</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinC3.levels"> Gains de Niveaux (<span v-text="munchkinC3LevelsNumber">10</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinC3.monsters"> Monstres (<span v-text="munchkinC3MonstersNumber">37</span>)
                    </label><br>
                    <label class="madnesses">
                        <input type="checkbox" value="on" v-model="munchkinC3.madnesses"> Démences (<span v-text="munchkinC3MadnessesNumber">13</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinC3.objects"> Objets (<span v-text="munchkinC3ObjectsNumber">12</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-c-3-details">Détails</h3>
            <p><img src="media/images/upload/mc3.gif" alt="Munchkin Cthulhu 3"> Cette icone en bas à droite d'une carte marque l'appartenance à cette extension.</p>
            <p>**Nombre total de cartes : <span v-text="munchkinC3CardsNumber">56</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-c-3-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinC3DoorsNumber">34</span></p>
                <ol>
                    <li class="monsters color">'Zathoth</li>
                    <li class="monsters color">Atlach-Nacha</li>
                    <li class="actions color">Chthoniens !</li>
                    <li class="classes color">Cultiste</li>
                    <li class="actions color">Cultistes Croustillants</li>
                    <li class="monsters color">Dagoon</li>
                    <li class="actions color">Dégoulinant de Bave</li>
                    <li class="madnesses color">Démence ! Autophobie</li>
                    <li class="madnesses color">Démence ! Bibliophobie</li>
                    <li class="madnesses color">Démence ! Disophobie</li>
                    <li class="madnesses color">Démence ! Phobophobie</li>
                    <li class="madnesses color">Démence ! Pyromanie</li>
                    <li class="monsters color">Goules</li>
                    <li class="actions color">Grand Coup sur la Tête</li>
                    <li class="monsters color">Gug</li>
                    <li class="classes color">Investigateur</li>
                    <li class="monsters color">Le Grand Quethoulhou</li>
                    <li class="monsters color">Les Pwofonds</li>
                    <li class="monsters color">Maigres Bêtes de la Nuit</li>
                    <li class="monsters color">Mi-Glu</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="monsters color">Nyarly</li>
                    <li class="classes color">Professeur</li>
                    <li class="monsters color">Shoggies</li>
                    <li class="monsters color">Shubby</li>
                    <li class="actions color">Super Munchkin</li>
                    <li class="classes color">Tabasseur de Monstres</li>
                    <li class="monsters color">Tindaloo</li>
                    <li class="actions color">Tout Minuscule</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Truculent</li>
                    <li class="actions color">Tumescent</li>
                    <li class="monsters color">Ygo</li>
                    <li class="monsters color">Yogzotot</li>
                    <template v-for="(item, index) in munchkinC3.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinC3.version) !== -1) && ((munchkinC3.madnesses && item.class.indexOf('madnesses') !== -1) || (munchkinC3.classes && item.class.indexOf('classes') !== -1) || (munchkinC3.monsters && item.class.indexOf('monsters') !== -1) || (munchkinC3.actions && item.class.indexOf('actions') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC3.version) !== -1) && all.munchkinC3DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinC3DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-c-3-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinC3TreasuresNumber">22</span></p>
                <ol>
                    <li class="objects color">Anneau de Souhait</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="levels color">Donner vos Amis à Manger à Quethoulhou</li>
                    <li class="stuffs color">Feux d'Artifice</li>
                    <li class="levels color">Fouiller les Profondeurs en Quête de Savoir</li>
                    <li class="bonuses color">Gémissement Inhumain</li>
                    <li class="stuffs color">Gramophone</li>
                    <li class="objects color">Ichor le Nectar Capricieux !</li>
                    <li class="objects color">Ichor le Nectar Vicieux !</li>
                    <li class="bonuses color">Le Chant qui rend Fou, 3e Couplet</li>
                    <li class="levels color">Maîtriser ses Peurs</li>
                    <li class="bonuses color">Miam Miam !</li>
                    <li class="stuffs color">Nécrominicon</li>
                    <li class="stuffs color">Ouvre-Boîte</li>
                    <li class="bonuses color">Pied Tentaculaires</li>
                    <li class="stuffs color">Seringue Hypodermique</li>
                    <li class="objects color">Shoggy Gelé</li>
                    <li class="stuffs color">T-Shirt ~~de~~ en Cultiste</li>
                    <li class="stuffs color">Taille-Haie</li>
                    <li class="bonuses color">Tête Gluante</li>
                    <li class="bonuses color">Trop Coool !</li>
                    <li class="bonuses color">Venu d'une Autre Dimension</li>
                    <template v-for="(item, index) in munchkinC3.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinC3.version) !== -1) && ((munchkinC3.levels && item.class.indexOf('levels') !== -1) || (munchkinC3.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinC3.objects && item.class.indexOf('objects') !== -1) || (munchkinC3.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC3.version) !== -1) && all.munchkinC3TreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinC3TreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-c-4 munchkin-all" v-bind:class="{ 'is-visible': all.munchkinC4 }">
        <img class="demo" src="media/images/upload/ubicm04.png" alt="Munchkin Cthulhu 4">
        <h2 id="munchkin-c-4">Munchkin Cthulhu 4 : Oh my grottes !</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinC4.filters }">
            <h3 id="munchkin-c-4-filtres">Filtres</h3>
            <p><button v-on:click="munchkinC4ToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Types de carte**
                <p>
                    <label class="fields">
                        <input type="checkbox" value="on" v-model="munchkinC4.fields"> Donjons (<span v-text="munchkinC4DonjonsNumber">20</span>)
                    </label><br>
                    <label class="warps">
                        <input type="checkbox" value="on" v-model="munchkinC4.warps"> Portails (<span v-text="munchkinC4WarpsNumber">16</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-c-4-details">Détails</h3>
            <p><img src="media/images/upload/mc4.gif" alt="Munchkin Cthulhu 4"> Cette icone en bas à droite d'une carte marque l'appartenance à cette extension.</p>
            <p>**Nombre total de cartes : <span v-text="munchkinC4CardsNumber">36</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-c-4-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinC4DoorsNumber">16</span></p>
                <ol>
                    <li class="warps color">Condamnés à Répéter les Erreurs du Passé</li>
                    <li class="warps color">Condamnés à Répéter les Erreurs du Passé</li>
                    <li class="warps color">Dimension Parallèle</li>
                    <li class="warps color">Dimension Parallèle</li>
                    <li class="warps color">Enseigne Clignotante Géante des Anciens</li>
                    <li class="warps color">Enseigne Clignotante Géante des Anciens</li>
                    <li class="warps color">Fosse et Usage de Fosse !</li>
                    <li class="warps color">Fosse et Usage de Fosse !</li>
                    <li class="warps color">Immenses Glyphes Immondes Sculptés sur les Murs</li>
                    <li class="warps color">Immenses Glyphes Immondes Sculptés sur les Murs</li>
                    <li class="warps color">Passe Devant et Suis-moi</li>
                    <li class="warps color">Passe Devant et Suis-moi</li>
                    <li class="warps color">Par ici, Bande d'Abrutis !</li>
                    <li class="warps color">Par ici, Bande d'Abrutis !</li>
                    <li class="warps color">Porte des Grands Anciens</li>
                    <li class="warps color">Porte des Grands Anciens</li>
                    <template v-for="(item, index) in munchkinC4.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinC4.version) !== -1) && (munchkinC4.warps && item.class.indexOf('warps') !== -1) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC4.version) !== -1) && all.munchkinC4DoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinC4DoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="donjons">
                <h3 id="munchkin-c-4-donjons">Donjons</h3>
                <p>Nombre total de donjons : <span v-text="munchkinC4DonjonsNumber">20</span></p>
                <ol>
                    <li class="fields color">Antre des Dholes</li>
                    <li class="fields color">Antre Souterrain de Byatis</li>
                    <li class="fields color">Arène d'Azathoth</li>
                    <li class="fields color">Boutique de Chaussures Souterraine de Shub-Niggurath</li>
                    <li class="fields color">Caverne des Archétypes</li>
                    <li class="fields color">Cloaque des Mi-Go</li>
                    <li class="fields color">Crevasse des Chthoniens</li>
                    <li class="fields color">Cryptes d'Innsmouth</li>
                    <li class="fields color">Égout des Shoggoths</li>
                    <li class="fields color">Gouffre de Cthulhu</li>
                    <li class="fields color">Grotte de Glaaki</li>
                    <li class="fields color">K'n-Yan</li>
                    <li class="fields color">Le Fossé de Dunwich</li>
                    <li class="fields color">Les Contrées du Rêve</li>
                    <li class="fields color">Les Montagnes Hallucinées</li>
                    <li class="fields color">Monde Souterrain d'Ubbo-Sathla</li>
                    <li class="fields color">Sous-sol de la Bibliothèque de l'Université Miskatonic</li>
                    <li class="fields color">Station de Métro d'Arkham</li>
                    <li class="fields color">Ténébreuse Tanière des Lloigor</li>
                    <li class="fields color">Tunnel de Tsathoggua</li>
                    <template v-for="(item, index) in munchkinC4.donjonsList">
                        <li v-bind:class="(item.class.indexOf(munchkinC4.version) !== -1) && (munchkinC4.fields && item.class.indexOf('fields') !== -1) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinC4.version) !== -1) && all.munchkinC4DonjonsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinC4DonjonsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
    <div class="munchkin-a munchkin-all" v-bind:class="{ 'is-visible': all.munchkinA }">
        <img class="demo" src="media/images/upload/munchkin-apocalypse.jpg" alt="Munchkin Apocalypse">
        <h2 id="munchkin-a">Munchkin Apocalypse</h2>
        <div class="details" v-bind:class="{ 'is-displayed': munchkinA.filters }">
            <h3 id="munchkin-a-filtres">Filtres</h3>
            <p><button v-on:click="munchkinAToggleFilters"><ins>Afficher</ins><del>Masquer</del></button></p>
            <div class="filters">
                **Types de carte**
                <p>
                    <label class="bonuses">
                        <input type="checkbox" value="on" v-model="munchkinA.bonuses"> Actions (<span v-text="munchkinABonusesNumber">2</span>)
                    </label><br>
                    <label class="actions">
                        <input type="checkbox" value="on" v-model="munchkinA.actions"> Améliorations (<span v-text="munchkinAActionsNumber">20</span>)
                    </label><br>
                    <label class="curses">
                        <input type="checkbox" value="on" v-model="munchkinA.curses"> Catastrophe (Malédictions) (<span v-text="munchkinACursesNumber">21</span>)
                    </label><br>
                    <label class="classes">
                        <input type="checkbox" value="on" v-model="munchkinA.classes"> Classes (<span v-text="munchkinAClassesNumber">14</span>)
                    </label><br>
                    <label class="stuffs">
                        <input type="checkbox" value="on" v-model="munchkinA.stuffs"> Équipements (<span v-text="munchkinAStuffsNumber">37</span>)
                    </label><br>
                    <label class="levels">
                        <input type="checkbox" value="on" v-model="munchkinA.levels"> Gains de Niveaux (<span v-text="munchkinALevelsNumber">10</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinA.monsters"> Monstres (<span v-text="munchkinAMonstersNumber">37</span>)
                    </label><br>
                    <label class="objects">
                        <input type="checkbox" value="on" v-model="munchkinA.objects"> Objets (<span v-text="munchkinAObjectsNumber">23</span>)
                    </label><br>
                    <label class="monsters">
                        <input type="checkbox" value="on" v-model="munchkinA.marks"> Sceaux (<span v-text="munchkinASealsNumber">12</span>)
                    </label>
                </p>
            </div>
        </div>
        <div class="card-number">
            <h3 id="munchkin-a-details">Détails</h3>
            <p>Sont apparut avec ce jeu :</p>
            <ul>
                <li>Les Catastrophes (similaire aux Malédictions)</li>
                <li>Les Sceaux (similaire aux Fidèles Serviteurs)</li>
            </ul>
            <p>**Nombre total de cartes : <span v-text="munchkinACardsNumber">36</span>**</p>
        </div>
        <div class="card-list">
            <div class="doors">
                <h3 id="munchkin-a-portes">Portes</h3>
                <p>Nombre total de portes : <span v-text="munchkinADoorsNumber">16</span></p>
                <ol>
                    <li class="actions color">... Lourd de Symbole Leligieux</li>
                    <li class="monsters color">Abomination</li>
                    <li class="actions color">Affligé de Mutations</li>
                    <li class="monsters color">Ange Exterminator (et à travers)</li>
                    <li class="monsters color">Banquier d'affaires</li>
                    <li class="classes color">Blogueur</li>
                    <li class="classes color">Blogueur</li>
                    <li class="classes color">Blogueur</li>
                    <li class="actions color">Bouc émissaire</li>
                    <li class="monsters color">Caravane Caractérielle et Carnivore</li>
                    <li class="curses color">Catastrophe ! Éruption Vorcanique</li>
                    <li class="curses color">Catastrophe ! Météore géant</li>
                    <li class="curses color">Catastrophe ! Tremblement de Vers</li>
                    <li class="curses color">Catastrophe ! Jus de Cadavres</li>
                    <li class="curses color">Catastrophe ! Inversion des Pôles</li>
                    <li class="curses color">Catastrophe ! Esssplosion nucléaire</li>
                    <li class="curses color">Catastrophe ! Invasion de Notaires de Proportions Bibliques</li>
                    <li class="curses color">Catastrophe ! Inflation Galopante</li>
                    <li class="curses color">Catastrophe ! Pluie de feu</li>
                    <li class="curses color">Catastrophe ! Krach boursier</li>
                    <li class="curses color">Catastrophe ! Raz-de-marée</li>
                    <li class="curses color">Catastrophe ! Grippe aviaire</li>
                    <li class="curses color">Catastrophe ! Blizzard</li>
                    <li class="curses color">Catastrophe ! Opération commando !</li>
                    <li class="curses color">Catastrophe ! Tremblement de terre</li>
                    <li class="curses color">Catastrophe ! Fausse alerte</li>
                    <li class="curses color">Catastrophe ! Invasion de Zombies</li>
                    <li class="curses color">Catastrophe ! Évasion du Zoo</li>
                    <li class="curses color">Catastrophe ! Pluie acide</li>
                    <li class="curses color">Catastrophe ! Invasion d'extra-terrestres</li>
                    <li class="curses color">Catastrophe ! Grandes Ondes Nocives</li>
                    <li class="monsters color">Crapaud Calypse</li>
                    <li class="actions color">Danse de Saint-Guy Sant Jean de Patmos</li>
                    <li class="actions color">De Chez les Cocos</li>
                    <li class="monsters color">De la (non-)Vie dans le Frigo !</li>
                    <li class="monsters color">Des bestioles... des tas de bestioles</li>
                    <li class="monsters color">Dr. Octopours</li>
                    <li class="monsters color">Espèce en Voie d'Extinction des Humains</li>
                    <li class="monsters color">Fan-Tomme (de Gruyère)</li>
                    <li class="monsters color">Fantôme de George Washington</li>
                    <li class="monsters color">Far West Fanfare Complètement à l'Ouest</li>
                    <li class="monsters color">Fou psychopathe dangereux évadé d'un asile</li>
                    <li class="monsters color">Fougère Fou-de-Guerre</li>
                    <li class="monsters color">Fourmis Chauffées au Rouge</li>
                    <li class="monsters color">Fournitures de Bureau Déchainées</li>
                    <li class="classes color">Gamin</li>
                    <li class="classes color">Gamin</li>
                    <li class="classes color">Gamin</li>
                    <li class="monsters color">Gazon Mutant (et un poil carnivore)</li>
                    <li class="actions color">Géant Atomique</li>
                    <li class="monsters color">Gog et Magog</li>
                    <li class="monsters color">Gourde Nationale</li>
                    <li class="monsters color">Graine de Geek</li>
                    <li class="monsters color">Horde de Morts-vivants Voraces</li>
                    <li class="actions color">L'Élu</li>
                    <li class="monsters color">Le Grand Cthulhu</li>
                    <li class="monsters color">Le Livre Lièvre des Morts Égyptien</li>
                    <li class="monsters color">Les Quatre Petits Poneys de l'Apocalypse</li>
                    <li class="actions color">Loi Martiale</li>
                    <li class="monsters color">Meute de Caniches Sauvages</li>
                    <li class="classes color">Milicien</li>
                    <li class="classes color">Milicien</li>
                    <li class="classes color">Milicien</li>
                    <li class="monsters color">Moisissure Toxique</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Monstre Errant</li>
                    <li class="actions color">Mort-vivant</li>
                    <li class="monsters color">Moutons de « Ça urge »</li>
                    <li class="monsters color">Mutant à Trois Yeux</li>
                    <li class="actions color">Paranoïaque</li>
                    <li class="actions color">Paranoïaque</li>
                    <li class="actions color">Quelques secondes de répit</li>
                    <li class="monsters color">Quatre Mayas et un enterrement...</li>
                    <li class="monsters color">Ragnarocs</li>
                    <li class="monsters color">Requin Géant et Génial</li>
                    <li class="actions color">Retraite Totalement Dépourvue de Dignité</li>
                    <li class="monsters color">Rock Star qui a de quoi soutenir ce qu'elle vance</li>
                    <li class="monsters color">Rongeurs de Taille Inédite</li>
                    <li class="classes color">Scientifique</li>
                    <li class="classes color">Scientifique</li>
                    <li class="classes color">Scientifique</li>
                    <li class="monsters color">Soldat du SEAL renégat</li>
                    <li class="classes color">Super Munchkin</li>
                    <li class="classes color">Super Munchkin</li>
                    <li class="monsters color">Téléphone (Bio-)Cellulaire</li>
                    <li class="monsters color">Télévangéliste</li>
                    <li class="monsters color">Tia-meute</li>
                    <li class="actions color">Tir ami</li>
                    <li class="actions color">Traumatisé par la Guerre</li>
                    <li class="actions color">Tricheur !</li>
                    <li class="actions color">Tricheur !</li>
                    <template v-for="(item, index) in munchkinA.doorsList">
                        <li v-bind:class="(item.class.indexOf(munchkinA.version) !== -1) && ((munchkin.curses && item.class.indexOf('curses') !== -1)  || (munchkinA.classes && item.class.indexOf('classes') !== -1) || (munchkinA.actions && item.class.indexOf('actions') !== -1) || (munchkinA.monsters && item.class.indexOf('monsters') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinA.version) !== -1) && all.munchkinADoorsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinADoorsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="treasures">
                <h3 id="munchkin-a-tresors">Trésors</h3>
                <p>Nombre total de trésors : <span v-text="munchkinATreasuresNumber">22</span></p>
                <ol>
                    <li class="bonuses color">... à Baïonnette</li>
                    <li class="stuffs color">15 ans de réserves de bière et de PQ</li>
                    <li class="stuffs color">Arc Composite</li>
                    <li class="stuffs color">Arme Improvisée</li>
                    <li class="stuffs color">Armure Antimissile</li>
                    <li class="stuffs color">Armure de Signalisation</li>
                    <li class="stuffs color">Aspirateur Ectoplasmique</li>
                    <li class="objects color">Astéroïde Minuscule mais au Peint de Chute Judicieusement Calculé</li>
                    <li class="bonuses color">Avec Allume-feu Incorporé</li>
                    <li class="objects color">Bâches en Plastique</li>
                    <li class="stuffs color">Bazooka</li>
                    <li class="objects color">Bidon d'essence</li>
                    <li class="objects color">Bombe de Gaz Salé</li>
                    <li class="objects color">Bombe de Gaz Poivré</li>
                    <li class="stuffs color">Bombe de Laque</li>
                    <li class="stuffs color">Bonnet en Fonte</li>
                    <li class="stuffs color">Bottes de Deuxième Main</li>
                    <li class="stuffs color">Bracelet Magnétique à Cristal Antimonstre (efficacité garantie)</li>
                    <li class="stuffs color">Brosse à Dents à Cran d'Arrêt</li>
                    <li class="levels color">C'est la Faute du Gouvernement !</li>
                    <li class="stuffs color">Calibre 50</li>
                    <li class="bonuses color">Camouflage Cosmétique</li>
                    <li class="stuffs color">Camouflage de Chasseur d'une authenticité à s'y tromper</li>
                    <li class="stuffs color">Camouflage Urbain</li>
                    <li class="stuffs color">Canne</li>
                    <li class="stuffs color">Carte Platinium</li>
                    <li class="stuffs color">Casquette d'Officier Supérieur</li>
                    <li class="stuffs color">Chapeau de Grandes Manœuvres</li>
                    <li class="stuffs color">Chaussettes en Papier d'Alu</li>
                    <li class="stuffs color">Chaussettes Propres</li>
                    <li class="stuffs color">Chaussures à Orteils</li>
                    <li class="stuffs color">Chien Policier</li>
                    <li class="levels color">Culture Hydroponique de Broccolis</li>
                    <li class="bonuses color">D'Occase (de Deuxième Main, Quoi...)</li>
                    <li class="bonuses color">De Camouflage</li>
                    <li class="objects color">Dé Pipé</li>
                    <li class="bonuses color">Déclaration Présidentielle</li>
                    <li class="levels color">Déconnexion à l'Arrache</li>
                    <li class="stuffs color">Démonte-pneu</li>
                    <li class="levels color">Détruire le Gardien</li>
                    <li class="objects color">Eau Déshydratée</li>
                    <li class="levels color">École de Survie</li>
                    <li class="stuffs color">Élagueur Électrique</li>
                    <li class="objects color">Explosifs Faits Maison</li>
                    <li class="objects color">Fusée de Détresse</li>
                    <li class="stuffs color">Fusée de Survie</li>
                    <li class="objects color">Gaz Hilarant</li>
                    <li class="objects color">Gaz Lacrymogène</li>
                    <li class="stuffs color">Gilet de Sauvetage</li>
                    <li class="objects color">Grenade Fumigène</li>
                    <li class="stuffs color">Judicieux Conseil Trouvé sur Internet</li>
                    <li class="stuffs color">Kit de Premiers Secours</li>
                    <li class="levels color">La La La ! J'entends Rien !</li>
                    <li class="stuffs color">Lampe de Studio</li>
                    <li class="stuffs color">Lance-pierres à Deux Coups</li>
                    <li class="stuffs color">Le Drone de Fer</li>
                    <li class="stuffs color">Les Prophéties de Nostradamus</li>
                    <li class="stuffs color">Lunettes Infrarouges</li>
                    <li class="stuffs color">Magnum 357</li>
                    <li class="levels color">Mettre en Ligne une Vidéo Amateur</li>
                    <li class="stuffs color">Outil de Survie</li>
                    <li class="stuffs color">Pancarte de Manif'</li>
                    <li class="stuffs color">Passoire</li>
                    <li class="objects color">Pierre-Calendrier</li>
                    <li class="bonuses color">Pillage d'un Surplus de l'Armée</li>
                    <li class="stuffs color">Pistolet à Clous</li>
                    <li class="stuffs color">Pistolet de Paintball</li>
                    <li class="stuffs color">Plans Top Secret</li>
                    <li class="stuffs color">Radio à Panneaux solaires, Torche et Appeau à Cannards</li>
                    <li class="objects color">Rations de Combat</li>
                    <li class="bonuses color">Tactique</li>
                    <li class="stuffs color">Tente Antiatomique</li>
                    <li class="bonuses color">Tout s'arrange ! (ou pas)</li>
                    <li class="levels color">Tu Crois Que Je T'Ai Pas Vu ?</li>
                    <li class="levels color">Tweeter Vos Dernières Paroles</li>
                    <li class="objects color">Virus du rhume</li>
                    <template v-for="(item, index) in munchkinA.treasuresList">
                        <li v-bind:class="(item.class.indexOf(munchkinA.version) !== -1) && ((munchkinA.levels && item.class.indexOf('levels') !== -1) || (munchkinA.bonuses && item.class.indexOf('bonuses') !== -1) || (munchkinA.objects && item.class.indexOf('objects') !== -1) || (munchkinA.stuffs && item.class.indexOf('stuffs') !== -1)) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinA.version) !== -1) && all.munchkinATreasuresEach[index] }">
                                <input type="checkbox" v-model="all.munchkinATreasuresEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
            <div class="seals">
                <h3 id="munchkin-a-sceaux">Sceaux</h3>
                <p>Nombre total de sceaux : <span v-text="munchkinASealsNumber">12</span></p>
                <ol>
                    <li class="marks color">#OccupyFinDuMonde !</li>
                    <li class="marks color">APOCALYPSE !!!</li>
                    <li class="marks color">Fuyez ! Sauvez votre peau !</li>
                    <li class="marks color">Ils reviennent !</li>
                    <li class="marks color">J'ai trouvé ça par terre, promis !</li>
                    <li class="marks color">L'École des Coups Durs !</li>
                    <li class="marks color">L'Histoire se Répète !</li>
                    <li class="marks color">Mais ils sont increvables ou quoi ?</li>
                    <li class="marks color">Pare-feu !</li>
                    <li class="marks color">Pénurie de beurre de cacahuètes !</li>
                    <li class="marks color">Pénurie de Bière !</li>
                    <li class="marks color">Session du Congrès !</li>
                    <template v-for="(item, index) in munchkinA.sealsList">
                        <li v-bind:class="(item.class.indexOf(munchkinA.version) !== -1) && (munchkinA.marks && item.class.indexOf('marks') !== -1) ? item.class : ''">
                            <span class="box" v-bind:class="{ active: (item.class.indexOf(munchkinA.version) !== -1) && all.munchkinASealsEach[index] }">
                                <input type="checkbox" v-model="all.munchkinASealsEach[index]">
                                <span class="item-title">{{ item.name }}</span>
                            </span>
                        </li>
                    </template>
                </ol>
            </div>
        </div>
    </div>
</div>]]></description>
            <link>http://localhost:7776/liste-des-cartes-munchkin-editions-francaises/</link>
            <guid isPermaLink="false">577a13cfd1b7fe136fc20060</guid>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[SEO]]></category>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[Jeux]]></category>
            <category><![CDATA[Outils]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Vue.js]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Sat, 15 Sep 2018 07:44:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Désinformation : de l'art de comparer l'incomparable sur des dates périmées]]></title>
            <description><![CDATA[<p>Aujourd&#39;hui est arrivé dans mes flux un article de <a href="http://www.marcschillaci.com/lauteur-marc-schillaci.html">Marc Schillaci</a> qui nous invite à méditer sur la question suivante : « <a href="http://fr.marcschillaci.com/2018/06/a-m%C3%A9diter-comment-savoir-quand-une-nouvelle-fra%C3%AEche-ne-lest-plus-.html">Comment savoir quand une nouvelle fraîche ne l&#39;est plus ?</a> ».</p>
<figure>
<img width="1018" height="847" src="https://blog.lesieur.name/media/images/upload/fake-news.jpg" alt="Contenu, apparence et comportement" style="max-width: 100%;height: auto;">
<figcaption>Nous allons voir pourquoi ces informations sont de la désinformations.</figcaption>
</figure>

<p>J&#39;ai trouvé l&#39;exemple exposé réellement pertinent et faisant une veille ponctuelle sur les médias sociaux, c&#39;était l&#39;occasion pour moi de faire un petit exercice de <a href="https://www.lesieur.name/zetetique/">Zététique</a>.</p>
<h2 id="jai-envie-dy-croire">J&#39;ai envie d&#39;y croire</h2>
<p>Dans notre flux donc, nous tombons, en date du 23 juin 2018 sur cette infographie :</p>
<figure>
<img width="1018" height="847" src="https://infographic.statista.com/normal/chartoftheday_14309_l_instantaneite_du_contenu_sur_les_reseaux_sociaux_n.jpg" style="max-width: 100%;height: auto;">
<figcaption>Infographie indiquant des durées supposément comparables pour prendre des décisions.</figcaption>
</figure>

<p>C&#39;est plutôt intéressant. J&#39;utilise souvent les réseaux sociaux pour relayer mes informations et ce qui m&#39;importe c&#39;est ma visibilité : aussi cette infographie est parfaite ! Simple, élégante et les informations qu&#39;elle me présente me semble rationnelles. <strong>J&#39;ai envie d&#39;y croire</strong>.</p>
<blockquote>
<p><em><samp>le</samp></em> <strong>Biais de confirmation</strong> : nous avons tendance à intégrer les informations qui appuie les croyances que nous avions au préalable et d&#39;ignorer ce qui va à l&#39;encontre de nos croyances. Ce comportement est la plupart du temps involontaire !</p>
</blockquote>
<blockquote>
<p>Pour ce prémunir de ce biais, il est important de se préoccuper avant tout des informations qui vont à l&#39;encontre de ce qu&#39;on a envie de croire et de les analyser de façon critique.</p>
</blockquote>
<blockquote>
<p>Source : <a href="https://fr.wikipedia.org/wiki/Biais_de_confirmation">https://fr.wikipedia.org/wiki/Biais_de_confirmation</a></p>
</blockquote>
<p>Aussi si je m&#39;arrête un instant, je peux légitimement me poser cette question : <em>Comment puis-je être sur que les valeurs présentées ici sont vraies ? Et si elles le sont, comment puis-je savoir qu&#39;elles sont toujours à jour ?</em></p>
<h2 id="la-puce-à-loreille">La puce à l&#39;oreille</h2>
<p>Ce qui dérange <a href="http://fr.marcschillaci.com/2018/06/a-m%C3%A9diter-comment-savoir-quand-une-nouvelle-fra%C3%AEche-ne-lest-plus-.html">Marc Schillaci</a> dans sa publication est l&#39;élément suivant : « J&#39;ignore comment est défini chaque durée de vie, sachant que pour ma part, il m&#39;arrive de me connecter le soir sur Twitter et de faire un tour sur certaines timelines pour lire de &quot;vieux liens&quot; de plus de 12 heures ! Voire de plusieurs jours sur LinkedIn. J&#39;imagine qu&#39;il s&#39;agit uniquement de la durée de vie de l&#39;instantanéité &quot;la durée de vie qui correspond au laps de temps moyen d&#39;attention de l&#39;audience avant que le contenu soit noyé dans le flux des publications&quot;. ».</p>
<p>C&#39;est un excellent réflexe de se demander « quelle a été la <strong>méthode d&#39;acquisition de connaissance</strong> pour cette infographie, et dans quelle mesure je peux lui faire confiance. ». C&#39;est la première étape du doute méthodique.</p>
<p>Une explication possible pour remettre en cause les doutes de Marc est que cette infographie peut refléter la durée avant laquelle au moins XX% de personnes voient dans leurs flux / recherches une information. Ce XX% explique alors que si l&#39;on voit l&#39;annonce au delà du temps affirmé, c&#39;est qu&#39;on ne fait déjà plus parti des XX% de l&#39;étude qui a produit les résultats de cette infographie. Mais puisque ceci n&#39;est pas mentionné, alors le doute est raisonnable.</p>
<blockquote>
<p><em><samp>la</samp></em> <strong>Rationalisation</strong> : nous avons tendance à trouver des explications qui nous semblent rationnelles et logiques pour expliquer ce qui cloche là ou nous devrions soit :</p>
<ul>
<li>nous avouer à nous même que nous ne savons pas ou</li>
<li>considérer plutôt une telle affirmation comme une hypothèse de travail qu&#39;il va falloir prouver : c&#39;est un rationnel.</li>
</ul>
</blockquote>
<blockquote>
<p>Source : <a href="http://menace-theoriste.fr/rationalisation/">http://menace-theoriste.fr/rationalisation/</a></p>
</blockquote>
<p>Aussi posons cette histoire de XX% comme une hypothèse de travail supplémentaire mais n&#39;oublions pas de traiter notre principale réflexion : au delà du fait que des informations furent réellement bonnes comment savoir si elles le sont toujours ?</p>
<p><em>Du coup les informations de notre infographies ? Sont-elles périmées ? Et notre hypothèse supplémentaire est elle bonne ?</em> Allons donc voir les sources que l&#39;on peut obtenir à partir de l&#39;infographie.</p>
<h2 id="état-des-lieux-initial">État des lieux initial</h2>
<p>Tout d&#39;abord, vérifions si nous avons des <strong>indicateurs de confiances</strong> sur cette source.</p>
<h3 id="les-valeurs-sont-elles-à-jours-">Les valeurs sont-elles à jours ?</h3>
<p>Un premier indicateur qui fait défaut sur cette infographie, c&#39;est qu&#39;elle n&#39;est pas daté. Si l&#39;auteur n&#39;a pas daté son travail, on peut raisonnablement penser que c&#39;est parce qu&#39;il ne sait pas en quoi cela est capital. Ici on pourrait donc penser que ce n&#39;est pas un professionel qui a fourni cette infographie.</p>
<blockquote>
<p><em><samp>la</samp></em>  <strong>Date d&#39;une information</strong> : elle nous renseigne sur le contexte temporel de l&#39;information, cela permet de comprendre pourquoi une informations à pu être juste dans un contexte, et ne plus l&#39;être dans un autre (par ex. aujourd&#39;hui).</p>
</blockquote>
<blockquote>
<p>Source : <a href="https://www.sites.univ-rennes2.fr/urfist/evaluation_information_contexte">https://www.sites.univ-rennes2.fr/urfist/evaluation_information_contexte</a></p>
</blockquote>
<p><em>C&#39;est déjà un premier point peu engageant.</em></p>
<h3 id="les-valeurs-sont-elles-vraies-">Les valeurs sont-elles vraies ?</h3>
<p>Deux autres indicateurs partiellement manquant (encore plus important que le premier) sont la <strong>source des données</strong> ainsi que la <strong>méthode d&#39;acquisition et de comparaisons des données</strong>. Partiels donc car le site supposé contenir la source des données y est mentionné, c&#39;est <a href="http://smarther.co/">Smarther</a> mais impossible d&#39;atteindre directement les données. Le minimum auquel on était en droit de s&#39;attendre était un lien direct vers une page plus exhaustive fournissant ces informations.</p>
<blockquote>
<p><em><samp>le</samp></em>  <strong>Protocole</strong> : explique comment les données ont été récupérées et analysées. Un protocole doit toujours permettre à celui qui le suit en utilisant ses instructions de tomber sur les mêmes résultats. Si cela n&#39;est pas le cas, c&#39;est que l&#39;information issus du protocole n&#39;est pas fiable. Parce que l&#39;erreur peut également venir de l&#39;expérimentateur, on doit répliquer un grand nombre de fois les études et aboutir à la même conclusion pour avoir des informations solides. Une étude sans réplication étant peu fiable, et sans protocole étant inutile.</p>
</blockquote>
<blockquote>
<p>Source : <a href="https://fr.wikipedia.org/wiki/M%C3%A9thode_exp%C3%A9rimentale">https://fr.wikipedia.org/wiki/M%C3%A9thode_exp%C3%A9rimentale</a></p>
</blockquote>
<p><em>C&#39;est donc un second point peu engageant.</em></p>
<p>Cependant, tout ce que nous souhaitons récupérer est peut-être facilement accessible sur le site de <a href="http://smarther.co/">Smarther</a>. Il est possible que l&#39;auteur soit expert dans la réalisation d&#39;infographie qui buzz mais qu&#39;il ne soit pas expert en journalisme. Gageons que sa source sera plus fiable. Mais pour le moment, c&#39;est peu engageant. On pourra toujours également penser que l&#39;auteur n&#39;aura pas eu la place de mettre le lien complet. Cela n&#39;est qu&#39;une indication, mais il serait dommage de passer à côté de super information au prétexte que ce n&#39;est pas directement sourcé, non ? J&#39;ai un doute. Mais continuons.</p>
<h2 id="domaine-de-compétence-de-lauteur">Domaine de compétence de l&#39;auteur</h2>
<p>Rendons nous donc sur <a href="https://fr.statista.com/">Statista</a> présenté comme les créateurs de l&#39;infographie. Allons vers <a href="https://www.statista.com/getting-started/welcome-to-statista">une page qui nous présente ce site</a> donc.</p>
<figure>
<img width="1018" height="712" src="https://blog.lesieur.name/media/images/upload/statista.jpg" style="max-width: 100%;height: auto;">
<figcaption>[Statista](https://fr.statista.com/)</figcaption>
</figure>

<p>On y apprend donc que <a href="https://fr.statista.com/">Statista</a> a pour but de compiler des informations en provenance de <strong>sources statistiques</strong> et de les mettre à disposition. Jolie présentation pour le site. L&#39;infographie nous fournit des données statistiques, le site nous dit que compiler des statistiques c&#39;est leur domaine d&#39;expertise. Tout semble aller bien. <strong>J&#39;ai envie d&#39;y croire</strong>.</p>
<p>Bon, mais sinon, y a t-il un réel auteur ? Une présentation d&#39;un designer ou artiste probablement.</p>
<p>Rendons nous sur Google Image Search et cherchons notre image en faisant une recherche par image puis rendons-nous dans toutes les tailles.</p>
<figure>
<img width="1018" height="526" src="https://blog.lesieur.name/media/images/upload/google-search.jpg" style="max-width: 100%;height: auto;">
<figcaption>[Google Search Image](https://images.google.com/)</figcaption>
</figure>

<p>En jouant avec les dates on trouve 15 résultats et ils datent tous de cette dernières semaines. L&#39;information semble être fraîche ! Vraiment ? En tout cas <strong>j&#39;ai envie d&#39;y croire</strong>.</p>
<p>Après avoir isolé la source initiale par la date, nous tombons sur l&#39;article original.</p>
<p>L&#39;<a href="https://fr.statista.com/infographie/14309/linstantaneite-du-contenu-sur-les-reseaux-sociaux/">infographie a donc été publiée le 18 juin 2018 sur cette page</a> et on y apprend que l&#39;auteur est Claire Jenik. Elle est Data journaliste... Difficile à première vu, en aillant affaire à une journaliste des données, que l&#39;infographie ne soit pas daté ou correctement sourcé (lien direct). Allons donc voir le CV de cette personne. Il semble qu&#39;elle est commencé ce métier directement chez <a href="https://fr.statista.com/">Statista</a>. Elle a donc pu acquérir ses compétences de ses pairs experts chez <a href="https://fr.statista.com/">Statista</a>. Également elle a pu, au vu de ces études, êtres exposées à la méthode scientifique très similaire à la méthode d&#39;investigation journalistique. Donc de ce côté là, il n&#39;y a rien qui nous permettrais de conclure que cette personne ne soit pas compétente dans son domaine.</p>
<figure>
<img width="1018" height="690" src="https://blog.lesieur.name/media/images/upload/claire-jenik.jpg" style="max-width: 100%;height: auto;">
<figcaption>[Article de Claire Jenik, Data journaliste](https://fr.statista.com/infographie/14309/linstantaneite-du-contenu-sur-les-reseaux-sociaux/)</figcaption>
</figure>

<p>L&#39;autorité de l&#39;auteur est établie, il n&#39;est pas impossible que nous ayons affaire à quelqu&#39;un qui s&#39;y connaisse assez en statistique et en méthode scientifique pour fournir une compilation de données correcte. Je n&#39;ai pour le moment pas de raison suffisante de douter de ce côté là.</p>
<blockquote>
<p><em><samp>l&#39;</samp></em>  <strong>Autorité de l&#39;auteur</strong> : une affirmation n&#39;a de validité que si elle est faites par une personne dont l&#39;affirmation touche son domaine de compétence. Si la personne n&#39;a pas les moyens d&#39;apporter la preuve de son autorité dans un domaine, il n&#39;y a pas de raison de croire à ce qu&#39;elle affirme.</p>
</blockquote>
<blockquote>
<p>Source : <a href="https://fr.wikipedia.org/wiki/Argument_d%27autorit%C3%A9">https://fr.wikipedia.org/wiki/Argument_d%27autorit%C3%A9</a></p>
</blockquote>
<p>Peux-être que Claire Jenik n&#39;est pas sensibilisé à la portée virale d&#39;une telle infographie. En tout cas, mettons de côté le fait qu&#39;elle le soit et que la réalisation « intemporelle » de son infographie soit volontaire, ce qui ne rendrait vraiment pas service à <a href="https://fr.statista.com/">Statista</a>.</p>
<p>Une autre zone d&#39;ombre se profile également : je n&#39;ai rien vu qui laisserai transparaître que notre auteur ai une expertise pour la discrimination pertinente de données statistiques dans le domaine des médias / plateformes sociales. Ceci est très important pour éviter les facteurs de confusions.</p>
<blockquote>
<p><em><samp>l&#39;</samp></em>  <strong>Facteur de confusion</strong> : une affirmation basée sur des données publiquement consultable n&#39;a de validité que si elle est faites par une personne dont c&#39;est le domaine de compétence. Cela permet d&#39;éviter les facteurs de confusion dont l&#39;un des exemples le plus parlant reste <a href="https://fr.wikipedia.org/wiki/Paradoxe_de_Simpson">le paradoxe de Simpson</a>.</p>
</blockquote>
<blockquote>
<p>Source : <a href="https://fr.wikipedia.org/wiki/Biais_de_confusion">https://fr.wikipedia.org/wiki/Biais_de_confusion</a></p>
</blockquote>
<h2 id="remonter-à-la-source-de-linfographie">Remonter à la source de l&#39;infographie</h2>
<p>Puisque nous avons réussi à mettre la main sur la page qui nous donne plus d&#39;information sur l&#39;infographie, nous savons que ce n&#39;est pas l&#39;auteur qui a compilé les données mais que c&#39;est une page qui l&#39;avait fait avant elle. Elle en donne la source dans le texte comme <a href="https://fr.statista.com/sources/1/">Statista en fait la promesse ici</a>. Cela peut être rassurant car ce n&#39;est pas parceque l&#39;auteur à mal présenter ces données qu&#39;elles sont fausses.</p>
<p>Nous arrivons donc sur <a href="http://smarther.co/marketing/long-content-last-social-media/">la source des données exposées dans l&#39;infographie par Smarther</a>.</p>
<figure>
<img width="1018" height="983" src="https://blog.lesieur.name/media/images/upload/source-fake-news.jpg" style="max-width: 100%;height: auto;">
<figcaption>[La Source](http://smarther.co/marketing/long-content-last-social-media/)</figcaption>
</figure>

<p><strong>Ail !</strong> La source date du 22 juillet 2017.</p>
<p>La source a déjà un an ! Je n&#39;ai probablement pas l&#39;expertise nécessaire en ce qui concerne la rapidité d&#39;obsolescence des statistiques extraites de l&#39;utilisation des plateformes sociales. Aussi, peut-être qu&#39;un an est encore quelque chose d&#39;acceptable ? Je m&#39;en remet pour le moment à l&#39;expertise de Claire Jenik qui doit avoir (c&#39;est une nécessité) plus d&#39;expérience que moi sur le sujet. Elle n&#39;a pas pu passer a côté de cette information en tant que journaliste, un an c&#39;est peut-être encore acceptable. <strong>J&#39;ai envie d&#39;y croire</strong>.</p>
<h3 id="parfois-la-source-à-quelque-chose-à-vendre">Parfois la source à quelque chose à vendre</h3>
<p>Que nous apprend la source <a href="http://smarther.co/marketing/long-content-last-social-media/">Smarther</a> ? À première vu, ce n&#39;est pas une étude, juste un article de blog. Cependant, cet article doit-lui se baser également sur une source ?</p>
<p>Ce qu&#39;on apprend de <a href="http://smarther.co/marketing/long-content-last-social-media/">Smarther</a> au niveau des valeurs est juste vis à vis de l&#39;infographie, et en ce sens, l&#39;infographie résume bien sa source directe. Mais ce n&#39;est pas assez. Un article de blog n&#39;est jamais une source fiable si il ne fournit pas de source et/ou la preuve de l&#39;expertise de son auteur.</p>
<figure>
<img width="1018" height="675" src="https://blog.lesieur.name/media/images/upload/smarther.jpg" style="max-width: 100%;height: auto;">
<figcaption>[Une companie qui a quelque chose à vendre](http://smarther.co/)</figcaption>
</figure>

<p>On continue donc à lire la page de <a href="http://smarther.co/marketing/long-content-last-social-media/">Smarther</a>. Pas de référence, pas de source d&#39;étude ? En fait on a une maigre mention à Mamsys, une société de développement logiciel en Inde qui serait les rapporteurs de cette information (« The Indian software developer Mamsys has interesting figures [...] »). On a donc une page qui affirme des choses en se basant sur des données non sourcées.</p>
<p><em>Carton rouge</em>. On devrait définitivement ne pas faire confiance à cette infographie.</p>
<blockquote>
<p><em><samp>l&#39;</samp></em>  <strong>Source fiable</strong> : Ce document n&#39;aurait pas du faire office de source s&#39;il ne mentionne pas lui même ces sources. Ainsi, ce n&#39;est pas parce qu&#39;un <a href="https://fr.wikipedia.org/">article Wikipedia</a> n&#39;est pas une étude que ce n&#39;est pas une source d&#39;information fiable car :</p>
<ul>
<li>Il cite ces sources. On sait donc qu&#39;au dela du résumé fait par les contributeurs, on peut soit même vérifier l&#39;information.</li>
<li>Il est à jour. La page étant éditable en permanence, l&#39;information est le plus à jour possible.</li>
</ul>
</blockquote>
<blockquote>
<p><a href="https://fr.wikipedia.org/wiki/Aide:Identifiez_des_sources_fiables">https://fr.wikipedia.org/wiki/Aide:Identifiez_des_sources_fiables</a></p>
</blockquote>
<p>On devrait donc s&#39;arrêter ici et ce demander surtout pourquoi <a href="http://smarther.co/">Smarther</a> nous livre un tel article puisque ce n&#39;est visiblement pas leur métier premier en consultant leur page « à propos ».</p>
<blockquote>
<p><em><samp>l&#39;</samp></em>  <strong>Intention de l&#39;auteur</strong> : pour arriver à savoir si une source d&#39;information n&#39;a pas de conflit d’intérêt, il faut savoir si la diffusion d&#39;une information qu&#39;elle donne peut lui être bénéfique soit sur le font, soit sur la forme.</p>
</blockquote>
<p>Ici, en regardant ce que fait <a href="http://smarther.co/">Smarther</a>, on peut supposer l&#39;intention originale des auteurs avec ce billet mal sourcé : promouvoir leurs produits en restant présent dans les flux d&#39;actualités en produisant du contenu. Cela ne fournit aucun gage de qualité, aucune indication sur la <em>méthode de production des études</em>. Mais cette hypothèse ne prouve rien. <strong>J&#39;ai envie d&#39;y croire</strong>.</p>
<p>À ce niveau il aurait pu se passer au moins deux choses puisque Claire Jenik est journaliste.</p>
<ul>
<li><p>Soit notre infographiste ne se sert pas de cette source car elle n&#39;a aucun aspect de fiabilité (date lointaine, pas de source précise, expertise du blog discutable). Elle se tourne donc sur autre chose pour produire son travail.</p>
</li>
<li><p>Soit elle cherche elle même avec les indices de la page à retrouver l&#39;étude en question et la véracité des données qu&#39;elle fournit, ce qui prend du temps pour un résultat peu engageant pour le moment.</p>
</li>
</ul>
<p>Puisque cette infographie existe, et que nous mettons de côté l&#39;hypothèse que l&#39;auteur est mal fait son travail et ne soit pas compétant pour le moment, alors elle a forcément suivi une piste.</p>
<p>Allons creuser nous aussi du côté de la société indienne Mamsys.</p>
<h3 id="source-introuvable">Source introuvable</h3>
<p>Après une recherche rapide sur Google (<a href="https://www.mamsys.com/digital-marketing/">ce site semble être la bonne compagnie</a> ; bon nom, origine indienne), cherchons maintenant dans les publications avant le 22 juillet 2017 dans le blog de <a href="https://www.mamsys.com/">Mamsys</a>. C&#39;est donc à partir de <a href="https://www.mamsys.com/blog/page/5/">la 5ième page</a> (à date du 23 juin 2018) qu&#39;on peut commencer à chercher l&#39;information donc.</p>
<p>Rien qui ressemble au titre de <a href="http://smarther.co/">Smarther</a> entre les pages 5 à 17 après lectures des titres et consultations des pages les plus probables d&#39;avoir l&#39;information. Rien à ressortir via le moteur de recherche. <strong>Mais l&#39;absence de preuve n&#39;est pas la preuve de l&#39;absence</strong>. Je m&#39;en tiens là pour cette piste.</p>
<figure>
<img width="1018" height="696" src="https://blog.lesieur.name/media/images/upload/mamsys.jpg" style="max-width: 100%;height: auto;">
<figcaption>[404 : Source Not Found](https://www.mamsys.com/blog/page/5/)</figcaption>
</figure>

<p>Ce que j&#39;ai vu des articles de <a href="https://www.mamsys.com/">Mamsys</a>, c&#39;est qu&#39;il ne sont pas « créateur de source » sur les pages que j&#39;ai ouvertes, il sont juste relayeurs d&#39;informations. <strong>Les sources sont donc peut être disponibles ailleurs</strong>.</p>
<h3 id="assez-déléments-pour-évincer-linfographie-comme-source-fiable">Assez d&#39;éléments pour évincer l&#39;infographie comme source fiable</h3>
<p>Visiblement nous sommes dans un cul de sac ? Il aurait donc été raisonnable pour l&#39;auteur d&#39;abandonner la diffusions de ces informations. Cherchons un peu plus loin tout de même. <strong>J&#39;ai envie d&#39;y croire</strong>.</p>
<p>Cherchons dans des fenêtres temporelles avant 2017 avec les valeurs de l&#39;article source « Twitter 18 minutes Facebook 5 hours Instagram 21 hours LinkedIn 24 hours YouTube 20 days Pinterest 4 months Blog 2 years » voir ce que nous sommes capable de trouver. Allons nous récupérer notre fameuse étude ?</p>
<p>Après avoir recroisé plusieurs liens mettant en évidence que la liste a été repartagée à droite à gauche <a href="https://the-refinery.io/digital-marketing/how-long-does-a-social-media-post-last">on tombe sur un article similaire</a> à ce qu&#39;aurait pu donner celui qui nous a manquer chez <a href="https://www.mamsys.com/">Mamsys</a>. La date du 12 juin 2016 ramène la source des données à 2 ans en arrière maintenant...</p>
<figure>
<img width="1018" height="684" src="https://blog.lesieur.name/media/images/upload/a-source-compilation.jpg" style="max-width: 100%;height: auto;">
<figcaption>[Pas une mais des sources](https://mtomconsulting.com/lifespan-social-media-post/)</figcaption>
</figure>

<p>On s&#39;aperçoit en parcourant <a href="https://mtomconsulting.com/lifespan-social-media-post/">les sources de cette lecture</a> que les données à la base de l&#39;infographie n&#39;est probablement pas une étude mais des études, autant que de plateforme sociale. Faire cette infographie va devenir complexe car <strong>il va falloir compiler les données des études et vérifier qu&#39;elles sont compatibles entre elles</strong> pour en résumer le tout. Et des études incomparables, il y en a beaucoup. C&#39;est là que l&#39;expertise de Data journaliste de Claire Jenik va prendre tout son sens. <strong>J&#39;ai envie d&#39;y croire</strong>.</p>
<p>On trouve également cette <a href="http://www.convinceandconvert.com/content-marketing/lifetime-value-of-a-blog-post/">source pour la valeur de deux ans des blogs</a>.</p>
<p><strong>Et là, c&#39;est la douche froide</strong>. Voici malheureusement ce que remonter aux sources nous donne.</p>
<h4 id="twitter">Twitter</h4>
<p>Le 18 minutes de Twitter est expliqué dans <a href="https://moz.com/blog/when-is-my-tweets-prime-of-life">cet article</a> qui date du 12 novembre 2012 ! On y apprend que « Yep, for half of the users sampled, 18 minutes or less was the time it took for half of their tweets&#39; RTs to occur. ». Notre hypothèse précédente placerait donc la barre à <strong>50% des utilisateurs</strong> concernant <strong>50% des tweets visibles</strong>.</p>
<h4 id="facebook">Facebook</h4>
<p>Le 5h de Facebook est expliqué dans <a href="https://www.socialmediatoday.com/content/facebook-posts-lifetime-even-shorter-you-thought#node-1646986?utm_source=hootsuite&amp;utm_medium=twitter&amp;utm_campaign=hootsuite_tweets">cet article</a> qui date du 06 septembre 2013 ! On y apprend que « 75% of engagement happens within the first 5 hours ». Notre hypothèse précédente placerait donc la barre à <strong>75% des utilisateurs</strong> concernant <strong>l&#39;engagement sur ce qui est passé dans les flux</strong>.</p>
<h4 id="blog">Blog</h4>
<p>Le 2 ans des Blog est expliqué dans <a href="http://www.convinceandconvert.com/content-marketing/lifetime-value-of-a-blog-post/">cet article</a> qui date du 28 août 2015 ! On y apprend que « only after two years will a blog post obtain 99 percent of its impressions ». Notre hypothèse précédente placerait donc la barre à <strong>99% des utilisateurs</strong> concernant <strong>la visite d&#39;un billet de blog</strong>.</p>
<p><em>Nous n&#39;avons pas besoin de poursuivre plus nos investigations puisque nous avons à présent assez d&#39;éléments pour mettre à mal la véracité des informations de cette infographie</em>.</p>
<h2 id="conclusion--cette-infographie-est-de-la-désinformation">Conclusion : cette infographie est de la désinformation</h2>
<p>Il y a deux critères avec nos recherches qui permettent d&#39;exclure cette infographie comme source fiable à présent :</p>
<figure>
<img width="1018" height="847" src="https://blog.lesieur.name/media/images/upload/fake-news.jpg" alt="Contenu, apparence et comportement" style="max-width: 100%;height: auto;">
<figcaption>Infographie utilisant des données non comparables et passées de date.</figcaption>
</figure>



<h3 id="à-propos-des-dates">À propos des dates</h3>
<p>C&#39;est l&#39;argument le moins solide car, n&#39;étant pas expert en date de péremption des informations concernant les algorithmes des plateformes sociales, je ne peux pas affirmer avec certitude que les dates fournies relèvent de l&#39;obsolescence. Cependant, au vu des dates qui courent de 2012 à 2015 pour les informations trouvées et la parution de l&#39;infographie en 2018 ainsi que mon expérience dans le développement informatique : j&#39;ai de bonne raison de croire que ces informations ne sont plus valides. Une bonne manière de le prouver serait de récupérer des chiffres récents (des derniers mois) contredisant chaque point dans des études comparatives faites par des statisticiens experts dans le domaine des médias sociaux.</p>
<h3 id="à-propos-de-la-compilation-statistique">À propos de la compilation statistique</h3>
<p>C&#39;est l&#39;argument qui discrimine définitivement cette infographie comme étant sérieuse : elle compare des valeurs qui sont incomparables puisque le seuil XX% est différent pour chacune et que la métrique visée est différente à chaque fois. Et encore une fois, les dates ne ciblent pas les mêmes temporalités ce qui ne reflète pas les mêmes utilisateurs globaux : pas le même contexte.</p>
<p>Il est même fort probable qu&#39;à <strong>valeur de XX% égale</strong>, pour <strong>chacune des métriques</strong> à <strong>la même date</strong> on obtienne un résultat <strong>complètement différent</strong>.</p>
<h3 id="où-est-ce-que-ça-à-merdé-">Où est-ce que ça à merdé ?</h3>
<p>Très clairement, la source <a href="http://smarther.co/marketing/long-content-last-social-media/">Smarther</a> n&#39;est pas une source fiable. Comme Claire Jenik est journaliste, elle devait le savoir. Puisqu&#39;elle est spécialisée dans la manipulation de données (Data journaliste) et si elle a suivi la piste des informations, elle doit également savoir qu&#39;elles n&#39;étaient pas comparables. Je m&#39;arrêterai là et n&#39;émettrai pas mon jugement personnel dans ce billet, ce n&#39;est pas le but.</p>
<blockquote>
<p><em><samp>le</samp></em>  <strong>Procès d&#39;intention</strong> : c&#39;est le fait de préter des intentions à quelqu&#39;un sur la base d&#39;élément qui ne sont pas suffisant pour exclure d&#39;autres hypothèses. Aussi il ne faut pas attribuer à la malveillance ce qui peut être attribué à la simple bétise sans preuve.</p>
</blockquote>
<blockquote>
<p>Source : <a href="https://fr.wikipedia.org/wiki/Proc%C3%A8s_d%27intention">https://fr.wikipedia.org/wiki/Proc%C3%A8s_d%27intention</a></p>
</blockquote>
<p><strong>Statista n&#39;a pas rendu le service qu&#39;il prétent offrir pour cette infographie et Claire Jenik n&#39;a pas sérieusement fait son travail pour cette infographie.</strong></p>
<blockquote>
<p><em><samp>la</samp></em>  <strong>Généralisation abusive</strong> : il ne serait pas correcte de conclure que <a href="https://fr.statista.com/">Statista</a> ne rend pas le service qu&#39;il prétend offrir en se basant sur uniquement une publication. Pour pouvoir affirmer cela dans la globalité il faudrait qu&#39;un nombre significatif de publication soient démontrés fausses. Il faudrait également vérifier si <a href="https://fr.statista.com/">Statista</a> s&#39;engage sur un pourcentage de « vrai-positif » pour savoir à partir de quand on peut considérer qu&#39;il ne rend pas le service qu&#39;il affirme offrir.</p>
</blockquote>
<blockquote>
<p>Source : <a href="https://cortecs.org/materiel/la-generalisation-abusive/">https://cortecs.org/materiel/la-generalisation-abusive/</a></p>
</blockquote>
<h3 id="oui-mais-dautres-infographies-confirme-ces-nombres-">Oui, mais d&#39;autres infographies confirme ces nombres !</h3>
<p>J&#39;ai trouvé assez d&#39;élément pour confirmer que cette infographie est de la désinformation. Vraiment ? Je n&#39;ai pas la certitude que les informations s&#39;appuyaient réellement sur les sources que je cite pourtant. Il y a de grande chance que ce soit vrai : mais ce n&#39;est pas une preuve irréfutable.</p>
<blockquote>
<p><em><samp>le</samp></em>  <strong>Biais d&#39;attrition</strong> : c&#39;est le fait de prendre uniquement en compte les résultats que nous avons sous les yeux et que nous pensons valide en ne se demandant pas s&#39;il n&#39;y aurait pas plus de résultat que cela (ou en écartant volontairement des résultats déjà trouvé).</p>
</blockquote>
<blockquote>
<p>Source : <a href="http://www.txrating.org/polycop/concept/attrition.htm">http://www.txrating.org/polycop/concept/attrition.htm</a></p>
</blockquote>
<p>J&#39;ai donc retenter la recherche en incluant le mot « Mamsys » avec la liste des autre valeurs.</p>
<p>Après avoir ouvert énormément de site (comme <a href="https://www.linkedin.com/pulse/marketing-tips-how-long-does-content-last-social-media-kumar-pandian/">ce presque plagiat LinkedIn</a>, <a href="http://mobileappdevelopmentcompany209.blogspot.com/2018/06/how-long-does-content-last-in-social.html">ce billet récent</a>, <a href="https://www.scoop.it/t/mobile-app-development-company-13/?">ce plagia même pas formaté</a>) j&#39;ai pu constater que tout comme l&#39;auteur tout le monde sourçait <a href="http://smarther.co/marketing/long-content-last-social-media/">l&#39;article de Smarther</a>.</p>
<p>Mais je suis tombé sur <a href="http://smarther.co/marketing/long-content-last-social-media/">cet article en allemand</a> datant du 31 mai 2017 qui est antérieur donc à celui de <a href="http://smarther.co/">Smarther</a>. Et ce qui est intéressant, c&#39;est qu&#39;il source correctement Mamsys ! En voici <a href="https://www.mamsys.com/21-ways-extend-life-of-your-content/">le lien qui est mort</a> mais qui nous indique tout de même que l&#39;article en question s&#39;appelait « 21 ways extend life of your content » !</p>
<p>On relance les recherches avec ce titre donc et là, c&#39;est le graal.</p>
<figure>
<img width="1018" height="572" src="https://digitalidee.fr/wp-content/uploads/2017/09/dessin-42.png" style="max-width: 100%;height: auto;">
<figcaption>[Timeline des infographies](https://digitalidee.fr/wp-content/uploads/2017/09/dessin-42.png)</figcaption>
</figure>

<p>On obtient des « clones » de ce que devait être l&#39;article original comme <a href="https://socialmediaonlineclasses.com/21-ways-to-extend-the-life-of-your-content-infographic">ici</a> ou <a href="https://socialmediaonlineclasses.com/21-ways-to-extend-the-life-of-your-content-infographic">là</a>. Cela nous permet de voir que des autres infographies reprennent les mêmes valeurs ! Donnant l&#39;illusion que ces informations sont véridiques ! Pourtant <strong>ce n&#39;est pas parce que le plus grand nombre affirme quelque chose que l&#39;information est vrai</strong>. L&#39;important, c&#39;est l&#39;<strong>expertise de celui qui affirme</strong>.</p>
<p>L&#39;une des infographies ici nous permet directement de retrouver des sources correspondants aux valeurs incriminées. C&#39;est la seconde sur le graphe ci-dessus :</p>
<figure>
<img width="675" height="202" src="https://digitalidee.fr/wp-content/uploads/2017/09/How-long-does-your-content-last-sources.png" style="max-width: 100%;height: auto;">
<figcaption>[Sources des affirmations de l'infographie](https://digitalidee.fr/wp-content/uploads/2017/09/How-long-does-your-content-last-sources.png)</figcaption>
</figure>

<p>Et <a href="https://digitalidee.fr/attention-duree-de-contenu-cacher-une-autre/">l&#39;étude de ces sources réalisée par Paul Humbert</a> m&#39;amène également à la conclusions que les informations présentés ainsi en 2018 sont de la désinformation.</p>
<h2 id="et-sinon--comment-savoir-quand-une-nouvelle-fraîche-ne-lest-plus-">Et sinon ? Comment savoir quand une nouvelle fraîche ne l&#39;est plus ?</h2>
<p>Et si on répondait à la question ?</p>
<h3 id="réponse-courte">Réponse courte</h3>
<ul>
<li>Pas de date, pas de source directe ? Direction poubelle.</li>
</ul>
<h3 id="ma-méthode">Ma méthode</h3>
<p>La méthode que j&#39;utilise et qui me permet de faire cette discrimination au quotidien est <a href="https://www.lesieur.name/zetetique/">la méthode Zététique</a>.</p>
<p>Pour en faire un résumé, la Zététique vous permet :</p>
<p>1) D&#39;entraîner ses heuristiques de prise de décision intuitive :</p>
<ul>
<li>en s&#39;accommodant au mieux des biais cognitifs humains et</li>
<li>en repérant les arguments et logiques fallacieuses.</li>
</ul>
<p>2) D&#39;améliorer sa prise de décision analytique :</p>
<ul>
<li>en travaillant sa logique,</li>
<li>en faisant des réductions statistiques et</li>
<li>en étudiant des modèles probabilistes.</li>
</ul>
<p>3) De correctement s&#39;informer :</p>
<ul>
<li>en classifiant les preuves, en pondérant les hypothèses et en remontant aux sources afin</li>
<li>de distinguer ce que l&#39;on crois de ce que l&#39;on sait.</li>
</ul>
<p>4) De rester bienveillance et humble :</p>
<ul>
<li>en remettant en causes les propos/actions pas les personnes,</li>
<li>en ne cherchant pas à avoir raison mais à se tromper le moins possible et</li>
<li>en acceptant nos croyances en tant que tel.</li>
</ul>
<p>C&#39;est avec cette méthode que j&#39;ai rédigé cet article !</p>
]]></description>
            <link>http://localhost:7776/l-instantaneite-du-contenu-et-les-etudes-statistiques-perimees-recyclees/</link>
            <guid isPermaLink="false">5b2e26451516e03d51cd94f7</guid>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <category><![CDATA[Data Science]]></category>
            <category><![CDATA[Hors-sujet]]></category>
            <category><![CDATA[Zététique]]></category>
            <category><![CDATA[SEO]]></category>
            <category><![CDATA[Astuces]]></category>
            <category><![CDATA[Outils]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Sat, 23 Jun 2018 10:51:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Séparations des rôles du HTML / CSS / JavaScript et mise en application]]></title>
            <description><![CDATA[<p>Cet article fait office de conventions d&#39;architecture d&#39;un site web orienté composant pour la partie cliente, peu importe la technologie d&#39;implémentation finale, de manière à ce que le code soit valide, performant et maintenable par des développeurs front-end, des développeurs back-end ainsi que des pousseurs de contenu. Ces techniques étant en constantes évolution, et les problématiques évoluant au fur et à mesure de mes itérations créatives, cet article est voué à se compléter et changer.</p>
<figure>
<img width="988" height="847" src="http://vdoit.in/wp-content/uploads/2016/09/vDoIT_html-css-logo1.jpg" alt="Contenu, apparence et comportement" style="max-width: 100%;height: auto;">
<figcaption>Contenu, apparence et comportement</figcaption>
</figure>



<h2 id="présentation-globale-des-rôles">Présentation globale des rôles</h2>
<h3 id="html">HTML</h3>
<p>Le HTML est le centre de tout. C&#39;est lui qui doit <strong>présenter le contenu</strong>, qui est la clé de voûte de tout site web. Il doit être au service du contenu avant tout et non à celui du design (visuel). Le site web doit être valide et respecter les normes W3C en fonction de son DocType et être le plus cohérent à travers tout le site. Ce qui doit justifier son changement est un apport / une modification de contenu. Il est le lien entre le travail des développeurs front-end, des développeurs back-end ainsi que les pousseurs de contenu et doit bouger le moins possible quand il est question de changement de design.</p>
<p>Il y a 3 types de fragment HTML sur une page :</p>
<ul>
<li>Les <strong>gabarits de page</strong> (ou « layouts », ou « templates » ou encore « grids ») : ils représentent la structure globale d&#39;une page qui doit accueillir des composants.</li>
<li>Les <strong>composants</strong> (ou « modules », ou « views » ou encore « items template ») : ils représentent une partie auto-suffisante à elle-même, traitant du même type de contenu et l&#39;organisant hiérarchiquement.</li>
<li>Les <strong>contenus</strong> (ou « contents », ou « data ») : ils représentent les données à exposer au visiteur et pour lesquelles le site web existe. Elles sont sémantiquement parsemées de balise HTML et sont les zones qui proviennent généralement de fichier externe (HTML, Markdown, JSON, etc.) ou de base de donnée (SQL, NoSQL, etc.).</li>
</ul>
<p><strong>Exemple de gabarit, composants et contenus</strong></p>
<div class="ex-layout">
    <div class="ex-component">
        <div class="ex-subcomponent" style="width: calc(50% + 24px);">
            <div class="ex-data">
                titre
            </div>
        </div>
        <div class="ex-subcomponent" style="width: calc(50% + 24px);">
            <div class="ex-data">
                menu (liste)
            </div>
        </div>
    </div>
    <div class="ex-component">
        <div class="ex-data">
            titre
        </div>
        <div class="ex-data">
            paragraphes
        </div>
        <div class="ex-data">
            bouton
        </div>
    </div>
    <div class="ex-sublayout">
        <div class="ex-component" style="width: calc(33.33333333% - 24px);">
            <div class="ex-data">
                ...
            </div>
        </div>
        <div class="ex-component" style="width: calc(33.33333333% - 24px);">
            <div class="ex-data">
                ...
            </div>
        </div>
        <div class="ex-component" style="width: calc(33.33333333% - 24px);">
            <div class="ex-data">
                ...
            </div>
        </div>
    </div>
    <div class="ex-component"></div>
    <div class="ex-sublayout">
        <div class="ex-component" style="width: calc(33.33333333% - 24px);"></div>
        <div class="ex-sublayout" style="width: calc(66.66666666% + 24px);">
            <div class="ex-component" style="width: calc(25% - 24px);"></div>
            <div class="ex-component" style="width: calc(25% - 24px);"></div>
            <div class="ex-component" style="width: calc(25% - 24px);"></div>
            <div class="ex-component" style="width: calc(25% - 24px);"></div>
        </div>
    </div>
    <div class="ex-component"></div>
    <div class="ex-sublayout">
        <div class="ex-component" style="width: calc(50% - 24px);">
            <div class="ex-data">
                paragraphe
            </div>
        </div>
        <div class="ex-component" style="width: calc(50% - 24px);">
            <div class="ex-data">
                partage (liste)
            </div>
        </div>
    </div>
</div>



<h3 id="css">CSS</h3>
<p>Le CSS est ce qui s&#39;occupe d&#39;<strong>habiller graphiquement</strong> le site web. Il doit être totalement invisible pour les développeurs back-end et les pousseurs de contenu. Ils ne doivent jamais mettre les mains dans des fichiers CSS, Less, Stylus, etc. Cependant, les classes sur lesquels ils s’appuient demande à être documentées.</p>
<p>Il y a 2 types d&#39;approche en CSS :</p>
<ul>
<li><p><strong>CSS-Driven</strong>, avec l&#39;utilisation des sélecteurs CSS ciblant le HTML. Elles s&#39;appliquent en premier lieu sur les composants mais également sur les gabarits. Elles ne doivent jamais être utilisées dans du contenu. Le CSS-Driven est décrit, par exemple, avec BEM. Une documentation des états ou variations possibles des gabarits et composants doit être fournie aux développeurs back-end.</p>
</li>
<li><p><strong>HTML-Driven</strong>, avec l&#39;utilisation de patrons de conception (ou en anglais « Class Pattern »). Ils s&#39;appliquent en premier lieu sur les contenus (et possiblement sur les gabarits). Ils ne doivent jamais être utilisé dans des composants directement. Le HTML-Driven est décrit par exemple avec OOCSS (Bootstrap, Semantic-UI, etc.) et une documentation de l&#39;utilisation des patrons de conception doit être fournie aux pousseurs de contenu pour les remplirs s&#39;ils ne sont pas assistés d&#39;un éditeur WYSIWYG (« What you see is what you get »).</p>
</li>
</ul>
<p><strong>Exemple CSS-Driven</strong></p>
<div class="ex-component" style="width: calc(60% - 24px);">
    .<strong>user-profile</strong> <span style="opacity: 0.66;">(facultatif: <strong>.as-popup</strong>, <strong>.is-opened</strong>)</span>
    <div class="ex-subcomponent" style="margin: 12px;width: calc(100% - 24px);">
        .user-profile--<strong>avatar</strong>
    </div>
    <div class="ex-subcomponent" style="margin: 12px;width: calc(100% - 24px);">
        .user-profile--<strong>information</strong>
    </div>
</div>
<div class="ex-css" style="width: calc(40% - 24px);">
    <strong>Défini dans la CSS</strong><br>
    Le composant <strong>user-profile</strong> a un <em>fond vert</em>. Le sous-composant <strong>avatar</strong> est à <em>gauche</em>. Le sous-composant <strong>information</strong> est à <em>droite</em>. <span style="opacity: 0.66">Avec la variation <strong>as-popup</strong> le composant est une <em>popup caché</em>. Avec l'état <strong>is-opened</strong> le composant est <em>visible</em>.</span>
</div>
<hr class="invisible">

<p><strong>Exemple HTML-Driven</strong></p>
<div class="ex-css" style="width: calc(60% - 24px);">
    <div class="ex-data">img <strong>.img-responsive</strong></div>
    <div class="ex-data">p <strong>.lead</strong></div>
    <div class="ex-data">a <strong>.btn.btn-default</strong></div>
</div>
<div class="ex-css" style="width: calc(40% - 24px);">
    <strong>Appliqué sur le HTML,</strong><br>
    Le patron <strong>img-responsive</strong> rend l'image <em>adaptable à son conteneur</em>. Le patron <strong>lead</strong> met <em>en avant</em> le texte. Le patron <strong>btn</strong> transforme le lien en <em>bouton</em> et le patron <strong>btn-default</strong> lui donne un <em>skin</em> par défaut.</span>
</div>
<hr class="invisible">


<h3 id="javascript">JavaScript</h3>
<p>Les JavaScript s&#39;occupent, en partie, de <strong>rendre dynamique</strong> votre site web notamment en permettant les interactions entre l&#39;utilisateur et celui-ci. Les JavaScript doivent, tout comme les feuilles de style être séparés du code HTML faisant office de gabarit. Ils se placent soit avant, soit à la fin du contenu de <samp>&lt;body&gt;</samp> en fonction de leur nature.</p>
<ul>
<li><p>Les <strong>Avants DOM</strong> (ou Bootstraper), sont les fichiers qui se placent en haut des pages HTML. Ils n&#39;interagissent pas avec le DOM mais évitent le <a href="https://fr.wikipedia.org/wiki/FOUC">phénomène de FOUC</a>. Ils sont peu nombreux et doivent être le plus léger possible car ils bloquent l&#39;affichage de la page. On aura, par exemple, Modernizr, RequireJS, etc. pour les bibliothèque ou Vue.js, Angular, React, etc. pour les frameworks utilisés en mode applications web monopage (injection du DOM côté client sans changement de page). Placer un fichier ici avec les propriétés <samp>defer</samp> ou <samp>async</samp> revient à les placer dans la partie <strong>Après DOM</strong>.</p>
</li>
<li><p>Les <strong>Après DOM</strong> (ou DOM Ready) :</p>
<ul>
<li>Les <strong>communs</strong>, ils sont chargés sur chaque page et sont :<ul>
<li>Le fichier principaux du site (ou <strong>Common</strong>, ou Main, ou App). Ils représentent l&#39;unique point de démarrage du code qui va tourner dans toute votre page courante et également le code utilisé sur les patrons de conception.</li>
<li>Les bibliothèques externes (ou <strong>Vendor</strong>), comme jQuery, Underscore, axios, etc. qui sont utilisées à travers toutes les pages (possiblement amené depuis des CDN).</li>
<li>Les frameworks externes (ou <strong>MVVM</strong>), comme Vue.js, React, etc. qui sont utilisées à travers toutes les pages pour les <a href="https://blog.lesieur.name/modules-ecmascript-natif-sans-commonjs-systemjs-babel-webpack/">architectures web isomorphiques</a> (possiblement amené depuis des CDN).</li>
</ul>
</li>
<li>Les <strong>spécifiques</strong>, ils sont chargés uniquement sur des pages dédiées :<ul>
<li>Le fichier principal de la page (ou <strong>Specific</strong>), habituellement rattachés à un gabarit. Il est lancé par le Common en fonction du gabarit trouvé.</li>
<li>Les <strong>composants</strong> (ou <strong>Classe</strong> ou <strong>Interface</strong>), habituellement rattachés à un composant HTML. Ils sont lancés par le Specific en fonction des composants trouvés (ou par le Common si l&#39;on se passe des Specifics, notamment pour les petits sites).</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="rôle-et-utilisation-du-html">Rôle et utilisation du HTML</h2>
<h3 id="les-gabarits">Les gabarits</h3>
<ul>
<li><p>Les gabarits de page (ou « layouts » / « templates ») incluent exclusivement des composants. Ils ne doivent jamais inclure directement du contenu. Un gabarit est composé de plusieurs zone d&#39;atterrissage (ou « PlaceHolder »).</p>
</li>
<li><p>Un même gabarit peut être utilisé avec quelques différences entre deux rendus de page donc, dans ce cas, une variation de classe (ou « Class Variation ») avec <samp>with-*</samp> est utile. Nous verrons ça plus loin.</p>
</li>
</ul>
<p>Voici des exemples de gabarit :</p>
<h4 id="avec-un-unique-zone-datterissage">Avec un unique zone d&#39;atterissage</h4>
<p>Qui pourra servir de gabarit standard pour toutes pages simples.</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;head&gt;
    &lt;!-- Common CSS file declaration --&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!-- Boot JS file (modernizr, require, etc.) --&gt;
    &lt;div class=&quot;lyt tmpl-&lt;name-of-template&gt;&quot;&gt;
        &lt;!-- List of Components --&gt;
    &lt;/div&gt;
    &lt;!-- Common JS file declaration --&gt;
&lt;/body&gt;
</code></pre>
<p><em>Note : dans ce cas, <samp>tmpl-&lt;name-of-template&gt;</samp> n&#39;est pas requis puisqu&#39;il n&#39;y a qu&#39;une seule zone d’atterrissage pour tout.</em></p>
<h4 id="avec-de-multiples-zones-daterissages">Avec de multiples zones d&#39;aterissages</h4>
<p>Qui servira pour les dispositions les plus complexes.</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;head&gt;
    &lt;!-- Common CSS file declaration --&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!-- Boot JS file (modernizr, require, etc.) --&gt;
    &lt;div class=&quot;lyt tmpl-&lt;name-of-template&gt;&quot;&gt;
        &lt;div class=&quot;lyt-area for-header&quot;&gt;
            &lt;!-- List of Components --&gt;
        &lt;/div&gt;
        &lt;div class=&quot;lyt-area for-overview&quot;&gt;
            &lt;div class=&quot;lyt-part for-content&quot;&gt;
                &lt;!-- List of Components --&gt;
            &lt;/div&gt;
            &lt;div class=&quot;lyt-part for-aside&quot;&gt;
                &lt;!-- List of Components --&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;lyt-area for-footer&quot;&gt;
            &lt;!-- List of Components --&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Common JS file declaration --&gt;
&lt;/body&gt;
</code></pre>
<p><em>Note : dans ce cas, <samp>tmpl-&lt;name-of-template&gt;</samp> est obligatoire pour appliquer du CSS différemment sur chaque zone (<samp>lyt-area</samp> / <samp>lyt-part</samp>) en fonction du Gabarit.</em></p>
<h4 id="zones-atterrissage-multiples-avec-patron-de-classe">Zones atterrissage multiples avec patron de classe</h4>
<p>Comme par exemple la Grille de Bootstrap.</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;head&gt;
    &lt;!-- Common CSS file declaration --&gt;
&lt;/head&gt;
&lt;body class=&quot;&lt;name-of-template&gt;&quot;&gt;
    &lt;!-- Boot JS file (modernizr, require, etc.) declaration --&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;!-- List of Components --&gt;
        &lt;/div&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;div class=&quot;col-xs-12 col-sm-8&quot;&gt;
                &lt;!-- List of Components --&gt;
            &lt;/div&gt;
            &lt;div class=&quot;col-xs-12 col-sm-4&quot;&gt;
                &lt;!-- List of Components --&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;row&quot;&gt;
            &lt;!-- List of Components --&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Common JS file declaration --&gt;
&lt;/body&gt;
</code></pre>
<p><em>Note : dans ce cas, <samp>class=&quot;&lt;name-of-template&gt;&quot;</samp> n&#39;est pas obligatoire pour les CSS mais le sera pour le JavaScript qui doit pouvoir différencier (au besoin) un gabarit d&#39;un autre.</em></p>
<h3 id="les-composants">Les composants</h3>
<ul>
<li><p>Les composants —composés de plusieurs sous-partie (ou « Subcomponent »)— sont inclus dans les zones atterrissage et peuvent eux-même inclure des composants (c&#39;est le cas des composants de type « composant de composant »).</p>
</li>
<li><p>Les composants incluent des contenus mais n&#39;incluent jamais directement des patrons de conception en dehors de ses zones de contenu.</p>
</li>
<li><p>Les composants peuvent être incluent plus d&#39;une fois dans de même gabarit et également plus d&#39;une fois dans la même zone d&#39;aterissage.</p>
</li>
</ul>
<p><strong>Les variations de classe</strong></p>
<ul>
<li>Un composant peut-être utilisé dans différent contexte d&#39;affichage et avec différent comportement, donc, pour chaque alternative, une variation de classe <samp>as-*</samp> est utilisée.</li>
<li>Un composant (ou une sous-partie) peuvent avoir différent états, donc, pour chaque état, une variation de classe <samp>is-*</samp> ou <samp>has-*</samp> est utilisée.</li>
<li>Parce que un composant peut-être trouvé plus d&#39;une fois dans un même zone atterrissage, une variation de classe <samp>for-*</samp> peut-être utilisée pour différencier les mêmes composants les uns des autres.</li>
</ul>
<p>Nous reparlerons des trois précédents points plus loin.</p>
<p>Exemple de composant</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;!-- Specific CSS file declaration --&gt;
&lt;section class=&quot;cmpt-&lt;name-of-component&gt;&quot;&gt;
    &lt;div class=&quot;cmpt-&lt;name-of-component&gt;--ui&quot;&gt;
        &lt;h1&gt;&lt;!-- Contents --&gt;&lt;/h1&gt;
        &lt;div class=&quot;cmpt-&lt;name-of-component&gt;--image&quot;&gt;
            &lt;!-- Contents --&gt;
        &lt;/div&gt;
        &lt;div class=&quot;cmpt-&lt;name-of-component&gt;--text&quot;&gt;
            &lt;!-- Contents --&gt;
        &lt;/div&gt;
        &lt;aside class=&quot;cmpt-&lt;name-of-component&gt;--ads&quot;&gt;
            &lt;ul class=&quot;cmpt-&lt;name-of-component&gt;--list&quot;&gt;
                &lt;li class=&quot;cmpt-&lt;name-of-component&gt;--item&quot;&gt;
                    &lt;!-- Contents --&gt;
                &lt;/li&gt;
                &lt;li class=&quot;cmpt-&lt;name-of-component&gt;--item&quot;&gt;
                    &lt;!-- Contents --&gt;
                &lt;/li&gt;
                &lt;li class=&quot;cmpt-&lt;name-of-component&gt;--item&quot;&gt;
                    &lt;!-- Contents --&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
        &lt;/aside&gt;
    &lt;/div&gt;
&lt;/section&gt;
&lt;!-- Specific JS file declaration --&gt;
</code></pre>
<p><strong>Les <samp>--</samp> indique une sous-partie du même composant. Il est possible de créer autant de sous-partie que souhaité.</strong></p>
<p><em>Note : un composant doit avoir au moins deux balises HTML imbriquées pour le représenter afin de pouvoir être totalement habillé avec du CSS de toutes les manières possibles. <a href="https://codepen.io/Haeresis/pen/bdXymY">Voir ce CodePen</a>.</em></p>
<h4 id="boucler-sur-eux-même">Boucler sur eux même</h4>
<p>Un composant peut boucler sur lui même afin d&#39;apparaître comme une liste ou de lier son contenu à une liste d&#39;élément en base de donnée. Un <samp>&lt;ul&gt;</samp> est grandement recommandé dans ce cas puisque chaque item est censé être identique dans sa structure de composant (mais pas forcément avec un contenu identique).</p>
<p>Exemple de composant</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;!-- Specific CSS file declaration --&gt;
&lt;section class=&quot;cmpt-&lt;name-of-component&gt;&quot;&gt;
    &lt;div class=&quot;cmpt-&lt;name-of-component&gt;--ui&quot;&gt;
        &lt;ul class=&quot;cmpt-&lt;name-of-component&gt;--multiple&quot;&gt;
            &lt;!-- start loop --&gt;
            &lt;li class=&quot;cmpt-&lt;name-of-component&gt;--single&quot;&gt;
                &lt;h1&gt;&lt;!-- Contents --&gt;&lt;/h1&gt;
                &lt;!-- All HTML Here --&gt;
            &lt;/li&gt;
            &lt;!-- some items --&gt;
            &lt;li class=&quot;cmpt-&lt;name-of-component&gt;--single&quot;&gt;
                &lt;h1&gt;&lt;!-- Contents --&gt;&lt;/h1&gt;
                &lt;!-- All HTML Here --&gt;
            &lt;/li&gt;
            &lt;!-- some items --&gt;
            &lt;li class=&quot;cmpt-&lt;name-of-component&gt;--single&quot;&gt;
                &lt;h1&gt;&lt;!-- Contents --&gt;&lt;/h1&gt;
                &lt;!-- All HTML Here --&gt;
            &lt;/li&gt;
            &lt;!-- end loop --&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/section&gt;
&lt;!-- Specific JS file declaration --&gt;
</code></pre>
<h3 id="les-contenus">Les contenus</h3>
<p>Les contenus se trouvent uniquement dans les composants, dans les zones de contenu. Seul les patrons de conception (ou « Class Pattern ») doivent être utilisés dans ces parties et documentés pour être également à la disposition des pousseurs de contenu. C&#39;est par exemple le cas de <a href="http://getbootstrap.com/css/">Bootstrap</a>.</p>
<p>Il y a donc cinq zones de contenu dans ce composant</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;section class=&quot;cmpt-article&quot;&gt;
    &lt;div class=&quot;cmpt-article--ui&quot;&gt;
        &lt;div class=&quot;cmpt-article--text&quot;&gt;
            &lt;h2&gt;&lt;!-- Content A Title --&gt;&lt;/h2&gt;
            &lt;!-- Contents A Text --&gt;
            &lt;div class=&quot;cmpt-article--others&quot;&gt;
                &lt;ul class=&quot;cmpt-article--others--list&quot;&gt;
                    &lt;li class=&quot;cmpt-article--others--item&quot;&gt;
                        &lt;!-- Content B Image --&gt;
                        &lt;div class=&quot;cmpt-article--others--text&quot;&gt;
                            &lt;h2&gt;&lt;!-- Contents B Title --&gt;&lt;/h2&gt;
                            &lt;!-- Content B Text --&gt;
                        &lt;/div&gt;
                    &lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/section&gt;
</code></pre>
<p>Les contenus sont par exemple :</p>
<p><em>Content A Title</em></p>
<pre class="prettyprint linenums"><code class="language-html">&lt;span class=&quot;text-large reversed&quot;&gt;I&#39;am the&lt;br&gt;Main Title&lt;/span&gt;
</code></pre>
<p><em>Content A Text</em></p>
<pre class="prettyprint linenums"><code class="language-html">&lt;h2 class=&quot;text-center&quot;&gt;I&#39;am a Subtitle&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Lorem ipsum dolor sit amet&lt;/li&gt;
    &lt;li&gt;Lorem ipsum dolor sit amet&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p><em>Content B Image</em></p>
<pre class="prettyprint linenums"><code class="language-html">&lt;img src=&quot;source.png&quot; alt=&quot;I&#39;am the Image Description&quot; class=&quot;img-responsive&quot;&gt;
</code></pre>
<p><em>Content B Title</em></p>
<pre class="prettyprint linenums"><code class="language-html">I&#39;am an other Article
</code></pre>
<p><em>Content A Text</em></p>
<pre class="prettyprint linenums"><code class="language-html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.&lt;/p&gt;
&lt;p&gt;&lt;button class=&quot;btn btn-hugh&quot;&gt;See more&lt;/button&gt;&lt;/p&gt;
</code></pre>
<h3 id="les-variations-de-classe">Les variations de classe</h3>
<p>Il y a beaucoup de prefixe de classe utilisés pour les variations de classe, en voici leur définition.</p>
<ul>
<li><p><samp>as-*</samp> : défini un comportement alternatif ou un rendu alternatif pour un composant ou une sous-partie de composant. <em>Exemple: <samp>class=&quot;cmpt-&lt;name-of-component&gt; as-popup&quot;</samp> peut signifier que le composant standard <samp>cmpt-&lt;name-of-component&gt;</samp> est affiché cette fois comme une popup. Ainsi en JavaScript, la classe <samp>.as-popup</samp> donne la possibilité d&#39;afficher ou de masquer le composant.</em></p>
</li>
<li><p><samp>with-*</samp> : défini un comportement alternatif ou un rendu alternatif pour un gabarit. <em>Exemple: <samp>class=&quot;tmpl-&lt;name-of-template&gt; with-ads&quot;</samp> peut signifier qu&#39;un background publicitaire peut-être affiché dans cette configuration.</em></p>
</li>
<li><p><samp>is-*</samp> : défini un état alternatif sur un composant ou une sous-partie de composant. <em>Exemple: <samp>class=&quot;cmpt-&lt;name-of-component&gt; is-opened&quot;</samp> peut signifier que le composant <samp>cmpt-&lt;name-of-component&gt;</samp> est actuellement ouvert et visible. Ainsi en JavaScript, l&#39;action du clique sur une zone précise peut enlever la classe <samp>.is-opened</samp> et par conséquent fermer le composant.</em></p>
</li>
<li><p><samp>has-*</samp> : défini un état alternatif sur un composant ou une sous-partie de composant. <em>Exemple: <samp>class=&quot;cmpt-&lt;name-of-component&gt; has-more-one-item&quot;</samp> peut signifier que le composant <samp>cmpt-&lt;name-of-component&gt;</samp> contient au moins deux éléments et qu&#39;il doit s&#39;afficher comme une liste.</em></p>
</li>
<li><p><samp>for-*</samp> : défini un id sur un composant parce que si un composant est utilisé plus d&#39;une fois dans la même zone d&#39;atterrissage, il est important d&#39;avoir une classe différente pour les différencier au besoin. <em>Exemple: <samp>class=&quot;cmpt-&lt;name-of-component&gt; for-article&quot;</samp> peut signifier que le composant est utilisé pour afficher du texte faisant office de contenu principale et <samp>class=&quot;cmpt-&lt;name-of-component&gt; for-aside&quot;</samp> peut signifier tout autre chose.</em></p>
</li>
<li><p><samp>to-*</samp> : défini une étape d&#39;attente en début de changement d&#39;état pour gérer une animation. <em>Exemple: <samp>class=&quot;cmpt-&lt;name-of-component&gt; to-open&quot;</samp> peut signifier que <samp>cmpt-&lt;name-of-component&gt;</samp> est en état d&#39;ouverture depuis son état fermé vers son état ouvert et qu&#39;il faut démarrer une augmentation de l&#39;opacité. Quand l&#39;animation est finie, le <samp>is-*</samp> peut-être mis.</em> <a href="http://codepen.io/Haeresis/pen/OyoOEV">Un exemple ici</a>.</p>
</li>
<li><p><samp>from-*</samp> : défini une étape d&#39;attente pour gérer une animation du retour à l&#39;état initial. <em>Exemple: <samp>class=&quot;cmpt-&lt;name-of-component&gt; from-open&quot;</samp> peut signifier que le composant <samp>cmpt-&lt;name-of-component&gt;</samp> va être fermé et qu&#39;il est temps de diminuer l&#39;opacité de l&#39;élément. Quand l&#39;animation est finie, les classes <samp>is-*</samp> et <samp>from-*</samp> sont retirées.</em> <a href="http://codepen.io/Haeresis/pen/OyoOEV">Un exemple ici</a>.</p>
</li>
</ul>
<p><strong>Toutes les variations de classe doivent être documentées pour être utilisable par les développeurs back-end.</strong></p>
<h3 id="lire-et-comprendre-le-nommage-du-dom">Lire et comprendre le nommage du DOM</h3>
<ul>
<li>Si vous voyez une classe qui commence par <samp>tmpl-</samp> c&#39;est un nom de gabarit.</li>
<li>Si vous voyez une classe qui commence par <samp>cmpt-</samp> c&#39;est un nom de composant.</li>
<li>Si vous voyez une classe finissant par <samp>--ui</samp> c&#39;est la partie du composant dédié au contenu utilisateur.</li>
<li>Si vous voyez une classe finissant par <samp>--multiple</samp> et <samp>--single</samp> cela concerne un composant répétable.</li>
<li>Si vous voyez une classe contenant des <samp>--</samp>, c&#39;est une sous-partie de composant.</li>
<li>Si vous voyez une classe avec le préfixe <samp>as-</samp>, c&#39;est un rendu et / ou un comportement alternatif sur un composant par rapport à l&#39;état standard.</li>
<li>Si vous voyez une classe avec le préfixe <samp>with-</samp>, c&#39;est un rendu et / ou un comportement alternatif sur un gabarit par rapport à l&#39;état standard.</li>
<li>Si vous voyez une classe avec le préfixe <samp>is-</samp>, c&#39;est la description d&#39;un état de composant ou sous-partie de composant alternatif.</li>
<li>Si vous voyez une classe avec le préfixe <samp>has-</samp>, c&#39;est la description d&#39;un état de composant ou sous-partie de composant alternatif.</li>
<li>Si vous voyez une classe avec le préfixe <samp>for-</samp>, c&#39;est pour un rendu ou comportement spécifique sur une unique version d&#39;un composant.</li>
<li>Si vous voyez une classe avec le préfixe <samp>to-</samp>, c&#39;est un état de transition vers un autre état.</li>
<li>Si vous voyez une classe avec le préfixe <samp>from-</samp>, c&#39;est un état de transition de retour à l&#39;état initial.</li>
<li>Si vous voyez une classe qui commence avec <samp>lyt-</samp>, c&#39;est un patron de conception pour gabarit.</li>
<li>Si vous ne voyez aucune des classes listées avant, c&#39;est un patron de conception pour contenu.</li>
</ul>
<h3 id="choisir-la-sémantique-de-vos-balise">Choisir la sémantique de vos balise</h3>
<p>Il n&#39;y au plus qu&#39;un seul <samp>&lt;header&gt;</samp> et <samp>&lt;footer&gt;</samp> sous le <samp>&lt;body&gt;</samp>. Le <samp>&lt;h1&gt;</samp> principale se trouve également dans cette partie. Sous le <samp>&lt;body&gt;</samp> il y a une hiérarchie de <samp>&lt;h1-h6&gt;</samp> avec un unique <samp>&lt;h1&gt;</samp> jusqu&#39;à ce que vous trouviez une balise :</p>
<ul>
<li><samp>&lt;section&gt;</samp>,</li>
<li><samp>&lt;article&gt;</samp>,</li>
<li><samp>&lt;nav&gt;</samp> ou</li>
<li><samp>&lt;aside&gt;</samp>.</li>
</ul>
<p>Chacune de ces balises arrête la propagation de la hierarchie <samp>&lt;h1-h6&gt;</samp> des balises parentes et commence leur propre hiérarchie de <samp>&lt;h1-h6&gt;</samp> (avec seulement un <samp>&lt;h1&gt;</samp>). Chacune de ces balises peuvent aussi avoir leur propre <samp>&lt;header&gt;</samp> et <samp>&lt;footer&gt;</samp>.</p>
<p>De manière à pouvoir rendre déplaçable et réutilisable chaque composant, nous avons deux manières d&#39;organiser notre structure.</p>
<h4 id="sémantique-sur-le-gabarit">Sémantique sur le gabarit</h4>
<p>Ici on place <samp>&lt;section&gt;</samp>, <samp>&lt;article&gt;</samp>, <samp>&lt;nav&gt;</samp> et <samp>&lt;aside&gt;</samp> sur le gabarit dans les aires réservées des zones d&#39;atterrissage. Mais dans ce cas, seuls des composants commençant par des <samp>&lt;div&gt;</samp> peuvent être insérés.</p>
<p><strong>Gabarit</strong></p>
<pre class="prettyprint linenums"><code class="language-html">&lt;div class=&quot;lyt tmpl-products&quot;&gt;
    &lt;section class=&quot;lyt-area for-overview&quot;&gt;
        &lt;!-- One Component Here --&gt;
    &lt;/section&gt;
&lt;/div&gt;
</code></pre>
<p><strong>Composant</strong></p>
<pre class="prettyprint linenums"><code class="language-html">&lt;div class=&quot;cmpt-product&quot;&gt;
    &lt;div class=&quot;cmpt-product--ui&quot;&gt;
        &lt;header&gt;&lt;!-- Content Title --&gt;&lt;/header&gt;
        &lt;!-- Content Text --&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>Contenus</strong></p>
<pre class="prettyprint linenums"><code class="language-html">&lt;h1&gt;A product&lt;/h1&gt;
</code></pre>
<pre class="prettyprint linenums"><code class="language-html">&lt;h2&gt;Subtitle&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit.&lt;/p&gt;
</code></pre>
<h4 id="sémantique-dans-le-composant">Sémantique dans le composant</h4>
<p>Ici on place <samp>&lt;section&gt;</samp>, <samp>&lt;article&gt;</samp>, <samp>&lt;nav&gt;</samp> et <samp>&lt;aside&gt;</samp> sur le composant. Dans ce cas, un composant ne peut pas être utilisé dans un autre type que celui pour lequel il est destiné.</p>
<p><strong>Gabarit</strong></p>
<pre class="prettyprint linenums"><code class="language-html">&lt;div class=&quot;lyt tmpl-products&quot;&gt;
    &lt;div class=&quot;area for-overview&quot;&gt;
        &lt;!-- Multiple Component Here --&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>Composant</strong></p>
<pre class="prettyprint linenums"><code class="language-html">&lt;section class=&quot;cmpt-product&quot;&gt;
    &lt;div class=&quot;cmpt-product--ui&quot;&gt;
        &lt;header&gt;&lt;!-- Content Title --&gt;&lt;/header&gt;
        &lt;!-- Content Text --&gt;
    &lt;/div&gt;
&lt;/section&gt;
</code></pre>
<p><strong>Contents</strong></p>
<pre class="prettyprint linenums"><code class="language-html">&lt;h1&gt;A product&lt;/h1&gt;
</code></pre>
<pre class="prettyprint linenums"><code class="language-html">&lt;h2&gt;Subtitle&lt;/h2&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit.&lt;/p&gt;
</code></pre>
<h4 id="gommer-les-inconvénient-des-deux-approches">Gommer les inconvénient des deux approches</h4>
<p><a href="https://blog.lesieur.name/conventions-html-et-css-orientes-composants/#des-composants-r-ellement-d-pla-able-partout">Vous trouverez dans cet article des pistes et une solution exemple pour embarquer le type du composant sur lui-même tout en pouvant en changer en fonction de vos envies</a>.</p>
<h3 id="comment-créer-des-emails-corrects-">Comment créer des emails corrects ?</h3>
<p>Pour permettre à vos emails HTML d&#39;être lisible dans la plupard des clients mail, il est nécessaire de ne les réaliser qu&#39;avec du HTML4 et d&#39;utiliser des attributs HTML (voir des balises) à la place des attributs <samp>style</samp>.</p>
<p>N&#39;utiliser pas non plus de <samp>&lt;div&gt;</samp> brut utilisez une cascade de <samp>&lt;table&gt;</samp>, <samp>&lt;tr&gt;</samp>, <samp>&lt;td&gt;</samp> etc.</p>
<p>Par exemple, n&#39;utilisez pas <samp>&lt;div style=&quot;text-align: center&quot;&gt;</samp> mais <samp>&lt;center&gt;</samp>. Pour créer une version HTML5 de vos emails HTML4 pour le web, vous pouvez les transformer automatiquement avec <a href="https://node-atlas.js.org/">NodeAtlas</a> par exemple.</p>
<h2 id="rôle-et-utilisation-du-css">Rôle et utilisation du CSS</h2>
<h3 id="la-spécificité-des-sélecteurs">La spécificité des sélecteurs</h3>
<p>C&#39;est l&#39;aspect le plus fondamental du fonctionnement CSS et c&#39;est celui qui pause le plus problème. Parce que les règles CSS sont comme des variables globales mutables en JavaScript, car une propriété :</p>
<ul>
<li>Peut <strong>être redéfinie</strong>.</li>
<li>Il y a un <strong>niveau de spécifité</strong> pour chaque sélecteur (voir <a href="https://www.w3.org/TR/css3-selectors/#specificity">les règles</a>). En cas de spécificité égale sur deux règles s&#39;appliquant sur le même élément : c&#39;est la place des lignes qui compte.</li>
<li>L&#39;<strong>ordre</strong> de la CSS a une importance.</li>
</ul>
<p><strong>Exemple</strong></p>
<table>
<thead>
<tr>
<th>Sélecteur</th>
<th align="right">Spécificité</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><samp>*</samp></td>
<td align="right">0.0.0.0</td>
<td>tout</td>
</tr>
<tr>
<td><samp>li</samp></td>
<td align="right">0.0.0.1</td>
<td>tag</td>
</tr>
<tr>
<td><samp>ul li</samp></td>
<td align="right">0.0.0.2</td>
<td>tag + tag</td>
</tr>
<tr>
<td><samp>li::first-letter</samp></td>
<td align="right">0.0.0.2</td>
<td>tag + pseudo-element</td>
</tr>
<tr>
<td><samp>ul li div</samp></td>
<td align="right">0.0.0.3</td>
<td>tag + tag + tag</td>
</tr>
<tr>
<td><samp>.teal</samp></td>
<td align="right">0.0.1.0</td>
<td>class .</td>
</tr>
<tr>
<td><samp>li:nth-child(1)</samp></td>
<td align="right">0.0.1.1</td>
<td>pseudo-class . tag</td>
</tr>
<tr>
<td><samp>ul + *[rel=up] li</samp></td>
<td align="right">0.0.1.2</td>
<td>tout + attribut . tag + tag</td>
</tr>
<tr>
<td><samp>li.red.level</samp></td>
<td align="right">0.0.2.1</td>
<td>class + class . tag</td>
</tr>
<tr>
<td><samp>ul.blue ol li.blue</samp></td>
<td align="right">0.0.2.3</td>
<td>class + class . tag + tag + tag</td>
</tr>
<tr>
<td><samp>li.orange.orange.level</samp></td>
<td align="right">0.0.3.1</td>
<td>class + class + class . tag</td>
</tr>
<tr>
<td><samp>#my-id</samp></td>
<td align="right">0.1.0.0</td>
<td>id . .</td>
</tr>
<tr>
<td><samp>#my-id.teal</samp></td>
<td align="right">0.1.1.0</td>
<td>id . class .</td>
</tr>
<tr>
<td><samp>#my-id.teal</samp></td>
<td align="right">1.1.0.0</td>
<td><strong>inline</strong> . id . .</td>
</tr>
</tbody></table>
<p><a href="https://codepen.io/Haeresis/pen/oLzdaR">Voir des exemples live</a></p>
<p>Et si le mot clé <samp>!important</samp> est ajouté à la fin de n&#39;importe quelle valeur de propriété elle passe devant toute autre. Soyez prudent en l&#39;utilisant (<a href="https://codepen.io/Haeresis/pen/JYRLgr">voici un cas d&#39;utilisation justifié</a>).</p>
<p>Vous pouvez <a href="https://specificity.keegan.st/">voir la spécificité des sélecteurs grâce à cet outil</a>.</p>
<h3 id="deux-approches-dutilisation-du-css">Deux approches d&#39;utilisation du CSS</h3>
<p>Il y a deux façons d&#39;appliquer des styles CSS sur du HTML. La manière CSS-Driven ou pilotée par la feuille de style ou la manière HTML-Driven ou pilotée par les classes dans les balises HTML.</p>
<p><strong>CSS-Driven</strong></p>
<p>Nous avons une structure HTML figée. Nous nommons tous les éléments de notre structure</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;section class=&quot;cmpt-&lt;name-of-component&gt;&quot;&gt;
    &lt;div class=&quot;cmpt-&lt;name-of-component&gt;--ui&quot;&gt;
        &lt;div class=&quot;cmpt-&lt;name-of-component&gt;--text&quot;&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/section&gt;
</code></pre>
<p>pour pouvoir y faire référence depuis la feuille CSS. C&#39;est une approche type BEM.</p>
<pre class="prettyprint linenums"><code class="language-css">.cmpt-&lt;name-of-component&gt;--ui {
    font-weight: bold;
}
</code></pre>
<p>Nous venons d&#39;habiller une partie HTML.</p>
<p><strong>HTML-Driven</strong></p>
<p>Nous avons une feuille CSS figée. Nous nommons nos règles de manière à créer des patrons de conception (« Class Pattern »)</p>
<pre class="prettyprint linenums"><code class="language-css">.bold {
    font-weight: bold;
}
</code></pre>
<p>de manière à pouvoir les appliquer comme on le souhaite sur une structure HTML éditable.</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;p class=&quot;bold&quot;&gt;Lorem ipsum&lt;/p&gt;
</code></pre>
<p>Nous avons créer le patron de conception <samp>.bold</samp>.</p>
<h4 id="comment-appliquer-chaque-approche-">Comment appliquer chaque approche ?</h4>
<p>Le plus important est de ne jamais enfermer les composants HTML dans des « patron emprisonnant » car vous ne pourrez pas l&#39;habiller avec du sens dans un autre contexte.</p>
<p>D&#39;un autre côté, parceque les pousseurs de contenu ne doivent jamais toucher au fichier CSS, il est important de leur créer des patrons de conception pour le contenu. Sachez que via des balises <samp>&lt;style&gt;</samp> ou attribut <samp>style</samp> il est tout à fait acceptable qu&#39;un pousseur de contenu altère de l&#39;affichage <strong>dans une zone de contenu</strong>.</p>
<p>Pour finir, pour les gabarits de page, les deux approches sont envisageables, cela dépend se si votre système gère plus facilement le changement de gabarit (« Template ») ou le changement de CSS si vous souhaitez utiliser différentes grilles.</p>
<h3 id="less--stylus-vous-aide-à-utiliser-bootstrap">Less / Stylus vous aide à utiliser Bootstrap</h3>
<p>Votre meilleur ami pour la maintenance des feuilles CSS et pour garder votre HTML le plus clair possible est <a href="http://lesscss.org/">Less</a> ou encore <strong>mieux</strong> <a href="http://stylus-lang.com/">Stylus</a>.</p>
<p>Il est possible de gérer les deux avec <a href="https://www.npmjs.com/package/node-atlas">NodeAtlas</a> avec ces simples <samp>webconfig.json</samp></p>
<pre class="prettyprint linenums"><code>{
    &quot;enableLess&quot;: true,
    &quot;assetsRelativePath&quot;: &quot;/&quot;
}
</code></pre><p>ou</p>
<pre class="prettyprint linenums"><code>{
    &quot;enableStylus&quot;: true,
    &quot;assetsRelativePath&quot;: &quot;/&quot;
}
</code></pre><p>placés à la racine de votre dossier de site. Et avec la commande CLI <samp>nodeatlas --browse</samp>.</p>
<h4 id="exemple-de-less-pour-les-gabarits-composants-et-contenus">Exemple de Less pour les gabarits, composants et contenus</h4>
<p>Dans le but d&#39;habiller le HTML suivant :</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;section class=&quot;cmpt-follow-me &lt;!-- Variation Class --&gt;&quot;&gt;
    &lt;div class=&quot;cmpt-follow-me--ui&quot;&gt;
        &lt;div class=&quot;cmpt-follow-me--image&quot;&gt;
            &lt;!-- Content Image --&gt;
        &lt;/div&gt;
        &lt;div class=&quot;cmpt-follow-me--text&quot;&gt;
            &lt;!-- Content Text --&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/section&gt;
</code></pre>
<p>vous pourrez utiliser l&#39;implémentation Less suivante dans le fichier <samp>cmpt-follow-me.less</samp> :</p>
<pre class="prettyprint linenums"><code class="language-less">/* Import Bootstrap Class Pattern. */
@import (reference) &#39;bootstrap/bootstrap.less&#39;;

/* Import your own Class Pattern. */
@import (reference) &#39;common.less&#39;;

/* Name your Component. */
@componentName: e(&#39;.cmpt-follow-me&#39;);

/* Outer Wrapper Design. */
@{componentName} {

    /* Initial State and properties. */
    display: none;

    /* ... */

    /* Overload of Class Pattern for this Component. */
    .arrowed {
        /* ... */
        span {
            /* ... */
        }
    }

    .gap {
        /* ... */
    }

    /* Opened State. */
    &amp;.is-opened {
        display: block;
    }

    /* Clickable State. */
    &amp;.is-closable {
        cursor: pointer;
    }

    /* ... */

    /* Inner Wrapper Design. */
    &amp;--ui {
        /* ... */
    }

    /* Subcomponent Design. */

    &amp;--image {
        .make-md-col(4);
        /* ... */
    }

    &amp;--text {
        .make-md-col(8);
        /* ... */
    }

    &amp;--close,
    /* Custom Component Class Pattern usable into Content part. */
    .close {
        /* ... */
    }

    /* Variation of this component. */
    &amp;.as-v1 {
        @{componentName}--ui {
            background-color: #da5daf;
        }
        @{componentName}--text {
            border: 1px solid #85214d;
        }
        /* ... */
    }
    &amp;.as-v2 {
        @{componentName}--ui {
            background-color: #80a837;
        }
        @{componentName}--text {
            border: 1px solid #3e6618;
        }
        /* ... */
    }
    &amp;.as-v3 {
        @{componentName}--ui {
            background-color: #ed9364;
        }
        @{componentName}--text {
            border: 1px solid #d6401c;
        }
        /* ... */
    }
}
</code></pre>
<p>et avec ce fichier <samp>common.less</samp> par exemple</p>
<pre class="prettyprint linenums"><code class="language-less">/* Same design on all browser. */
@import &#39;helpers/normalize.less&#39;;

/* Use icones. */
@import &#39;font-awesome/font-awesome-regular.less&#39;;

/* Bootstrap Lib. */
@import (reference) &#39;bootstrap/bootstrap.less&#39;;

/* Font Awesome Lib. */
@import (reference) &#39;font-awesome/font-awesome.less&#39;;

/* Use more Font. */
@import (css) &#39;https://fonts.googleapis.com/css?family=Muli&#39;;

/* Just import Bootstrap Class Pattern you needed. */
.text-center {
    .text-center;
}
.text-left {
    .text-left;
}
.text-right {
    .text-right;
}
.img-responsive {
    .img-responsive;
    display: inline-block;
}

/* Your own Class Pattern for Content. */
.arrowed {
    /* ... */
    span {
        /* ... */
    }
}
.gap {
    /* ... */
}

/* Your Layout Implementation */
.tmpl-products {
    .for-overview {
        .make-sm-col(8);
    }
    .for-aside {
        .make-sm-col(4);
    }
}

/* ... */
</code></pre>
<h3 id="inclusion-par-référence">Inclusion par référence</h3>
<p>Pour Less, si vous importez en utilisant <samp>@import (reference)</samp> au lieu de simplement utiliser <samp>@import</samp> vous génèrerez dans le fichier de sortie uniquement le fragment de CSS souhaité en provenance de votre liste de patron de conception. Par exemple avec la bibliothèque Bootsrtap, vous pouvez importer tous les patrons <samp>col-XX-YY</samp> par exemple. <a href="https://blog.lesieur.name/bootstrap-lisibilite-proprete-performance-optimisation-c-est-possible/">Cela peut grandement alléger vos feuilles CSS</a>.</p>
<h3 id="la-spécificité-dun-sélecteur-ne-doit-pas-être-trop-lourde">La spécificité d&#39;un sélecteur ne doit pas être trop lourde</h3>
<p>Nous imaginerons ici que <samp>@{componentName}</samp> retourne <samp>.cmpt-article</samp>.</p>
<h4 id="sélectionner-directement-la-cible">Sélectionner directement la cible</h4>
<p>Vous devez accéder à un élément par sa classe :</p>
<pre class="prettyprint linenums"><code class="language-less">@{componentName} {
    &amp;--others--item {
        /* Apply style */
    }
}
// CSS
// .cmpt-article--others--item { /* Apply style */ }
</code></pre>
<h4 id="sélectionner-un-seul-élément-sans-classe-par-sélecteur">Sélectionner un seul élément sans classe par sélecteur</h4>
<p>Il est possible qu&#39;il y ai des éléments sans classes dans les composants ou sous-composants. Il devrait être permis de ne faire référence qu&#39;à un, et un seul élément.</p>
<p>Ceci est autorisé</p>
<pre class="prettyprint linenums"><code class="language-less">@{componentName} {
    &amp;--others--item {
        a {
            /* Apply style */
        }
        span {
            /* Apply style */
        }
    }
}
// CSS
// .cmpt-article--others--item a { /* Apply style */ }
// .cmpt-article--others--item span { /* Apply style */ }
</code></pre>
<p>mais ceci n&#39;est PAS autorisé...</p>
<pre class="prettyprint linenums"><code class="language-less">@{componentName} {
    &amp;--others--item {
        a {
            /* Apply style */
            span {
                /* Apply style */
            }
        }
    }
}
// CSS
// .cmpt-article--others--item a { /* Apply style */ }
// .cmpt-article--others--item a span { /* Apply style */ } // Too specified selector.
</code></pre>
<p>C&#39;est mal. Vous devez ajouter dans ce cas des classes sur vos éléments pour directement pouvoir intéragir avec eux.</p>
<pre class="prettyprint linenums"><code class="language-less">@{componentName} {
    &amp;--others--item--span {
        /* Apply style */
    }
}
// CSS
// .cmpt-article--others--item--span { /* Apply style */ }
</code></pre>
<p>ou (un élément sans classe autorisé)</p>
<pre class="prettyprint linenums"><code class="language-less">@{componentName} {
    &amp;--others--item {
        span {
            /* Apply style */
        }
    }
}
// CSS
// .cmpt-article--others--item--link span { /* Apply style */ }
</code></pre>
<h4 id="ajouter-des-variations-de-classe-pour-changer-le-design">Ajouter des variations de classe pour changer le design</h4>
<p>Vous pouvez améliorer la précision de la sélection en utilisant une variation de classe.</p>
<p>Sur un composant</p>
<pre class="prettyprint linenums"><code class="language-less">@{componentName} {
    &amp;.is-opened {
        /* Apply style */
    }
}
// CSS
// .cmpt-article.is-opened { /* Apply style */ }
</code></pre>
<p>ou un sous-composant</p>
<pre class="prettyprint linenums"><code class="language-less">.is-opened {
    @{componentName}--others--item--link  {
        span {
            /* Apply style */
        }
    }
}
// CSS
// .is-opened .cmpt-article--others--item--link span { /* Apply style */ }
</code></pre>
<p><em>Note : le code ci-dessous produit la même sortie que celui au dessus.</em></p>
<pre class="prettyprint linenums"><code class="language-less">.is-opened {
    @{componentName} {
        &amp;--others
            &amp;--item
                &amp;--link {
                    span {
                        /* Apply style */
                    }
                }
            }
        }
    }
}
// CSS
// .is-opened .cmpt-article--others--item--link span { /* Apply style */ }
</code></pre>
<p><em>La règle est la suivante : écrire en une seule ligne les composantes du sélecteur si il n&#39;y a aucun sous-élément voisin utilisant le même chemin à référencer, sinon créer un nouveau sous bloque comme ci-dessous</em></p>
<pre class="prettyprint linenums"><code class="language-less">.is-opened {
    @{componentName}--others--item {
        &amp;--image  {
            /* A new sibling Subcomponent */
        }
        &amp;--link  {
            span {
                /* Apply style */
            }
        }
    }
}
// CSS
// .is-opened .cmpt-article--others--item--image { /* A new sibling Subcomponent */ }
// .is-opened .cmpt-article--others--item--link span { /* Apply style */ }
</code></pre>
<h2 id="rôle-et-utilisation-du-js">Rôle et utilisation du JS</h2>
<p>Dans le but de produire du code performant et maintenable, vous devriez passer à travers un outil comme JSLint et obtenir une sortie sans erreur. Si vous utilisez Sublim Text, vous pouvez installer <a href="https://github.com/devdoc/SublimeLinter-jslint">SublimeLinter-contrib-jslint</a> pour éviter toute mauvaise pratique.</p>
<h3 id="règles-et-patrons">Règles et patrons</h3>
<p><em>Notez que règles et patrons ci après sont utiles pour une utilisation JavaScript sans bibliothèque ou frameworks. Si vous utilisez par exemple le framework <a href="https://fr.vuejs.org/">Vue.js</a>, il sera alors plus intéressant de tenir compte de ce qui va suivre dans la limite de ce que l&#39;outil offre déjà en plus de <a href="https://fr.vuejs.org/v2/style-guide/">respecter ses conventions</a></em></p>
<h4 id="éviter-la-surchauffe-de-cerveau-brain-overload">Éviter la surchauffe de cerveau (Brain Overload)</h4>
<p>Pour commencer, observer autant que possible les règles suivantes :</p>
<ul>
<li>Un fichier ne doit pas dépasser les 1000 lignes (commentaires inclus).</li>
<li>Une fonction ne doit pas dépasser les 100 lignes (commentaires inclus).</li>
<li>La complexité d&#39;une fonction ne doit pas dépasser 10 <a href="http://jshint.com/">Tester la complexité</a>.</li>
<li>Il ne doit pas y avoir plus de 3 niveaux de if/else/swich/try/etc. sans qu&#39;on ai recours à une fonction.</li>
</ul>
<h4 id="déclarer-tout-ce-que-vous-utilisez-dans-la-page-et-son-usage">Déclarer tout ce que vous utilisez dans la page, et son usage</h4>
<p>Dans tous les fichiers JavaScript client, toutes les variables doivent être explicitement déclarée, même si vous savez que l&#39;exécuteur JavaScript connait cette valeur par défaut ou qu&#39;un autre fichier l&#39;a déjà définie. Il est important de savoir ce qui va être utilisé à travers le fichier et de permettre le plus possible de pouvoir vous passer d&#39;un ordre précis dans l&#39;exécution des fichiers.</p>
<p><strong>Exemple</strong></p>
<pre class="prettyprint linenums"><code class="language-js">/* jslint browser: true */
/* global $ */

// Define your usage of global object.
var website = website || {},

    // Define your usage of `jQuery window` shortcut for this file.
    $window = $window || $(window);

// Define your usage of `website.component` namespace.
website.components = website.components || {};
</code></pre>
<p>Observez que seulement un <samp>var</samp> est déclaré au sommet de chaque fonction, pas plus. Si vous définissez vos variables dans le champ lexical globale (« Global Scope »), attachez les à <samp>window</samp> ou définissez les dans le <samp>var</samp> global de votre fichier.</p>
<p>L&#39;espace de nom global <samp>website</samp> va contenir tout le code JavaScript de votre site web. N&#39;hésitez pas à utiliser <samp>app</samp> ou encore <samp>application</samp> si c&#39;est une application web et non pas une simple page.</p>
<h4 id="utiliser-des-fermetures-pour-garder-le-champ-lexical-global-propre">Utiliser des fermetures pour garder le champ lexical global propre</h4>
<p>Le code ci-dessus est défini dans le champ lexical global. Si vous écrivez du code dans un fichier, n&#39;écrivez jamais directement dans le champ lexical global. Il y a deux manière de garder le champ lexical global propre.</p>
<h5 id="avec-une-fermeture-statique-anonyme">Avec une fermeture statique anonyme</h5>
<p>Si le code n&#39;a pas besoin d&#39;être instancié, faites juste comme ci-après. C&#39;est le cas des contrôlers comme <samp>common.js</samp>.</p>
<pre class="prettyprint linenums"><code class="language-js">// Create a closure to scope all variables or function invisible from global scope.
;(function () {
    &quot;use strict&quot;;

    var iAmAPrivateVariable_ForPublicExpositon = &quot;&quot;,
        iAmAPrivateVariable = &quot;&quot;;

    // No accessible in global scope.
    iAmAPrivateVariable = &quot;i am only accessible in this closure&quot;;

    // Accessible to global scope with `website.iAmAPublicVariable`.
    website.iAmAPublicVariable = iAmAPrivateVariable_ForPublicExpositon;
}());
</code></pre>
<p>ou exposer votre variable publique quand vous créer la Closure (ici <samp>website</samp> est publique et <samp>publics</samp> n&#39;est accessible que dans la closure).</p>
<pre class="prettyprint linenums"><code class="language-js">// Pass an alias of `website` named `publics` only in this closure.
;(function (publics) {
    &quot;use strict&quot;;

    var privates = {};

    // Private Example
    privates.addClassIsLoaded = function (view) {
        view.classList.add(&quot;is-loaded&quot;);
    }

    // Public Example
    publics.loadComponents = function () {
        /* See this part later */
    };

}(website));
</code></pre>
<p><em>Note : on commence notre fichier avec un <samp>;</samp> pour éviter qu&#39;un précédent fichier minifié n&#39;interprète notre parenthèse comme une demande d&#39;exécution de fonction.</em></p>
<h5 id="avec-new-class">Avec new Class</h5>
<p>S&#39;il est important que le code puisse être instancié en fonction d&#39;un contexte donné, créer une classe est le mieux. Pour ne pas polluer le champ lexical global, attachez la classe à un espace de nom comme <samp>website.components</samp>.</p>
<pre class="prettyprint linenums"><code class="language-js">window.website = window.website || {};
website.components = website.components || {};

// Create a Class for define JavaScript behavior of `&lt;div class=&quot;lightbox&quot;&gt;&lt;/div&gt;`.
website.components.Lightbox = function callee(selector) {
    &quot;use strict&quot;;

    // Create private namespace for instanciable function (publics)
    // and inner function (privates).
    var publics = this,
        statics = callee.prototype,
        privates = {};

    // Count number of instance for Lightbox.
    statics.nbrOfInstance = (statics.nbrOfInstance) ? statics.nbrOfInstance + 1 : 1;
    callee.nbrOfInstance = statics.nbrOfInstance;

    // Define the selector by default for the HTML view of this Class.
    publics.selector = selector || &quot;.information&quot;;

    // Define all stuff to manage lightbox.
    privates.openLightbox = function () { /* ... */ };
    privates.moveLightbox = function () { /* ... */ };
    privates.closeLightbox = function () { /* ... */ };

    // Define a function to launch all mandatory behavior when a HTML view is parsed.
    publics.init = function () {

        // Set all function you want use to initialization.
        privates.openLightbox();
        privates.moveLightbox();
        privates.closeLightbox();
    };
};
website.components.Lightbox.nbrOfInstance = 0;
</code></pre>
<p>Et initialisez tous les <samp>&lt;div class=&quot;lightbox&quot;&gt;&lt;/div&gt;</samp></p>
<pre class="prettyprint linenums"><code class="language-js">var Lightbox = website.components.Lightbox;
(new Lightbox()).init();
</code></pre>
<p>ou initialisez tous les <samp>&lt;div class=&quot;popup&quot;&gt;&lt;/div&gt;</samp></p>
<pre class="prettyprint linenums"><code class="language-js">var Lightbox = website.components.Lightbox;
(new Lightbox(&quot;.popup&quot;)).init();
</code></pre>
<p>ou initialisez <samp>&lt;div class=&quot;ads&quot;&gt;&lt;/div&gt;</samp></p>
<pre class="prettyprint linenums"><code class="language-js">var Lightbox = website.components.Lightbox,
    lightbox = new Lightbox();

lightbox.selector = &quot;ads&quot;;
lightbox.init();
</code></pre>
<p>ou comptez le nombre d&#39;instance avec</p>
<pre class="prettyprint linenums"><code class="language-js">var Lightbox = website.components.Lightbox,
    lightbox = new Lightbox();

Lightbox.nbrOfInstance; // `4`
lightbox.nbrOfInstance; // `4`
</code></pre>
<p>ou créez une fonction tierce...</p>
<pre class="prettyprint linenums"><code class="language-js">// This code is a focus on `website.loadComponents()` defined above.
publics.loadComponents = function () {
    var i, currentComponent, currentViews;

    // Loop on all components
    for (i in website.components) {

        // Never forgot to use `hasOwnProperty` to not display other thing that personal object key.
        if (website.components.hasOwnProperty(i)) {

            // Work on current Component.
            currentComponent = new website.components[i]();

            // Obtain all `&lt;div class=&quot;&lt;currentComponent.selector&gt;&quot;&gt;&lt;/div&gt;`
            currentViews = document.querySelectorAll(currentComponent.selector + &quot;:not(.is-opened)&quot;);
            if (currentViews.length &gt; 0) {

                // Initialize Component.
                allComponentsInstance.push(currentComponent.init());

                // Tag this component as already initialize.
                [].forEach.call(currentViews, addClassIsLoaded); // see before for &quot;addClassIsLoaded&quot; definition.
            }
        }
    }
};
</code></pre>
<p>...pour charger tous les composants que vous avez créé de cette manière :</p>
<pre class="prettyprint linenums"><code>website.loadComponents();
</code></pre><p>Et si plutard, vous souhaitez ajouter <samp>&lt;div class=&quot;lightbox&quot;&gt;&lt;/div&gt;</samp> au DOM par XMLHttpRequest (Ajax), vous serez capable d&#39;appliquer le JavaScript suivant :</p>
<pre class="prettyprint linenums"><code class="language-js">var Lightbox = website.components.Lightbox;
(new Lightbox(&quot;.information:not(.is-loaded)&quot;)).init();
</code></pre>
<p>et de charger dès lors tous les composants (non déjà chargé) avec :</p>
<pre class="prettyprint linenums"><code class="language-js">website.loadComponents();
</code></pre>
<h4 id="use-strict">Use Strict</h4>
<p>Le champ lexical global (Global Scope) est une zone sauvage ou toutes les variables vont entrer en conflit ainsi la moindre chose déclarée dans un champ lexical dédié (fermeture ou « Closure ») est une bonne chose. C&#39;est le but des fonctions anonymes comme :</p>
<pre class="prettyprint linenums"><code class="language-js">(function () {
    &quot;use strict&quot;;

    // ...
}())
</code></pre>
<p>mais pourquoi utiliser le « strict mode » avec <samp>&quot;use strict&quot;;</samp> ?</p>
<p>Les exécuteurs JavaScript acceptent toute sorte de manière d&#39;écrire du JavaScript ainsi que du code qui n&#39;a pas été standardisé, du code déprécié ou du code non optimisé dans le but de supporter du code JavaScript ancien. Pour ne pas permettre à l&#39;exécuteur de faire tourner du vieux code étrange et de lever des exceptions pour aider au développement, il faut ajouter <samp>&quot;use strict&quot;;</samp> et toutes les variables dans le champ lexical courant (le contexte d&#39;exécution courant) ainsi que les contextes enfants vont lever une exception si le code ne respecte pas les standards. C&#39;est une bonne pratique de nos jours, ne l&#39;oubliez pas pour ne pas exécuter du code démoniaque !</p>
<p><em>Note : vous pouvez aussi l&#39;utiliser dans une fonction nommée ou à instancier ainsi que dans le champ lexical global si vous le souhaitez.</em></p>
<h4 id="plus-de-règle-javascript">Plus de règle JavaScript</h4>
<p>Si vous respecez ça, c&#39;est déjà pas mal. Pour respecter toutes les règles, suivez ces règles : <a href="http://nemo.sonarqube.org/coding_rules#languages=js">Quality JavaScript Rules</a></p>
<h3 id="changement-détat-des-éléments">Changement d&#39;état des éléments</h3>
<p>Si vous souhaitez changer l&#39;état d&#39;un élément, vous pouvez le faire en suivant les étapes suivantes :</p>
<h4 id="standard">Standard</h4>
<ul>
<li>Créez une classe <samp>.is-*</samp> avec tout le changement de design associé dans votre fichier CSS (ou Less / Stylus).</li>
<li>Ajoutez la classe <samp>is-*</samp> ou retirez la de l&#39;élément en question pour changer son état.</li>
<li>Vérifiez l&#39;existance de <samp>is-*</samp> pour savoir dans quel état est actuellement l&#39;élément.</li>
</ul>
<h4 id="avec-animations-simples">Avec animations simples</h4>
<p>Utiliser deux classes de transitions.</p>
<ul>
<li>Utilisez avant la classe <samp>is-*</samp> une classe <samp>to-*</samp> pour démarrer l&#39;animation de transition entre deux états.</li>
<li>Utilisez après la classe <samp>is-*</samp> une classe <samp>from-*</samp> s&#39;il existe une transition de retour à l&#39;état précédent.</li>
<li>Utilisez les propriétés CSS3 keyframe, animation, transform, etc. pour créer des animations sur des éléments dont les paramètres sont statiques. Utilisez une librairie d&#39;animation si les valeurs sont variables en fonction du contexte.</li>
</ul>
<p><em>Exemple :</em></p>
<ul>
<li>Trouvez dans cet exemple comment permettre un changement d&#39;état animé : <a href="https://codepen.io/Haeresis/pen/OyoOEV">Change Element State</a>.</li>
</ul>
<h4 id="avec-animations-complexes">Avec animations complexes</h4>
<p>Utilisez six classes de transitions,</p>
<p><em>pour la transition entrante :</em></p>
<ul>
<li>Utilisez avec ou sans la classe <samp>is-*</samp> une classe <samp>*-enter</samp> pour définir l&#39;état avant animation de transition entrante vers l&#39;état modifié.</li>
<li>Utilisez une classe <samp>*-enter-to</samp> pour définir l&#39;état après l&#39;animation de transition entrante vers l&#39;état modifié.</li>
<li>Utilisez une classe <samp>*-enter-active</samp> pour définir les instructions d&#39;animation de transition entrante de l&#39;état standard vers l&#39;état modifié.</li>
</ul>
<p><em>pour la transition sortante :</em></p>
<ul>
<li>Utilisez une classe <samp>*-leave</samp> pour définir l&#39;état avant animation de transition sortante vers l&#39;état standard.</li>
<li>Utilisez une classe <samp>*-leave-to</samp> et retirez la classe <samp>is-*</samp> (si utilisée) pour définir l&#39;état après l&#39;animation de transition sortante vers l&#39;état standard.</li>
<li>Utilisez une classe <samp>*-leave-active</samp> pour définir les instructions d&#39;animation de transition sortante de l&#39;état modifié vers l&#39;état standard.</li>
</ul>
<p><em>Exemple :</em></p>
<ul>
<li>Trouvez dans cet article toutes les explications sur la mise en place et l&#39;utilisation de ces six classes : <a href="https://blog.lesieur.name/comprendre-et-reproduire-les-animations-de-transitions-vuejs-en-css-et-javascript/">Comprendre et reproduire les animations de transitions Vue.js en CSS et JavaScript</a>.</li>
</ul>
<h3 id="validation-de-formulaire">Validation de formulaire</h3>
<p>Pour valider un formulaire il n&#39;est pas nécessaire d&#39;écrire une seule ligne de JavaScript dans la majorité des cas. Utilisez juste ces trois fichiers :</p>
<ul>
<li><a href="http://jquery.com/">jQuery</a> <a href="//code.jquery.com/jquery-2.1.4.min.js">//code.jquery.com/jquery-2.1.4.min.js</a> (Utilisez comme une bibliothèque pour wrapper élément Nodes dans le DOM).</li>
<li><a href="http://jqueryvalidation.org/">jQuery Validation Plugin</a> <a href="//cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.14.0/jquery.validate.min.js">//cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.14.0/jquery.validate.min.js</a> (Applique différentes règles pré-définies sur les champs souhaités)</li>
<li><a href="https://www.nuget.org/packages/jQuery.Validation.Unobtrusive/">jQuery Validation Unobstrusive Plugin</a> <a href="//ajax.aspnetcdn.com/ajax/mvc/5.2.3/jquery.validate.unobtrusive.min.js">//ajax.aspnetcdn.com/ajax/mvc/5.2.3/jquery.validate.unobtrusive.min.js</a> (Applique automatiquement les règles en ciblant les éléments avec l&#39;attribut <samp>data-*</samp>).</li>
</ul>
<p><em>Note: ce couple de fichier fonctionne ensemble mais si vous utilisez la dernière version pour l&#39;un, en cas de problème, utilisez la dernière version pour les deux autres.</em></p>
<p>Vous trouverez ici un cas d&#39;usage complet de l&#39;utilisation de chaque champ : <a href="http://codepen.io/Haeresis/pen/AzJgF/">Exemple d&#39;utilisation avec chaque champ</a></p>
<p>Et si un champ est injecté plus tard dans le DOM, <strong>après</strong> l&#39;inclusion du fichier unobstrusive, utilisez <samp>$.validator.unobtrusive.parse(&lt;selectorForm&gt;);</samp> pour faire fonctionner les nouveaux formulaires/champs avec unobstrusive.</p>
<p>Si une validation est plus complexe, vous pouvez trouver <a href="http://jqueryvalidation.org/documentation/">la documentation de jQuery Validate ici</a> ou vous tourner vers un lieur de valeur réactive comme <a href="https://fr.vuejs.org/">Vue.js</a>.</p>
<h3 id="étendre-une-classe">Étendre une classe</h3>
<p>Quand vous souhaitez étendre une classe depuis une autre (héritage), vous devez en plus d&#39;étendre la classe, bien penser a étendre les fonctions de son prototype. Si une classe doit hériter de plusieurs classe, alors ce que vous souhaitez est une interface (voir plus loin).</p>
<p>Quand votre classe est un model pour une vue HTML, ajoutez la dans <samp>website.components</samp> mais si c&#39;est purement une classe de model de donnée, ajoutez là dans <samp>website.models</samp>.</p>
<p>Essayons donc d&#39;étendre cette classe par celle-ci :</p>
<p><strong>Class Person</strong></p>
<pre class="prettyprint linenums"><code class="language-js">/* jslint browser: true */

window.website = window.website || {};
website.models = website.models || {};

website.models.Person = function (firstname, lastname) {
    this.firstname = firstname || &quot;No firstname&quot;;
    this.lastname = lastname || &quot;No lastname&quot;;
};
website.models.Person.prototype.age = &quot;No age&quot;;
</code></pre>
<p><strong>Class User</strong></p>
<pre class="prettyprint linenums"><code class="language-js">/* jslint browser: true */

window.website = window.website || {};
website.models = website.models || {};

website.models.User = function (id, password, firstname, lastname) {
    website.models.Person.call(this, firstname, lastname);

    this.id = id;
    this.password = password;
};
website.models.User.prototype = Object.create(website.models.Person.prototype);
website.models.User.prototype.constructor = website.models.User;
</code></pre>
<p><strong>Contrôleur</strong></p>
<pre class="prettyprint linenums"><code class="language-js">/* jslint browser: true */

window.website = window.website || {};
website.models = website.models || {};

(function () {
    var user = new website.models.User(&quot;Haeresis&quot;, &quot;myPassword&quot;);
    user.age = 18;

    user.id; // &quot;Haeresis&quot;
    user.password; // &quot;myPassword&quot;
    user.firstname; // &quot;No firstname&quot;
    user.lastname; // &quot;No lastname&quot;
    user.age; // 18
}());
</code></pre>
<h3 id="implementer-un-mixin">Implementer un mixin</h3>
<p>Quand une fonction est utilisable par plus d&#39;une fonction anonyme, n&#39;hésitez pas à la placer dans l&#39;espace de nom <samp>website</samp> comme <samp>loadComponents</samp> dans l&#39;exemple précédent.</p>
<p>Mais quand une fonction est partagée par plus d&#39;une classe, vous pouvez créer cette fonction dans des interfaces ou mixins et l&#39;implémenter dans les différentes classes. Un mixin est comme une classe mais son usage est uniquement d&#39;étendre une classe, jamais d&#39;être instanciée elle-même.</p>
<p>Ainsi nous pouvons implémenter ces deux mixins dans cette classe.</p>
<p><strong>Interface Age</strong></p>
<pre class="prettyprint linenums"><code class="language-js">/* jslint browser: true */

var website = window.website || {};
website.mixins = website.mixins || {};

website.mixins.Age = function () {
    this.age = &quot;18&quot;;
};
</code></pre>
<p><strong>Interface Firstname</strong></p>
<pre class="prettyprint linenums"><code class="language-js">/* jslint browser: true */

window.website = window.website || {};
website.mixins = website.mixins || {};

website.mixins.Firstname = function () {
    this.firstname = &quot;Bruno&quot;;
};
</code></pre>
<p><strong>Classe Person</strong></p>
<pre class="prettyprint linenums"><code class="language-js">/* jslint browser: true */

window.website = window.website || {};
website.models = website.models || {};
website.mixins = website.mixins || {};

website.classes.Person = function () {
    website.mixins.Firstname.call(this);
    website.mixins.Age.call(this);

    var publics = this;

    publics.lastname = &quot;Lesieur&quot;;
};
</code></pre>
<p><em>Note : si un même nom de propriété ou de fonction existe entre deux interfaces, c&#39;est la dernière interface chargée qui remporte le conflit !</em></p>
<p><strong>Contrôleur</strong></p>
<pre class="prettyprint linenums"><code class="language-js">window.website = window.website || {};
website.models = website.models || {};

(function () {
    var person = new website.models.Person();

    person.lastname; // &quot;Lesieur&quot;
    person.firstname; // &quot;Bruno&quot;
    person.age; // 18
}());
</code></pre>
<h3 id="travailler-sans-espace-de-nom">Travailler sans espace de nom</h3>
<p>Si nous attachons tout dans le namespace <samp>website</samp> c&#39;est pour ne pas entrer en conflit avec des classes déjà existantes. Le patron pour éviter les conflits est d&#39;exposer une méthode <samp>noConflict()</samp> dans la classe directement définie dans la portée lexicale <samp>global</samp>.</p>
<p>Voir plus bas :</p>
<pre class="prettyprint linenums"><code class="language-js">;(function (factory) {
    var initialClass = window.MyClass,
        api = window.MyClass = factory;
    api.noConflict = function () {
        window.MyClass = initialClass;
        return api;
    };
}(function () {
    // Standard definition of class here.
}));
</code></pre>
<p>et si la classe globale <samp>MyClass</samp> existe déjà, utilisez un nouveau nom de classe avec la méthode <samp>noConflict()</samp> pour restaurer l&#39;objet <samp>MyClass</samp> d&#39;origine.</p>
<pre class="prettyprint linenums"><code class="language-js">var MyClass2 = MyClass.noConflict();
</code></pre>
<h3 id="classe-pour-environnement-multiple">Classe pour environnement multiple</h3>
<p>Dans le but de permettre à la classe <samp>MyClass</samp> de fonctionner aussi bien avec Vanilla JS, un loader de module JS ou Node.js, créez une <samp>factory</samp> comme ci-après.</p>
<pre class="prettyprint linenums"><code class="language-js">;(function (root, factory) {
    var root.MyClass = factory;
    if (typeof define === &quot;function&quot; &amp;&amp; define.amd) {
        define(function () {
            return factory;
        });
    }
    if (typeof module === &quot;object&quot; &amp;&amp; module.exports) {
        module.exports = factory;
    }
}(this, function () {
    // Normal definition of class here.
}));
</code></pre>
<h3 id="autres-comportements">Autres comportements</h3>
<h4 id="accesseurs-et-mutateurs">Accesseurs et mutateurs</h4>
<p>Le patron d&#39;accession et de mutation vous permettent d&#39;effectuer des actions avant le renvoi d&#39;une valeur ou l&#39;affectation d&#39;une valeur.</p>
<p><strong>Classe</strong></p>
<pre class="prettyprint linenums"><code class="language-js">window.website = window.website || {};
website.models = website.models || {};

website.models.Person = function (firstname, lastname) {
    var publics = this,
        privates = {};

    privates.firstname = (firstname) ? publics.firstname(firstname) : &quot;No firstname&quot;;
    privates.lastname = (lastname) ? publics.lastname(lastname) : &quot;No lastname&quot;;

    Object.defineProperty(publics, &#39;firstname&#39;, {
        get: function () {
            // Do what you want before getter
            return privates.firstname;
        },
        set: function (firstname) {
            // Do what you want before setter
            privates.firstname = firstname;
            // Do what you want after setter
        }
    });

    Object.defineProperty(publics, &#39;lastname&#39;, {
        get: function () {
            // Do what you want before getter
            return privates.lastname;
        },
        set: function (lastname) {
            // Do what you want before setter
            privates.lastname = lastname;
            // Do what you want after setter
        }
    });
};
</code></pre>
<p><strong>Contrôleur</strong></p>
<pre class="prettyprint linenums"><code class="language-js">window.website = window.website || {};
website.models = website.models || {};

(function () {
    var person = new website.models.Person();

    person.firstname = &quot;Bruno&quot;;
    person.lastname = &quot;Lesieur&quot;;

    console.log(person.firstname); // &quot;Bruno&quot;
    console.log(person.lastname); // &quot;Lesieur&quot;
}());
</code></pre>
<h4 id="chainage">Chainage</h4>
<p>Un patron de chaînage (populaire en jQuery par exemple), consiste à fournir une référence aux propriétés privées d&#39;une classe instanciée depuis l’extérieur. La méthode utilisée renvoi la valeur souhaitée en tant qu&#39;accesseur et permet de la modifier en tant que mutateur. En tant que mutateur, l&#39;objet alors retourné n&#39;est pas la valeur mais l&#39;objet instancié pour permettre « le chaînage ».</p>
<p><strong>Classe</strong></p>
<pre class="prettyprint linenums"><code class="language-js">window.website = window.website || {};
website.models = website.models || {};

website.models.Person = function (firstname, lastname) {
    var publics = this,
        privates = {};

    privates.firstname = (firstname) ? publics.firstname(firstname) : &quot;No firstname&quot;;
    privates.lastname = (lastname) ? publics.lastname(lastname) : &quot;No lastname&quot;;

    publics.firstname = function (firstname) {
        if (typeof firstname === &quot;undefined&quot;) {
            // Do what you want before
            return privates.firstname;
        } else {
            // Do what you want before
            privates.firstname = firstname;
            // Do what you want after
            return publics;
        }
    };

    publics.lastname = function (lastname) {
        if (typeof lastname === &quot;undefined&quot;) {
            // Do what you want before
            return privates.lastname;
        } else {
            // Do what you want before
            privates.lastname = lastname;
            // Do what you want after
            return publics;
        }
    };
};
</code></pre>
<p><strong>Contrôleur</strong></p>
<pre class="prettyprint linenums"><code class="language-js">window.website = window.website || {};
website.models = website.models || {};

(function () {
    var person = (new website.models.Person())
        .firstname(&quot;Bruno&quot;)
        .lastname(&quot;Lesieur&quot;);

    console.log(person.firstname()); // &quot;Bruno&quot;
    console.log(person.lastname()); // &quot;Lesieur&quot;
}());
</code></pre>
<h4 id="forcer-le-contexte-dexécution">Forcer le contexte d&#39;exécution</h4>
<p>Vous pouvez forcer une classe a ne jamais permettre un autre contexte d&#39;exécution que le sien d&#39;être utilisé. Cela vous permet de ne pas utiliser le mot clé <samp>new</samp> depuis un appel extérieur.</p>
<p><strong>Classe</strong></p>
<pre class="prettyprint linenums"><code class="language-js">var website = window.website || {};
website.models = website.models || {};

website.models.Person = function callee(firstname, lastname) {
    if (!(this instanceof callee)) {
        return new callee();
    }

    this.firstname = firstname || &quot;No firstname&quot;;
    this.lastname = lastname || &quot;No lastname&quot;;
};
</code></pre>
<p><strong>Contrôleur</strong></p>
<pre class="prettyprint linenums"><code class="language-js">var website = window.website || {};
website.models = website.models || {};

(function () {
    (new website.models.Person() instanceof website.models.Person); // true
    (website.models.Person() instanceof website.models.Person); // true
}());
</code></pre>
<h3 id="gérer-les-erreurs">Gérer les erreurs</h3>
<p>Il y a 3 manières de proprement lever les erreurs, pour un code synchrone, un code asynchrone ou un événement : <a href="https://blog.lesieur.name/gerer-les-erreurs-et-les-exceptions-en-javascript/">voir par ici</a>.</p>
<h3 id="documentation">Documentation</h3>
<p>De manière à documenter votre code, utilisez le <a href="https://www.npmjs.com/package/jsdoc">JSDoc npm CLI</a>. Vous trouverez tout <a href="http://usejsdoc.org/">ce qu&#39;il vous faut pour la documentation ici</a>.</p>
<ul>
<li><a href="https://www.lesieur.name/doc-atlas/">Un exemple avec ce faux site Munchkin</a> et <a href="https://github.com/Haeresis/TestCaseAtlas">son code source</a>.</li>
</ul>
<p>Par exemple la page « <a href="https://www.lesieur.name/doc-atlas/homepage.html">Home</a> » possède le composant « <a href="https://www.lesieur.name/doc-atlas/components/hero.html">Hero</a> » qui est documenté <a href="https://www.lesieur.name/doc-atlas/documentation/design/hero.html">pour le CSS</a> et <a href="https://www.lesieur.name/doc-atlas/documentation/behaviors/module-munchkin-ws.ui.Hero.html">pour le JS</a>.</p>
]]></description>
            <link>http://localhost:7776/conventions-html-css-js-et-architecture-front-end/</link>
            <guid isPermaLink="false">5667eaecd1b7fe136fc2005a</guid>
            <category><![CDATA[Node.js]]></category>
            <category><![CDATA[HTML]]></category>
            <category><![CDATA[CSS]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[Ressources]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[HTML5]]></category>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Stylus]]></category>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <category><![CDATA[CSS3]]></category>
            <category><![CDATA[Less]]></category>
            <category><![CDATA[Spécifications]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Sat, 24 Feb 2018 18:31:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Quelles conventions CSS utiliser pour des structures HTML réutilisable ?]]></title>
            <description><![CDATA[<p>Je viens de (re)terminer la lecture du <a href="https://guidecss.davidl.fr">Guide CSS Fr</a> et j&#39;ai eu envie d&#39;apporter quelques modifications et ajouts à ces très bons conseils. Cet article va donc en quelque sorte constituer mes conventions en matière de création et maintenance HTML et CSS. Elles sont donc identiques à ce qui est écrit sur <a href="https://guidecss.davidl.fr">Guide CSS Fr</a> à cet article prêt !</p>
<figure>
<img width="1003" height="619" src="media/images/upload/css.jpg" alt="Anatomie d'une règle CSS" style="max-width: 100%;height: auto;">
<figcaption>Affreux sélecteur... http://www.puce-et-media.com/</figcaption>
</figure>

<p>N&#39;ayant rien à ajouter aux parties autres que « <a href="https://guidecss.davidl.fr/convention.html">4. Convention de nommage</a> », je passe directement à mes propres conventions de nommage en vous sensibilisant à l&#39;anatomie d&#39;une page HTML.</p>
<p><strong>Je finirai néanmoins par pointer du doigt une erreur, sinon la seule, en ce qui concerne la totale inutilité du préfixe <samp>.js-</samp> destiné à séparer le visuel du fonctionnel</strong>.</p>
<p><em>Note : Tous les exemples d&#39;inclusion de fragment HTML sont tirés du framework Node.js <a href="https://node-atlas.js.org/">NodeAtlas</a> mais c&#39;est juste à titre illustratif, c&#39;est la même chose avec vos frameworks préférés.</em></p>
<h2 id="composition-dune-page">Composition d&#39;une page</h2>
<p>Chaque page HTML est composée par :</p>
<ul>
<li>un <strong>gabarit de page</strong> ou <em>disposition</em> de page (nommé « template » ou « layout » en anglais),</li>
<li>des <strong>composants</strong> (nommé « components » en anglais) et</li>
<li>des <strong>patrons de conception</strong> (nommé « patterns » en anglais).</li>
</ul>
<p>Avant de nous attacher au gabarit qui représente la structure qui va accueillir nos composants sur une page, intéressons nous au plus important : les composants eux-mêmes.</p>
<h3 id="les-composants">Les composants</h3>
<h4 id="structure">Structure</h4>
<p>Les composants sont des fragments de HTML qui découpent une page de contenu HTML de manière logique et consistante. Bien qu&#39;ils puissent être spécialisés et quasiment dédiés à un seul endroit —comme l&#39;en-tête (souvent nommé « header ») de site—, ils sont prévus pour être :</p>
<ul>
<li><strong>déplaçable</strong> dans une page,</li>
<li><strong>réutilisable</strong> sur d&#39;autres pages.</li>
</ul>
<p>À cet effet, il est généralement bon d&#39;écrire un composant dans un fichier dédié. Par exemple dans le dossier <samp>views</samp> de <a href="https://node-atlas.js.org/">NodeAtlas</a>, on pourrait créer un fichier <samp>components/hearder.htm</samp> et l&#39;utiliser avec <samp>&lt;?- include(&#39;components/header.htm&#39;) ?&gt;</samp> dans un gabarit de page HTML.</p>
<p>Un composant est obligatoirement composé d&#39;au moins deux <samp>&lt;div&gt;</samp> imbriquées (ou toutes autres balises de type <samp>block</samp>) pour pouvoir se suffire à lui-même et respecter n&#39;importe quel design sans être disposé dans un gabarit complexe (voir plus loin). D&#39;ailleurs il ne doit disposer que d&#39;une seule balise racine.</p>
<p>La première <samp>&lt;div&gt;</samp> représente la place totale qu&#39;occupera le composant, design visuel inclus (background généralement) et peut varier sémantiquement avec les éléments HTML5 : <samp>header</samp>, <samp>footer</samp>, <samp>section</samp>, <samp>article</samp>, <samp>aside</samp> ou <samp>nav</samp>. Nous reviendrons plus bas sur cet aspect.</p>
<p>La seconde <samp>&lt;div&gt;</samp> représente la limite du contenu en lui-même (1200px maximum habituellement). Elle contiendra toujours le prefixe de classe <samp>cmpt-</samp> (pour « component » en anglais) qui nous permettrait par exemple de définir la taille maximale d&#39;affichage du contenu des composants, pour tous les composants, quand ils sont libres (utilisés en dehors d&#39;une grille, ce que nous verrons plus loin).</p>
<p><strong>Voici par exemple un composant HTML dans <samp>views/components/cmpt-&lt;name-of-component&gt;.htm</samp></strong></p>
<pre class="prettyprint linenums"><code class="language-html">&lt;div class=&quot;cmpt-&lt;name-of-component&gt;&quot;&gt;
    &lt;div class=&quot;cmpt-&lt;name-of-component&gt;--ui&quot;&gt;
        &lt;!-- Sous-parties du composant ici. --&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>La <samp>&lt;div&gt;</samp> de classe <samp>cmpt-&lt;name-of-component&gt;--ui</samp> fixe la taille maximale de chaque composant grâce à par exemple...</p>
<p><strong>...cette directive CSS dans <samp>assets/stylesheets/common.css</samp> pour tous les composants</strong></p>
<pre class="prettyprint linenums"><code class="language-css">[class^=&quot;cmpt-&quot;][class$=&quot;--ui&quot;] {
    margin-left: auto;
    margin-right: auto;
    max-width: 1200px;
}
</code></pre>
<p><strong>ou ponctuellement dans <samp>assets/stylesheets/cmpt-&lt;name-of-component&gt;.css</samp> avec</strong></p>
<pre class="prettyprint linenums"><code class="language-css">.cmpt-&lt;name-of-component&gt;--ui {
    max-width: 1024px;
}
</code></pre>
<p>Mais aucune taille <samp>width</samp> ou <samp>height</samp> ne doit être forcée de manière à ce que le contenu du composant soit toujours fluide, quelque soit sa place dans une grille.</p>
<blockquote>
<p><strong>Pourquoi deux « div » imbriquées et une « --ui » partout ?</strong></p>
</blockquote>
<blockquote>
<p>Je vais vous laisser voir cela à travers les divers exemples d&#39;affichages réalisables sans gabarit complexe (pas de grille) et <strong>à partir du même code HTML</strong>.</p>
</blockquote>
<ul>
<li><a href="https://codepen.io/Haeresis/pen/pJMBEg">Toute la place en alternance : type « One Page »</a>,</li>
<li><a href="https://codepen.io/Haeresis/pen/NqQVXv">inclus dans une page : type « Page Standard »</a>,</li>
<li><a href="https://codepen.io/Haeresis/pen/PqMvQW">les deux exemples précédents en alternance : type « Design »</a>,</li>
<li><a href="https://codepen.io/Haeresis/pen/mJNYxE">sur toute la page : type « BackOffice »</a>,</li>
<li><a href="https://codepen.io/Haeresis/pen/vOowjL">grille de composant : type « Bootstrap »</a>,</li>
<li><a href="https://codepen.io/Haeresis/pen/KpOLeR">un affichage hors flux : type « Popup »</a>,</li>
<li><a href="https://codepen.io/Haeresis/pen/jPgopz">un affichage en absolue : type « App Mobile »</a> ou encore</li>
<li><strong><a href="https://codepen.io/Haeresis/pen/bdXymY">la totalité en une page</a></strong>.</li>
</ul>
<h4 id="nommage">Nommage</h4>
<p>Dans le <a href="https://guidecss.davidl.fr">Guide CSS Fr</a>, il est expliqué que si le nom du composant est : <samp>my-component</samp>, alors celui d&#39;un sous composant serait <samp>my-component__text</samp> et une version alternative de se composant serait permise avec la classe <samp>my-component--alternative</samp> à la place. Pour ma part j&#39;ai opté pour quelque chose de différent pour des questions de lisibilité du <samp>__</samp> ce qui nous permet de ne pas se soucier de séparer les classes par deux espaces.</p>
<ol>
<li><p>Le nom du composant est unique. Par exemple <samp>.cmpt-presentation-items</samp>.</p>
<pre class="prettyprint linenums"><code class="language-html"> &lt;div class=&quot;cmpt-presentation-items&quot;&gt;
     &lt;div class=&quot;cmpt-presentation-items--ui&quot;&gt;
         &lt;!-- Sous-parties --&gt;
     &lt;/div&gt;
 &lt;/div&gt;
</code></pre>
</li>
<li><p>Une sous partie de composant est nommée par exemple <samp>.cmpt-presentation-items--title</samp>, <samp>.cmpt-presentation-items--content</samp> ou encore <samp>.cmpt-presentation-items--item--title</samp>.</p>
<pre class="prettyprint linenums"><code class="language-html"> &lt;div class=&quot;cmpt-presentation-items&quot;&gt;
     &lt;div class=&quot;cmpt-presentation-items--ui&quot;&gt;
         &lt;div class=&quot;cmpt-presentation-items--title&quot;&gt;
             &lt;!-- Titre --&gt;
         &lt;/div&gt;

         &lt;ul class=&quot;cmpt-presentation-items--items&quot;&gt;
             &lt;li class=&quot;cmpt-presentation-items--item&quot;&gt;
                 &lt;div class=&quot;cmpt-presentation-items--subtitle&quot;&gt; &lt;!-- ou `cmpt-presentation-items--item--title` --&gt;
                     &lt;!-- Sous-titre --&gt;
                 &lt;/div&gt;

                 &lt;div class=&quot;cmpt-presentation-items--content&quot;&gt;
                     &lt;!-- Contenu --&gt;
                 &lt;/div&gt;
             &lt;/li&gt;
         &lt;/ul&gt;
     &lt;/div&gt;
 &lt;/div&gt;
</code></pre>
<p> et est adressé en CSS directement par son sélecteur CSS</p>
<pre class="prettyprint linenums"><code class="language-css"> .cmpt-presentation-item {
     background-color: #f00;
 }

 .cmpt-presentation-item--title {
     font-size: 1.4rem;
 }

 .cmpt-presentation-item--content {
     padding: 20px;
 }
</code></pre>
</li>
<li><p>La version alternative d&#39;un composant n&#39;est pas préfixée par son nom. Au lieu de cela, le comportement alternatif est nommé et est préfixé par <samp>as-</samp>. C&#39;est grâce au cumul des classes et non à son changement que l&#39;on appliquera la différence. Par exemple <samp>as-carousel</samp>.</p>
<pre class="prettyprint linenums"><code class="language-html"> &lt;div class=&quot;cmpt-presentation-items as-carousel&quot;&gt;
     &lt;div class=&quot;cmpt-presentation-item--ui&quot;&gt;
         &lt;!-- ... --&gt;
     &lt;/div&gt;
 &lt;/div&gt;
</code></pre>
<p> qui est adressé en CSS grâce à la cascade</p>
<pre class="prettyprint linenums"><code class="language-css"> /* ... Partie précédente ... */

 .cmpt-presentation-item.as-carousel { /* Cas rare de double sélection permise. */
     background-color: #00f;
 }

 /*.cmpt-presentation-item*/.as-carousel .cmpt-presentation-item--title {
     font-size: 1.2rem;
 }

 /*.cmpt-presentation-item*/.as-carousel .cmpt-presentation-item--content {
      padding: 10px;
 }
</code></pre>
<p> ou encore en Less</p>
<pre class="prettyprint linenums"><code class="language-css"> .cmpt-presentation-item {
     background-color: #f00;

     &amp;.as-carousel {
         background-color: #00f;
     }

     &amp;--title {
         font-size: 1.4rem;
     }

     &amp;--content {
         padding: 20px;
     }
 }

 /*.cmpt-presentation-item*/.as-carousel {
     .cmpt-presentation-item {
         &amp;--title {
             font-size: 1.2rem;
         }

         &amp;--content {
             padding: 10px;
         }
     }
 }
</code></pre>
<p> ou encore <strong>mieux</strong>, en Stylus</p>
<pre class="prettyprint linenums"><code class="language-css"> .cmpt-presentation-item {
     background-color: #f00;

     &amp;.as-carousel {
         background-color: #00f;
     }

     &amp;--title {
         font-size: 1.4rem;
     }

     &amp;--content {
         padding: 20px;
     }

     &amp;.as-carousel ^[0] {
         &amp;--title {
             font-size: 1.2rem;
         }

         &amp;--content {
             padding: 10px;
         }
     }
 }
</code></pre>
</li>
</ol>
<h3 id="le-gabarit-de-page">Le gabarit de page</h3>
<p>Le gabarit est la carcasse qui va accueillir les composants. On appel souvent cette carcasse la grille (en anglais « Grid »). Dans son état le plus simple, c&#39;est une page HTML sans grille, sans classe de gabarit : une page uniquement composée de composants les uns à la suite des autres.</p>
<p>Le contenu de la page HTML ne doit jamais être immédiatement sous le <samp>&lt;body&gt;</samp> mais dans une <samp>&lt;div&gt;</samp> de classe <samp>lyt</samp> (pour « layout » en anglais) par exemple. Cela permet d&#39;ajouter les scripts HTML à l&#39;extérieur et de pouvoir profiter de <samp>:nth-child(x)</samp> à l&#39;intérieur sans que le nombre ou la place des items soient altérés par l&#39;ajout d&#39;un <samp>&lt;script&gt;</samp> (En ce qui concerne les <samp>&lt;link&gt;</samp>, ça se trouve dans le <samp>&lt;head&gt;</samp>).</p>
<h4 id="gabarit-simple-sans-classe">Gabarit simple (sans classe)</h4>
<p>Voici à quoi ressemble une page HTML sans grille qui accueil nos composants.</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;body&gt;
    &lt;!-- Le minimum de `&lt;script&gt;` nécessaire au démarrage pré-HTML --&gt;
    &lt;div class=&quot;lyt&quot;&gt;
        &lt;!-- Boucle de composants ici. --&gt;
    &lt;/div&gt;
    &lt;!-- Tous les `&lt;script&gt;` soit 99% du Javascript appelé ici. --&gt;
&lt;/body&gt;
</code></pre>
<h4 id="gabarit-nommé">Gabarit nommé</h4>
<p>Il est intéressant d&#39;ajouter un nom à chaque gabarit de manière à pouvoir changer, pour un gabarit précis, le comportement de n&#39;importe quel composant avec le préfixe <samp>tmpl-</samp> (pour « template » en anglais).</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;body&gt;
    &lt;div class=&quot;lyt tmpl-home&quot;&gt; &lt;!-- Nom du gabarit --&gt;
        &lt;!-- Boucle de composants ici. --&gt;
    &lt;div&gt;
&lt;/body&gt;
</code></pre>
<p>En mettant ce nom au sommet de toute balise HTML, cela permet de manipuler les variations CSS de tous les pattrons de conception et composants en fonction du gabarit. En incluant donc la partie en-tête et pied-de-page de votre site au niveau de votre conteneur <samp>lyt</samp> global. Je peux donc changer l&#39;arrière plan du site, spécifiquement pour le gabarit de classe <samp>tmpl-home</samp>.</p>
<p><strong>Avec ce code CSS par exemple dans <samp>assets/stylesheets/common.css</samp></strong></p>
<pre class="prettyprint linenums"><code class="language-css">.lyt {
    background-image: none;
}

/* ... */

/*.lyt*/.tmpl-home {
    background-image: url(&#39;../media/images/ads.png&#39;);
}
</code></pre>
<h4 id="gabarit-complexe">Gabarit complexe</h4>
<p>Il est possible de créer des gabarits plus complexes en permettant de les habiller avec un système de grille pour avoir une page plus ordonnée.</p>
<p><strong>Un exemple de composants répartis dans des airs <samp>lyt-area</samp> et <samp>lyt-part</samp> destinées à être habillées par une grille.</strong></p>
<pre class="prettyprint linenums"><code class="language-html">&lt;div class=&quot;lyt tmpl-home&quot;&gt;
    &lt;section class=&quot;lyt-area for-main&quot;&gt;
        &lt;div class=&quot;lyt-part for-overview&quot;&gt;
            &lt;!-- Boucle de composants ici. --&gt;
        &lt;/div&gt;
        &lt;aside class=&quot;lyt-part for-ads&quot;&gt;
            &lt;!-- Boucle de composants ici. --&gt;
        &lt;/aside&gt;
    &lt;/section&gt;
    &lt;section class=&quot;lyt-area for-presentation&quot;&gt;
        &lt;!-- Boucle de composants ici. --&gt;
    &lt;/section&gt;
    &lt;aside class=&quot;lyt-area for-also&quot;&gt;
        &lt;!-- Boucle de composants ici. --&gt;
    &lt;/aside&gt;
&lt;/div&gt;
</code></pre>
<p><strong>avec un habillage de grille (Less avec Bootstrap par exemple)</strong></p>
<pre class="prettyprint linenums"><code class="language-css">@import (reference) &#39;bootstrap/bootstrap&#39;;

.tmpl-home {
    .lyt-area {
        .container; /* Ajouter une marge interne gauche et droite... */
    }

    /*.lyt-area*/.for-presentation {
        padding: 0; /* ...et l&#39;enlever spécifiquement pour la présentation. */
    }

    .lyt-part {
        .make-sm-column(6); /* créer des colonnes de 6 sur 12 */
    }
}
</code></pre>
<p>Rien ne vous empêche non plus de changer la grille (l&#39;application CSS sur le gabarit) en fonction des besoins, ce que vous ne pourriez pas faire si vous appliquer des patrons de conceptions comme <samp>col-xs-6</samp> directement dans la grille (nous verrons cela plus bas).</p>
<p>Par exemple en ajoutant <samp>with-ads</samp> à votre gabarit, vous pourriez faire varier votre feuille CSS de manière à accueillir de la publicité de part et d&#39;autre de la page.</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;div class=&quot;lyt tmpl-home with-ads&quot;&gt;
    &lt;!-- Grille de gabarit --&gt;
&lt;/div&gt;
</code></pre>
<h3 id="les-patrons-de-conception">Les patrons de conception</h3>
<p>Ce sont des modèles prêts à l&#39;emploi destinés à être apposés sur une balise, ou, une balise contenant un ensemble de balise. Lors de sa définition, le patron nécessite « obligatoirement » un commentaire CSS sur son utilisation dans un code HTML.</p>
<p>Contrairement aux gabarit et composants, les patrons ne sont pas ciblés depuis la feuille CSS vers une classe « sémantique » mais mis à la main sur une balise HTML. En ce sens, ils sont parfait pour permettre à des rédacteurs de contenu de faire de la mise en page ou faire votre grille CSS dans le gabarit de manière <a href="https://blog.lesieur.name/utilisation-optimisee-de-framework-css-comme-bootstrap-avec-less/">HTML-Driven</a> plutôt que <a href="https://blog.lesieur.name/utilisation-optimisee-de-framework-css-comme-bootstrap-avec-less/">CSS-Driven</a>.</p>
<p>Dans nos exemples précédents, <samp>lyt-area</samp> et <samp>lyt-part</samp> pourrait être des patrons avec chacun un rôle « raccourci » spécifique (ici de mettre le code dans un containeur pour <samp>lyt-part</samp>. Les patrons peuvent donc servir dans les composants, mais également dans les gabarit en fonction du besoin.</p>
<p>Voici des exemples de patrons :</p>
<pre class="prettyprint linenums"><code class="language-css">/**
    &lt;div class=&quot;text-center&quot;&gt;
        Ce texte est centré.
    &lt;/div&gt;
*/
.text-center {
    text-align: center;
}

/**
    &lt;div class=&quot;img-responsive&quot;&gt;
        &lt;img src=&quot;fit-container-in-all-size.png&quot;&gt;
    &lt;/div&gt;
* ou
    &lt;img class=&quot;img-responsive&quot; src=&quot;fit-container-in-all-size.png&quot;&gt;
*/
.img-responsive {
    max-width: 100%;
    height: auto;

    img {
        max-width: 100%;
        height: auto;
    }
}

/**
    &lt;button class=&quot;btn btn-primary&quot;&gt;
        Click Me
    &lt;/button&gt;
*/
.btn
    display: inline-block;
    padding: 4px 8px;
}
.btn.btn-lg {
    background-color: blue;
}

/**
    &lt;div class=&quot;container&quot;&gt;
        &lt;!-- Des types blocks ou inlines --&gt;
    &lt;/div&gt;
*/
.container {
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
}
</code></pre>
<p>Les patrons étant applicables dans tous les composants, un comportement spécifique à un patron peut-être spécifié dans le fichier du composant de cette manière :</p>
<p><strong>Exemple de patron CSS surchargé spécifiquement pour un composant</strong></p>
<pre class="prettyprint linenums"><code class="language-css">/**
    &lt;div class=&quot;color-alternative&quot;&gt;
        I am white !
    &lt;/div&gt;
*/
.color-alternative {
    color: white;
}

/* ... */

/**
    &lt;div class=&quot;div.cmpt-footer&quot;&gt;
        &lt;div class=&quot;color-alternative&quot;&gt;
            I am white !
        &lt;/div&gt;
    &lt;/div&gt;
*/
.cmpt-footer {
    background-color: #fff;
}
.cmpt-footer .color-alternative {
    color: black;
}
</code></pre>
<p><strong>Mon conseil : un patron doit toujours être placé dans une zone dédiée au contenu et non au composant en lui-même. Il est parfait dans du HTML qui pourrait avoir vocation à finir dans une base de donnée de contenu. Aussi n&#39;utilisez jamais un <samp>.text-right</samp> sur un <samp>.component--subcomponent</samp> car rien ne garanti que dans un autre contexte (gabarit), le texte ne serait pas à gauche. Et en ce qui concerne leur utilisation dans les gabarits : tout dépend si vous préférez intervertir les gabarits HTML (permet d&#39;utiliser des grilles Bootstrap par exemple) quand la carcasse varie ou ajouter une classe <samp>.with-this-variation</samp> comme vu précédemment.</strong></p>
<h3 id="classes-alternatives">Classes alternatives</h3>
<p><samp>class=&quot;cmpt-&lt;name-of-component&gt;&quot;</samp> sert à identifier toutes les portions de HTML relatives à se composant dans une page. En ajoutant des classes, on peut varier l&#39;habillage ou identifier précisément une instance.</p>
<ul>
<li><p><strong>as-*</strong> : permet de faire varier le style / comportement d&#39;un composant / gabarit. <em>Exemple : <samp>class=&quot;cmpt-&lt;name-of-component&gt; as-popup&quot;</samp> pour permettre au composant de s&#39;afficher comme une popup.</em></p>
</li>
<li><p><strong>with-*</strong> : un équivalent de <samp>as-*</samp>. <em>Vous pouvez par exemple réserver <samp>as-*</samp> pour les composants et <samp>with-*</samp> pour les gabarits.</em></p>
</li>
<li><p><strong>is-*</strong> : permet de décrire l&#39;état d&#39;un composant / gababrit afin d&#39;activer / désactiver des visuels et / ou des fonctionnalités ou une capacité à permettre une fonctionnalité. <em>Exemple : <samp>class=&quot;cmpt-&lt;name-of-component&gt; is-opened&quot;</samp> pour décrire que la popup est ouverte ou <samp>class=&quot;cmpt-&lt;name-of-component&gt; is-closable&quot;</samp> pour dire que la popup peut être manuellement fermée</em>.</p>
</li>
<li><p><strong>for-*</strong> : permet d&#39;identifier précisément un composant / gabarit parmi plusieurs autres du même type. <em>Exemple : class=&quot;tyl-area for-ads&quot; pour identifier le contenu des composants qui seront placés dans cet endroit du gabarit comme étant de la publicité par exemple.</em></p>
</li>
</ul>
<h2 id="css-et-js--une-seule-classe-pour-les-gouverner-toutes">CSS et JS : une seule classe pour les gouverner toutes</h2>
<p>Nous y voilà, au point qui à lui seul m&#39;a donné l&#39;envie d&#39;écrire cet article.</p>
<blockquote>
<p>Le <a href="https://guidecss.davidl.fr/convention.html">Guide CSS FR</a> nous dit « <em>N&#39;utilisez jamais une classe de style CSS pour vos ancres JavaScript. Associer un comportement JavaScript à une classe de style signifie que nous ne pourrons jamais avoir l&#39;un sans l&#39;autre.</em> » et nous donne comme exemple : « <em>is-sortable  js-is-sortable</em> »</p>
</blockquote>
<blockquote>
<p><em>Cela <strong>n&#39;</strong>est <strong>pas</strong> un conseil à suivre.</em> Je m&#39;explique.</p>
</blockquote>
<ol>
<li><p>Dans le cas des patrons ; une unique classe doit se suffire à elle-même. C&#39;est précisément parce qu&#39;elle a vocation à être apposée à la main qu&#39;il ne doit pas être possible de gérer le visuel et le JavaScript indépendamment.</p>
<p> Soit tous les <samp>.btn-popup</samp> ouvre une popup, soit aucun. Il n&#39;y a pas de raison que les <samp>.btn-popup</samp> n&#39;ouvre pas les popups et que les <samp>.btn-popup.js-btn-popup</samp> les ouvre. Le <samp>.btn-popup</samp> se suffit à lui-même. Si toutefois on souhaite un bouton identique au <samp>.btn-popup</samp>, sans que celui-ci n&#39;ouvre de popup, c&#39;est dans la CSS et le HTML que ça se passe avec par exemple les règles CSS <samp>.btn-popup, .btn-foo { /* même design */ }</samp> que l&#39;on applique sur l&#39;élément HTML <samp>.btn-foo</samp>. Ainsi si l&#39;utilisateur veut un bouton qui n&#39;ouvre pas de popup mais qui est visuellement identique, il utilisera <samp>.btn-foo</samp> par exemple.</p>
<p> Une autre manière de faire (que je préfère réserver exclusivement aux composants et gabarits) serait alors les règles CSS <samp>.btn-foo { /* design */ } .is-popup-openable { cursor: pointer; }</samp> appliqué sur un élément HTML <samp>.btn-foo.is-popup-openable</samp>. Comprenez bien ici que le <samp>cursor: pointer</samp> et l&#39;action de rendre cliquable sont encore une fois liés à une unique classe qui est <samp>.is-popup-openable</samp> et qu&#39;il n&#39;y a pas de sens à utiliser <samp>.is-popup-openable.js-is-popup-openable</samp>. Soit la classe y est et l&#39;élément est cliquable avec une main, soit elle n&#39;y ai pas et l&#39;élément n&#39;est pas cliquable sans main.</p>
</li>
<li><p>Dans le cas des composants et des gabarits, c&#39;est pareil. Il est cependant envisageable que dans un cas on souhaite afficher un composant de manière standard, et dans un autre cas on souhaite lui faire exécuter un script pour, par exemple, gérer un défilement automatique d&#39;élément ; une visionneuse.</p>
<p> Cela n&#39;a pas de sens que <samp>.cmpt-presentation-items</samp> ne soit pas un visionneur mais que <samp>.cmpt-presentation-items.js-cmpt-presentation-items</samp> en soit un. Non, cela a plus de sens que <samp>.cmpt-presentation-items</samp> n&#39;en soit pas nécessairement un mais que <samp>.cmpt-presentation-items.as-slider</samp> en soit un.</p>
<p> Pas besoin de préciser <samp>.js-</samp> car c&#39;est au moment de sélectionner un composant par la classe le désignant (et sa variation ou non) dans nos fichiers JavaScript qu&#39;on décide qu&#39;un code JavaScript doit s&#39;appliquer dessus : et absolument pas parce que nous l&#39;avons décidé en ajoutant la même classe avec <samp>.js-</samp> devant.</p>
<p> <em>Exemple : Il est possible que j&#39;ajoute du JavaScript pour faire fonctionner <samp>.cmpt-presentation-items</samp> pour par exemple faire du Lazy Loading de contenu ou que je n&#39;en utilise pas sur <samp>.cmpt-presentation-items.as-slider</samp> car mes transitions automatiques sont gérées en CSS3 avec transition et animation.</em></p>
</li>
</ol>
<p><strong>En conclusion : style et comportement doivent être liés à la même classe. Si une autre classe doit être ajoutée, c&#39;est pour décrire un <strong>autre</strong> comportement visuel et / ou fonctionnel.</strong></p>
<h2 id="des-composants-réellement-déplaçable-partout">Des composants réellement déplaçable partout</h2>
<p>La problématique lorsque l&#39;on déplace des fragments de HTML, c&#39;est de ne plus respecter l&#39;arborescence des <samp>&lt;h1-h6&gt;</samp>. Car si un composant possède un <samp>&lt;h1&gt;</samp>, alors il peut difficilement être mis une fois dans le haut de la page et une fois en bas sans faire hurler au scandale les experts SEO. Réglons ce problème.</p>
<h3 id="rappel-sur-les-block-sémantiques">Rappel sur les <samp>block</samp> sémantiques</h3>
<p>Sachez qu&#39;en HTML5, <a href="https://blog.lesieur.name/les-balises-h1-multiples-autorisees-en-html5/">il peut y avoir plus d&#39;un <samp>&lt;h1&gt;</samp> par page</a> mais pas à n&#39;importes quelles conditions.</p>
<p>Sous la balise <samp>&lt;body&gt;</samp> : l&#39;intégralité des <samp>&lt;h1-h6&gt;</samp> dispersés entre les balises forment un index hiérarchique. L&#39;élément <samp>&lt;h1&gt;</samp> doit être unique. Mais les balises <samp>&lt;section&gt;</samp>, <samp>&lt;article&gt;</samp>, <samp>&lt;aside&gt;</samp> et <samp>&lt;nav&gt;</samp> remettent les compteurs à zéro et sous chacune de ces balises il est de nouveau possible de disperser des <samp>&lt;h1-h6&gt;</samp> avec un seul <samp>&lt;h1&gt;</samp>, etc.</p>
<p>Chaque nouvel espace de <samp>&lt;section&gt;</samp>, <samp>&lt;article&gt;</samp>, <samp>&lt;aside&gt;</samp> et <samp>&lt;nav&gt;</samp> peut lui-même contenir un <samp>&lt;header&gt;</samp> et un <samp>&lt;footer&gt;</samp>. L&#39;importance des <samp>&lt;h1-h6&gt;</samp> est donc à présent bi-directionnel voir tri-directionnel : un <samp>&lt;h2&gt;</samp> est d&#39;autant plus important qu&#39;il se trouve directement dans <samp>&lt;body&gt;</samp> à l&#39;intérieur d&#39;un <samp>&lt;header&gt;</samp> au contraire d&#39;un <samp>&lt;h1&gt;</samp> sous une pile de plusieurs <samp>&lt;section&gt;</samp>. Il est même probable que un <samp>body &gt; article &gt; header &gt; h1</samp> dans une page avec une unique balise <samp>&lt;article&gt;</samp> est plus de poids que le <samp>body &gt; header &gt; h1</samp> du titre de page (mais je spécule, ce n&#39;ai pas moi qui fait les règles des algorithmes).</p>
<p>En tout cas le voilà ! Notre moyen de rendre déplaçable les composants comme des sortes de modules pouvant chacun contenir : un <samp>&lt;header&gt;</samp>, un <samp>&lt;footer&gt;</samp> et une hiérarchie <samp>&lt;h1-h6&gt;</samp>.</p>
<h3 id="lapplication-simple--faire-gérer-le-cloisonnement-par-le-gabarit">L&#39;application simple : faire gérer le cloisonnement par le gabarit</h3>
<p>Le moyen le plus simple est de gérer le cloisonnement avec le gabarit. Imaginons ce gabarit :</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;div class=&quot;lyt tmpl-home&quot;&gt;
    &lt;header class=&quot;lyt-area for-header&quot;&gt;
        &lt;!-- Boucle de composants ici. --&gt;
    &lt;/header&gt;
    &lt;section class=&quot;lyt-area for-main&quot;&gt;
        &lt;div class=&quot;lyt-part for-overview&quot;&gt;
            &lt;!-- Boucle de composants ici. --&gt;
        &lt;/div&gt;
        &lt;aside class=&quot;lyt-part for-ads&quot;&gt;
            &lt;!-- Boucle de composants ici. --&gt;
        &lt;/aside&gt;
    &lt;/section&gt;
    &lt;section class=&quot;lyt-area for-presentation&quot;&gt;
        &lt;!-- Boucle de composants ici. --&gt;
    &lt;/section&gt;
    &lt;aside class=&quot;lyt-area for-also&quot;&gt;
        &lt;!-- Boucle de composants ici. --&gt;
    &lt;/aside&gt;
    &lt;footer class=&quot;lyt-area for-footer&quot;&gt;
        &lt;!-- Boucle de composants ici. --&gt;
    &lt;/footer&gt;
&lt;/div&gt;
</code></pre>
<p>ainsi que ce Component :</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;div class=&quot;cmpt-component&quot;&gt;
    &lt;div class=&quot;cmpt-component--ui&quot;&gt;
        &lt;header class=&quot;cmpt-component--header&quot;&gt;
            &lt;h1&gt;Title&lt;h1&gt;
        &lt;/header&gt;
        &lt;div  class=&quot;cmpt-component--content&quot;&gt;
            &lt;h2&gt;Subtitle&lt;/h2&gt;
            &lt;p&gt;Text&lt;/p&gt;
            &lt;p&gt;Text&lt;/p&gt;
        &lt;/div&gt;
        &lt;footer class=&quot;cmpt-component--footer&quot;&gt;
            &lt;h3&gt;Lien&lt;h3&gt;
        &lt;/footer&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>La contrainte avec ce composant est donc qu&#39;il ne pourra jamais être placé dans <samp>.for-header</samp> ni dans <samp>.for-footer</samp> sous peine d&#39;injecter un double <samp>&lt;header&gt;</samp> et <samp>&lt;footer&gt;</samp> dans le <samp>&lt;body&gt;</samp>. Cela peut être évité en estimant que les composant d&#39;en-tête et de pied-de-page globaux sont spécifiques à ces zones et ne seront pas déplaçables (comme c&#39;est pratiquement toujours le cas).</p>
<p>On voit cependant que hors-mi ces zones, notre composant peut atterrir un peu partout ou il le souhaite sans que cela ne pose de soucis.</p>
<h3 id="lapplication-complexe--faire-gérer-le-cloisonnement-au-moment-de-linjection-du-composant-hors-gabarit-et-hors-composant">L&#39;application complexe : faire gérer le cloisonnement au moment de l&#39;injection du composant, hors gabarit et hors composant</h3>
<p>Penchons nous de nouveau sur <a href="https://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/">NodeAtlas</a> qui va nous permettre de créer des injections de composant dynamique ! Vous pouvez faire des systèmes similaires de vos côtés avec vos outils ou frameworks préférés. Cela n&#39;est qu&#39;un brouillon car on pourrait même envisager l’injection de composants dans des composants, etc.</p>
<p>Avec...</p>
<ol>
<li><p>La configuration <samp>webconfig.json</samp> :</p>
<pre class="prettyprint linenums"><code class="language-js">{
 &quot;controller&quot;: &quot;common.js&quot;,
 &quot;routes&quot;: {
     &quot;/&quot; : {
         &quot;view&quot;: &quot;home.htm&quot;,
         &quot;variation&quot;: &quot;home.json&quot;
     }
 }
}
</code></pre>
</li>
<li><p>Le gabarit <samp>views/home.htm</samp> :</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;!-- ... --&gt;
&lt;div class=&quot;lyt tmpl-home&quot;&gt;
 &lt;div class=&quot;lyt-area for-header&quot;&gt;
     &lt;?- includeComponent(&#39;placeholder-header&#39;) ?&gt;
 &lt;/div&gt;
 &lt;div class=&quot;lyt-area for-main&quot;&gt;
     &lt;div class=&quot;lyt-part for-overview&quot;&gt;
         &lt;?- includeComponent(&#39;placeholder-overview&#39;) ?&gt;
     &lt;/div&gt;
     &lt;div class=&quot;lyt-part for-ads&quot;&gt;
         &lt;?- includeComponent(&#39;placeholder-ads&#39;) ?&gt;
     &lt;/div&gt;
 &lt;/div&gt;
 &lt;div class=&quot;lyt-area for-presentation&quot;&gt;
     &lt;?- includeComponent(&#39;placeholder-presentation&#39;) ?&gt;
 &lt;/div&gt;
 &lt;div class=&quot;lyt-area for-also&quot;&gt;
     &lt;?- includeComponent(&#39;placeholder-also&#39;) ?&gt;
 &lt;/div&gt;
 &lt;div class=&quot;lyt-area for-footer&quot;&gt;
     &lt;?- includeComponent(&#39;placeholder-footer&#39;) ?&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;!-- ... --&gt;
</code></pre>
</li>
<li><p>Le Fichier de variation <samp>variations/home.json</samp> :</p>
<pre class="prettyprint linenums"><code class="language-js">{
 &quot;components&quot;: {
     &quot;placeholder-header&quot;: [{
         &quot;path&quot;: &quot;views/component.htm&quot;,
         &quot;variation&quot;: {
             &quot;mainTag&quot;: &quot;div&quot;
         }
     }, {
         &quot;path&quot;: &quot;views/component.htm&quot;,
         &quot;variation&quot;: {
             &quot;mainTag&quot;: &quot;header&quot;
         }
     }],

     &quot;placeholder-overview&quot;: [{
         &quot;path&quot;: &quot;views/three-boxes.htm&quot;,
         &quot;variation&quot;: {
             &quot;mainTag&quot;: &quot;section&quot;
         }
     }],

     &quot;placeholder-ads&quot;: [{
         &quot;path&quot;: &quot;views/component.htm&quot;,
         &quot;variation&quot;: {
             &quot;mainTag&quot;: &quot;aside&quot;
         }
     }],

     &quot;placeholder-presentation&quot;: [{
         &quot;path&quot;: &quot;views/three-boxes.htm&quot;,
         &quot;variation&quot;: {
             &quot;mainTag&quot;: &quot;article&quot;
         }
     }],

     &quot;placeholder-also&quot;: [{
         &quot;path&quot;: &quot;views/component.htm&quot;,
         &quot;variation&quot;: {
             &quot;mainTag&quot;: &quot;aside&quot;
         }
     }],

     &quot;placeholder-footer&quot;: [{
         &quot;path&quot;: &quot;views/component.htm&quot;,
         &quot;variation&quot;: {
             &quot;mainTag&quot;: &quot;footer&quot;
         }
     }, {
         &quot;path&quot;: &quot;views/component.htm&quot;,
         &quot;variation&quot;: {
             &quot;mainTag&quot;: &quot;div&quot;
         }
     }, {
         &quot;path&quot;: &quot;views/component.htm&quot;,
         &quot;variation&quot;: {
             &quot;mainTag&quot;: &quot;div&quot;
         }
     }]
 }
}
</code></pre>
</li>
<li><p>Le composant <samp>views/components/component.htm</samp> :</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;?- sc(&#39;&lt;section class=&quot;cmpt-component&quot;&gt;&#39;, component) ?&gt;
 &lt;div class=&quot;cmpt-component--ui&quot;&gt;
     &lt;?- sc(&#39;&lt;header class=&quot;cmpt-component--header&quot;&gt;&#39;, component) ?&gt;
         &lt;?- sc(&#39;&lt;h1&gt;&#39;, component) ?&gt;Title&lt;?- sc(&#39;&lt;/h1&gt;&#39;, component) ?&gt;
     &lt;?- sc(&#39;&lt;/header&gt;&#39;, component) ?&gt;
     &lt;div class=&quot;cmpt-component--content&quot;&gt;
         &lt;?- sc(&#39;&lt;h2&gt;&#39;, component) ?&gt;Title&lt;?- sc(&#39;&lt;/h2&gt;&#39;, component) ?&gt;
         &lt;p&gt;Text&lt;/p&gt;
         &lt;p&gt;Text&lt;/p&gt;
     &lt;/div&gt;
     &lt;?- sc(&#39;&lt;footer class=&quot;cmpt-component--footer&quot;&gt;&#39;, component) ?&gt;
         &lt;?- sc(&#39;&lt;h3&gt;&#39;, component) ?&gt;Lien&lt;?- sc(&#39;&lt;/h3&gt;&#39;, component) ?&gt;
     &lt;?- sc(&#39;&lt;/footer&gt;&#39;, component) ?&gt;
 &lt;/div&gt;
&lt;?- sc(&#39;&lt;/section&gt;&#39;, component) ?&gt;
</code></pre>
</li>
</ol>
<p>...on pourrait parvenir à nos fins. Pendant la réalisation de nos composants on utilise toujours une <samp>&lt;section&gt;</samp>. C&#39;est au moment d&#39;injecter le composant que l&#39;on décide grâce à mainTag quelle balise globale va remplacer <samp>&lt;section&gt;</samp>. On s&#39;assurerait également de transformer tous les <samp>&lt;header&gt;</samp> en <samp>&lt;div class=&quot;header-like&quot;&gt;</samp> (etc.) dans le cas où le mainTag serait <samp>div</samp>, <samp>header</samp> ou <samp>footer</samp>.</p>
<p>Voici pour les petits curieux le code <a href="https://node-atlas.js.org/">NodeAtlas</a> de <samp>controllers/common.js</samp> qu&#39;il faut pour faire fonctionner tout ça.</p>
<ul>
<li><a href="http://codepen.io/Haeresis/pen/jbNVYa/?editors=001">Contenu du fichier <samp>controller/common.js</samp></a></li>
</ul>
<h4 id="de-la-sémantique-automatique">De la sémantique automatique</h4>
<p>Bon, <strong>vous conviendrez que notre composant est assez laid</strong>, et ça rend la chose faussement complexe. Je vous propose de plutôt maintenir un fichier <samp>views/components/component.htm</samp> comme celui-ci :</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;section$ class=&quot;cmpt-component&quot;&gt;
    &lt;div class=&quot;cmpt-component--ui&quot;&gt;
        &lt;header$ class=&quot;cmpt-component--header&quot;&gt;
            &lt;h1$&gt;Title&lt;/h1$&gt;
        &lt;/header$&gt;
        &lt;div  class=&quot;cmpt-component--content&quot;&gt;
            &lt;h2$&gt;Title&lt;/h2$&gt;
            &lt;p&gt;Text&lt;/p&gt;
            &lt;p&gt;Text&lt;/p&gt;
        &lt;/div&gt;
        &lt;footer$ class=&quot;cmpt-component--footer&quot;&gt;
            &lt;h3$&gt;Lien&lt;/h3$&gt;
        &lt;/footer$&gt;
    &lt;/div&gt;
&lt;/section$&gt;
</code></pre>
<p>grâce au projet <a href="https://github.com/Haeresis/ComponentAtlas">ComponentAtlas</a> qui est un module additionnel de <a href="https://node-atlas.js.org/">NodeAtlas</a>. Il permet l&#39;inclusion de composant en cascade, ne touchera à aucunes balises sans $ et permettra de transformer ceci :</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;section$ class=&quot;cmpt-component&quot;&gt;
    &lt;header$ id=&quot;test&quot;&gt;header&lt;/header$&gt;
    &lt;footer$ class=&quot;test&quot;&gt;footer&lt;/footer$&gt;
    &lt;h1$ class=&#39;test&#39;&gt;h1&lt;/h1$&gt;
    &lt;h2$ class=&#39;test&#39; id=&quot;test&quot;&gt;h2&lt;/h2$&gt;
    &lt;h3$ id=&quot;test&quot; class=&quot;test&quot;&gt;h3&lt;/h3$&gt;
    &lt;h4$ id=&quot;test&quot; class=&#39;test&#39;&gt;h4&lt;/h4$&gt;
    &lt;h5$ id=&#39;test&#39; class=&#39;test&#39;&gt;h5&lt;/h5$&gt;
    &lt;h6$&gt;h6&lt;/h6$&gt;
&lt;/section$&gt;
</code></pre>
<p>en ceci :</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;header class=&quot;cmpt-component&quot;&gt;
    &lt;div class=&quot;header-like&quot; id=&quot;test&quot;&gt;header&lt;/div&gt;
    &lt;div class=&quot;footer-like test&quot;&gt;footer&lt;/div&gt;
    &lt;div class=&#39;h1-like test&#39;&gt;h1&lt;/div&gt;
    &lt;div class=&quot;h2-like test&#39; id=&quot;test&quot;&gt;h2&lt;/div&gt;
    &lt;div class=&quot;h3-like test&quot;&gt;h3&lt;/div&gt;
    &lt;div class=&#39;h4-like test&#39;&gt;h4&lt;/div&gt;
    &lt;div class=&#39;h5-like test&#39;&gt;h5&lt;/div&gt;
    &lt;div class=&quot;h6-like&quot;&gt;h6&lt;/div&gt;
&lt;/header&gt;
</code></pre>
<p>si le <samp>maintTag</samp> était <samp>header</samp> ou de le transformer en ceci :</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;section class=&quot;cmpt-component&quot;&gt;
    &lt;header id=&quot;test&quot;&gt;header&lt;/header&gt;
    &lt;footer class=&quot;test&quot;&gt;footer&lt;/footer&gt;
    &lt;h1 class=&#39;test&#39;&gt;h1&lt;/h1$&gt;
    &lt;h2 class=&#39;test&#39; id=&quot;test&quot;&gt;h2&lt;/h2&gt;
    &lt;h3 id=&quot;test&quot; class=&quot;test&quot;&gt;h3&lt;/h3&gt;
    &lt;h4 id=&quot;test&quot; class=&#39;test&#39;&gt;h4&lt;/h4&gt;
    &lt;h5 id=&#39;test&#39; class=&#39;test&#39;&gt;h5&lt;/h5&gt;
    &lt;h6&gt;h6&lt;/h6&gt;
&lt;/section&gt;
</code></pre>
<p>sans <samp>mainTag</samp> de précisé.</p>
<h2 id="aller-plus-loin">Aller plus loin</h2>
<p>Si vous désirez aller encore plus loin dans les conventions HTML et CSS pour bien séparer les zones dédiées aux composants et les zones dédiées au contenu, vous pouvez <a href="https://blog.lesieur.name/conventions-html-css-js-et-architecture-front-end/">lire mes conventions HTML, CSS et JS complètes</a>.</p>
]]></description>
            <link>http://localhost:7776/conventions-html-et-css-orientes-composants/</link>
            <guid isPermaLink="false">55df1d924bf5981b0760b95b</guid>
            <category><![CDATA[Ressources]]></category>
            <category><![CDATA[HTML]]></category>
            <category><![CDATA[CSS]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Sat, 24 Feb 2018 11:24:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[ES5, Chap. 1 — Les propriétés et descripteurs de propriétés en JavaScript]]></title>
            <description><![CDATA[<p>Ce billet fait partie de la collection <em><a href="https://blog.lesieur.name/categories/ecma-script/">ES5 dans le détail</a></em> et en constitue le Chapitre 1.</p>
<figure>
    <a href="media/images/upload/propriete-descripteur-propriete.jpg"><img class="openable" src="media/images/upload/propriete-descripteur-propriete-mini.png" alt="Même si la nouvelle version de l'environnement semble similaire en surface, elle est différente de plus près." width="628" height="353" style="width: 100%;height: auto;"></a>
    <figcaption>Même si la nouvelle version de l'environnement semble similaire en surface, elle est différente de plus près.</figcaption>
</figure>

<p>Il est dédié à l&#39;un des nouveaux concepts introduit par la spécification ECMA-262-5 de JavaScript à propos des attributs de propriétés et des mécanismes de leur gestion ; les descripteurs de propriété.</p>
<blockquote>
<div style="float: left;"></div><div style="text-align: right">[Chapitre 2 &gt;](https://blog.lesieur.name/le-mode-strict/)</div>
</blockquote>
<h2 id="introduction">Introduction</h2>
<p>Habituellement, quand on dit « qu&#39;un objet a plusieurs propriétés », on parle d&#39;une association pour chaque propriété de l&#39;objet entre un <em>nom de propriété</em> et une <em>valeur de propriété</em>. Mais ce n&#39;est pas tout. Comme nous l&#39;avons vu dans <a href="https://blog.lesieur.name/categories/ecma-script/">ES3 dans le détail</a>, la structure d&#39;une propriété est plus complexe qu&#39;un simple <em>nom sous forme de chaine de caractères</em> et une <em>valeur</em>. Il y a aussi un jeu d&#39;<em>attributs internes</em> comme <samp>{ReadOnly}</samp>, <samp>{DontEnum}</samp> et d&#39;autres. De ce point de vu donc, une simple propriété est elle-même un objet (même quand elle représente une valeur primitive).</p>
<p>Pour une compréhension complète de ce billet, je vous recommande la lecture du chapitre sur <a href="https://blog.lesieur.name/les-types/">les types</a> en JavaScript ainsi que celui sur <a href="https://blog.lesieur.name/les-constructeurs-et-les-prototypes/">les constructeurs et les prototypes</a>.</p>
<h2 id="nouvelles-méthodes-de-lapi">Nouvelles méthodes de l&#39;API</h2>
<p>Pour travailler avec les propriétés et leurs attributs standardisés en ES5 dans les nouvelles méthodes de l&#39;API, résumons cela par ce petit pend de code :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// meilleur héritage de prototype
Object.create(parentProto, properties);

// accès au prototype
Object.getPrototypeOf(o);

// Définition des propriétés avec des attributs spécifiques
Object.defineProperty(o, propertyName, descriptor);
Object.defineProperties(o, properties);

// Analyse des propriétés
Object.getOwnPropertyDescriptor(o, propertyName);

// Gestion des objets statiques (ou « gelés »)
Object.freeze(o);
Object.isFrozen(o);

// Gestion des objets non-extensibles
Object.preventExtensions(o);
Object.isExtensible(o);

// Gestion des objets scélés non-extensibles
// et objets non-configurables
Object.seal(o);
Object.isSealed(o);

// Liste des propriétés
Object.keys(o);
Object.getOwnPropertyNames(o);
</code></pre>
<p>Penchons nous sur ces points les uns après les autres.</p>
<h2 id="types-de-propriété">Types de propriété</h2>
<p>En ES3 nous avons seulement une association <em>directe</em> entre le nom de la propriété et sa valeur. Cependant, plusieurs implémentations ont leur propre extensions fournis avec un concept d&#39;<em>accesseurs</em> et de <em>mutateurs</em>, c.-à-d. des fonctions qui permettaient <em>indirectement</em> d&#39;associer des valeurs de propriété. ECMA-262-5 standardise se concept en JavaScript et à présent nous avons trois types de propriétés</p>
<p>Vous devriez également savoir qu&#39;une propriété peut-être possédée par son propre <em>objet</em>, ou <em>hérité</em> d&#39;un des objets dans la chaîne des prototypes.</p>
<p>Il y a des propriétés <em>nommées</em>, qui sont disponibles dans un programme JavaScript et des propriétés <em>internes</em>, seulement accessibles au niveau de l&#39;implémentation (cependant, il est possible de gérer la plupart d&#39;entre elles via des méthodes spéciales). Nous allons en parler brièvement.</p>
<h3 id="attributs-de-propriétés">Attributs de propriétés</h3>
<p>Les propriétés <em>nommées</em> sont distinguées par des <em>attributs</em>. Les attributs de propriétés évoqués dans la série d&#39;article sur ES3 comme <samp>{ReadOnly}</samp>, <samp>{DontEnum}</samp> et les autres ont ici été renommées par leur état booléen contraire. Il y a deux attributs commun aux deux types de propriété (<em>de données</em> et <em>d&#39;accession</em>) nommées en ECMA-262-5 :</p>
<ul>
<li><p><samp>[[Enumerable]]</samp>
 Cet attribut (qui est l&#39;état inverse de l&#39;ancien <samp>{DontEnum}</samp> en ES3) détermine grâce à son état <samp>true</samp> que la propriété est énumérable dans une énumération <samp>for-in</samp>.</p>
</li>
<li><p><samp>[[Configurable]]</samp>
 Cet attribut (qui est l&#39;état inverse de l&#39;ancien <samp>{DontDelete}</samp> en ES3) prévient grâce à son état <samp>false</samp> toute tentative de suppression de la propriété, changement de type ou changement de ses attributs (à l&#39;exception de <samp>[[Value]]</samp>).</p>
</li>
</ul>
<p>Notez que si l&#39;attribut <samp>[[Configurable]]</samp> a été mis à <samp>false</samp> une fois, il <em>ne peut plus</em> être remis à <samp>true</samp>. Comme dit précédemment, il n&#39;est plus possible non plus de changer d&#39;autres attributs comme <samp>[[Enumerable]]</samp> par exemple. On peut toujours changer l&#39;attribut <samp>[[Value]]</samp> et <samp>[[Writable]]</samp> (<em>mais</em> seulement de <samp>true</samp> vers <samp>false</samp> et pas l&#39;inverse).</p>
<p>Nous discuterons des autres attributs de propriétés spécifiques rapidement. Considérons les types de propriétés en détail.</p>
<h3 id="propriété-nommée-de-données">Propriété nommée de données</h3>
<p>Ces propriétés étaient déjà largement utilisées en ES3. Une propriété à un <em>nom</em> (qui est toujours une <em>chaine de caractères</em> en ES5) et une <em>valeur</em> <em>directement</em> associée.</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// définition sous forme déclarative
var tallneck = {
  climbHold: 10 // valeur de type Number directe
};

// définition sous forme impérative
// directe également, mais avec une valeur de type Function : une « méthode »
tallneck.radar = function () {
  return this.climbHold;
};
</code></pre>
<p>C&#39;est exactement le même cas de figure qu&#39;en ES3, dans le cas ou la valeur de la propriété est une fonction, cette propriété est appelée une <em>méthode</em>. Mais cette <em>valeur</em> de fonction <em>directe</em> ne doit pas être confondue avec le cas spécial indirect des fonctions accesseurs dont nous allons discuter ci-dessous :</p>
<ul>
<li><p><samp>[[Value]]</samp>
 Cet attribut spécifie la valeur retournée en lisant la propriété.</p>
</li>
<li><p><samp>[[Writable]]</samp>
 Cet attribut (qui est l&#39;état inverse de l&#39;ancien <samp>{ReadOnly}</samp> en ES3) prévient grâce à son état <samp>false</samp> toute tentative de changement de la valeur de la propriété via l&#39;utilisation de la méthode interne <samp>[[Put]]</samp>.</p>
</li>
</ul>
<p>Voici la liste complète des attributs pour une propriété <em>de données</em> avec ces valeurs par défaut :</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">defaultDataPropertyAttributes = {
  [[Value]]: undefined,
  [[Writable]]: false,
  [[Enumerable]]: false,
  [[Configurable]]: false
};
</code></pre>
<p>Donc, dans leur état par défaut les propriétés sont <em>des constantes</em> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// Définir une constante globale

Object.defineProperty(this, &#39;MAX_SIZE&#39;, {
    value: 100
});

console.log(MAX_SIZE); // `100`

MAX_SIZE = 200; // erreur en mode strict car `[[Writable]]` est à `false`
delete MAX_SIZE; // erreur en mode strict car `[[Configurable]]` est à `false`

console.log(MAX_SIZE); // toujours `100`
</code></pre>
<p>Malheureusement en ES3, nous n&#39;avions pas de contrôle sur les attributs de propriétés causant des problèmes connus avec l&#39;augmentation des prototypes pré-conçu. De part la nature de mutabilité dynamique des objets en JavaScript, il est vraiment pratique d&#39;<em>ajouter</em> des nouvelles fonctionnalités et de les utiliser, les déléguants au prototype pour qu&#39;elles soient « possédée » par l&#39;objet. Par exemple, sans contrôle sur l&#39;ancien attribut <samp>{DontEnum}</samp> en ES3, nous avions un problème avec les énumérations <samp>for-in</samp> sur les prototypes augmentés des tableaux :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// ES3

Array.prototype.sum = function () {
  // implémentation de la somme
};

var arrows = [10, 20, 30];

// marche bien
console.log(arrows.sum()); // `60`

// mais a cause de la lecture dans le `for-in`
// de la chaîne du prototype, la nouvelle propriété `sum`
// était aussi énumérée car
// `{DontEnum}`est à `false`

// itérer sur une propriété
for (var arrow in arrows) {
    console.log(arrow); // `0`, `1`, `2`, `sum`
}
</code></pre>
<p>ES5 fournit ce contrôle en utilisant les <em>meta-méthodes</em> spéciales pour manipuler les propriétés d&#39;objet :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// ES5

Object.defineProperty(Array.prototype, &#39;sum&#39;, {
    value: function sum() {
        // implémentation de la somme
    },
    enumerable: false
});

var arrows = [10, 20, 30];

// marche bien
console.log(arrows.sum()); // `60`

// maintenant en utilisant le même exemple avec `sum`
// il n&#39;est plus énuméré

for (var arrow in arrows) {
    console.log(arrow); // `0`, `1`, `2`
}
</code></pre>
<p>Dans l&#39;exemple ci-dessus nous spécifions l&#39;attribut <samp>enumerable</samp> manuellement et explicitement. Cependant, comme nous l&#39;avons mentionné, l&#39;état par défaut de tous les attributs est <samp>false</samp>, donc nous n&#39;avons pas besoin de spécifier manuellement les valeurs à <samp>false</samp>.</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// l&#39;affectation par méta-fonction (si vous créez une nouvelle propriété)...
Object.defineProperty(tallneck, &#39;climbHold&#39;, {
    value: 10
});

// ...est la même chose que
Object.defineProperty(tallneck, &#39;climbHold&#39;, {
    value: 10,
    writable: false,
    enumerable: false,
    configurable: false
});
</code></pre>
<p>Et un simple <em>opérateur d&#39;affectation</em> corresponds maintenant à l&#39;<em>état par défaut inversé</em> des attributs (en fait, comme c&#39;était le cas en ES3) :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// l&#39;affectation simple (si vous créez une nouvelle propriété)...
tallneck.climbHold = 10;

// est la même chose que
Object.defineProperty(tallneck, &#39;climbHold&#39;, {
    value: 10,
    writable: true,
    enumerable: true,
    configurable: true
});
</code></pre>
<p>Notez également que cette méta-méthode <samp>Object.defineProperty</samp> n&#39;est pas réservée qu&#39;à <em>la création</em> de propriété d&#39;objet, mais aussi à leur <em>altération</em>. De plus, elle retourne l&#39;objet altéré, ainsi nous pouvons utiliser cette méthode pour lier les objets nouvellement créés à un nom de variable en une seule fois :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// créer l&#39;objet `tallneck` et définir la propriété `climbHold` property
var tallneck = Object.defineProperty({}, &#39;climbHold&#39;, {
  value: 10,
  enumerable: true
});

// altérer les attributs `value` et `enumerable`
Object.defineProperty(tallneck, &#39;climbHold&#39;, {
    value: 20,
    enumerable: false
});

console.log(tallneck.climbHold); // `20`
</code></pre>
<p>Pour obternir un tableau des propriétés <em>possédées</em> il y a deux meta-méthodes :</p>
<ul>
<li><samp>Object.keys</samp> qui retourne seulement des propriétés énumérables, et</li>
<li><samp>Object.getOwnPropertyNames</samp> qui retourne aussi bien les propriétés enunérables que les propriétés non-énumérables :</li>
</ul>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var tallneck = {
    climbHold: 10,
    radar: 20
};

Object.defineProperty(tallneck, &#39;x&#39;, {
    value: 30,
    enumerable: false
});

console.log(Object.keys(tallneck)); // `[&#39;climbHold&#39;, &#39;radar&#39;]`
console.log(Object.getOwnPropertyNames(tallneck)); // `[&#39;climbHold&#39;, &#39;radar&#39;, &#39;x&#39;]`
</code></pre>
<h3 id="propriété-nommée-daccession">Propriété nommée d&#39;accession</h3>
<p>Une <em>propriété nommée d&#39;accession</em> est associée à un <em>nom</em> (une chaîne de caractère en ES5) avec une ou deux fonctions d&#39;accessions : un <em>accesseur</em> et un <em>mutateur</em>.</p>
<p>Les fonctions d&#39;accession sont utilisées pour stocker ou retrouver une valeur associée à un nom <em>indirectement</em>.</p>
<p>Comme nous l&#39;avons noté, plusieurs implémentations ES3 possède déjà ce concept. Mais en ES5 la syntaxe est officielle et sensiblement différente de ce qui pouvait déjà exister (comme par ex. avec les extensions de SpiderMonkey).</p>
<p>En plus des attributs généraux, une propriété d&#39;accession a les attributs suivant lié à un accesseur et à un mutateur comme suit :</p>
<ul>
<li><p><samp>[[Get]]</samp>
 Cet attribut est un objet fonction qui est appelé chaque fois qu&#39;une valeur indirecte existe dans le nom de la propriété. Ne confondez pas cette <em>attribut de propriété</em> avec la <em>méthode interne de même nom</em> des objets en eux-même, le lecteur général de la propriété d&#39;une valeur. Donc dans le cas d&#39;une propriété d&#39;accession, la <em>méthode</em> interne <samp>[[Get]]</samp> d&#39;un objet appel l&#39;<em>attribut</em> <samp>[[Get]]</samp> de la propriété d&#39;un objet pour retourner sa valeur.</p>
</li>
<li><p><samp>[[Set]]</samp>
 Cet attribut est également un objet fonction qui associe la nouvelle valeur à attacher au nom de propriété. Cet attribut appel la méthode interne <samp>[[Put]]</samp> d&#39;un objet.</p>
</li>
</ul>
<p>Notez que <samp>[[Set]]</samp> peut, mais <em>pas obligatoirement</em>, avoir un effet sur la propriété retournée par la méthode interne <samp>[[Get]]</samp> de la propriété. En d&#39;autres mots, si nous affectons une valeur comme par ex. <samp>10</samp>, un accesseur peut retourner une valeur différente comme par ex. <samp>20</samp> car l&#39;affectation est <em>indirecte</em> et <samp>[[Set]]</samp> peut avoir changer cette valeur.</p>
<p>Et la liste complète des attributs par défaut pour une <em>propriété nomée d&#39;accession</em> est :</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">defaultAccessorPropertyAttributes = {
  [[Get]]: undefined,
  [[Set]]: undefined,
  [[Enumerable]]: false,
  [[Configurable]]: false
};
</code></pre>
<p>De fait, si <samp>[[Set]]</samp> est absent, une propriété d&#39;accession est en lecture seule, comme dans le cas de l&#39;attribut <samp>[[Writable]]</samp> à <samp>false</samp> pour les propriétés nommées de données.</p>
<p>Une propriété d&#39;accession peut être définie aussi bien par la méta-méthode <samp>Object.defineProperty</samp> mentionnée plus haut :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var thunderjaw = {};

Object.defineProperty(thunderjaw, &#39;discLauncher&#39;, {
    get: function getDisc() {
        return 2;
    },
    set: function setDisc(value) {
        // implementation de la mutation
    }
});

thunderjaw.discLauncher = 1; // appel du pseudo-code `thunderjaw.discLauncher.[[Set]](1)`

// indépendemment c&#39;est toujours `2`
console.log(thunderjaw.discLauncher); // appel du pseudo-code `thunderjaw.discLauncher.[[Get]]()`
</code></pre>
<p>Que par sa forme <em>déclarative</em> en utilisant un <em>initialiseur d&#39;objet</em> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var thunderjaw = {
    get discLauncher () {
        return 2;
    },
    set discLauncher (value) {
        console.log(value);
    }
};

thunderjaw.discLauncher = 100; // affiche `100` dans la console
console.log(thunderjaw.discLauncher); // `2`
</code></pre>
<p>Notez qu&#39;il y a aussi une fonctionnalité importante en lien avec la configuration d&#39;une propriété d&#39;accession. Comme nous l&#39;avons mentionné dans la description de l&#39;attribut <samp>[[Configurable]]</samp>, une fois qu&#39;elle est mise à <samp>false</samp> une propriété ne peut plus être changée (sauf pour l&#39;attribut <samp>[[Value]]</samp> de la <em>propriété nommée de données</em>). Cela peut être perturbant dans le cas suivant :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// `configurable` à `false` par défaut
var thunderjaw = Object.defineProperty({}, &#39;discLauncher&#39;, {
    get: function () {
        return &#39;disc&#39;;
    }
});

// tentative de reconfigurer `discLauncher`
// une exception est levée
try {
    Object.defineProperty(thunderjaw, &#39;discLauncher&#39;, {
        get: function () {
            return &#39;launcher&#39;
        }
    });
} catch (e) {
    if (e instanceof TypeError) {
        console.log(thunderjaw.discLauncher); // toujours `&#39;disc&#39;`
    }
}
</code></pre>
<p>Mais l&#39;exception ne sera pas lancée si la valeur reconfigurée de l&#39;attribut de ce cas est <em>la même</em>. Ce qui est cependant, en pratique, pas très utile.</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function getDiscLancher() {
    return &#39;disc&#39;;
}

var thunderjaw = Object.defineProperty({}, &#39;discLancher&#39;, {
    get: getDiscLancher
});

// pas d&#39;exception même si `configurable` est a `false`,
// mais en pratique cette re-configuration est inutile
Object.defineProperty(thunderjaw, &#39;discLancher&#39;, {
    get: getDiscLancher
});
</code></pre>
<p>Et comme nous l&#39;avons mentionné,la <samp>[[Value]]</samp> de la <em>propriété nommée de données</em> peut-être reconfigurée même si <samp>[[Configurable]]</samp> est a <samp>false</samp> ; bien sur l&#39;attribut <samp>[[Writable]]</samp> devra être à <samp>true</samp>. Également, si mis a l&#39;état <samp>true</samp>, l&#39;attribut <samp>[[Writable]]</samp> pourra être mis à <samp>false</samp>, <em>mais pas l&#39;inverse</em> pour une propriété <em>non-configurable</em> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var thunderjaw = Object.defineProperty({}, &#39;discLancher&#39;, {
    value: &#39;disc&#39;,
    writable: true,
    configurable: false // valeur par défaut
});

Object.defineProperty(thunderjaw, &#39;discLancher&#39;, {
    value: &#39;launcher&#39;
});

console.log(thunderjaw.discLancher); // `&#39;launcher&#39;`

// changer writable
Object.defineProperty(thunderjaw, &#39;discLancher&#39;, {
    value: &#39;discLauncher&#39;,
    writable: false // changé de `true` vers `false`, OK
});

console.log(thunderjaw.discLancher); // `&#39;discLauncher&#39;`

// essayer de changer `writable` de nouveau
Object.defineProperty(thunderjaw, &#39;discLancher&#39;, {
    value: &#39;discLauncher&#39;,
    writable: true // Erreur !
});
</code></pre>
<p>De même, nous ne pouvons pas transformer une propriété du type <em>données</em> vers le type <em>accession</em> et <em>inverssement</em> si l&#39;attribut <samp>[[Configurable]]</samp> est <samp>false</samp>. Dans l&#39;état <samp>true</samp> de l&#39;attribut <samp>[[Configurable]]</samp> une telle transformation est possible et l&#39;état de l&#39;attribut <samp>[[Writable]]</samp> importe peu, aussi il peut être à <samp>false</samp> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// `writable` est a `false` par défaut
var thunderjaw = Object.defineProperty({}, &#39;discLancher&#39;, {
    value: &#39;disc&#39;,
    configurable: true
});

Object.defineProperty(thunderjaw, &#39;discLancher&#39;, {
    get: function () {
        return &#39;launcher&#39;;
    }
});

console.log(thunderjaw.discLancher); // OK, `&#39;launcher&#39;`
</code></pre>
<p>Un autre fait évident, c&#39;est qu&#39;une propriété ne peut pas être en même temps <em>de données</em> et <em>d&#39;accession</em>. Cela siginifie que la présence d&#39;attributs mutuellement exclusifs lancera une exception :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// erreur, `get` et `writable` en même temps
var thunderjaw = Object.defineProperty({}, &#39;discLancher&#39;, {
    get: function () {
        return &#39;disc&#39;;
    },
    writable: true
});

// une autre erreur, les attributs `value` et `set`
// ne peuvent être présent ensemble
var tallneck = Object.defineProperty({}, &#39;climbHold&#39;, {
    value: &#39;radar&#39;,
    set: function (v) {}
});
</code></pre>
<p>Rappelons nous également : cet usage des mutateurs et des accesseurs font plus de sens quand nous avons besoin d&#39;<em>encapsuler des calculs complexes</em> en utilisant une <em>fonction utilitaire de données</em>, rendant l&#39;usage de cette propriété plus <em>pratique</em>. C.-à-d. comme s&#39;il s&#39;agissait d&#39;une propriété de données.</p>
<p>Pour des choses non abstraite, l&#39;utilisation des propriété d&#39;accessions n&#39;est pas réellement utile :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var thunderjaw = {};

// Pas très utile
Object.defineProperty(thunderjaw, &#39;disc&#39;, {
    get: function getDisc() {
        return this.launcher;
    },
    set: function setDisc(value) {
        this.launcher = value;
    }
});

thunderjaw.disc = 2;

console.log(thunderjaw.disc); // `2`
console.log(thunderjaw.launcher); // `2`
</code></pre>
<p>En plus d&#39;utiliser des accesseur et mutateur pour une entité non-abstraite, nous avons créer une propriété <em>propre</em> <samp>launcher</samp>. On voit dans ce cas qu&#39;une <em>simple propriété de données</em> est suffisante en plus d&#39;améliorer les performances.</p>
<p>Dans les cas où on a <em>réellement besoin</em> d&#39;utiliser les propriétés d&#39;accessions pour <em>améliorer l&#39;abstraction</em> en encapsulant la logique dans une fonction utilitaire, nous aurions alors à faire à ce type d&#39;exemple :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var thunderjaw = {};

// contexte encapsulé
(function () {

    // divers états internes
    var data = [];

    Object.defineProperty(thunderjaw, &quot;disc&quot;, {
        get: function getDisc() {
            return &quot;Nous avons &quot; + data.length + &quot; discs : &quot; + data;
        },
        set: function setDisc(value) {
            // appel de l&#39;accession en premier
            console.log(&#39;Alert du mutateur &quot;disc&quot; : &#39; + this.disc);

            data = Array(value).join(&quot;disc-&quot;).concat(&quot;disc&quot;).split(&quot;-&quot;);

            // bien sur au besoin nous pouvons mettre à jour
            // également diverse propriétés publiques
            this.launcher = &#39;Mise à jour du mutateur &quot;disc&quot; : &#39; + value;
        },
        configurable: true,
        enumerable: true

    });

})();

thunderjaw.launcher = 100;
console.log(thunderjaw.launcher); // `100`

// d&#39;abord l&#39;accession va être appelé dans le mutateur :
// `&#39;Nous avons 0 discs :&#39;`
thunderjaw.disc = 2;

// Accesseurs
console.log(thunderjaw.disc); // `&#39;Nous avons 2 discs : disc, disc, disc&#39;`
console.log(thunderjaw.launcher); // `&#39;Mise à jour du mutateur &quot;disc&quot; : 2&#39;`
</code></pre>
<p>Bien sur cette exemple n&#39;a aucune utilité pratique, mais il montre l&#39;utilité principale des accessions, <em>augmenter l&#39;abstraction en encapsulant des données auxiliaires internes</em>.</p>
<p>Et une autre fonctionnalité liée aux accesseurs de propriétés est l&#39;<em>affectation à une propriété d&#39;accession héritée</em>. Comme nous l&#39;avons vu dans la série ES3, les propriétés héritées (données) sont disponibles à la <em>lecture</em>, mais à l&#39;affectation (à une propriété de données), elle <em>crée toujours sa propre propriété :</em></p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">Object.prototype.discLancher = 1;

var thunderjaw = {};

// lecture d&#39;une propriété héritée
console.log(thunderjaw.discLancher); // `1`
console.log(thunderjaw.hasOwnProperty(&quot;discLancher&quot;)); // `false`

// mais avec une affectation
// créé toujours sa propre propriété
thunderjaw.discLancher = 2;

// lecture d&#39;une propriété héritée
console.log(thunderjaw.discLancher); // `2`
console.log(thunderjaw.hasOwnProperty(&quot;discLancher&quot;)); // `true`
</code></pre>
<p>À la différence des propriétés de données, <em>les accessions héritées sont disponibles pour modifications via l&#39;affectation</em> à travers un objet qui hérite de ces propriétés :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var arrows = 10;

var aloy = {
  get quiver() {
    return arrows;
  },
  set quiver(item) {
    arrows = item;
  }
};

console.log(aloy.hasOwnProperty(&#39;quiver&#39;)); // `true`

console.log(aloy.quiver); // `10`

aloy.quiver = `20`; // affecte sa propre propriété

console.log(aloy.quiver); // `20`

var player = Object.create(aloy); // `player` hérite de `aloy`

console.log(player.quiver); // `20`, lecture héritée

player.quiver = 30; // affecte l&#39;*héritée*, mais pas une à elle sienne.

console.log(player.quiver); // `30`
console.log(aloy.quiver); // `30`
console.log(player.hasOwnProperty(&#39;quiver&#39;)); // `false`
</code></pre>
<p>Cependant si nous définissons <samp>player</samp>, toujours hérité de <samp>aloy</samp>, mais en spécifiant son propre <samp>quiver</samp>, l&#39;affectation sera dans ce cas mis à sa propre propriété :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var player = Object.create(aloy);

player.quiver = 30; // affecte l&#39;héritée

Object.defineProperty(player, &#39;quiver&#39;, {
  value: 100,
  writable: true
});

player.quiver = 60; // affecte la sienne.

console.log(player.quiver); // `60`
console.log(aloy.quiver); // `30`
console.log(player.hasOwnProperty(&#39;quiver&#39;)); // `true`
</code></pre>
<p>Une autre chose à noter est que si nous essayons de <em>masquer</em> par <em>affectation</em> une propriété <em>héritée en lecture seule</em>, et si nous sommes en <em>mode strict</em>, l&#39;erreur <samp>TypeError</samp> est lancée. Ceci est fait indépendemment du fait qu&#39;une propriété est de données ou d&#39;accession. Cependant, si nous masquons la propriété <em>non plus par une affectation</em>, mais par <samp>Object.defineProperty</samp>, tout est bon :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">&#39;use strict&#39;;

var thunderjaw = Object.defineProperty({}, &#39;discLauncher&#39;, {
    value: 2,
    writable: false
});

// `redmaw` hérite de `thunderjaw`

var redmaw = Object.create(thunderjaw);

console.log(redmaw.discLauncher); // `2`, hérité

// essayer de masquer la propriété `discLauncher`
// et obtenir une erreur en mode
// strict, ou juste échoué silencieusement
// en mode non strict ES5 ou en ES3

redmaw.discLauncher = 1; // `TypeError`

console.log(redmaw.discLauncher); // toujours `2`, si en mode non strict

// cependant le masquage fonctionne
// si on utilise `Object.defineProperty`

Object.defineProperty(redmaw, &#39;discLauncher&#39;, { // OK
    value: 1
});

console.log(redmaw.discLauncher); // et maintenant `1`
</code></pre>
<p>Pour en savoir plus à propos du mode strict, lisez le chapitre suivant de la série ES5 sur <a href="https://blog.lesieur.name/le-mode-strict/">le mode strict</a>.</p>
<h3 id="propriété-interne">Propriété interne</h3>
<p>Les <em>propriétés internes</em> ne sont pas une partie des spécifications ECMAScript. Elles sont mises en place par les spécifications du JavaScript pour du fonctionnement interne. Nous en avons déjà discuté dans <a href="https://blog.lesieur.name/les-types/#propri-t-s-et-m-thodes-internes">le Chapitre 7 de la série ES3</a>.</p>
<p>ES5 fournit diversent nouvelles propriétés internes. Vous pouvez trouver des détails dans la section 8.6.2 de la spécification ECMA-262-5. Et, parceque nous avons déjà discuté de ces concepts dans un article ES3, nous ne parlerons ici que des propriétés internes supplémentaires.</p>
<p>Par exemple, les objets en ES5 peuvent être <em>scélés (« sealed »)</em>, <em>gelés (« frozen »)</em> ou juste <em>non-extensible</em>, c.-à-d. statiques. La propriété interne <samp>[[Extensible]]</samp> est liée à ces trois états. Ils peuvent être gérés en utilisant des meta-méthodes spéciales :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var faroMachine = {
    gears: 10
};

console.log(Object.isExtensible(faroMachine)); // `true`

Object.preventExtensions(faroMachine);
console.log(Object.isExtensible(faroMachine)); // `false`

faroMachine.weapons = 20; // erreur en mode strict
console.log(faroMachine.weapons); // `undefined`
</code></pre>
<p>Notez qu&#39;une fois que la propriété interne <samp>[[Extensible]]</samp> est mise à <samp>false</samp>, elle ne peut plus être remise à <samp>true</samp>.</p>
<p>Mais même depuis des objets non extensibles, diverses propriétés ne peuvent pas être retirées. Pour empécher cela, la meta-méthode <samp>Object.seal</samp> peut aider car en plus de mettre <samp>[[Extensible]]</samp> à <samp>false</samp>, elle met également <samp>[[Configurable]]</samp> à <samp>false</samp> sur toutes les propriétés de l&#39;objet :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var faroMachine = {
    gears: 10
};

console.log(Object.isSealed(faroMachine)); // `false`

Object.seal(faroMachine);
console.log(Object.isSealed(faroMachine)); // `true`

delete faroMachine.gears; // erreur en mode strict
console.log(faroMachine.gears); // `10`
</code></pre>
<p>Si vous souhaitez rendre un objet <em>completement static</em>, c.-à-d., le <em>geler</em> pour empécher de changer les valeurs des propriétés existantes, vous pouvez utiliser la meta-méthode correspondante <samp>Object.freeze</samp>. Cette méthode va en plus de mettres les propriétés internes <samp>[[Configurable]]</samp> et <samp>[[Extensible]]</samp> à <samp>false</samp> mettre la propriété <samp>[[Writable]]</samp> à <samp>false</samp> empéchant les données de propriété de changer :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var faroMachine = {
    gears: 10
};

print(Object.isFrozen(faroMachine)); // `false`

Object.freeze(faroMachine);
print(Object.isFrozen(faroMachine)); // `true`

delete faroMachine.gears; // erreur en mode strict
faroMachine.gears = 20; // erreur en mode strict

print(faroMachine.gears); // `10`
</code></pre>
<p>Les états scellés ou gelés ne peuvent pas être remis à <samp>true</samp>.</p>
<p>De la même manière qu&#39;en ES3, nous avons la possibilité d&#39;examiner la propriété interne <samp>[[Class]]</samp>, toujours via la valeur de la méthode <samp>Object.prototype.toString</samp> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var getClass = Object.prototype.toString;

console.log(
    getClass.call(1), // `&#39;[object Number]&#39;`
    getClass.call({}), // `&#39;[object Object]&#39;`
    getClass.call([]), // `&#39;[object Array]&#39;`
    getClass.call(function () {}) // `&#39;[object Function]&#39;`
    // etc.
);
</code></pre>
<p>À la différence de ES3, ECMA-365-5 fournit la possibilité de lire la propriété interne <samp>[[Prototype]]</samp> via la meta méthode <samp>Object.getPrototypeOf</samp>. Nous pouvons également créer un objet en spécifiant le prototype souhaité grace à la meta-méthode <samp>Object.create</samp> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// création de l&#39;objet `plague` avec les propriétés
// `sum` et `length` possédées depuis le `[[Prototype]]`
// `Array.prototype`

var plague = Object.create(Array.prototype, {
  sum: {
    value: function sum() {
      // implémentation de la somme
    }
  },
  // non énumérable mais pas en lecture seule !
  length: {
    value: 0,
    enumerable: false,
    writable: true
  }
});

plague.push(1, 2, 3);

console.log(plague.length); // `3`
console.log(plague.join(&quot;-&quot;)); `&quot;1-2-3&quot;`

// ni `sum` ou `length` ne peuvent
// être énumérés

for (var machine in plague) {
  console.log(machine); // `0`, `1`, `2`
}

// Récupérer le prototype de `plague`
var plaguePrototype = Object.getPrototypeOf(plague);

console.log(plaguePrototype === Array.prototype); // `true`
</code></pre>
<p>Mais malheureusement, même avec cette approche vous ne pourrez <em>toujours pas</em> créer un objet héritant de la « classe » <samp>Array.prototype</samp> avec toutes les fonctionnalités d&#39;un tableau normal et incluant la méthode interne <samp>[[DefineOwnProperty]]</samp> (voir 15.4.5.1) qui gère, par exemple, la propriété <samp>length</samp>. Regardez l&#39;exemple ci-après :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">plague[5] = 10;
console.log(plague.length); // toujours `3`
</code></pre>
<p>Le seul moyen d&#39;hériter complètement de <samp>Array.prototype</samp> et en même temps d&#39;avoir toutes les méthodes internes surchargées d&#39;un tableau normal (c.-à-d. un objet dont la <samp>[[Class]]</samp> est <samp>&quot;[object Array]&quot;</samp>) est d&#39;appliquer la propriété non standard <samp>__proto__</samp>. Aussi le code suivant n&#39;est pas fonctionnelle sur toutes les implémentations :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var plague = [];
plague.__proto__= { machine: 10 };
plague.__proto__.__proto__= Array.prototype;

console.log(plague instanceof Array); // `true`

console.log(plague.machine); // `10`

console.log(plague.length); // `0`

plague.push(20);

plague[3] = 30;
console.log(plague.length); // `4`

console.log(plague); // `20`,``,``,`30`

plague.length = 0;
console.log(plague); // tableau vide
</code></pre>
<p>Et malheureusement, contrairement à la propriété non standard <samp>__proto__</samp> qui est une extension de diverses implémentation ES3, ES5 ne fournit pas la possiblité d&#39;<em>associer</em> un prototype à un objet (seulement de le lire).</p>
<h2 id="descripteur-de-propriété-et-types-didentifieur-de-propriété">Descripteur de propriété et types d&#39;identifieur de propriété</h2>
<p>Comme nous l&#39;avons vu, ES5 permet un contrôle des attributs des propriétés. Ce <em>jeu d&#39;attributs de propriété et leurs valeurs</em> sont appelés en ES5 un <em>descripteur de propriété</em>.</p>
<p>En fonction de son type de nom de propriété, un descripteur peut être soit un <em>descripteur de propriété de données</em> ou un <em>descripteur de propriété d&#39;accession</em>.</p>
<p>Les spécifications définissent aussi le concept de <em>descripteur de propriété générique</em>, c.-à-d. un descripteur qui n&#39;est ni un descripteur d&#39;accession, ni un descripteur de données et qui possède tous les attributs de propriété. Mais qu&#39;en est-t-il au niveau de l&#39;implémentation ?</p>
<p>C&#39;est en fonction des <em>valeurs par défaut</em> spécifiées pour les attributs, si un descripteur est <em>vide</em>, une <em>propriété de donnée</em> est créée. Bien sur, une <em>propriété de données</em> est aussi créée si sont object descripteur contient la propriété <samp>writable</samp> ou <samp>value</samp>. Dans le cas ou un descripteur d&#39;objet possède la propriété <samp>get</samp> ou <samp>set</samp>, une _propriété _d&#39;accession est alors définie. Pour obtenir l&#39;objet descripteur d&#39;une propriété il y a la meta-méthode <samp>Object.getOwnPropertyDescriptor</samp> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// On définit plusieur propriété en même temps

Object.defineProperties(aloy, {
    weapon: {}, // descripteur « vide »,
    armor: { get: function () {} }
});

var weaponProperty = Object.getOwnPropertyDescriptor(aloy, &#39;weapon&#39;);
var hasOwn = Object.prototype.hasOwnProperty;

console.log(
    weaponProperty.value, // `undefined`
    hasOwn.call(weaponProperty, &#39;value&#39;), // `true`

    weaponProperty.get, // `undefined`
    hasOwn.call(weaponProperty, &#39;get&#39;), // `false`

    weaponProperty.set, // `undefined`
    hasOwn.call(weaponProperty, &#39;set&#39;), // `false`
);

console.log(aloy.weapon); // `undefined` (`null` dans certaine implémentation)
console.log(aloy.nonExisting); // `undefined`

// par contre la propriété `armor` est une propriété d&#39;accession

var armorProperty = Object.getOwnPropertyDescriptor(aloy, &#39;armor&#39;);

console.log(
    armorProperty.value, // `undefined`
    hasOwn.call(armorProperty, &#39;value&#39;), // `false`

    armorProperty.get, // `function`
    hasOwn.call(armorProperty, &#39;get&#39;), // `true`

    armorProperty.set, // undefined
    hasOwn.call(armorProperty, &#39;set&#39;), // `false`
);
</code></pre>
<p>Le type de l&#39;identifieur de propriété <samp>Property Identifier</samp> est utilisé pour associé son propre <em>nom</em> a son descripteur. Ainsi, les <em>propriétés</em> peuvent être des valeurs du type <samp>Property Identifier</samp> sous forme de paire <samp>(name, descriptor)</samp> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">aloy.focus = 10;
</code></pre>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code>// une propriété est un objet
// de type `Property Identifier`

focusProperty = {
  name: &#39;focus&#39;,
  descriptor: {
    value: 10,
    writable: true,
    enumerable: true,
    configurable: true
  }
};
</code></pre><h2 id="conclusion">Conclusion</h2>
<p>Dans ce premier chapitre nous avons décrit en profondeur un des nouveaux concepts de la spécification ECMA-262-5. Le prochain chapitre sera dédié à l&#39;une des nouveautés majeur de ES5, le mode strict.</p>
<blockquote>
<div style="float: left;"></div><div style="text-align: right">[Chapitre 2 &gt;](https://blog.lesieur.name/le-mode-strict/)</div>
</blockquote>
<p><strong>Références</strong></p>
<p>Lectures additionnelles :</p>
<ul>
<li><a href="http://es5.github.com/#x4.3">4.3 — Definitions</a>,</li>
<li><a href="http://es5.github.com/#x8.6">8.6 — The Object Type</a>,</li>
<li><a href="http://es5.github.com/#x8.10">8.10 — The Property Descriptor and Property Identifier Specification Types</a>,</li>
<li><a href="http://es5.github.com/#x8.12">8.12 — Algorithms for Object Internal Methods</a>.</li>
<li><a href="http://es5.github.com/#x15.2.3">15.2.3 — Properties of the Object Constructor</a>.</li>
</ul>
<p>Ce texte est une libre ré-écriture française de l&#39;excellent billet <a href="http://dmitrysoshnikov.com/ecmascript/ru-es5-chapter-1-properties-and-property-descriptors/">Тонкости ECMA-262-5. Часть 1. Свойства и дескрипторы свойств</a> de <a href="http://dmitrysoshnikov.com/">Dmitry Soshnikov</a>.</p>
]]></description>
            <link>http://localhost:7776/les-proprietes-et-descripteurs-de-proprietes/</link>
            <guid isPermaLink="false">5a882b9011e80640ac35eed2</guid>
            <category><![CDATA[Spécifications]]></category>
            <category><![CDATA[Concept]]></category>
            <category><![CDATA[ECMAScript]]></category>
            <category><![CDATA[JavaScript]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Sat, 17 Feb 2018 13:18:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Installer n'importe quel module npm pour Node.js sous Windows]]></title>
            <description><![CDATA[<p>Si vous avez déjà tenté d&#39;<a href="https://blog.lesieur.name/installer-et-utiliser-nodejs-sous-windows/#la-documentation-les-modules-et-le-principe">installer des modules npm pour Node.js</a> sous Windows via la commande <samp>npm install &lt;package&gt; [options]</samp>, vous avez probablement déjà eu des soucis d&#39;installation et abandonné l&#39;idée. Peut-être même que vous ne vous êtes pas lancé dans l&#39;aventure Node.js pour ces raisons ? Effectivement, certains modules ont besoin de <strong>Python</strong> pour s&#39;installer et d&#39;autres du <strong>MSBUILD</strong> de <em>Visual Studio</em>. Il y en à même, plus rare, qui on besoin de <strong>Git</strong>.</p>
<figure>
    <img width="320" height="240" src="https://kalliphant.com/wp-content/uploads/2017/02/nodejs.png" alt="npm" style="max-width: 100%;height: auto">
</figure>

<p>Par exemple, <a href="https://github.com/mscdex/node-mariasql">node-mariasql</a> est un module qui nécessite que Python et Visual Studio soient sur la machine Windows pour être installé sans quoi vous obtiendrez des erreurs.</p>
<p>Voici <strong>la procédure d&#39;installation des pré-requis nécessaires pour faire fonctionner Node.js et tous ses modules npm sous Windows</strong> ainsi qu&#39;une aide à la résolution de problèmes divers après installation.</p>
<h2 id="étape-1--installer-python">Étape 1 : Installer Python</h2>
<p><em>Note : une alternative plus rapide à cette étape ainsi qu&#39;à l&#39;étape 2 est présenté en étape 2.5.</em></p>
<p>Python 2.7 (et non les versions 3.X ou 2.6.X et précédente) est requis par l&#39;installeur npm pour installer les addons à compiler.</p>
<ol>
<li><p>Rendez-vous sur <a href="https://www.python.org/">python.org</a> pour <a href="https://www.python.org/download/releases/2.7/">télécharger la dernière version stable de Python 2.7</a> du Windows MSI Installer afin d&#39;installer la version x86 ou x86-64 en fonction de votre système d&#39;exploitation.</p>
</li>
<li><p>Lancez l&#39;installeur et assurez vous d&#39;ajouter Python à votre variable d&#39;environnement PATH.</p>
</li>
<li><p>Acceptez l&#39;« installation pour tous les utilisateurs ».</p>
</li>
<li><p>Acceptez le chemin d&#39;installation par défaut « C:\Python27 ».</p>
</li>
</ol>
<h2 id="étape-2--installer-visual-studio">Étape 2 : Installer Visual Studio</h2>
<p><em>Note : une alternative plus rapide à cette étape ainsi qu&#39;à l&#39;étape 1 est présenté en étape 2.5.</em></p>
<p>MSBUILD est requis par npm pour installer les addons à compiler en C/C++. Vous obtiendrez ce qu&#39;il faut dans Visual Studio 2012 ou plus. <em>Notez bien que gcc, mingw, cygwin, et les autres compilateurs Windows non Microsoft ne sont pas supportés par Node.js</em>.</p>
<p>Si vous utilisez actuellement Windows 7, 8 ou même 10, vous pouvez à la place utiliser Visual Studio C++ 2013 pour Windows Desktop (Express). Visual Studio Express est gratuit et est plus adéquat pour un support de Node.js.</p>
<ol>
<li><p><a href="http://download.microsoft.com/download/7/2/E/72E0F986-D247-4289-B9DC-C4FB07374894/wdexpress_full.exe">Téléchargez, par exemple, Visual Studio Express 2013</a>.</p>
</li>
<li><p>Lancez l&#39;installeur et acceptez la localisation par défaut. C&#39;est une grosse installation qui peut prendre longtemps !</p>
</li>
</ol>
<h2 id="étape-25--installer-python-et-windows-build-tools">Étape 2.5 : Installer Python et Windows Build Tools</h2>
<p><em>Note : vous pouvez passer cette étape si vous avez déjà réalisé l&#39;étape 1 et 2.</em></p>
<p>Vous pouvez alternativement installer Python2.7 et MSBUILD en exécutant une commande npm depuis une fenêtre administrateur :</p>
<ol>
<li><p>Ouvrez un invité de commande en administrateur (Clique sur « <b><i>⊞</i></b> (Démarrer) » &gt; Taper « cmd » &gt; Clique droit sur « Invite de commande » &gt; Clique sur « Exécuter en tant qu&#39;administrateur »).</p>
</li>
<li><p>Installez les deux en tapant la commande <samp>npm install --global --production windows-build-tools</samp>, l&#39;installation peut prendre un moment.</p>
</li>
<li><p>Associé le MSBUILD en tapant la commande <samp>npm config set msvs_version 2015 --global</samp></p>
</li>
<li><p>Quittez la fenêtre administrateur. Pour que cela fonctionne, quittez également les fenêtres d&#39;invitées déjà ouverte et ré-ouvrez les.</p>
</li>
</ol>
<h2 id="étape-3--installer-git">Étape 3 : Installer Git</h2>
<p>Git est nécessaire pour l&#39;installation de package en provenance de GitHub ou autre plateforme Git. Bien que ces modules soient rares, ils ne sont pas inexistants. Vous pourrez donc également les installer.</p>
<ol>
<li><p>Rendez-vous sur <a href="http://git-scm.com/download">git-scm.com</a> et téléchargez la dernière version pour Windows.</p>
</li>
<li><p>Lancez l&#39;installeur.</p>
</li>
<li><p>Acceptez la localisation par défaut.</p>
</li>
<li><p>Acceptez l&#39;icône de démarrage menu.</p>
</li>
<li><p>Acceptez les composants associés.</p>
</li>
</ol>
<p>6 Modifiez « Adjusting your PATH environment » to « Use Git from Windows Command Prompt ».</p>
<ol start="7">
<li>Acceptez la valeur « Configuring the line ending conversions » par défaut.</li>
</ol>
<h2 id="étape-4--installer-nodejs">Étape 4 : Installer Node.js</h2>
<p>Si vous aviez déjà installé Node.js avant de réaliser les étapes de cet article, vous pouvez toujours en profiter pour le mettre à jour avec la dernière version. Sinon téléchargez le pour la première fois.</p>
<ol>
<li><p>Allez sur <a href="https://nodejs.org/en/">nodejs.org</a> et installez la version appropriée pour votre système d&#39;exploitation. </p>
</li>
<li><p>Installez Node.js en suivant les instructions de l&#39;installeur. <a href="https://blog.lesieur.name/installer-et-utiliser-nodejs-sous-windows/">Plus de détails par ici si vous le souhaitez</a>.</p>
</li>
</ol>
<h2 id="vérifier-que-tout-fonctionne-correctement">Vérifier que tout fonctionne correctement</h2>
<p>Si vous rencontrez des difficultés à installer des modules npm, essayez les étapes suivantes pour identifier un problème de votre côté.</p>
<ol>
<li><p>Redémarrez Windows pour être sur que toutes les configurations aient pris effet.</p>
</li>
<li><p>Vérifiez que tous les pré-requis soient correctement installés et accessibles :</p>
<ul>
<li>La commande <samp>python --version</samp> doit retourner <samp>Python 2.7</samp>, sinon ajoutez à vos variables d&#39;environnement le dossier <samp>C:\python27</samp> (ou votre chemin d&#39;installation).</li>
<li>La commande <samp>node --version</samp> doit retourner <samp>vX.X.X</samp>, sinon ajoutez à vos variables d&#39;environnement le dossier <samp>C:\Program files\nodejs</samp> (ou votre chemin d&#39;installation).</li>
<li>La commande <samp>npm --version</samp> doit retourner <samp>X.X.X</samp>, sinon ajoutez à vos variables d&#39;environnement le dossier <samp>%USERPROFILE%\AppData\Roaming\npm</samp>.</li>
<li>La commande <samp>npm config get msvs_version</samp> doit retourner <samp>2015</samp>, sinon vérifiez que la variable d&#39;environnement <samp>GYP_MSVS_VERSION</samp> existe et vaut <samp>2015</samp>.</li>
</ul>
</li>
<li><p>Assurez vous que <samp>npm -g prefix</samp> pointe au même endroit que <samp>echo %NODE_PATH%</samp>(avec <samp>\node_modules</samp> en plus à la fin), sinon vérifiez que la variable d&#39;environnement <samp>NODE_PATH</samp> existe et vaut <samp>%USERPROFILE%\AppData\Roaming\npm\node_modules</samp>.</p>
</li>
<li><p>Vérifiez qu&#39;un simple module npm peut-être installé :</p>
<ul>
<li>Avec <samp>npm install -g semver</samp></li>
<li>et <samp>semver --help</samp> qui doit afficher l&#39;aide.</li>
</ul>
</li>
<li><p>Assurez vous que si vous avez plusieurs version de Python ou Visual Studio sur votre machine, les astuces dans la partie « Astuces » ci-après ne résolvent pas le problème.</p>
</li>
<li><p>Assurez vous que les addons à compiler peuvent être installées :</p>
<ul>
<li>Avec <samp>npm install mariasql</samp> qui doit compiler sans erreur.</li>
</ul>
</li>
</ol>
<p>Si vous avez toujours des erreurs et que toutes les étapes précédentes sont valides, vous pouvez reporter le fichier <samp>npm-debug.log</samp> laissé par npm dans le tracker d&#39;issue du/des développeur(s) du module npm que vous tentez d&#39;installer pour obtenir de l&#39;aide.</p>
<p>N&#39;hésitez pas à laisser plus d&#39;étapes de vérifications dans les commentaires de cet article, je les mettrais à jour ici même.</p>
<h2 id="astuces">Astuces</h2>
<ul>
<li><p>Si vous avez plusieurs versions de Python d&#39;installées, vous pouvez sélectionner celle utilisée par npm pour compiler les addons :</p>
<ul>
<li>Par défaut (et pour tout le temps) <samp>npm config set python python2.7</samp> ou </li>
<li>Ponctuellement <samp>npm install --python=python2.7</samp> lors de l&#39;installation d&#39;un module.</li>
</ul>
</li>
<li><p>Si vous avez plusieurs versions de Microsoft Visual Studio d&#39;installées, vous pouvez sélectionner celle utilisée par npm pour compiler les addons :</p>
<ul>
<li>Par défaut (et pour tout le temps) <samp>npm config set msvs_version 2013</samp> (si votre version est 2013) ou <samp>npm config set msvs_version 2015</samp> (si votre version est 2015), etc. ou</li>
<li>Ponctuellement <samp>npm install [options] &lt;module-name&gt; --msvs_version=2013</samp> lors de l&#39;installation d&#39;un module ou (<samp>npm install [options] &lt;module-name&gt; --msvs_version=2015</samp> si version 215, etc.).</li>
</ul>
</li>
</ul>
]]></description>
            <link>http://localhost:7776/installer-tous-les-modules-npm-node-js-sous-windows/</link>
            <guid isPermaLink="false">5613f26670877cd335a4b897</guid>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Back-end]]></category>
            <category><![CDATA[Git]]></category>
            <category><![CDATA[Node.js]]></category>
            <category><![CDATA[Ressources]]></category>
            <category><![CDATA[Astuces]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Fri, 26 Jan 2018 10:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Modules JavaScript natifs et isomorphisme avec import, export et require]]></title>
            <description><![CDATA[<figure>
    <img width="560" height="458" src="https://blog.lesieur.name/media/images/upload/isomorphisme.jpg" alt="Isomorphisme" style="max-width: 100%;height: auto">
</figure>

<p>Si vous êtes développeur web, vous devez savoir que pour que l&#39;utilisateur final puisse afficher une page web sur son navigateur via le protocole HTTP, il faut deux choses : un code client, et un code serveur :</p>
<ul>
<li><p>Dans son plus simple appareil, le code serveur est délivré par un serveur web comme Apache, nginx ou IIS à partir d&#39;un fichier. Dans de nombreux cas, ce n&#39;est pas à partir d&#39;un fichier HTML, mais à partir du résultat créé en analysant du code serveur dans des fichiers PHP, .NET, Python, Ruby, etc. qu&#39;est généré le rendu HTML.</p>
</li>
<li><p>Côté client, une fois la page reçue, le HTML sert de base au navigateur pour construire un DOM qui permettra d&#39;afficher le site web. C&#39;est alors le code JavaScript appelé par la page qui permettra de changer le DOM et donc, de faire des interactions à l&#39;écran.</p>
</li>
</ul>
<p>Le développeur à donc deux travaux, développer un code qui fonctionne côté serveur et développer un autre code qui fonctionne côté client (le serveur web étant là passerelle entre client / serveur), d&#39;où la séparation connu des rôles de développeur front-end (partie cliente) et développeur back-end (partie serveur).</p>
<p>Imaginez que l&#39;on puisse, à partir d&#39;exactement le même code, produire du code côté serveur et côté client ! C&#39;est ce que l&#39;on appelle l&#39;isomorphisme. Un code isomorphique est un code qui peut-être exécuté par le serveur et par le client.</p>
<p>Nous allons donc utiliser le sujet de l&#39;isomorphisme comme fil conducteur dans cet article pour traiter :</p>
<ul>
<li>de l&#39;<samp>import</samp> / <samp>export</samp> de Modules ECMAScript en version 6,</li>
<li>du JavaScript côté serveur avec Node.js,</li>
<li>des équivalences ECMAScript version 5 pour le <samp>require</samp> / <samp>export</samp>,</li>
<li>de l&#39;isomorphisme exploitable pour faire du web avec <a href="https://blog.lesieur.name/vanilla-js-france/">Vanilla JS</a> et <a href="https://nodejs.org/en/">Node.js</a>.</li>
</ul>
<h2 id="exécution-côté-client-avec-les-modules-ecmascript">Exécution côté client avec les Modules ECMAScript</h2>
<p>Pour commencer, utilisons un navigateur récent (Chrome, Firefox, Edge, Safari…) et faisons des choses très simples. En ECMAScript version 6 (« ES6 ») —qui succède la très populaire ECMAScript version 5 (« ES5 ») progressivement dans tous les navigateurs— il existe une manière de packager et servir du code JavaScript sous forme d&#39;unités de code. Ces unités de code se suffisent à elles-mêmes et peuvent être réutilisées par d&#39;autres unités de code. C&#39;est ce qu&#39;on appelle les Modules ECMAScript. Voici les étapes de mise en place :</p>
<ul>
<li>je crée un module JavaScript grâce au nouveau mot clé réservé du langage <samp>export</samp> et</li>
<li>j&#39;utilise un module JavaScript grâce au nouveau mot clé réservé du langage <samp>import</samp>.</li>
</ul>
<h3 id="architecture">Architecture</h3>
<p>Testons donc cela dans un navigateur à travers l&#39;architecture de fichier suivante :</p>
<pre class="prettyprint linenums"><code class="language-md">isomorphism/
├─ javascripts/
│  ├─ operation.js
│  └─ isomorphic.js
└─ es6.htm
</code></pre>
<p>Nous allons donc remplir le fichier <samp>es6.htm</samp> avec le contenu suivant :</p>
<p><em>es6.htm (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/es6.htm">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;ES6 example&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;section class=&quot;main-content&quot;&gt;
            &lt;h1&gt;Instructions:&lt;/h1&gt;
            &lt;p&gt;Open console with F12.&lt;/p&gt;
        &lt;/section&gt;
        &lt;!-- Appel des différents fichiers
             à faire exécuter par le
             moteur JavaScript du navigateur. --&gt;
        &lt;script src=&quot;javascripts/operation.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;javascripts/isomorphic.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Nous allons ensuite nous créer un module JavaScript dans le fichier <samp>operation.js</samp> :</p>
<p><em>javascripts/operation.js (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/javascripts/operation.mjs">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-js">/* Export direct. */
export default function (number) {
    return {
        round: Math.round(number),
        floor: Math.floor(number),
        ceil: Math.ceil(number)
    };
}

/* Export nommé `addition`. */
export function addition(number1, number2) {
    return number1 + number2;
}

/* Export nommé `substraction`. */
export function substraction(number1, number2) {
    return number1 - number2;
}

/* Export nommé `multiplication`. */
export function multiplication(number1, number2) {
    return number1 * number2;
}

/* Export nommé `division`. */
export function division(number1, number2) {
    return number1 / number2;
}
</code></pre>
<p>Et nous allons créer le cœur du programme dans un module <samp>isomorphic.js</samp> qui fera office de contrôleur :</p>
<p><em>javascripts/isomorphic.js (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/javascripts/isomorphic.mjs">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-js">/* Récupération du module direct depuis `export default function ()` */
import tools from &quot;./operation.js&quot;;

/* Récupération des exports nommés du module avec `export function &lt;name&gt;()` */
import { addition, substraction, multiplication, division } from &quot;./operation.js&quot;;

/* Variables à tester. */
var number1 = 13,
    number2 = 7.7;

/* Utilisation des fonctions de nos modules. */
console.log(&#39;addition&#39;, addition(number1, number2));
console.log(&#39;substraction&#39;, substraction(number1, number2));
console.log(&#39;multiplication&#39;, multiplication(number1, number2));
console.log(&#39;division&#39;, division(number1, number2));
console.log(&#39;round&#39;, tools(number2).round);
console.log(&#39;floor&#39;, tools(number2).floor);
console.log(&#39;ceil&#39;, tools(number2).ceil);
</code></pre>
<h3 id="quelques-erreurs">Quelques erreurs</h3>
<p>Nous allons donc ouvrir le fichier <samp>es6.htm</samp> dans le navigateur et ouvrir notre console avec F12.</p>
<p>Les erreurs suivantes sont affichées (dans Chrome) :</p>
<pre class="prettyprint linenums"><code class="language-txt">Access to Script at &#39;file:///&lt;path/to/your/workspace&gt;/isomorphism/javascripts/operation.js&#39; from origin &#39;null&#39; has been blocked by CORS policy: Invalid response. Origin &#39;null&#39; is therefore not allowed access.
Access to Script at &#39;file:///&lt;path/to/your/workspace&gt;/isomorphism/javascripts/isomporphic.js&#39; from origin &#39;null&#39; has been blocked by CORS policy: Invalid response. Origin &#39;null&#39; is therefore not allowed access.
</code></pre>
<p>Cela est dû au fait qu&#39;il vous faut l&#39;autorisation d&#39;utiliser un module depuis un autre nom de domaine que le vôtre à cause du mécanisme de « <em>Cross-origin resource sharing</em> » des navigateurs. Vous allez me dire que vos fichiers <samp>.js</samp> sont pourtant sur le même serveur web que votre page <samp>.htm</samp> ? En fait, pour que ce soit le cas, il faudrait que votre page soit sur un serveur web ! Aussi dans l&#39;URL de votre page dans le navigateur, il faudrait que <samp>file:///&lt;path/to/your/workspace&gt;/es6.htm</samp> soit remplacée, par exemple par <samp>http://&lt;your-local-domain-name&gt;/es6.htm</samp>. Lançons donc un serveur web.</p>
<blockquote>
<p>De mon côté, je vais utiliser <a href="https://nodejs.org/en/">Node.js</a> qui une fois installé me donne accès à la commande <samp>npm install -g node-atlas</samp>, ce qui me permet d&#39;utiliser la commande <a href="https://www.npmjs.com/package/node-atlas"><samp>node-atlas</samp></a>. Celle-ci lance un serveur web basique là où elle est lancée. Vous pouvez tout autant utiliser <samp>http-server</samp> ou votre propre serveur Apache, etc. pour tester ça.</p>
</blockquote>
<p>Une fois le serveur web lancé, en vous rendant à <samp>http://&lt;your-local-domain-name&gt;/es6.htm</samp>, vous aurez cette fois l&#39;erreur suivante :</p>
<pre class="prettyprint linenums"><code class="language-txt">Uncaught SyntaxError: Unexpected token export
Uncaught SyntaxError: Unexpected token import
</code></pre>
<p>Cela vient du fait que pour utiliser des modules JavaScript, il faut le préciser dans le <samp>type</samp> de la balise <samp>&lt;script&gt;</samp>. Notre code HTML précédent devient donc :</p>
<p><em>es6.htm (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/es6.htm">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-htm">...
        &lt;script src=&quot;javascripts/operation.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;javascripts/isomorphic.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;
...
</code></pre>
<h3 id="résultat">Résultat</h3>
<p>Cette fois la magie opère ! Vous constaterez dans votre console les sorties suivantes :</p>
<pre class="prettyprint linenums"><code class="language-txt">addition 20.7
substraction 5.3
multiplication 100.10000000000001
division 1.6883116883116882
round 8
floor 7
ceil 8
</code></pre>
<blockquote>
<p>Vous pouvez aussi voir ce résultat en live en vous rendant à cette adresse qui se sert d&#39;un <a href="https://haeresis.github.io/import-export-require-isomorphism/es6.htm">serveur web GitHub Pages pour faire fonctionner l&#39;exemple ES6</a>.</p>
</blockquote>
<h2 id="exécution-côté-serveur-des-modules-ecmascript-avec-nodejs">Exécution côté serveur des Modules ECMAScript avec Node.js</h2>
<p>L&#39;idée ici va être de faire exécuter le fichier <samp>isomorphic.js</samp> du côté serveur. Il va faire appel à <samp>operation.js</samp> afin d&#39;obtenir le même résultat que côté client dans votre console. Pour cela nous allons utiliser la commande :</p>
<pre class="prettyprint linenums"><code class="language-bash">&gt; node ./javascripts/isomorphic.js
</code></pre>
<p>depuis le dossier où se situe actuellement <samp>es6.htm</samp>.</p>
<p>Mais faire cela nous renvoie l&#39;erreur :</p>
<pre class="prettyprint linenums"><code class="language-txt">SyntaxError: Unexpected token import
...
</code></pre>
<h3 id="fonctionnalité-expérimentale">Fonctionnalité expérimentale</h3>
<p>Pour pouvoir exécuter notre fichier <samp>isomorphic.js</samp> côté serveur, il va falloir utiliser une fonctionnalité expérimentale de Node.js car, à l&#39;heure actuelle, les Modules ECMAScript (« ESM ») ne sont pas supportés par Node.js en standard. En réalité, Node.js a déjà son propre système de chargement de module basé sur une spécification appelée CommonJS. Parce que Node.js a déjà son système d&#39;import, appelé <samp>require</samp>, le meilleur moyen pour lui de savoir si un fichier doit être interprété en tant que Module ECMAScript ou en tant que module Node.js standard est de vérifier l&#39;extension du fichier. C&#39;est pourquoi un fichier JavaScript écrit sous forme de module ne doit plus avoir l&#39;extension <samp>.js</samp> mais l&#39;extension <samp>.mjs</samp>. Dans ce cas, Node.js sait que c&#39;est un Module ECMAScript et utilise le système de chargement de module ESM et non CommonJS.</p>
<p>Nous allons donc dans un premier temps renommer nos fichiers <samp>operation.js</samp> et <samp>isomorphic.js</samp> en <samp>operation.mjs</samp> et <samp>isomorphic.mjs</samp> :</p>
<pre class="prettyprint linenums"><code class="language-md">isomorphism/
├─ javascripts/
│  ├─ operation.mjs
│  └─ isomorphic.mjs
└─ es6.htm
</code></pre>
<p>Et puisque le nom a changé, notre fichier <samp>isomorphic.mjs</samp> va maintenant faire appel à <samp>operation.mjs</samp>.</p>
<p><em>javascripts/isomorphic.mjs (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/javascripts/isomorphic.mjs">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-js">/* Récupération du module direct depuis `export default function ()` */
import tools from &quot;./operation.mjs&quot;;

/* Récupération des exports nommés du module avec `export function &lt;name&gt;()` */
import { addition, substraction, multiplication, division } from &quot;./operation.mjs&quot;;

...
</code></pre>
<h3 id="résultat-1">Résultat</h3>
<p>Il est à présent possible d&#39;obtenir le même résultat que côté client avec la commande :</p>
<pre class="prettyprint linenums"><code class="language-bash">&gt; node --experimental-modules ./javascripts/isomorphic.mjs
</code></pre>
<p>Vous obtiendrez alors la sortie :</p>
<pre class="prettyprint linenums"><code class="language-txt">addition 20.7
substraction 5.3
multiplication 100.10000000000001
division 1.6883116883116882
round 8
floor 7
ceil 8
</code></pre>
<h3 id="et-le-client-">Et le client ?</h3>
<p>Pour finir, afin de toujours rendre opérationnel notre appel depuis <samp>http://&lt;your-local-domain-name&gt;/es6.htm</samp>, nous allons également changer les chemins vers les nouveaux fichiers <samp>operation.mjs</samp> et <samp>isomorphic.mjs</samp> :</p>
<pre class="prettyprint linenums"><code class="language-html">...
        &lt;script src=&quot;javascripts/operation.mjs&quot; type=&quot;module&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;javascripts/isomorphic.mjs&quot; type=&quot;module&quot;&gt;&lt;/script&gt;
...
</code></pre>
<p>Nous avons ici un exemple de fichiers ES6 parfaitement isomorphiques !</p>
<blockquote>
<p>Vous pouvez revoir ce résultat en live en vous rendant sur le <a href="https://haeresis.github.io/import-export-require-isomorphism/es6.htm">serveur web GitHub Pages</a>.</p>
</blockquote>
<h2 id="méthodes-es5-pour-limport--export">Méthodes ES5 pour l&#39;import / export</h2>
<p>Comme vous avez pu le constater, la fonctionnalité de Modules ECMAScript est expérimentale côté serveur et pas encore totalement supportée par tous les navigateurs côté client, car elle est introduite avec ES6. La question que l&#39;on peut se poser est la suivante : est-il nécessaire d&#39;utiliser une syntaxe ES6 et un Module ECMAScript pour faire de l&#39;isomorphisme ? La réponse est non. Il est tout à fait possible d&#39;arriver au même résultat en utilisant les modules CommonJS utilisés par Node.js et en mimant ce mécanisme côté client.</p>
<p>Nous allons ajouter les fichiers <samp>operation.js</samp> et <samp>isomorphic.js</samp> qui n&#39;utilisent pas la syntaxe de module ES6, et créer un nouveau fichier <samp>es5.htm</samp> qui utilisera ces fichiers.</p>
<pre class="prettyprint linenums"><code class="language-md">isomorphism/
├─ javascripts/
│  ├─ operation.js
│  ├─ operation.mjs
│  ├─ isomorphic.js
│  └─ isomorphic.mjs
├─ es5.htm
└─ es6.htm
</code></pre>
<h3 id="côté-serveur">Côté serveur</h3>
<p>Nous allons par ailleurs dans chacun de ces fichiers utiliser l&#39;export CommonJS de Node.js. Celui-ci fonctionne avec les propriétés <samp>module.exports</samp> et <samp>require</samp>.</p>
<p>Nous permettons donc l&#39;export de nos fonctionnalités :</p>
<p><em>javascripts/operation.js (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/javascripts/operation.js">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-js">/* Export CommonJS de Node.js. */
module.exports = function (number) {
    return {

        /* Export direct. */
        round: Math.round(number),
        floor: Math.floor(number),
        ceil: Math.ceil(number),

        /* Export fonction `addition`. */
        addition: function (number1, number2) {
            return number1 + number2;
        },

        /* Export fonction `substraction`. */
        substraction: function (number1, number2) {
            return number1 - number2;
        },

        /* Export fonction `multiplication`. */
        multiplication: function (number1, number2) {
            return number1 * number2;
        },

        /* Export fonction `division`. */
        division: function (number1, number2) {
            return number1 / number2;
        }
    };
};
</code></pre>
<p>Puis nous les exécutons depuis le script d&#39;appel :</p>
<p><em>javascripts/isomorphic.js (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/javascripts/isomorphic.js">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-js">    /* Variables à tester. */
var number1 = 13,
    number2 = 7.7,

    /* Récupération du module direct depuis `module.exports` */
    tools = require(&#39;./operation.js&#39;),
    operation = tools();

/* Utilisation des fonctions de notre import. */
console.log(&#39;addition&#39;, operation.addition(number1, number2));
console.log(&#39;substraction&#39;, operation.substraction(number1, number2));
console.log(&#39;multiplication&#39;, operation.multiplication(number1, number2));
console.log(&#39;division&#39;, operation.division(number1, number2));
console.log(&#39;round&#39;, tools(number2).round);
console.log(&#39;floor&#39;, tools(number2).floor);
console.log(&#39;ceil&#39;, tools(number2).ceil);
</code></pre>
<p>Nous obtenons alors avec la commande :</p>
<pre class="prettyprint linenums"><code class="language-bash">&gt; node ./javascripts/isomorphic.js
</code></pre>
<p>le résultat suivant :</p>
<pre class="prettyprint linenums"><code class="language-txt">addition 20.7
substraction 5.3
multiplication 100.10000000000001
division 1.6883116883116882
round 8
floor 7
ceil 8
</code></pre>
<h3 id="côté-client">Côté client</h3>
<p>Alimentons alors côté client notre fichier <samp>es5.htm</samp> :</p>
<p><em>es5.htm (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/es5.htm">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;ES5 example&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;section class=&quot;main-content&quot;&gt;
            &lt;h1&gt;Instructions:&lt;/h1&gt;
            &lt;p&gt;Open console with F12.&lt;/p&gt;
        &lt;/section&gt;
        &lt;script&gt;var module = {};&lt;/script&gt;
        &lt;script src=&quot;javascripts/operation.js&quot;&gt;&lt;/script&gt;
        &lt;script&gt;var require = function () { return module.exports; }&lt;/script&gt;
        &lt;script src=&quot;javascripts/isomorphic.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Ce qui nous permet d&#39;obtenir à l&#39;adresse <samp>http://&lt;your-local-domain-name&gt;/es5.htm</samp>, en allant dans la console derrière F12 le résultat :</p>
<pre class="prettyprint linenums"><code class="language-txt">addition 20.7
substraction 5.3
multiplication 100.10000000000001
division 1.6883116883116882
round 8
floor 7
ceil 8
</code></pre>
<p>Nous avons alors « presque » à faire à de l&#39;isomorphisme, car nous avons dû ajouter les morceaux de code :</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;script&gt;var module = {};&lt;/script&gt;
</code></pre>
<p>et :</p>
<pre class="prettyprint linenums"><code class="language-html">&lt;script&gt;var require = function () { return module.exports; }&lt;/script&gt;
</code></pre>
<p>pour simuler le comportement de CommonJS côté client.</p>
<blockquote>
<p>Vous pouvez aussi voir ce résultat en live en vous rendant à cette adresse qui se sert d&#39;un <a href="https://haeresis.github.io/import-export-require-isomorphism/es5.htm">serveur web GitHub Pages pour faire fonctionner l&#39;exemple ES5</a>.</p>
</blockquote>
<h2 id="isomporphisme-exploitable-pour-un-site-web-avec-vanilla-js-et-nodejs">Isomporphisme exploitable pour un site web avec Vanilla JS et Node.js</h2>
<p>Vous aurez probablement remarqué que les trois premières parties de cet article vous font une belle jambe pour faire un site web. Certes, le résultat est exécuté de la même manière avec une commande <samp>node</samp> (côté serveur) qu&#39;avec un appel depuis une balise <samp>&lt;script&gt;</samp> mais vous ne pouvez rien en faire. Effectivement, la grande différence entre client et serveur c&#39;est que ce que vous ferez côté client consistera à manipuler le DOM alors que ce que vous ferez côté serveur consistera à générer une réponse HTTP à envoyer au client. On est donc loin des messages à afficher dans la console !</p>
<h3 id="partie-cliente-partie-serveur-et-partie-isomorphique">Partie cliente, partie serveur et partie isomorphique</h3>
<p>Nous pouvons donc voir assez rapidement que la totalité du code ne pourra pas être isomorphique. Il y aura forcément :</p>
<ul>
<li>coté serveur, du code dédié à faire le pont entre les fichiers et données stockées sur le serveur et leurs envois par réponse HTTP. Ce sera le code uniquement serveur. Et</li>
<li>côté client, du code dédié à faire le pont entre ce que l&#39;on récupère en source HTML ou par requête XMLHttpRequest et le DOM. Ce sera le code uniquement client.</li>
</ul>
<p>Cependant, hormis ces mécanismes, la totalité du code restant pourra être utilisée aussi bien pour générer côté serveur la réponse HTTP dont va se servir le client pour générer son DOM lors du premier affichage, que pour hydrater le code côté client ou générer toutes les nouvelles pages visitées sans solliciter le serveur.</p>
<p>C&#39;est à cette condition que nous pourrons réellement estimer que l&#39;on développe une application isomorphique.</p>
<p>Voyons cela par l&#39;exemple côté navigateur sans bibliothèque avec Vanilla JS et côté serveur avec Node.js !</p>
<h3 id="le-serveur-http">Le serveur HTTP</h3>
<p>Nous allons donc créer un serveur Node.js dans le fichier <samp>server.js</samp> en utilisant l&#39;API HTTP native de Node.js ainsi que le module communautaire JSDOM permettant de manipuler virtuellement le DOM côté serveur afin d&#39;exploiter du code isomorphique. Nous aurions pu utiliser Express ou NodeAtlas pour faire cela avec facilité, mais ce sera un bon exercice de compréhension complète de A à Z sans zones d&#39;ombres.</p>
<p>Partons de la structure actuelle à laquelle nous allons rajouter notre fichier <samp>server.js</samp> pour développer le code serveur non isomorphique servant les fichiers demandés au client ainsi que le fichier <samp>package.json</samp> pour permettre l&#39;installation du DOM virtuel JSDOM. Nous allons également créer un fichier <samp>layout.htm</samp> qui va servir de base HTML pour tous les fichiers renvoyés par le serveur.</p>
<pre class="prettyprint linenums"><code class="language-md">isomorphism/
├─ javascripts/
│  ├─ isomorphic.js
│  ├─ isomorphic.mjs
│  ├─ operation.js
│  ├─ operation.mjs
├─ es5.htm
├─ es6.htm
├─ layout.htm
├─ server.js
└─ package.json
</code></pre>
<p>Remplissons le fichier <samp>package.json</samp> avec :</p>
<p><em>package.json (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/package.json">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-json">{}
</code></pre>
<p>Puis exécutons la commande :</p>
<pre class="prettyprint linenums"><code class="language-bash">&gt; npm install --save jsdom
</code></pre>
<p>Ce qui va remplir le fichier <samp>package.json</samp> ainsi :</p>
<p><em>package.json (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/package.json">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-json">{
  &quot;dependencies&quot;: {
    &quot;jsdom&quot;: &quot;^11.5.1&quot;
  }
}

</code></pre>
<p>et créer un fichier <samp>package-lock.json</samp>.</p>
<p>Grâce à cela, le module communautaire npm JSDOM et ses dépendances seront installés dans le dossier <samp>node_modules</samp>.</p>
<p>Basiquement, notre fichier <samp>layout.htm</samp> ressemblera à cela :</p>
<p><em>layout.htm (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/layout.htm">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
    &lt;head&gt;
        &lt;base href=&quot;MyBase&quot; /&gt;
        &lt;meta charset=&quot;utf-8&quot; /&gt;
        &lt;title&gt;Isomporphic example&lt;/title&gt;
        &lt;!-- Un peu de CSS pour faire changer les
             pages en changeant l&#39;opacité. --&gt;
        &lt;style&gt;
            // Chaque `div` `layout` va s&#39;afficher
            // les unes sur les autres permettant
            // de faire disparaitre progressivement
            // celle du dessus…
            .layout {
                position: absolute;
                width: 100%;
                height: 100%;
                top: 0;
                left: 0;
                opacity: 1;
                background-color: #fff;
                -webkit-transition: opacity 1s ease;
                   -moz-transition: opacity 1s ease;
                    -ms-transition: opacity 1s ease;
                     -o-transition: opacity 1s ease;
                        transition: opacity 1s ease;
            }
            // …pour rendre visible celle
            // du dessous. Nous verrons cela
            // plus loin.
            .change {
                opacity: 0;
                z-index: 2;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- Ici sera montée la page demandée par le routeur
             côté serveur ou sera hydratée la page demandée
             côté client. --&gt;
        &lt;div class=&quot;layout&quot;&gt;&lt;/div&gt;
        &lt;!-- Ici sera exécuté la partie cliente --&gt;
        &lt;script src=&quot;javascripts/client.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Remplissons maintenant le fichier <samp>server.js</samp> avec le code serveur dédié :</p>
<p><em>server.js (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/server.js">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-js">    /* Récupération de l&#39;API native HTTP
     * pour faire des échanges client-server
     * (l&#39;équivalent de APACHE). */
var http = require(&#39;http&#39;),
    /* Récupération de l&#39;API native File System
     * pour lire et écrire dans des fichiers
     * sur le serveur. */
    fs = require(&#39;fs&#39;),
    /* Récupération de la bibliothèque JSDOM
     * pour manipuler le DOM « virtuel »
     * sur le serveur. */
    JSDOM = require(&#39;jsdom&#39;).JSDOM,

    /* Port d&#39;écoute de notre site web. */
    httpPort = 8080,
    /* Nom de domaine de notre site web. */
    httpDomain = &#39;localhost&#39;;

/* Création du serveur web avec
 * récupération de toutes les requêtes faites
 * par le navigateur dans `request` et un objet
 * `response` pour renvoyer le contenu HTML demandé
 * au navigateur. */
http.createServer(function (request, response) {
    var router,
        file,
        statusCode,
        contentType;

    /* Cas des demandes d&#39;adresse finissant par `/`. */
    if (/\/$/g.test(request.url)) {
        /* Le site répondra donc à :
         * - `http://localhost:8080/`
         * - `http://localhost:8080/about-us/`
         * - `http://localhost:8080/contact-us/`
         * ... */
        router = {
            &#39;/&#39;: &#39;index&#39;,
            &#39;/about-us/&#39;: &#39;overview&#39;,
            &#39;/contact-us/&#39;: &#39;contact&#39;
        };

        /* ...ou à n&#39;importe quoi finissant par `/`
         * `http://localhost:8080/.+/`. */
        file = router[request.url] || &#39;error&#39;;

        /* Si l&#39;adresse est trouvée dans `router`,
         * la `response` sera valide et en `200` sinon
         * ce sera une page inexistante d&#39;erreur `404`. */
        statusCode = (router[request.url]) ? 200 : 404;

        /* Récupération de la structure globale de
         * chaque page dans le fichier `layout.htm`. */
        fs.readFile(&#39;layout.htm&#39;, function (err, layout) {
            if (err) {
                /* Information en cas d&#39;erreur. */
                console.log(&#39;We cannot open layout file.&#39;, err);

                /* Renvoi d&#39;une page serveur 500 en cas d&#39;erreur. */
                response.writeHead(500, {});
                /* Fin de la transaction. */
                response.end(&#39;&#39;);
            }

            /* Ouverture du code isomorphique correspondant aux pages :
             * - `views/index.htm`    si `http://localhost:8080/`            est demandée
             * - `views/overview.htm` si `http://localhost:8080/about-us/`   est demandée
             * - `views/contact.htm`  si `http://localhost:8080/contact-us/` est demandée
             * - `views/error.htm`    si `http://localhost:8080/.+/`         est demandée. */
            fs.readFile(&#39;views/&#39; + file + &#39;.htm&#39;, &#39;utf-8&#39;, function (err, content) {
                var dom = new JSDOM(layout);

                if (err) {
                    /* Information en cas d&#39;erreur. */
                    console.log(&#39;We cannot open &#39; + file + &#39; view file.&#39;, err);
                }

                /* Récupération de la balise `&lt;base href=&quot;MyBase&quot; /&gt;` */
                dom.window.document.getElementsByTagName(&#39;base&#39;)[0]
                    /* et changement en `&lt;base href=&quot;http://localhost:8080/&quot; /&gt;`. */
                    .setAttribute(&#39;href&#39;, &#39;http://&#39; + httpDomain + &#39;:&#39; + httpPort + &#39;/&#39;);

                /* Récupération de la balise `&lt;div class=&quot;layout&quot;&gt;&lt;/div&gt;` */
                dom.window.document.getElementsByClassName(&#39;layout&#39;)[0]
                    /* et changement de leur contenu par le contenu
                     * généré à partir appels isomorphiques des fichiers :
                     * - `require(&#39;./views/index.js&#39;)(&lt;contenu de `views/index.htm`&gt;, &lt;objet window virtuel&gt;)` ou
                     * - `require(&#39;./views/overview.js&#39;)(&lt;contenu de `views/overview.htm`&gt;, &lt;objet window virtuel&gt;)` ou
                     * - `require(&#39;./views/contact.js&#39;)(&lt;contenu de `views/contact.htm`&gt;, &lt;objet window virtuel&gt;)` ou
                     * - `require(&#39;./views/error.js&#39;)(&lt;contenu de `views/error.htm`&gt;, &lt;objet window virtuel&gt;)` */
                    .innerHTML = require(&#39;./views/&#39; + file + &#39;.js&#39;)(content, dom.window)
                    /* et contenu dans la propriété `template`
                     * (par ex. : `&#39;&lt;div class=&quot;layout&quot;&gt;&lt;h1&gt;Welco[...]&lt;/ul&gt;&lt;/div&gt;&#39;`). */
                    .template;

                /* Création des entêtes de réponse HTTP
                 * pour un fichier HTML
                 * soit en code `200` soit `404`. */
                response.writeHead(statusCode, {
                    &#39;Content-Type&#39;: &#39;text/html; charset=utf-8&#39;
                });

                /* Fin de la transaction avec envoi
                 * du fichier complet (par ex. `&#39;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;[...]
                 * &lt;div class=&quot;layout&quot;&gt;&lt;h1&gt;Welco[...]&lt;/ul&gt;&lt;/div&gt;[...]
                 * &lt;/body&gt;&lt;/html&gt;&#39;`). */
                response.end(dom.serialize());
            });
        });

    /* Cas de toutes les autres demandes du navigateur
     * fait pour récupérer directement les fichiers
     * de ressources statiques. */
    } else {
        /* Retrait du `/` de départ pour tentative
         * d&#39;ouverture du fichier. (par ex.  la requête
         * `/javascripts/client.js` tentera d&#39;ouvrir le
         * fichier `javascripts/client.js`). */
        file = request.url.slice(1);

        /* Ouverture du fichier statique demandé */
        fs.readFile(file, &#39;utf-8&#39;, function (err, content) {
            /* Par défaut on estime que le fichier est trouvé... */
            statusCode = 200;
            /* et n&#39;a pas de `&#39;Content-type&#39;` particulier */
            contentType = {};

            /* Association d&#39;un fichier de `&#39;Content-type&#39;`
             * par `application/javascript` si l&#39;extension
             * du fichier est `&#39;.js&#39;`. */
            if (/\.js$/g.test(file)) {
                contentType = {
                    &#39;Content-Type&#39;: &#39;application/javascript; charset=utf-8&#39;
                };
            }

            /* Association d&#39;un fichier de `&#39;Content-type&#39;`
             * par `text/html` si l&#39;extension
             * du fichier est `&#39;.htm&#39;`. */
            if (/\.htm$/g.test(file)) {
                contentType = {
                    &#39;Content-Type&#39;: &#39;text/html; charset=utf-8&#39;
                };
            }

            if (err) {
                /* Si le ficher demandé n&#39;existe pas
                 * on retourne un fichier en erreur
                 * 400 à contenu vide.*/
                statusCode = 404;
                contentType = {};
                content = &#39;&#39;;

                /* Information en cas d&#39;erreur */
                console.log(&#39;We cannot open &#39; + file + &#39; asset file.&#39;, err);
            }

            /* Création des entêtes de réponse HTTP
             * pour un fichier statique
             * soit en code `200` soit `404`. */
            response.writeHead(statusCode, contentType);

            /* Fin de la transaction avec envoi
             * du contenu du fichier s&#39;il existe
             * ou d&#39;un contenu vide s&#39;il n&#39;existe pas. */
            response.end(content);
        });
    }

/* Démarrage du serveur web */
}).listen(httpPort, function () {
    /* Envoi d&#39;un message à la console côté serveur
     * quand le serveur est démarré et prêt à répondre
     * aux demandes du client. */
    console.log(&#39;Server listening on: http://&#39; + httpDomain +&#39;:&#39; + httpPort + &#39;/&#39;);
});
</code></pre>
<h3 id="les-fichiers-isomporphiques">Les fichiers isomporphiques</h3>
<p>À ce stade, le fichier <samp>server.js</samp> va retourner une réponse HTTP différente à votre navigateur en fonction de l&#39;adresse demandée.</p>
<ul>
<li>Pour <samp>http://localhost:8080/</samp>, ce sont les fichiers de vue <samp>views/index.html</samp> et de modèle <samp>views/index.js</samp> qui vont être impliqués,</li>
<li>pour <samp>http://localhost:8080/about-us/</samp>, ce sont les fichiers de vue <samp>views/overview.html</samp> et de modèle <samp>views/overview.js</samp> qui vont être impliqués,</li>
<li>pour <samp>http://localhost:8080/contact-us/</samp>, ce sont les fichiers de vue <samp>views/contact.html</samp> et de modèle <samp>views/contact.js</samp> qui vont être impliqués et</li>
<li>pour <samp>http://localhost:8080/.+/</samp> (n&#39;importe quelle adresse finissant par <samp>/</samp>), ce sont les fichiers de vue <samp>views/error.html</samp> et de modèle <samp>views/error.js</samp> qui vont être impliqués.</li>
</ul>
<p>Pour cela, nous allons créer ces fichiers dans notre structure existante :</p>
<pre class="prettyprint linenums"><code class="language-md">isomorphism/
├─ javascripts/
│  ├─ isomorphic.js
│  ├─ isomorphic.mjs
│  ├─ operation.js
│  └─ operation.mjs
├─ node_molules/
│  ├─ ...
├─ views/
│  ├─ contact.htm
│  ├─ contact.js
│  ├─ error.htm
│  ├─ error.js
│  ├─ index.htm
│  ├─ index.js
│  ├─ overview.htm
│  └─ overview.js
├─ es5.htm
├─ es6.htm
├─ server.js
└─ package.json
└─ package-lock.json
</code></pre>
<p>et les remplir comme suit :</p>
<p><em>views/index.htm (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/views/index.htm">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;!-- Template HTML qui sera rempli par
     `views/index.js`. --&gt;
&lt;h1&gt;MyTitle&lt;/h1&gt;
&lt;p&gt;MyText&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;MyLinkHref&quot;&gt;MyLinkContent&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;MyLinkHref&quot;&gt;MyLinkContent&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;MyLinkHref&quot;&gt;MyLinkContent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p><em>views/index.js (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/views/index.js">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-js">/* Utilisation de l&#39;export CommonJS de Node.js. */
module.exports = function (template, window) {

        /* Création d&#39;un espace pour manipuler un fragment HTML... */
    var body = window.document.implementation.createHTMLDocument().body,

        /* Préparation des liens pour injection. */
        links = [{
            href: &#39;./about-us/&#39;,
            content: &#39;Go to about page&#39;
        }, {
            href: &#39;./contact-us/&#39;,
            content: &#39;Go to contact page&#39;
        }, {
            href: &#39;./error/&#39;,
            content: &#39;Try an error page&#39;
        }];

    /* ...lu depuis le fichier `views/index.htm`. */
    body.innerHTML = template;

    /* Injection du titre. */
    body.getElementsByTagName(&#39;h1&#39;)[0].textContent = &#39;Welcome&#39;;

    /* Injection du contenu. */
    body.getElementsByTagName(&#39;p&#39;)[0].textContent = &#39;This is the welcome page!&#39;;

    /* Injection des liens. */
    Array.prototype.forEach.call(body.getElementsByTagName(&#39;a&#39;), function (a, i) {
        a.textContent = links[i].content;
        a.setAttribute(&#39;href&#39;, links[i].href);
    });

    return {
        template: body.innerHTML
    };
};
</code></pre>
<p><em>views/overview.htm (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/views/overview.htm">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;!-- Idem que pour `views/index.htm`. --&gt;
&lt;h1&gt;MyTitle&lt;/h1&gt;
&lt;p&gt;MyText&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;MyLinkHref&quot;&gt;MyLinkContent&lt;/a&gt;&lt;/p&gt;
</code></pre>
<p><em>views/overview.js (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/views/overview.js">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-js">/* Idem que pour `views/index.js`. */
module.exports = function (template, window) {
    var body = window.document.implementation.createHTMLDocument().body,
        a;

    body.innerHTML = template;

    body.getElementsByTagName(&#39;h1&#39;)[0].textContent = &#39;About this website&#39;;
    body.getElementsByTagName(&#39;p&#39;)[0].textContent = &#39;The goal of this website is to provide a way to run isomporphique from scratch!&#39;;
    a = body.getElementsByTagName(&#39;a&#39;)[0];
    a.textContent = &#39;Back to the home&#39;;
    a.setAttribute(&#39;href&#39;, &#39;./&#39;);

    return {
        template: body.innerHTML
    };
};
</code></pre>
<p><em>views/contact.htm (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/views/contact.htm">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;!-- Idem que pour `views/index.htm`. --&gt;
&lt;h1&gt;MyTitle&lt;/h1&gt;
&lt;p&gt;MyText&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;MyLinkHref&quot;&gt;MyLinkContent&lt;/a&gt;&lt;/p&gt;
</code></pre>
<p><em>views/contact.js (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/views/contact.js">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-js">/* Idem que pour `views/index.js`. */
module.exports = function (template, window) {
    var body = window.document.implementation.createHTMLDocument().body,
        a;

    body.innerHTML = template;

    a = body.getElementsByTagName(&#39;a&#39;)[0];
    a.textContent = &#39;Back to the home&#39;;
    a.setAttribute(&#39;href&#39;, &#39;./&#39;);

    body.getElementsByTagName(&#39;h1&#39;)[0].textContent = &#39;Contact US&#39;;
    body.getElementsByTagName(&#39;p&#39;)[0].innerHTML = &#39;You can contact us by using the following email: &lt;a href=&quot;mailto:bruno.lesieur@gmail.com&quot;&gt;bruno.lesieur@gmail.com&lt;/a&gt;&#39;;

    return {
        template: body.innerHTML
    };
};
</code></pre>
<p><em>views/error.htm (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/views/error.htm">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;!-- Idem que pour `views/index.htm`. --&gt;
&lt;h1&gt;MyTitle&lt;/h1&gt;
&lt;p&gt;MyText&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;MyLinkHref&quot;&gt;MyLinkContent&lt;/a&gt;&lt;/p&gt;
</code></pre>
<p><em>views/error.js (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/views/error.js">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-js">/* Idem que pour `views/index.js`. */
module.exports = function (template, window) {
    var body = window.document.implementation.createHTMLDocument().body,
        a;

    body.innerHTML = template;

    body.getElementsByTagName(&#39;h1&#39;)[0].textContent = &#39;Error page&#39;;
    body.getElementsByTagName(&#39;p&#39;)[0].textContent = &#39;This is the error page...&#39;;
    a = body.getElementsByTagName(&#39;a&#39;)[0];
    a.textContent = &#39;Back to the home&#39;;
    a.setAttribute(&#39;href&#39;, &#39;./&#39;);

    return {
        template: body.innerHTML
    };
};
</code></pre>
<p>Comprenez bien qu&#39;à ce stade, toutes les nouvelles pages que vous ajouterez se rempliront avec une partie vue représentée par le HTML pour l&#39;affichage de la page et une partie modèle pour les actions que vous ferez sur cette vue (ici, ajouter des textes). Ce code fonctionne aussi bien en étant appelé depuis le serveur qu&#39;en étant appelé depuis le client. <strong>Il est donc parfaitement isomorphique</strong>.</p>
<h3 id="le-navigateur-web">Le navigateur web</h3>
<p>À partir d&#39;ici, vous pouvez naviguer sur le site et le parcourir en utilisant les liens à l&#39;adresse <samp>http://localhost:8080/</samp>. Si vous regardez dans la console de votre navigateur (F12 &gt; Console), vous verrez juste que le fichier <samp>http://localhost:8080/javascripts/client.js</samp> n&#39;est pas chargé.</p>
<pre class="prettyprint linenums"><code class="language-txt">GET http://localhost:8080/javascripts/client.js 404 (Not Found)
</code></pre>
<p>Vous constaterez également que changer de page se fait en rechargeant le navigateur pour chaque page.</p>
<p>C&#39;est ici que va entrer en jeu la partie cliente dont le but va être d&#39;exécuter les fichiers isomorphiques contenus dans le dossier <samp>views</samp> mais côté client. C&#39;est grâce à cela que l&#39;on sera capable de changer de page dynamiquement sans rechargement de page grâce aux appels XMLHttpRequest. Le fait de reprendre la main côté client sur la page courante s&#39;appelle l&#39;hydratation. Et en réalité, changer de page revient seulement à faire exécuter le couple <samp>.htm</samp> / <samp>.js</samp> directement dans le navigateur et simuler un changement de page avec <samp>pushState</samp> et l&#39;évènement <samp>popstate</samp>.</p>
<p>Nous allons donc remplir le fichier <samp>client.js</samp>, qui lui, n&#39;est compatible que du côté client :</p>
<pre class="prettyprint linenums"><code class="language-md">isomorphism/
├─ javascripts/
│  ├─ client.js
│  ├─ isomorphic.js
│  ├─ isomorphic.mjs
│  ├─ operation.js
│  └─ operation.mjs
├─ node_molules/
│  ├─ ...
├─ views/
│  ├─ contact.htm
│  ├─ contact.js
│  ├─ error.htm
│  ├─ error.js
│  ├─ index.htm
│  ├─ index.js
│  ├─ overview.htm
│  └─ overview.js
├─ es5.htm
├─ es6.htm
├─ server.js
└─ package.json
└─ package-lock.json
</code></pre>
<p>avec le contenu suivant :</p>
<p><em>javascripts/client.js (<a href="https://github.com/Haeresis/import-export-require-isomorphism/blob/master/javascripts/client.js">code source</a>)</em></p>
<pre class="prettyprint linenums"><code class="language-js">/* Sortir de la portée globale
 * pour notre code personnel afin
 * d&#39;éviter des conflits.
 */
;(function () {
    /* Les pages navigables sont :
     * - `http://localhost:8080/`
     * - `http://localhost:8080/about-us/`
     * - `http://localhost:8080/contact-us/`
     * ... */
    var router = {
        &#39;/&#39;: &#39;index&#39;,
        &#39;/about-us/&#39;: &#39;overview&#39;,
        &#39;/contact-us/&#39;: &#39;contact&#39;
    },

    /* ...et celle envoyant un contenu en erreur sont : `/`
     * `http://localhost:8080/.+/`. */
    file = router[location.pathname] || &#39;error&#39;;

    /* Compatiblilité CommonJS simple. */
    window.module = {};

    /* Gestion de la navigation dans l&#39;historique
     * notamment en cliquant sur le bouton « Retour »
     * du navigateur. */
    window.addEventListener(&#39;popstate&#39;, function () {
        /* Récupération de l&#39;URL après retour en
         * arrière ou en avant dans l&#39;historique. */
        file = router[location.pathname] || &#39;error&#39;;

        /* Puis récupération du bon couple `.htm` / `.js`
         * en provenance de `views`. */
        changeRoute(file, true);
    });

    /* Gestion du changement de page sans rechargement
     * à partir du fichier de destination. `animate` permet
     * de savoir si l&#39;hydratation va être faite avec un effet
     * d&#39;animation ou non. */
    function changeRoute(file, animate) {

        /* Récupération de la vue et du modèle isomorphique.
         * `file` vaut soit `index`, `overview` ou `contact`
         * en fonction de ce que détecte `router` comme
         * page courante. */
        Promise.all([
            /* On fait une demande XMLHttpRequest
             * avec `fetch` qui retourne une promesse
             * puis on transforme le résultat au format texte. */
            fetch(&#39;views/&#39; + file + &#39;.htm&#39;).then(x =&gt; x.text()),
            fetch(&#39;views/&#39; + file + &#39;.js&#39;).then(x =&gt; x.text())
        ]).then(function (result) {

                /* Récupération d&#39;une référence sur le contenu de
                 * la page à hydrater. */
            var layout = document.getElementsByClassName(&#39;layout&#39;),

                /* Récupération des fichiers `.htm` et `.js`
                 * en retour de promesse. */
                view = result[0],
                model = result[1],

                /* Exécution côté client des fichiers
                 * en provenance du serveur. */
                content = eval(model)(view, window);

            /* Ajout du nouveau contenu dans une `div`
             * différente pour faire une animation si
             * demandé. */
            if (animate) {

                /* Ajout de la nouvelle page après la
                 * page courante. */
                layout = layout[layout.length - 1];
                layout.insertAdjacentHTML(&quot;afterend&quot;, &#39;&lt;div class=&quot;layout&quot;&gt;&#39; + content.template + &quot;&lt;/div&gt;&quot;);

                /* Ajout de la classe indiquant
                 * l&#39;animation CSS3 a été exécutée. */
                layout.classList.add(&#39;change&#39;);

                /* Retrait de la page d&#39;où l&#39;on vient
                 * à la fin de l&#39;animation. */
                setTimeout(function () {
                    layout.parentNode.removeChild(layout);
                }, 1000);

            /* Hydratation simple du contenu existant
             * si pas d&#39;animation. */
            } else {
                layout.innerHTML = content.template;
            }

            /* Faire changer la page sans rechargement
             * à tous les liens présents dans la page. */
            Array.prototype.forEach.call(document.getElementsByTagName(&#39;a&#39;), function (a) {

                /* Pour chaque lien, lors du clic. */
                a.addEventListener(&#39;click&#39;, function (e) {

                    /* Pas de changement de page... */
                    e.preventDefault();

                    /* ...mais changement d&#39;URL de la page. */
                    history.pushState(null, &#39;Isomporphic example&#39;, document.getElementsByTagName(&#39;base&#39;)[0].getAttribute(&#39;href&#39;) + a.getAttribute(&#39;href&#39;));

                    /* La page à charger étant choisie par le routeur */
                    /* en se basant sur la nouvelle URL. */
                    file = router[location.pathname] || &#39;error&#39;;

                    /* Changement de page. */
                    changeRoute(file, true);
                });
            });
        });
    }

    /* Hydratation de la page appelant `javascripts/client.js`
     * avec le bon couple `.htm` / `.js` */
    changeRoute(file, false);
}());
</code></pre>
<p>À partir de maintenant, depuis n&#39;importe quelle page affichée en tapant l&#39;URL dans la barre d&#39;adresse, c&#39;est le serveur qui répondra par retour HTTP grâce au fichier <samp>server.js</samp>. En fouillant la source HTML de votre page, vous constaterez que la page est correctement générée et peut donc être indexée par les moteurs de recherche. Une fois sur une page, le fichier <samp>javascripts/client.js</samp> va s&#39;exécuter, hydratant le DOM actuel et permettant aux liens de changer de page sans rechargement, mais en appelant seulement les fragments isomorphiques pour les exécuter sur place (par le navigateur). Le résultat est un changement de page dynamique que vous pouvez apprécier grâce à l&#39;animation de transition CSS mise en place dans <samp>layout.htm</samp>.</p>
<blockquote>
<p>Vous pouvez tester l&#39;hydratation cliente grâce à la mockup que vous trouverez en live grâce au système GitHub Pages : <a href="https://haeresis.github.io/import-export-require-isomorphism/index.html">exemple d&#39;hydratation côté client</a>.</p>
</blockquote>
<h2 id="conclusion">Conclusion</h2>
<p>Vous en savez plus maintenant sur les mécanismes d&#39;utilisation des Modules ECMAScript ou CommonJS / Node.js pour créer des applications web isomorphiques !</p>
<p>Bien entendu, le code actuel est loin d&#39;être pratique pour la maintenance et n&#39;est ni optimisé pour l&#39;hydratation cliente (actuellement on jette le DOM et on le recrée au lieu de réellement l&#39;hydrater), ni optimisé pour la charge serveur (on pourrait utiliser du cache côté serveur pour ne faire générer les rendus d&#39;une page qu&#39;une fois toutes les X secondes, minutes ou même heures en fonction des zones statiques ou dynamiques des pages).</p>
<p>On se demandera comment gérer plus simplement l&#39;injection de texte dans les templates plutôt que de manipuler le DOM, comment faire fonctionner du code avec des évènements JavaScript côté serveur ? Si c&#39;est possible ? Comment mélanger différents types de modules ?</p>
<p>Toutes ces solutions sont adressées plus ou moins simplement avec l&#39;utilisation de l&#39;écosystème Vue (par ex. <a href="https://webpack.js.org/">webpack</a> pour la partie cliente, <a href="https://fr.nuxtjs.org/">Nuxt</a> pour la partie serveur et <a href="https://fr.vuejs.org/v2/guide/">Vue.js</a> pour la partie isomorphique).</p>
<p>Pour ma part, pour passer à l&#39;étape supérieure, tout en comprenant ce que vous faites (pour de l&#39;isomorphisme aux petits oignons), je vous propose de vous tourner vers le couple <a href="https://fr.vuejs.org/">Vue</a> / <a href="https://node-atlas.js.org/">NodeAtlas</a> (un framework basé sur <a href="http://expressjs.com/fr/">Express</a> et <a href="https://socket.io/">Socket.io</a>). Vue et NodeAtlas vous permettront de réaliser des sites réactifs et isomorphiques facilement et progressivement. Essayez avec l&#39;article <a href="https://blog.lesieur.name/ssr-ou-du-rendu-cote-serveur-a-l-aide-de-javascript-avec-vue-et-nodeatlas/">Vue + NodeAtlas : de l&#39;art du SSR ou Rendu Côte Serveur avec JavaScript</a> qui vous expliquera les bases.</p>
<p>Et cerise sur le gâteau, les documentations de <a href="https://fr.vuejs.org/">Vue</a>, <a href="https://fr.nuxtjs.org/">Nuxt</a> et <a href="https://node-atlas.js.org/">NodeAtlas</a> sont toutes en français, traduites par votre serviteur !</p>
<blockquote>
<p>Vous pouvez obtenir l&#39;intégralité des sources de cette article sur ce dépôt GitHub : <a href="https://github.com/Haeresis/import-export-require-isomorphism/">Haeresis/import-export-require-isomorphism</a>.</p>
</blockquote>
]]></description>
            <link>http://localhost:7776/modules-ecmascript-natif-sans-commonjs-systemjs-babel-webpack/</link>
            <guid isPermaLink="false">5a3687f60e5e2c630c6df78f</guid>
            <category><![CDATA[Back-end]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[Node.js]]></category>
            <category><![CDATA[ECMAScript]]></category>
            <category><![CDATA[Vanilla JS]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[JavaScript]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Sun, 17 Dec 2017 15:06:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Comment gérer les raccourcis clavier en JavaScript]]></title>
            <description><![CDATA[<p>Nous allons voir dans cet article comment créer rapidement un système permettant de surveiller si une touche du clavier est enfoncée lors de l&#39;exécution d&#39;une action dans votre navigateur ou mieux, si une série de touche est enfoncée pour autoriser / lancer l&#39;exécution d&#39;une action lors de la pression, par exemple, sur « Ctrl + Alt + E ».</p>
<figure>
    <img width="560" height="458" src="media/images/upload/ctrlalte.jpg" alt="Ctrl + Alt + E" style="max-width: 100%;height: auto">
    <figcaption><a href="https://s-media-cache-ak0.pinimg.com/736x/5e/11/0f/5e110f0cda1acb3fdba06b38aab93586.jpg">Image originale ici</a></figcaption>
</figure>

<p>Et comme toujours, on va devoir jouer avec un peu de JavaScript ! Si vous n&#39;avez pas trop le temps de jouer, <a href="https://blog.lesieur.name/comment-gerer-les-raccourcis-clavier-en-javascript/#avec-jquery">le code qui vous intéresse probablement se trouve ici</a></p>
<h2 id="détecter-quune-ou-plusieurs-touches-sont-enfoncées">Détecter qu&#39;une ou plusieurs touches sont enfoncées</h2>
<p>Nous allons implémenter dans cette partie la fonctionnalité tant convoitée, mais de différentes manières. Cela vous ferra un exercice JavaScript intéressant. Par exemple sur cette page, appuyez sur « Ctrl + Alt + E ».</p>
<h3 id="avec-les-méthodes-javascript-en-ligne-onkeydown-et-onkeyup">Avec les méthodes JavaScript en ligne <samp>onkeydown</samp> et <samp>onkeyup</samp></h3>
<p>Pour les anciens, vous les connaissez peut-être pour les avoir croisées au détour d&#39;un attribut HTML comme ici : <samp>&lt;input type=&quot;text&quot; onkeydown=&quot;doSomething()&quot; /&gt;</samp>. Ce qu&#39;il faut retenir de la méthode en ligne pour les évènements, c&#39;est qu&#39;elle ne garde que la dernière affectation de code, et qu&#39;elle écrase toutes celles associées précédemment. Voyons plus bas cette implémentation.</p>
<blockquote>
<p><a href="https://codepen.io/Haeresis/pen/KwvOPB">Tester cet exemple de code en live sur cette page</a>.</p>
</blockquote>
<pre class="prettyprint linenums"><code class="language-js">/*
 * Nous sommes dans le scope global,
 * aussi l&#39;objet `keys` est accessible partout
 * dans le code à travers tous les fichiers JavaScript.
*/
var keys = {};

/*
 * Étant dans le code global,
 * `window.onkeydown` est identique à `this.onkeydown`
 * lui même identique à `onkeydown`.
 * On associe ci-dessous la même fonction lorsqu&#39;une
 * touche est appuyée, et lorsqu&#39;une touche est relachée.
*/
onkeydown = onkeyup = function (e) {

    /*
     * Si `e` n&#39;existe pas,
     * nous somme probablement dans un vieux IE.
     * On affecte alors `event` à `e`.
     */
    e = e || event;

    /*
     * Si `e.which` n&#39;existe pas,
     * On affecte alors l&#39;alternative `e.keyCode` à `e.which`.
     */
    e.which = e.which || e.keyCode;

    /*
     * Si la fonction courante est executée,
     * quand une touche est enfoncée,
     * `e.type === &#39;keydown&#39;` renverra `true`
     * sinon elle renverra `false`.
     * Il suffit alors d&#39;assigner chaque état
     * dans le tableau `keys` pour chaque
     * touche `e.keyCode`.
     */
    keys[e.which] = e.type === &#39;keydown&#39;;

    /*
     * Cette zone sera exécutée lorsque les touches
     * Ctrl (17), Alt (18) et E (69)
     * seront enfoncée en même temps
     * car l&#39;objet `keys` vaudra alors :
     * {
     *  17: true,
     *  18: true,
     *  69: true
     * }
       */
    if (keys[17] &amp;&amp; keys[18] &amp;&amp; keys[69]) {

      /*
       * Affichera dans la console (F12, onglet console)
       * le texte « Ctrl + Alt + E ».
       */
      console.log(&#39;Ctrl + Alt + E&#39;);
    }
}

/*
 * Si l&#39;on clique dans le navigateur...
 */
onclick = function () {

    /*
     * ...alors que les touches
     * Ctrl (17), Alt (16) et E (69)
     * sont appuyées...
     */
    if (keys[17] &amp;&amp; keys[16] &amp;&amp; keys[69]) {

        /*
         * ...on affichera dans la console
         * le texte « Ctrl + Alt + E ».
         */
        console.log(&#39;Ctrl + Shift + E&#39;);
    }
}
</code></pre>
<h3 id="avec-les-écouteurs-dévènement-javascript">Avec les écouteurs d&#39;évènement JavaScript</h3>
<p>Étant donné que nous accrochons nos évènements à l&#39;objet global <samp>window</samp>, le mieux est d&#39;abonner les évènements à des écouteurs plutôt que d&#39;utiliser les méthodes en ligne, comme cela, nous pourrons par la suite abonner d&#39;autres fonctions.</p>
<p>Cela se fait avec <samp>addEventListener</samp> (ou <samp>attachEvent</samp> sur les anciens IE).</p>
<blockquote>
<p><a href="https://codepen.io/Haeresis/pen/LEjwWN">Tester cet exemple de code en live sur cette page</a>.</p>
</blockquote>
<pre class="prettyprint linenums"><code class="language-js">var keys = {};

/*
 * Mise du code appelé en commun dans une
 * fonction que nous allons
 * abonnée à un écouteur d&#39;évènement.
 */
function trackMultipleKeyStroke (e) {
    e = e || event;
    e.which = e.which || e.keyCode;

    keys[e.which] = e.type === &#39;keydown&#39;;

    /*
     * Cette partie constitue le code exécuté quand
     * Ctrl (17), Alt (18) et E (69)
     * sont enfoncées.
     */
    if (keys[17] &amp;&amp; keys[18] &amp;&amp; keys[69]) {
        console.log(&#39;Ctrl + Alt + E&#39;);
    }
}

/*
 * Fonction de rétro-compatibilité pour
 * les navigateurs Internet Explorer.
 * Elle marchera dans tous les navigateurs
 * et demandera qui s&#39;abonne, à quel évènement
 * et ce qu&#39;il se passe quand l&#39;évènement est
 * appelé / levé.
 */
function addEvent(element, event, func) {

    /*
     * Avons nous à faire à un vieil Internet Explorer ?
     */
    if (element.attachEvent) {

        /*
         * Abonnons nous alors comme Internet Explorer le propose.
         */
        return element.attachEvent(&#39;on&#39; + event, func);
    } else {

          /*
           * Nous nous abonnons comme la spécification ECMAScript le propose.
           */
        return element.addEventListener(event, func, false);
      }
}

/*
 * Appel de la fonction de rétro-compatibilité
 * que nous venons de créer pour abonner `window`
 * au évènement `keydown` et `keyup`
 */
addEvent(window, &quot;keydown&quot;, trackMultipleKeyStroke);
addEvent(window, &quot;keyup&quot;, trackMultipleKeyStroke);

/*
 * Cette partie constitue le code exécuté quand
 * on clique dans la page...
 */
addEvent(window, &quot;click&quot;, function () {

    /*
     * ...si Ctrl (17), Shift (16) et E (69)
     * sont enfoncées.
     */
    if (keys[17] &amp;&amp; keys[16] &amp;&amp; keys[69]) {
        console.log(&#39;Ctrl + Shift + E&#39;);
    }
});
</code></pre>
<h3 id="avec-jquery">Avec jQuery</h3>
<p>Comme toujours, pour ne pas vous soucier de la compatibilité et écrire moins de code, vous pouvez faire appel à la bibliothèque <a href="https://jquery.com/">jQuery</a>. Comme le code proposé ci-dessous.</p>
<blockquote>
<p><a href="https://codepen.io/Haeresis/pen/XJavgr">Tester cet exemple de code en live sur cette page</a>.</p>
</blockquote>
<pre class="prettyprint linenums"><code class="language-js">var keys = {};

$(window).on(&quot;keyup keydown&quot;, function (e) {
    keys[e.which] = e.type === &#39;keydown&#39;;

    /*
     * Cette partie constitue le code exécuté quand
     * Ctrl (17), Alt (18) et E (69)
     * sont enfoncées.
     */
    if (keys[17] &amp;&amp; keys[18] &amp;&amp; keys[69]) {
        console.log(&#39;Ctrl + Alt + E&#39;);
    }

    /*
     * Cette partie constitue le code exécuté quand
     * on clique dans la page...
     */
}).click(function () {

    /*
     * ...si Ctrl (17), Shift (16) et E (69)
     * sont enfoncées.
     */
    if (keys[17] &amp;&amp; keys[16] &amp;&amp; keys[69]) {
        console.log(&#39;Ctrl + Shift + E&#39;);
    }
});
</code></pre>
<h2 id="4-points-à-savoir">4 points à savoir</h2>
<p>Il y a quelques points à savoir pour ensuite utiliser ces raccourcis clavier en toutes circonstances.</p>
<ol>
<li><h3 id="perte-de-focus">Perte de focus</h3>
<p>Quand vous levez une popup via <samp>alert</samp> ou plus globalement que vous perdez le focus, l&#39;évènement <samp>keyup</samp> n&#39;est pas levé ce qui laisse penser au navigateur que vous maintenez encore les touches alors que ce n&#39;est peut-être plus le cas. Pour remédier à cela, l&#39;astuce est de remettre à vide l&#39;objet global <samp>keys</samp>.</p>
<blockquote>
<p>Ainsi le code ci-dessous produit le bug : <em><samp>voyez-plutôt</samp></em></p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">var keys = {};
$(window).on(&quot;keyup keydown&quot;, function (e) {
 e = e || event;
 keys[e.keyCode] = e.type === &#39;keydown&#39;;
}).click(function () {
 /*
  * Quand vous ré-appuierez sur une des trois touches de la combinaison,
  * même sans appuyer sur les autres touches,
  * l&#39;alerte se relancera car elle empêche les valeurs de l&#39;objet
  * contenant les touches de repasser à `false` quand vous les relâchés.
  */
 if (keys[17] &amp;&amp; keys[16] &amp;&amp; keys[69]) {
     alert(&#39;Ctrl + Shift + E&#39;);
 }
});
</code></pre>
</blockquote>
<p>La solution est donc de vider toutes les valeurs pour qu&#39;elles soient interprétées comme
<samp>false</samp> après l&#39;appel de la fonction faisant perdre le focus.</p>
<blockquote>
<p>Ainsi le code ci-dessous résout le bug : <strong><samp>voyez-plutôt</samp></strong></p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">var keys = {};
$(window).on(&quot;keyup keydown&quot;, function (e) {
 e = e || event;
 keys[e.keyCode] = e.type === &#39;keydown&#39;;
}).click(function () {
 if (keys[17] &amp;&amp; keys[16] &amp;&amp; keys[69]) {
     alert(&#39;Ctrl + Shift + E&#39;);
</code></pre>
</blockquote>
<pre class="prettyprint linenums"><code> /*
  * Remet les valeurs des touches à `false` en les vidants.
  */
 keys = {};
</code></pre><p> }
});</p>
<pre class="prettyprint linenums"><code>
</code></pre></li>
<li><h3 id="plusieurs-écoutes-bon-ordre">Plusieurs écoutes, bon ordre</h3>
<p>Si vous souhaiter lister vos raccourcis clavier, il faut lister vos combinaisons de touches de la séquence la plus longue à la séquence la plus courte avec des <samp>else if</samp> sinon vous n’arriverez jamais à faire fonctionner les combinaisons les plus longues.</p>
<blockquote>
<p>Ci-dessous la seconde combinaison ne sera jamais appelée : <em><samp>voyez-plutôt</samp></em></p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">if (keys[17] &amp;&amp; keys[69]) {
 console.log(&#39;Ctrl + E&#39;);
} else if (keys[17] &amp;&amp; keys[16] &amp;&amp; keys[69]) {
 console.log(&#39;Ctrl + Shift + E&#39;);
}
</code></pre>
</blockquote>
<p>La bonne pratique est donc la suivante.</p>
<blockquote>
<p>Ci-dessous la seconde combinaison fonctionnera : <strong><samp>voyez-plutôt</samp></strong></p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">if (keys[17] &amp;&amp; keys[16] &amp;&amp; keys[69]) {
 console.log(&#39;Ctrl + Shift + E&#39;);
} else if (keys[17] &amp;&amp; keys[69]) {
 console.log(&#39;Ctrl + E&#39;);
}
</code></pre>
</blockquote>
</li>
<li><h3 id="prendre-la-main-sur-les-raccourcis-du-navigateur">Prendre la main sur les raccourcis du navigateur</h3>
<p>Parfois, votre combinaison de touche ouvre une action par défaut programmée par le navigateur. Si vous souhaitez l&#39;annuler, faites comme suit :</p>
<pre class="prettyprint linenums"><code class="language-js">var keys = {};
$(window).on(&quot;keyup keydown&quot;, function (e) {
 keys[e.keyCode] = e.type === &#39;keydown&#39;;

 if (keys[18] &amp;&amp; keys[78]) {

     /*
      * Normalement, une barre s&#39;ouvre sur Firefox,
      * car « Alt + N » est le raccourci utilisé pour cela.
      * Mais en ajoutant `e.preventDefault()` c&#39;est bon !
      */
     e.preventDefault();
     console.log(&#39;Alt + N&#39;);
 }
});
</code></pre>
</li>
<li><h3 id="certains-raccourcis-bloqués">Certains raccourcis bloqués</h3>
<p>Parfois, votre combinaison de touche est impossible à suchargée. C&#39;est le cas par exemple pour la combinaisons « Ctrl + N », « Ctrl + W » ou encore « Ctrl + T » :</p>
<pre class="prettyprint linenums"><code class="language-js">var keys = {};
$(window).on(&quot;keyup keydown&quot;, function (e) {
 keys[e.keyCode] = e.type === &#39;keydown&#39;;

 if (keys[17] &amp;&amp; keys[84]) {

     e.preventDefault();
     /*
      * Normalement, `e.preventDefault()` empèche le comportement standard, mais pas pour « Ctrl + T » qui ouvrira un nouvel onglet.
      */
     console.log(&#39;Ctrl + T&#39;); // Ne marchera pas, et un nouvel onglet s&#39;ouvrira.
 }
});
</code></pre>
</li>
</ol>
<h2 id="les-char-codes-ou-key-codes">Les Char Codes ou Key Codes</h2>
<p>Vous trouverez <a href="http://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes">la liste des clés</a> à mettre dans votre objet <samp>keys</samp> sur <a href="http://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes">la page suivante</a>.</p>
]]></description>
            <link>http://localhost:7776/comment-gerer-les-raccourcis-clavier-en-javascript/</link>
            <guid isPermaLink="false">54cc92c2a36eedac79a3a599</guid>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Astuces]]></category>
            <category><![CDATA[jQuery]]></category>
            <category><![CDATA[Ressources]]></category>
            <category><![CDATA[JavaScript]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Mon, 06 Nov 2017 14:30:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Mais pourquoi devrais-je abandonner jQuery pour Angular, React... ou Vue.js !?]]></title>
            <description><![CDATA[<p>J&#39;ai longtemps utilisé <a href="http://jquery.com/" title="Do more, write less">jQuery</a>. Puis <a href="https://blog.lesieur.name/vanilla-js-france/" title="Vanilla JS est µn fr@m€w#rk rapide, léger et multi-plateforme pour créer d&#39;incroyables et puissantes applications JavaScript">Vanilla JS</a> comme on appelle si élégamment le JavaScript implémenté nativement. Je surveillais d&#39;un œil les <a href="http://knockoutjs.com/" title="Symplify JavaScript dynamic UIs with Model-View-View Model (MVVM) pattern">Knockout</a> et compagnie sans jamais réellement m&#39;y investir. Ce fut également le cas avec <a href="https://angularjs.org/" title="Superheroic JavaScript MVW Framework">AngularJS</a>, tellement super-héroïque et sur toutes les lèvres ! Du MVVM paraissait t-il. Un nom barbare à se retaper alors que je terminais tout juste de comprendre en profondeur les tenants et aboutissants d&#39;une architecture MVC(2). Non merci.</p>
<figure>
    <a href="media/images/upload/hqdefault.jpg"><img class="openable" src="media/images/upload/hqdefault.jpg" alt="jQuery vs. Vue" width="1296" height="607" style="width: 100%;height: auto;border:1px solid #ccc"></a>
    <figcaption>jQuery vs. Vue</figcaption>
</figure>

<p>Autant vous le dire : pour ma part je ne jurais que par <a href="https://blog.lesieur.name/conventions-html-css-js-et-architecture-front-end/">la séparation des rôles</a>. Je ne voulais pas retourner à du HTML mélangeant de la structure et du comportement, avec des attributs invalides W3C et un code source à chialer. Ça m&#39;a bien conforté dans l&#39;idée que <a href="http://jquery.com/" title="Do more, write less">jQuery</a> ou <a href="https://blog.lesieur.name/vanilla-js-france/" title="Vanilla JS est µn fr@m€w#rk rapide, léger et multi-plateforme pour créer d&#39;incroyables et puissantes applications JavaScript">Vanilla JS</a> restaient des valeurs sûr !</p>
<p>Mais voilà. J&#39;ai fini par investiguer ce <a href="https://angularjs.org/" title="Superheroic JavaScript MVW Framework">AngularJS</a>, à force de le voir passer. Il s&#39;est avéré que <a href="https://blog.lesieur.name/utiliser-angularjs-en-respectant-les-recommandations-w3c-et-seo/">les principaux défauts que je lui trouvais pouvaient se régler avec un peu de rigueur</a>. OK ? Mais à quoi bon tant d&#39;efforts pour utiliser l&#39;outil à la mode, là où <a href="http://jquery.com/" title="Do more, write less">jQuery</a> à toujours fait le job ?</p>
<p>Même si j&#39;ai partiellement compris l&#39;utilité d&#39;un tel changement grâce à mes études de surface sur <a href="http://aurelia.io/" title="Aurelia is the most powerful, flexible and forward-looking JavaScript client framework in the world">Aurelia</a>, <a href="https://reactjs.org/" title="A JavaScript library for building user interfaces">React</a> puis <a href="https://angular.io/" title="One framework, mobile and desktop">Angular</a>, il semble que j&#39;ai trouvé la réponse définitive à la bonne raison d&#39;abandonner <a href="http://jquery.com/" title="Do more, write less">jQuery</a> grâce à l&#39;étude de <a href="https://fr.vuejs.org/" title="Le Framework JavaScript Évolutif">Vue.js</a>. Et en une simple après midi de lecture ! Je ne jure plus que par cette bibliothèque à présent !</p>
<p>Pour faire simple : <a href="https://codepen.io/Haeresis/pen/ryavOd">jQuery pilote par le DOM</a>, là où <a href="https://codepen.io/Haeresis/pen/JWovjm">Vue pilote par les données</a> ! Et ça, ça change tout.</p>
<h2 id="au-commencement-il-y-avait-jquery">Au commencement, il y avait jQuery</h2>
<p>J&#39;ai réellement adoré <a href="http://jquery.com/" title="Do more, write less">jQuery</a> ! C&#39;est grâce à cette bibliothèque JavaScript que je suis aujourd&#39;hui un développeur full-stack JavaScript passionné. Si on remonte à l&#39;époque ou je développais des sites web <a href="http://www.compilation-of-ff7.com/">pour le plaisir</a> en <a href="http://www.communaute-avatar.fr/">total amateur</a>, je ne jurais que par <a href="http://jquery.com/" title="Do more, write less">jQuery</a> parmi mes fichiers PHP et mes appels <samp>$.ajax</samp>. Pourtant, j&#39;ai délaissé PHP qui commençait à se parer d&#39;une syntaxe objet sérieuse au profit d&#39;une spécialisation plus front-end. J&#39;étais fasciné par la souplesse de <a href="http://jquery.com/" title="Do more, write less">jQuery</a>.</p>
<figure>
    <a href="media/images/upload/1ajapg.jpg"><img class="openable" src="media/images/upload/1ajapg.jpg" alt="Au commencement, il y avait jQuery" width="1200" height="680" style="width: 100%;height: auto;border:1px solid #ccc"></a>
    <figcaption>Au commencement, il y avait jQuery</figcaption>
</figure>

<p>Comment était t-il possible que <a href="http://jquery.com/" title="Do more, write less">jQuery</a> soit fait... en JavaScript ?! Mon seul rapport au JavaScript à l&#39;époque c&#39;était des scripts « taxés » sur le site Éditeur JavaScript. Ils étaient mis à ma sauce avec des heures de « bidouilles » pour éviter les différentes erreurs entres navigateurs. Fatiguant. Le JavaScript était définitivement un langage « dégueulasse » que je détestais. Mais ce <a href="http://jquery.com/" title="Do more, write less">jQuery</a> était simple, élégant, rapide à écrire, simple, séparé du HTML, avec des milliers de plugins, etc. Et, je ne sais pas si je l&#39;ai dit, mais simple aussi.</p>
<p>Avec HTML pour la structure, CSS pour l&#39;habillage, et <a href="http://jquery.com/" title="Do more, write less">jQuery</a> pour l’interaction, j&#39;avais trouvé là un fabuleux moyen de développer en séparant les différents rôles sans jamais faire de mélange afin, qu&#39;<a href="https://blog.lesieur.name/conventions-html-et-css-orientes-composants/">avec un même HTML je puisse sortir des interfaces complètement différentes</a>.</p>
<p>Bien sur, pour me tenir à niveau côté back-end, j&#39;ai étudié la programmation orienté objet avec Java (à l&#39;école) et C# (en entreprise). Ce sont des langages que j&#39;ai respecté pour leurs rigueur, complexité, et la philosophie objet de mise en œuvre qu&#39;ils portaient. Mais <a href="http://jquery.com/" title="Do more, write less">jQuery</a> était bien trop évolutif, versatile, élégant et simple pour ne pas rester mon chouchou. Si je devais faire quelque chose de solide, je le pouvais. Mais contrairement aux langages back-end étudiés ses dernières années, pour quelque chose de simple, <a href="http://jquery.com/" title="Do more, write less">jQuery</a> répondait également présent !</p>
<p><a href="http://jquery.com/" title="Do more, write less">jQuery</a> était devenu tellement confortable, qu&#39;il était difficile de s&#39;en détacher, et même d&#39;imaginer que d&#39;autres bibliothèques puissent faire mieux.</p>
<p>Mais cette question me chagrinait toujours... Comment une bibliothèque qui m&#39;avait définitivement détournée de PHP, puis C# et Java pouvait avoir été développée... en JavaScript. Ce langage que je détestais !</p>
<h2 id="le-javascript-cest-pas-automatique-">Le JavaScript, c&#39;est pas automatique !</h2>
<p>J&#39;ai donc retroussé mes manches pour réellement comprendre les fondamentaux du JavaScript. Je dirais que la clé de mon côté a été de comprendre toute la portée du caractère asynchrone de se langage et la possibilité de... passer des fonctions en paramètre ?! WTF. Je fais quelque chose, et je passe également la fonction qui devra être appelée quand ce quelque chose sera fini, indépendamment du temps que ce quelque chose va prendre. Incroyable, ce n&#39;était donc pas <a href="http://jquery.com/" title="Do more, write less">jQuery</a> qui avait « inventé » ça. En fait, ce mécanisme était possible grâce <a href="https://blog.lesieur.name/les-fermetures/">aux fermetures</a> et le fait que les <a href="https://blog.lesieur.name/les-fonctions/">fonctions puissent se passer elles-mêmes dans des fonctions</a> venait du fait que les fonctions étaient... des objets ?! Et ce pauvre langage souffrant de ne pas être typé, sans possibilité de caster les valeurs était <a href="https://blog.lesieur.name/difference-entre-type-null-et-type-undefined-en-javascript/">en fait typé faiblement et utilisait la coercition</a> pour « automatiquement » changer de type au besoin...</p>
<figure>
    <a href="media/images/upload/i-know-javascript.jpg"><img class="openable" src="media/images/upload/i-know-javascript.jpg" alt="Woah, je connais le JavaScript !" width="400" height="400" style="width: 100%;height: auto;border:1px solid #ccc;max-width: 400px"></a>
    <figcaption>Woah, je connais le JavaScript !</figcaption>
</figure>

<p>Le JavaScript était définitivement plus intéressant qu&#39;au premier abord et mélangeait énormément de concepts étudiés dans tous les précédents langages que j&#39;avais pu étudier. Enfin, en étudiant l&#39;API DOM native implémentée dans tous les navigateurs récents, j&#39;en suis même venu à la conclusion qu&#39;il était tepms de dire au revoir à <a href="http://jquery.com/" title="Do more, write less">jQuery</a>. Cette trousse à outil fabuleuse n&#39;était en réalité qu&#39;un tremplin pour aborder le JavaScript sous le bon angle et plus facilement. Il suffisait simplement d&#39;en avoir le courage.</p>
<p>J&#39;ai donc ouvert les bras à <a href="https://blog.lesieur.name/vanilla-js-france/" title="Vanilla JS est µn fr@m€w#rk rapide, léger et multi-plateforme pour créer d&#39;incroyables et puissantes applications JavaScript">Vanilla JS</a>, et me suis dès lors convaincu que du JavaScript natif, avec de petites bibliothèques et polyfills utilisées avec parcimonie étaient la clé de mon salut.</p>
<p>Autant vous dire qu&#39;à cette époque, avec une telle révélation, c&#39;était mal parti pour que je me lance dans <a href="https://angularjs.org/" title="Superheroic JavaScript MVW Framework">AngularJS</a> !</p>
<h2 id="angularjs-nodejs-react-angular-tous-dans-le-même-panier-">AngularJS, Node.js, React, Angular... tous dans le même panier ?</h2>
<p>Le back-end me manquait ! Je dépendais de mes collègues experts en C# pour mener à bien un site complet. Mes petites excursions avec <a href="https://codeigniter.com/" title="CodeIgniter is a powerful PHP framework">CodeIgniter</a> ou <a href="https://laravel.com/" title="Love beautiful code? We do too">Laravel</a> pour refaire un peu de PHP m&#39;ont vraiment fait comprendre à quel point la « magie » JavaScript manquait aux autres langages. Mais il paraissait qu&#39;on pouvait faire du JavaScript... côté serveur o_O !? Alors là, il ne m&#39;en fallait pas plus pour sauter sur <a href="https://nodejs.org/en/" title="Node.js® is a JavaScript runtime built on Chrome&#39;s V8 JavaScript engine">Node.js</a> alors que celui ci n&#39;affichait encore qu&#39;une version 0.1x.x ! Obligé de nager parmi les différentes ressources attribuées aux différentes versions que je trouvais, il a été difficile au départ de distinguer ce qui appartenait réellement au cœur de <a href="https://nodejs.org/en/" title="Node.js® is a JavaScript runtime built on Chrome&#39;s V8 JavaScript engine">Node.js</a> et à ces packages npm comme <a href="http://expressjs.com/fr/" title="Infrastructure Web minimaliste, souple et rapide pour Node.js">Express</a> ou encore même aux middlewares d&#39;<a href="http://expressjs.com/fr/" title="Infrastructure Web minimaliste, souple et rapide pour Node.js">Express</a> en lui-même.</p>
<p>La courbe d&#39;apprentissage, même si elle n&#39;a pas été si compliquée avec mon background JavaScript m&#39;a fait pensé qu&#39;il fallait un petit coup de pousse à <a href="https://nodejs.org/en/" title="Node.js® is a JavaScript runtime built on Chrome&#39;s V8 JavaScript engine">Node.js</a> pour permettre aux développeurs front-end « coincés » avec <a href="http://jquery.com/" title="Do more, write less">jQuery</a> ou aux développeurs back-end PHP se méfiant de JavaScript de se lancer. C&#39;est pourquoi j&#39;ai développé le framework <a href="https://node-atlas.js.org/" title="Le Framework JavaScript Serveur Évolutif">NodeAtlas</a> qui, contrairement à ses concurrents se voulait évolutif dans sa prise en main par itération progressive et <a href="https://blog.lesieur.name/des-sites-web-nodejs-pour-les-debutants-en-javascript-avec-nodeatlas/">très proche d&#39;une architecture PHP dans son approche</a>. Bien entendu, en creusant le framework au fur et à mesure de ses besoin, il est possible <a href="https://blog.lesieur.name/routage-strict-avec-vue-router-et-ssr/">d&#39;embrasser pleinement Node.js et ses modules</a>. Il est possible d&#39;obtenir un site multilingue costaud pour la production en un tour de main, sans tous ses gros mots de l&#39;écosystème <a href="https://nodejs.org/en/" title="Node.js® is a JavaScript runtime built on Chrome&#39;s V8 JavaScript engine">Node.js</a>, <a href="https://angular.io/" title="One framework, mobile and desktop">Angular</a> ou <a href="https://reactjs.org/" title="A JavaScript library for building user interfaces">React</a> que sont gulp, grunt, Browserify, webpack, Babel, Bower, etc.</p>
<figure>
    <a href="media/images/upload/angular_js_2.jpg"><img class="openable" src="media/images/upload/angular_js_2.jpg" alt="Angular ou React ? Un faux choix ?" width="500" height="641" style="width: 100%;height: auto;border:1px solid #ccc; max-width: 500px"></a>
    <figcaption>Angular ou React ? Un faux choix ?</figcaption>
</figure>

<p>Au côté de <a href="https://angularjs.org/" title="Superheroic JavaScript MVW Framework">AngularJS</a> qui se targuait de bientôt devenir <a href="https://angular.io/" title="One framework, mobile and desktop">Angular</a> avec une refonte tellement profonde que mêmes sa maman ne le reconnaissait plus, est arrivé React. React permettant de générer du contenu serveur à l&#39;aide de, je cite, « son DOM virtuel ». Mais qu&#39;est ce que c&#39;est que ce délire ? React, c&#39;était donc un concurrent de <a href="https://node-atlas.js.org/" title="Le Framework JavaScript Serveur Évolutif">NodeAtlas</a> ? Pour faire du JavaScript côté serveur ? Une alternative à <a href="https://nodejs.org/en/" title="Node.js® is a JavaScript runtime built on Chrome&#39;s V8 JavaScript engine">Node.js</a> peut-être ? C&#39;est avec ça qu&#39;était développé Facebook ? Mais c&#39;était pas une alternative à Angular ? Pourquoi, il y a que du JavaScript et pas de HTML dans les exemples ? C&#39;est quoi ça : JSX ? Plus je creusais l&#39;écosystème JavaScript, et moins il semblait que j&#39;en savais à propos de lui... qu&#39;elle complexité ! J&#39;étais bien content d&#39;offrir ma petite porte d&#39;entrée <a href="https://node-atlas.js.org/" title="Le Framework JavaScript Serveur Évolutif">NodeAtlas</a>, certe. Je me demandais bien si, noyé dans tout ce JavaScript côté client, et côté serveur, et côté mobile, et côté révolution, j&#39;allais m&#39;en sortir. Le petit temps bien au chaud avec mes jCertitudes était bien loin, et ça c&#39;était effrayant.</p>
<p>L&#39;écosystème JavaScript a explosé, ma compréhension de cette écosystème avec. Maintenant plus personne n&#39;embauche d&#39;expert JavaScript. Les offres se contentent d&#39;annoncer qu&#39;on a besoin d&#39;un développeur JavaScript travaillant sur tel framework. Au vu des <a href="https://www.linkedin.com/pulse/d%C3%A9veloppeurs-marketeurs-respectez-les-noms-des-bruno-lesieur/">NodeJS, ReactJS, NodeJS, AngularJS ou VueJS</a>, y a t-il encore du monde qui sait de quoi il parle ? Comment les non-experts le pourraient t-ils si même les développeurs JavaScript sont perdus.</p>
<p>Mais après plusieurs recroisement et une veille rigoureuse, finalement ce n&#39;est pas si effrayant. <a href="https://blog.lesieur.name/pourquoi-vous-ne-comprenez-rien-au-javascript/">Demandez aux experts</a> !</p>
<h2 id="vue--je-lavais-pas-vue-">Vue ? Je l&#39;avais pas Vue !</h2>
<p>Au côté de <a href="https://angularjs.org/" title="Superheroic JavaScript MVW Framework">AngularJS</a>, il y avait discrètement un <a href="https://fr.vuejs.org/" title="Le Framework JavaScript Évolutif">Vue.js</a>. Sans prétention, capable de rivaliser avec lui. Simplicité, élégance, il se démarquait avec une volonté d&#39;être utilisé de manière évolutive et versatile. Son API était surtout si bien définie, que changer sa mécanique interne en profondeur n&#39;a pas affecté son utilisation externe lors de son passage de Vue 1.0 à Vue 2.0, le dotant, entre autre, d&#39;un DOM virtuel. <a href="https://angularjs.org/" title="Superheroic JavaScript MVW Framework">AngularJS</a>, lui, à perdu tout le monde et forcé le commun des mortels à se mettre à TypeScript (même si pas obligatoire... bon courage sans).</p>
<figure>
    <a href="media/images/upload/vue-joke-qui-a-vu-verra.jpg"><img class="openable" src="media/images/upload/vue-joke-qui-a-vu-verra.jpg" alt="Vu, qui a vu, verra. Vu ?" width="480" height="282" style="width: 100%;height: auto;border:1px solid #ccc; max-width: 480px"></a>
    <figcaption>Vu, qui a vu, verra. Vu ?</figcaption>
</figure>

<p>Quand <a href="https://reactjs.org/" title="A JavaScript library for building user interfaces">React</a> est arrivé avec son rendu côté serveur grâce à son DOM virtuel et l&#39;utilisation de JSX (« même si pas obligatoire... bon courage sans » bis), <a href="https://fr.vuejs.org/" title="Le Framework JavaScript Évolutif">Vue</a> était encore là, pouvant également faire du rendu côté serveur. En fait <a href="https://fr.vuejs.org/" title="Le Framework JavaScript Évolutif">Vue</a> est là depuis le début et est tellement bien pensé qu&#39;il n&#39;a quasiment pas changé de l&#39;extérieur. Pourtant, en terme de performance, de poids et de courbe d&#39;apprentissage, il surpasse <a href="https://angular.io/" title="One framework, mobile and desktop">Angular</a> et <a href="https://reactjs.org/" title="A JavaScript library for building user interfaces">React</a> ! Là où les poids lourd Google et Facebook se livrent une guerre, Vue.js se faufile, mené par une communauté JavaScript indépendante.</p>
<p><a href="https://fr.vuejs.org/" title="Le Framework JavaScript Évolutif">Vue</a> est tellement évolutif et simple, que vous pouvez l&#39;utiliser aussi simplement que vous l&#39;utiliseriez <a href="http://jquery.com/" title="Do more, write less">jQuery</a> ! Et ce n&#39;est pas une astuce. Vue est conçu pour être utilisé aussi bien avec parcimonie sur un DOM client, quelque interfaces et formulaires que pour gérer lui-même un DOM complet côté client et serveur et une navigation complète !</p>
<h2 id="et-maintenant-">Et maintenant ?</h2>
<p><a href="https://fr.vuejs.org/" title="Le Framework JavaScript Évolutif">Vue.js</a> est à <a href="https://angular.io/" title="One framework, mobile and desktop">Angular</a> et <a href="https://reactjs.org/" title="A JavaScript library for building user interfaces">React</a> ce que <a href="http://jquery.com/" title="Do more, write less">jQuery</a> est à <a href="https://blog.lesieur.name/vanilla-js-france/" title="Vanilla JS est µn fr@m€w#rk rapide, léger et multi-plateforme pour créer d&#39;incroyables et puissantes applications JavaScript">Vanilla JS</a> ! Aussi, si vous là bas, êtes toujours dans votre zone de confort avec <a href="http://jquery.com/" title="Do more, write less">jQuery</a> et défendez cette position comme un irréductible gaulois en vous persuadant que les usines à gaz <a href="https://angular.io/" title="One framework, mobile and desktop">Angular</a> et <a href="https://reactjs.org/" title="A JavaScript library for building user interfaces">React</a> n&#39;ont rien à vous apporter, tentez l&#39;aventure avec <a href="https://fr.vuejs.org/" title="Le Framework JavaScript Évolutif">Vue.js</a>. Il ne vous faudra pas plus d&#39;une demi journée pour goûter à son potentiel grâce à <a href="https://fr.vuejs.org/v2/guide/">son guide intuitif et en français</a> !</p>
<p>En tout cas, pour moi, c&#39;est tout Vue !</p>
<h2 id="pour-les-gourmands">Pour les gourmands</h2>
<p>Pour ceux qui veulent manger de la technique à propos de ces histoires de pilotage par le DOM vs. pilotage par données c&#39;est pour bientôt !</p>
]]></description>
            <link>http://localhost:7776/pourquoi-abandonner-jquery-pour-vue-angular-react/</link>
            <guid isPermaLink="false">59fb25e7581436675d889d21</guid>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[MVVM]]></category>
            <category><![CDATA[React]]></category>
            <category><![CDATA[Concept]]></category>
            <category><![CDATA[Vue.js]]></category>
            <category><![CDATA[Angular]]></category>
            <category><![CDATA[AngularJS]]></category>
            <category><![CDATA[jQuery]]></category>
            <category><![CDATA[Node.js]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Thu, 02 Nov 2017 14:04:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Cas pratique : corriger rapidement une régression HTML ou CSS avec Git]]></title>
            <description><![CDATA[<p>Les tests de régression d&#39;interfaces sont souvent les plus difficiles à repérer car ils nécessitent l&#39;intervention de l&#39;œil humain et ne peuvent pas être automatisés par des tests unitaires aussi simplement que du code logique. Il faut donc refaire une passe de vérification sur les pages où la CSS et la structure HTML ont changé pour voir si tout est en ordre et cela, dans toutes les tailles d&#39;affichage.</p>
<p>Autant vous dire qu&#39;en fonction du budget, ce travail n&#39;est pas fait à chaque fois que le code est acté (« commit ») dans Git et qu&#39;il arrive qu&#39;une « régression visuelle » soit repérée quelques temps après qu&#39;elle se soit glissée dans le projet.</p>
<p>Plus sournois, si la vérification n&#39;est pas faites à tous les coups, les regressions visuelles qui n&#39;empèchent pas la navigation mettent souvent longtemps à être signalées car personne n&#39;est « bloqué ».</p>
<figure>
    <a href="media/images/upload/git-case-001.jpg"><img class="openable" src="media/images/upload/git-case-001.jpg" alt="Site web exemple" width="1200" height="796" style="width: 100%;height: auto;border:1px solid #ccc"></a>
    <figcaption>Site web exemple</figcaption>
</figure>

<p>Nous allons donc voir à travers un exemple comment réparer rapidement une régression HTML ou CSS avec l&#39;utilisation du système de version Git et la plateforme GitHub.</p>
<blockquote>
<p>Note : si vous avez la moindre question à propos de la procédure exposée ci-après, n&#39;hésitez pas à laisser un commentaire. Si vous souhaitez revenir avec un peu plus de bagage à propos du fonctionnement de Git, <a href="https://blog.lesieur.name/comprendre-et-utiliser-git-avec-vos-projets/">n&#39;hésitez pas à lire cet article pour enfin comprendre Git et GitHub</a> !</p>
</blockquote>
<h2 id="régression-en-vue-">Régression en Vue !</h2>
<p>Pour notre cas d&#39;étude nous allons travailler sur <a href="https://github.com/Orchard-ID/CEMEA-PESL-Website">ce site</a> réalisé avec <a href="https://fr.vuejs.org/">Vue.js</a> et <a href="https://node-atlas.js.org/">NodeAtlas</a>. En naviguant sur le site en environnement de test, il s&#39;avère que tout va bien.</p>
<p>Cependant en mobile, on repère une régression visuelle :</p>
<figure>
    <a href="media/images/upload/git-case-002.jpg"><img class="openable" src="media/images/upload/git-case-002.jpg" alt="Le site mobile" width="640" height="1059" style="width: 100%;max-width: 320px;height: auto;border:1px solid #ccc"></a>
    <figcaption>Le site mobile</figcaption>
</figure>

<p>À priori le menu mobile est affiché même s&#39;il n&#39;a pas été ouvert. Et même affiché, il est très mal habillé !</p>
<p><strong>Après quelques tests d&#39;agrandissement de fenêtre, il s&#39;avère que tout va bien jusqu&#39;à une taille de 950 pixels de largeur. En dessous cependant, le bogue visuel apparait.</strong></p>
<h2 id="lancer-lapplication-sur-son-poste">Lancer l&#39;application sur son poste</h2>
<p>Pour ce projet, nous utilisons le système de version Git. Nous utilisons comme serveur de stockage distant GitHub. Cela nous permet de garder une trace de tous les changements effectués sur le projet tout au long de sa vie. Nous savons que ce menu était correctement affiché par le passé, mais actuellement ce n&#39;est plus le cas. C&#39;est pour cela que l&#39;on parle de régression. Dans un premier temps nous allons cloner le projet sur un poste de développement pour faire tourner le site tel qu&#39;il est actuellement sur le serveur de préproduction.</p>
<p>On ouvre donc un invité de commande et on lance la commande suivante (cela présuppose que nous ayons <a href="https://git-scm.com/">Git</a> d&#39;installé sur notre machine de développeur).</p>
<pre class="prettyprint linenums"><code class="language-bash">git clone https://github.com/Orchard-ID/CEMEA-PESL-Website fixbug-navigation-mobile
</code></pre>
<p>Cela crée un dossier local <samp>fixbug-navigation-mobile</samp> contenant le dépôt (« repository ») <samp>CEMEA-PESL-Website</samp> dans l&#39;état qu&#39;il est actuellement sur la branche par défaut. Ce clone est fait depuis le serveur distant (« remote ») <samp>origin</samp>. La majorité des projets ont pour branche par défaut <samp>master</samp> quand ils sont créés sur un serveur GitHub. Dans notre cas, notre branche par défaut est <samp>develop</samp> car nous avons changé cela sur GitHub.</p>
<p>Nous allons à présent nous déplacer dans ce dossier :</p>
<pre class="prettyprint linenums"><code class="language-bash">cd ../fixbug-navigation-mobile/
</code></pre>
<p>Et, en suivant les instructions du <samp>README.md</samp>, lancer le site en local et constater le bogue.</p>
<h2 id="trouver-le-bon-acte-de-version">Trouver le bon acte de version</h2>
<p>Il va falloir trouver entre quels changements du projet, à savoir entre quels actes de version (« commit ») la régression est apparue. Nous pouvons nous aider du descriptif des actes entrés lorsqu&#39;un code est acté pour repérer les changements responsables de cette régression.</p>
<p>Nous allons lancer la commande <samp>git log</samp> pour jeter un œil à nos actes :</p>
<pre class="prettyprint linenums"><code class="language-bash">git log
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">commit fc44ce0450c4126b2f5180141d5f2077c98dbdba
Author: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;
Date:   Tue Oct 17 15:12:10 2017 +0200

    Romain review

    Signed-off-by: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;

commit 7b9cedf906a79f0bd51c6241d081c708a0b1312e
Author: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;
Date:   Tue Oct 17 13:26:55 2017 +0200

    Fix footer https://github.com/Orchard-ID/CEMEA-PESL-Website/issues/20

    Signed-off-by: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;

commit 4b3e58206dc104e9c3426053e92b0d7f716646cf
Author: Alban Allée &lt;alban.kahl@gmail.com&gt;
Date:   Mon Oct 16 14:56:46 2017 +0200

    SVG export completed

commit d61d40ee97e7c5d320132bac25541d2b48d06eff
Author: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;
Date:   Fri Oct 13 16:41:13 2017 +0200

    Fix issue https://github.com/Orchard-ID/CEMEA-PESL-Website/issues/16

    Signed-off-by: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;

commit de7301193365d73e39456ee77f1e939f6349740a
Author: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;
Date:   Tue Oct 10 17:44:55 2017 +0200

    Keyed v-for for dynamic list

    Signed-off-by: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;

commit c3fcd9e4f533e887319efdfe58955bc367e30af3
Author: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;
Date:   Mon Oct 9 18:22:55 2017 +0200

    Vue convention about props

    Signed-off-by: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;

commit 43228d365debb05217f376261b9aa875bb6e2f5d
Author: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;
Date:   Mon Oct 9 16:16:43 2017 +0200

    Convention de composant Vue.js

    Signed-off-by: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;
...
...
...
</code></pre>
<p>Tous les actes sont ainsi listés du plus récent au plus vieux. Je sais que la modification se trouve dans les derniers actes car, même si je ne revois pas tout le design à chaque code acté, je le revois régulièrement. Je sais donc qu&#39;avant l&#39;un de ces derniers actes de version, cette régression n&#39;avait pas été constatée. Je vais donc fouiller ces logs à la recherche de modifications qui peuvent potentiellement avoir causé la régression.</p>
<h3 id="premier-acte">Premier acte</h3>
<p>Vérifions le premier acte de version qui s&#39;intitule simplement « Romain review ».</p>
<pre class="prettyprint linenums"><code class="language-bash">git show fc44ce0450c4126b2f5180141d5f2077c98dbdba
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">diff --git a/assets/stylesheets/modules/cmpt-footer.styl b/assets/stylesheets/modules/cmpt-footer.styl
index 98bf25d..eac4f92 100644
--- a/assets/stylesheets/modules/cmpt-footer.styl
+++ b/assets/stylesheets/modules/cmpt-footer.styl
@@ -2,12 +2,12 @@
        position relative
        z-index 1
        margin 0 auto
-       max-width 1200px
+       max-width 950px
        padding 0 0 32px
        color $footerTextColor

        p
-               font-size 1.6rem
+               font-size 1.2rem

        a
                color $footerLinkColor
@@ -37,7 +37,7 @@

                h3
                        margin-top 32px
-                       font-size 2rem
+                       font-size 1.4rem
                        font-weight bold

        &amp;--contact
@@ -47,7 +47,7 @@

                @media (min-width: 950px)
                        float left
-                       width 60%
+                       width 50%

                &amp;::after
                        content &quot;&quot;
@@ -81,7 +81,7 @@

                @media (min-width: 950px)
                        float right
-                       width 40%
+                       width 50%

                &amp;--title
                        margin-bottom 32px
</code></pre>
<p>Le seul fichier modifié lors de cet acte de version se nomme <samp>cmpt-footer.styl</samp>. C&#39;est bien du style (un fichier Stylus qui génère de la CSS depuis NodeAtlas), mais tout porte à croire que cela modifie le pied de page. Il y a donc peu de chance que cela soit responsable de cette régression qui semble plutôt intervenir en entête de page ou dans la navigation. Je décide donc de poursuivre.</p>
<h3 id="deuxième-acte">Deuxième acte</h3>
<p>Le deuxième acte de version fait mention d&#39;un <samp>footer</samp>, or actuellement, l&#39;erreur doit se trouver dans un fichier probablement nommé <samp>header</samp> ou <samp>navigation</samp>. Je passe mon chemin.</p>
<blockquote>
<p>Note : cela ne veut pas dire que l&#39;erreur n&#39;aurait pas été ici. Le but de la manœuvre étant de résoudre le bogue le plus rapidement possible, s&#39;il n&#39;y a pas d&#39;indice particulier pour un acte de version, il est plus judicieux de continuer.</p>
</blockquote>
<h3 id="troisième-acte">Troisième acte</h3>
<p>Le troisième acte de version n&#39;est pas de moi. Par curiosité, je regarde avec la commande <samp>show</samp>.</p>
<pre class="prettyprint linenums"><code class="language-bash">git show 4b3e58206dc104e9c3426053e92b0d7f716646cf
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">diff --git a/assets/media/images/parallax/bag-blue.svg b/assets/media/images/parallax/bag-blue.svg
index 913e7f4..aefc64e 100644
--- a/assets/media/images/parallax/bag-blue.svg
+++ b/assets/media/images/parallax/bag-blue.svg
@@ -2,828 +2,18 @@
 &lt;!-- Generator: Adobe Illustrator 21.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --&gt;
 &lt;svg version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; x=&quot;0px&quot; y=&quot;0px&quot;
         viewBox=&quot;0 0 350 350&quot; enable-background=&quot;new 0 0 350 350&quot; xml:space=&quot;preserve&quot;&gt;
-&lt;g id=&quot;Bag&quot;&gt;
-       &lt;g id=&quot;Red_1_&quot;&gt;
-               &lt;path fill=&quot;none&quot; stroke=&quot;#FF0068&quot; stroke-width=&quot;10&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-miterlimit=&quot;10&quot; d=&quot;
-                       M158.1,167h33.9c2.6,0,4.7,2.1,4.7,4.7V217c0,2.6-2.1,4.7-4.7,4.7h-33.9c-2.6,0-4.7-2.1-4.7-4.7v-45.4
-                       C153.4,169.1,155.5,167,158.1,167z&quot;/&gt;
-               &lt;path fill=&quot;none&quot; stroke=&quot;#FF0068&quot; stroke-width=&quot;10&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-miterlimit=&quot;10&quot; d=&quot;
-                       M284.9,273.2H65.1c-5.3,0-9.6-4.3-9.6-9.6V125.2c0-5.3,4.3-9.6,9.6-9.6h219.7c5.3,0,9.6,4.3,9.6,9.6v138.4
-                       C294.5,268.9,290.2,273.2,284.9,273.2z&quot;/&gt;
-               &lt;path fill=&quot;none&quot; stroke=&quot;#FF0068&quot; stroke-width=&quot;10&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-miterlimit=&quot;10&quot; d=&quot;
-                       M143.1,76.8h63.8c5.9,0,10.6,4.8,10.6,10.6v28h-85.1v-28C132.5,81.6,137.2,76.8,143.1,76.8z&quot;/&gt;
-
-                       &lt;line fill=&quot;none&quot; stroke=&quot;#FF0068&quot; stroke-width=&quot;10&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-miterlimit=&quot;10&quot; x1=&quot;153.4&quot; y1=&quot;194.4&quot; x2=&quot;55.5&quot; y2=&quot;194.4&quot;/&gt;
...
...
...
</code></pre>
<p>Je vois que la sortie va être très grande. Je coupe donc l&#39;affichage et je retourne à mon invité de commande. Je vais tenter une commande plus succinte avec l&#39;option <samp>--stat</samp>. À partir de maintenant, je vais vérifier seulement quels fichiers ont bougés avant d&#39;en regarder le détail.</p>
<pre class="prettyprint linenums"><code class="language-bash">git show 4b3e58206dc104e9c3426053e92b0d7f716646cf --stat
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">commit 4b3e58206dc104e9c3426053e92b0d7f716646cf
Author: Alban Allée &lt;alban.kahl@gmail.com&gt;
Date:   Mon Oct 16 14:56:46 2017 +0200

    SVG export completed

 assets/media/images/parallax/bag-blue.svg      | 836 +-----------------------
 assets/media/images/parallax/bag-green.svg     | 836 +-----------------------
 assets/media/images/parallax/bag-red.svg       | 836 +-----------------------
 assets/media/images/parallax/bag-yellow.svg    | 836 +-----------------------
 assets/media/images/parallax/ball-blue.svg     | 842 +------------------------
 assets/media/images/parallax/ball-green.svg    | 841 +-----------------------
 assets/media/images/parallax/ball-red.svg      | 841 +-----------------------
 assets/media/images/parallax/ball-yellow.svg   | 841 +-----------------------
 assets/media/images/parallax/book-blue.svg     | 832 +-----------------------
 assets/media/images/parallax/book-green.svg    | 832 +-----------------------
 assets/media/images/parallax/book-red.svg      | 832 +-----------------------
 assets/media/images/parallax/book-yellow.svg   | 832 +-----------------------
 assets/media/images/parallax/brush-blue.svg    | 828 +-----------------------
 assets/media/images/parallax/brush-green.svg   | 828 +-----------------------
 assets/media/images/parallax/brush-red.svg     | 828 +-----------------------
 assets/media/images/parallax/brush-yellow.svg  | 828 +-----------------------
 assets/media/images/parallax/camera-blue.svg   | 828 +-----------------------
 assets/media/images/parallax/camera-green.svg  | 828 +-----------------------
 assets/media/images/parallax/camera-red.svg    | 828 +-----------------------
 assets/media/images/parallax/camera-yellow.svg | 828 +-----------------------
 20 files changed, 213 insertions(+), 16448 deletions(-)
</code></pre>
<p>R.A.S. Rien qui touche à l&#39;affichage du menu ici, juste des images.</p>
<h3 id="quatrième-acte">Quatrième acte</h3>
<p>Je continue avec le quatrième acte de version qui indique seulement « Fix issue ». Je regarde.</p>
<pre class="prettyprint linenums"><code class="language-bash">git show d61d40ee97e7c5d320132bac25541d2b48d06eff --stat
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">commit d61d40ee97e7c5d320132bac25541d2b48d06eff
Author: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;
Date:   Fri Oct 13 16:41:13 2017 +0200

    Fix issue https://github.com/Orchard-ID/CEMEA-PESL-Website/issues/16

    Signed-off-by: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;

 assets/stylesheets/modules/cmpt-navigation.styl | 19 ++++++++++++-------
 1 file changed, 12 insertions(+), 7 deletions(-)
</code></pre>
<p>Je vois ici que le seul fichier modifié se nomme <samp>cmpt-navigation.styl</samp>. C&#39;est très intéressant car</p>
<ul>
<li>il mentionne un fichier de style pouvant impacter une regression visuelle,</li>
<li>cette régression pourrait intervenir au niveau de la navigation.</li>
</ul>
<p>C&#39;est un bon candidat. Jettons un œil aux modifications faites dans ce fichier :</p>
<pre class="prettyprint linenums"><code class="language-bash">git show d61d40ee97e7c5d320132bac25541d2b48d06eff
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">diff --git a/assets/stylesheets/modules/cmpt-navigation.styl b/assets/stylesheets/modules/cmpt-navigation.styl
index 144189f..933715f 100644
--- a/assets/stylesheets/modules/cmpt-navigation.styl
+++ b/assets/stylesheets/modules/cmpt-navigation.styl
@@ -50,10 +50,11 @@
                @media (min-width: 950px)
                        display none

-       &amp;--menu
-               .router-link-exact-active
-                       cursor default
-                       color #ff0068
+       &amp;--menu--main li:nth-child(1) .router-link-exact-active
+       &amp;--menu--main li + li .router-link-active
+       &amp;--members-area .router-link-active
+               cursor default
+               color #ff0068

                @media (max-width: 949px)
                        display none
@@ -99,6 +100,13 @@
                                                background-color $highlightLinkColor
                                                border 1px solid $highlightLinkColor

+
+                       &amp; ^[0]--menu--main li:nth-child(1) .router-link-exact-active
+                       &amp; ^[0]--menu--main li + li .router-link-active
+                       &amp; ^[0]--members-area .router-link-active
+                               cursor default
+                               color #ff0068
+
                        &amp; ^[0]--menu
                                display block

@@ -106,9 +114,6 @@
                                        color $linkColorReversed
                                        &amp;:hover
                                                color $highlightLinkColorReversed
-                                       &amp;.router-link-exact-active
-                                               cursor default
-                                               color #ff0068

                                @media (max-width: 949px)
                                        position absolute
</code></pre>
<p>En lisant les parties modifiées, elles semblent faire intervenir des Media Queries. **On constate même que les valeurs 949px et 950px apparaissent plusieurs fois ce qui correspond exactement à la limite à partir de laquelle notre régression visuelle apparait. Nous allons donc nous mettre sur une branche détachée (« detached ») qui va reproduire le dépôt du site tel qu&#39;il était lors de cet acte de version.</p>
<pre class="prettyprint linenums"><code class="language-bash">git checkout d61d40ee97e7c5d320132bac25541d2b48d06eff
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">Note: checking out &#39;d61d40ee97e7c5d320132bac25541d2b48d06eff&#39;.

You are in &#39;detached HEAD&#39; state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b &lt;new-branch-name&gt;

HEAD is now at d61d40e... Fix issue https://github.com/Orchard-ID/CEMEA-PESL-Website/issues/16
</code></pre>
<p>C&#39;est l&#39;occasion de vérifier si, à tout hasard, nous n&#39;avons pas raté la régression dans des actes plus récents. Peut-être dans le deuxième acte de version que nous n&#39;avons pas vérifié plus en avant ? On lance notre projet et on vérifie.</p>
<figure>
    <a href="media/images/upload/git-case-003.jpg"><img class="openable" src="media/images/upload/git-case-003.jpg" alt="La régression est toujours là" width="1200" height="784" style="width: 100%;height: auto;border:1px solid #ccc"></a>
    <figcaption>La régression est toujours là</figcaption>
</figure>

<p>On constate que la régression est toujours présente, cela signifie qu&#39;il est donc toujours possible que nous soyons sur l&#39;acte bascule entre régression et non régression. Pour en avoir le cœur net, il ne nous reste plus qu&#39;à nous déplacer sur l&#39;acte de version précédent :</p>
<pre class="prettyprint linenums"><code class="language-bash">git checkout de7301193365d73e39456ee77f1e939f6349740a
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">Previous HEAD position was d61d40e... Fix issue https://github.com/Orchard-ID/CEMEA-PESL-Website/issues/16
HEAD is now at de73011... Keyed v-for for dynamic list
</code></pre>
<p>On relance une nouvelle fois l&#39;application.</p>
<figure>
    <a href="media/images/upload/git-case-004.jpg"><img class="openable" src="media/images/upload/git-case-004.jpg" alt="La régression n'est plus là !" width="1200" height="784" style="width: 100%;height: auto;border:1px solid #ccc"></a>
    <figcaption>La régression n'est plus là !</figcaption>
</figure>

<p>Bingo ! La régression vient bien du fichier en question. Nous allons donc pouvoir résoudre ce bogue sans plus attendre !</p>
<h2 id="corriger-la-régression">Corriger la régression</h2>
<p>Nous allons à présent nous remettre sur la branche contenant la version de test car souvenez vous, nous somme actuellement sur une branche détachée. Pour le vérifier, il nous suffit de consulter la liste des branches sur notre machine locale pour ce dépôt :</p>
<pre class="prettyprint linenums"><code class="language-bash">git branch
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">* (HEAD detached at de73011)
  develop
  master
</code></pre>
<p>Nous voyons que nous somme sur une branche détachée grâce à la petite <samp>*</samp> en regard de la ligne. Nous allons donc nous remettre sur la branche <samp>develop</samp> :</p>
<pre class="prettyprint linenums"><code class="language-bash">git checkout develop
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">Previous HEAD position was de73011... Keyed v-for for dynamic list
Switched to branch &#39;develop&#39;
</code></pre>
<p>À partir de là, nous allons créer une branche dédiée à la résolution de ce bogue. Nous allons donc faire une copie de la branche actuelle pour faire toutes nos modifications ! Une copie se fait grâce au raccourci d&#39;option <samp>b</samp> dans la commande <samp>checkout</samp>. Nous pouvons ainsi créer le nom que cette branche va avoir.</p>
<pre class="prettyprint linenums"><code class="language-bash">git checkout -b fixbug-navigation-mobile
</code></pre>
<p>Vérifions</p>
<pre class="prettyprint linenums"><code class="language-bash">git branch
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">  develop
* fixbug-navigation-mobile
  master
</code></pre>
<p>C&#39;est maintenant à moi de jouer. Je récupère de nouveau les différences entre ma version actuelle et la version ou le bogue n&#39;était pas là :</p>
<pre class="prettyprint linenums"><code class="language-bash">git show d61d40ee97e7c5d320132bac25541d2b48d06eff
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">diff --git a/assets/stylesheets/modules/cmpt-navigation.styl b/assets/stylesheets/modules/cmpt-navigation.styl
index 144189f..933715f 100644
--- a/assets/stylesheets/modules/cmpt-navigation.styl
+++ b/assets/stylesheets/modules/cmpt-navigation.styl
@@ -50,10 +50,11 @@
                @media (min-width: 950px)
                        display none

-       &amp;--menu
-               .router-link-exact-active
-                       cursor default
-                       color #ff0068
+       &amp;--menu--main li:nth-child(1) .router-link-exact-active
+       &amp;--menu--main li + li .router-link-active
+       &amp;--members-area .router-link-active
+               cursor default
+               color #ff0068

                @media (max-width: 949px)
                        display none
@@ -99,6 +100,13 @@
                                                background-color $highlightLinkColor
                                                border 1px solid $highlightLinkColor

+
+                       &amp; ^[0]--menu--main li:nth-child(1) .router-link-exact-active
+                       &amp; ^[0]--menu--main li + li .router-link-active
+                       &amp; ^[0]--members-area .router-link-active
+                               cursor default
+                               color #ff0068
+
                        &amp; ^[0]--menu
                                display block

@@ -106,9 +114,6 @@
                                        color $linkColorReversed
                                        &amp;:hover
                                                color $highlightLinkColorReversed
-                                       &amp;.router-link-exact-active
-                                               cursor default
-                                               color #ff0068

                                @media (max-width: 949px)
                                        position absolute
</code></pre>
<p>Pour comprendre ce code, voici la signification des éléments en regard de ligne. Les <samp>-</samp> en début de ligne indiquent un code qui était présent sur l&#39;acte d&#39;avant et qui a disparu dans celui ci. Les <samp>+</samp> indiquent le code qui a été ajouté et qui n&#39;existait pas sur l&#39;acte d&#39;avant.</p>
<p>Après avoir lancé l&#39;application et avoir lu le code, on s&#39;aperçoit après quelques minutes que les lignes :</p>
<pre class="prettyprint linenums"><code class="language-css">                @media (min-width: 950px)
                        display none
</code></pre>
<p>et</p>
<pre class="prettyprint linenums"><code class="language-css">                @media (max-width: 949px)
                        display none
</code></pre>
<p>sont très étranges. Au vu des Media Queries, un simple <samp>display none</samp> faisait l&#39;affaire pour les deux groupes, or ont spécifie la même directive pour deux ensembles de taille. Quelque chose a dû « sauter » à ce niveau. En regardant le fichier précédent on voit que le second groupe devrait plutôt être (comme avant) :</p>
<pre class="prettyprint linenums"><code class="language-css">            &amp;--menu
                @media (max-width: 949px)
                        display none
</code></pre>
<p>avec l&#39;ajout de <samp>&amp;--menu</samp>. Vérifions !</p>
<figure>
    <a href="media/images/upload/git-case-004.jpg"><img class="openable" src="media/images/upload/git-case-004.jpg" alt="Réparé !" width="1200" height="784" style="width: 100%;height: auto;border:1px solid #ccc"></a>
    <figcaption>Réparé !</figcaption>
</figure>

<p>Top ! L&#39;erreur est donc réparée.</p>
<h2 id="acter-et-pousser-sur-le-serveur">Acter et pousser sur le serveur</h2>
<p>Nous allons enregistrer les changements que nous venons d&#39;effectuer dans Git. Nous sommes actuellement sur la branche <samp>fixbug-navigation-mobile</samp> en local. Il va maintenant être question de faire savoir au système de version Git que nous devons prendre en compte cette branche dans le système de version.</p>
<p>Ajoutons donc notre travail à la branche <samp>fixbug-navigation-mobile</samp> distante. Qu&#39;est-ce que j&#39;ai modifié ? Pour le savoir j&#39;utilise la commande <samp>status</samp>.</p>
<pre class="prettyprint linenums"><code class="language-bash">git status
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">On branch fixbug-navigation-mobile
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)

        modified:   cmpt-navigation.styl

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre>
<p>À partir de là, je décide d&#39;ajouter à mon index des fichiers à acter. Je vais ajouter le fichier <samp>cmpt-navigation.styl</samp> qui actuellement n&#39;est pas référencé comme fichier à enregistrer dans mon prochain acte de version. J&#39;utilise donc la commande <samp>add</samp>.</p>
<pre class="prettyprint linenums"><code class="language-bash">git add cmpt-navigation.styl
</code></pre>
<p>et je vérifie qu&#39;il est bien ajouté :</p>
<pre class="prettyprint linenums"><code class="language-bash">git status
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">On branch fixbug-navigation-mobile
Changes to be committed:
  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

        modified:   cmpt-navigation.styl
</code></pre>
<p>Il ne me reste plus qu&#39;à acter mon travail sous un nouveau acte de version avec la commande <samp>commit</samp> :</p>
<pre class="prettyprint linenums"><code class="language-bash">git commit
</code></pre>
<p>Une interface me demande d&#39;entrer un détail pour cet acte. Je vais, par exemple entrer, « fix visual regression about menu always opened on mobile ». J&#39;appuie sur Échap et j&#39;entre les symboles <samp>:wq</samp> pour sauvegarder mon texte et quitter l&#39;interface.</p>
<pre class="prettyprint linenums"><code class="language-bash">[fixbug-navigation-mobile 80d06d2] fix visual regression about menu always opened on mobile
 1 file changed, 1 insertion(+)
</code></pre>
<p>Mon acte de version est donc dans le système de version de ma base locale. Je pousse alors ça sur le serveur GitHub, sur une branche <samp>fixbug-navigation-mobile</samp> distante.</p>
<pre class="prettyprint linenums"><code class="language-bash">git push origin fixbug-navigation-mobile
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">Counting objects: 6, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 515 bytes | 0 bytes/s, done.
Total 6 (delta 5), reused 0 (delta 0)
remote: Resolving deltas: 100% (5/5), completed with 5 local objects.
To https://github.com/Orchard-ID/CEMEA-PESL-Website.git
 * [new branch]      fixbug-navigation-mobile -&gt; fixbug-navigation-mobile
</code></pre>
<p>Il ne me reste plus qu&#39;à revoir ce code avec un membre de mon équipe. Par exemple via une proposition de fusion sur GitHub pour voir si cela convient à tout le monde. Je vais ici me permettre de valider la proposition de fusion moi-même car ce petit changement n&#39;a pas besoin de plus de paire d&#39;yeux.</p>
<h2 id="proposition-de-fusion">Proposition de fusion</h2>
<p>Je vais à présent soumettre mon travail à mon équipe. J&#39;aurais pu directement utiliser la commande <samp>merge</samp> pour reverser le travail de cette branche dans la <samp>develop</samp> mais nous utilisons Git afin de permettre aux autres de faire un retour sur les modifications pour s&#39;assurer que tout est en ordre.</p>
<p>En retournant sur la page projet, GitHub s&#39;est aperçu qu&#39;une nouvelle branche est apparue. Il propose donc de faire une proposition de fusion (« pull request ») pour aligner son contenu avec celui de la version <samp>develop</samp>.</p>
<figure>
    <a href="media/images/upload/git-case-005.jpg"><img class="openable" src="media/images/upload/git-case-005.jpg" alt="GitHub propose de soumettre une fusion" width="1200" height="745" style="width: 100%;height: auto;border:1px solid #ccc"></a>
    <figcaption>GitHub propose de soumettre une fusion</figcaption>
</figure>

<p>Une fois sur l&#39;interface, le système nous dit qu&#39;il est tout à fait possible de fusionner les branches <samp>develop</samp> et <samp>fix-navigation-mobile</samp> sans qu&#39;il y ait de conflit à résoudre. Dans le cas contraire, une interface de résolution très pratique est proposée par GitHub.</p>
<figure>
    <a href="media/images/upload/git-case-006.jpg"><img class="openable" src="media/images/upload/git-case-006.jpg" alt="Proposition de fusion" width="1200" height="745" style="width: 100%;height: auto;border:1px solid #ccc"></a>
    <figcaption>Proposition de fusion</figcaption>
</figure>

<p>Je mets le nom de ma proposition de fusion, je spécifie avec un tag que cela résous un bug et je m&#39;assigne en tant que proposeur de cette proposition de fusion. Puisque je vais moi-même la valider sans demander plus d&#39;avis au regard de la correction apportée, je ne demande pas de relecteurs de code (« reviewers »).</p>
<figure>
    <a href="media/images/upload/git-case-007.jpg"><img class="openable" src="media/images/upload/git-case-007.jpg" alt="Détail de la proposition de fusion" width="1200" height="745" style="width: 100%;height: auto;border:1px solid #ccc"></a>
    <figcaption>Détail de la proposition de fusion</figcaption>
</figure>

<p>Dans des propositions de fusion plus dense, vous pouvez assigner des relecteurs et vous devez attendre leur approbation pour finaliser la fusion. Quand à eux, ils ont tous les outils nécessaires pour voir ce qui a changé et vous faire leurs retours ligne après ligne.</p>
<p>Dans notre cas, je vais simplement réduire la liste des actes en un seul (« squash ») et fusionner cet empilement avec la branche <samp>develop</samp>. Empiler ses actes avant de faire une fusion permet de ramener à un seul acte de modification dans la branche <samp>develop</samp> une multitude d&#39;acte de modification dans la branche de comparaison. Dans notre cas, puisque notre résolution de bogue n&#39;a donné lieu qu&#39;à un seul acte, cela n&#39;est pas utile. Cela l&#39;est pour le cas où nous aurions fait plusieurs acte de version en fonction des allers-retours avec nos relecteurs.</p>
<figure>
    <a href="media/images/upload/git-case-008.jpg"><img class="openable" src="media/images/upload/git-case-008.jpg" alt="Supprimer la branche" width="1200" height="745" style="width: 100%;height: auto;border:1px solid #ccc"></a>
    <figcaption>Supprimer la branche</figcaption>
</figure>

<p>Suite à la réussite de la fusion, GitHub me propose de supprimer la branche <samp>fix-navigation-mobile</samp> sur le serveur. Il ne me reste plus qu&#39;à cliquer sur « Delete » pour effectuer cette action et laisser le serveur propre.</p>
<p>Effectivement, si l&#39;on souhaite savoir quels sont les modifications que j&#39;ai faites sur le fichier, il suffirait de consulter l&#39;acte de version correspondant à ma fusion dans les logs. Pour savoir ce qui a été discuté lors de cette proposition de fusion, il me suffira d&#39;aller consulter les archives.</p>
<h2 id="un-peu-de-ménage">Un peu de ménage</h2>
<p>Je peux à présent supprimer mon dossier <samp>fix-navigation-mobile</samp> de ma machine car les modifications ont été faites, actées et sont tracées dans la branche <samp>develop</samp> sous un nouveau acte de version.</p>
<p>Je rebascule sur la branche principale.</p>
<pre class="prettyprint linenums"><code class="language-bash">git checkout develop
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">Switched to branch &#39;develop&#39;
</code></pre>
<p>et je met à jour cette branche locale avec le dernier acte de version fait via la proposition de fusion sur le serveur :</p>
<pre class="prettyprint linenums"><code class="language-bash">git pull origin develop
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">From https://github.com/Orchard-ID/CEMEA-PESL-Website
 * branch            develop    -&gt; FETCH_HEAD
Updating fc44ce0..e69d944
Fast-forward
 assets/stylesheets/modules/cmpt-navigation.styl | 1 +
 1 file changed, 1 insertion(+)
</code></pre>
<p>Par curiosité je regarde ce qui a bougé.</p>
<pre class="prettyprint linenums"><code class="language-bash">git log
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">commit e69d9443bb9ec48b995b4708207876ef1f9c9e48
Author: Bruno Lesieur &lt;bruno.lesieur@gmail.com&gt;
Date:   Thu Oct 26 11:42:33 2017 +0200

    fix visual regression about menu always opened on mobile (#21)
...
...
...
</code></pre>
<p>Et je constate bien un nouvel acte en regard de la liste des actes de version.</p>
<p>Il est temps de supprimer le dossier de cette résolution de bogue. Si toutefois vous décidez de continuer à travailler dans ce dossier pour n&#39;importe quelle raison, supprimez simplement la branche <samp>fixbug-navigation-mobile</samp> en locale pour faire un peu de ménage avec le raccourci d&#39;option <samp>-D</samp> de la commande <samp>branch</samp> :</p>
<pre class="prettyprint linenums"><code class="language-bash">git branch -D fixbug-navigation-mobile
</code></pre>
<pre class="prettyprint linenums"><code class="language-git">Deleted branch fixbug-navigation-mobile (was 80d06d2).
</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>Ce cas d&#39;étude est un peu long mais couvre toute la démarche de résolution d&#39;un bogue. Il aurait été périlleux et long, à froid, de retourner dans le code pour trouver au doigt levé quel code provoquait le soucis alors qu&#39;en utilisant l&#39;outil de version ceci est un jeu d&#39;enfant avec un peu d&#39;entrainement. De plus, puisque c&#39;est une régression, on sait déjà que la réponse se trouve dans notre code. Alors pourquoi perdre plus de temps ?!</p>
<p>Et pour ceux qui se demande comment on aurait fait si la régression était loin dans les actes, il est tout à fait possible d&#39;en trouver la liste depuis GitHub et de prendre au hasard des actes de version et de jouer au jeu du plus ou moins en testant au fur et à mesure quels actes font tourner le projet avec et sans régression et resserrer l&#39;étau à quelque chose de moins fourni.</p>
]]></description>
            <link>http://localhost:7776/comment-corriger-rapidement-une-regression-html-ou-css-avec-git/</link>
            <guid isPermaLink="false">59f2ec1f581436675d889d20</guid>
            <category><![CDATA[Git]]></category>
            <category><![CDATA[Bonnes Pratiques]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[Développement Web]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Fri, 27 Oct 2017 08:19:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[ES3, Chap 9. — La stratégie d'évaluation en JavaScript]]></title>
            <description><![CDATA[<p>Ce billet fait partie de la collection <em>ES3 dans le détail</em> et en constitue le Chapitre 9.</p>
<figure>
    <a href="media/images/upload/evaluation-strategy.jpg"><img class="openable" src="media/images/upload/evaluation-strategy-mini.png" alt="La magie du processus produit t-elle des copies d'objets ou de multiples références au même objet initial ?" width="628" height="342" style="width: 100%;height: auto;"></a>
    <figcaption>La magie du processus produit t-elle des copies d'objets ou de multiples références au même objet initial ?</figcaption>
</figure>

<p>Dans cet article, nous allons étudier la stratégie de passage de paramètres (aussi appelé la stratégie de passage des arguments) via des fonctions JavaScript.</p>
<blockquote>
<div>[&lt; Chapitre 8](https://blog.lesieur.name/les-constructeurs-et-les-prototypes/)</div><div style="text-align: right"></div>
</blockquote>
<h2 id="introduction">Introduction</h2>
<p>On appel habituellement cette partie des sciences informatiques <em>la stratégie d&#39;évaluation</em>, c.-à-d. un ensemble de règles et diverses <em>expressions</em> de calcul pour un langage de programmation. La stratégie de passage de paramètres est un cas spécial.</p>
<p>Beaucoup de développeurs sont certain que les objets en JavaScript (comme c&#39;est le cas dans d&#39;autres langages usuels) sont passés dans les fonctions <em>par référence</em> alors que les valeurs des types primitifs sont passées <em>par valeur</em>. De plus, nous pouvons lire ce « fait » dans divers articles, discussions sur les forums et même dans des livres sur le JavaScript. Mais, à quel point ce terme est t-il exact et à quel point cette description est exact ? Nous allons voir cela dans cet article.</p>
<h2 id="théorie-générale">Théorie générale</h2>
<p>Revenons rapidement sur la théorie générale. Il y a deux sortes de stratégie d&#39;évaluation de passage de paramètres : <em>stricte</em>, qui signifie que les arguments sont calculés avant d&#39;être utilisés et <em>non stricte</em>, qui signifie dans ce cas, que les arguments sont calculés au moment où ils sont utilisés.</p>
<p>Nous considérons ici que des stratégies basiques de passage de paramètres à une fonction sont importante à comprendre du point de vue de JavaScript.</p>
<p>Et pour commencer cette explication, il est nécessaire de préciser qu&#39;en JavaScript, tout autant que dans plusieurs autres langages (par exemple, C, Java, Python, Ruby, etc.) c&#39;est la stratégie de passage de paramètres <em>stricte</em> qui est utilisée.</p>
<p>Aussi l&#39;ordre dans lequel les arguments sont évalués est important. En JavaScript c&#39;est de gauche à droite (contrairement à d&#39;autres langages où c&#39;est possiblement de droite à gauche).</p>
<p>La stratégie de passage stricte est également sous-divisée en plusieurs stratégies, la plus importante d&#39;entre elle étant à considérer en détail.</p>
<p>Et parce que toutes les stratégies discutées ci-dessous n&#39;existent pas en JavaScript, nous allons utiliser du <em>pseudo code</em> similaire à la syntaxe Pascal.</p>
<h3 id="appel-par-valeur">Appel par valeur</h3>
<p>Ce type de stratégie est bien connu de beaucoup de développeurs. La valeur de l&#39;argument ici est une <em>copie de la valeur</em> de l&#39;objet passé par l&#39;appelant en paramètre. Les changements fait aux arguments à l&#39;intérieur d&#39;une fonction <em>n’influence pas</em> l&#39;objet passé depuis l&#39;extérieur. Habituellement, il y a une nouvelle allocation de mémoire et la valeur de cet objet externe est copié puis une valeur identique depuis ce nouvel espace mémoire est utilisé dans la fonction.</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">alfred = 10

procedure theTransportedMan(gerald):
  gerald = 20;
end

theTransportedMan(alfred)

// les changements dans `theTransportedMan` n&#39;ont pas d&#39;effets
// depuis l&#39;extérieur
print(alfred) // `10`
</code></pre>
<p>Cette stratégie pause de gros problèmes de performance dans le cas où le paramètre passé à la fonction n&#39;est pas une valeur primitive, mais une structure complexe ou un objet. C&#39;est ce qui se passe, par exemple, en C/C++ quand une structure est passée par valeur à une fonction. Elle est <em>complètement copiée</em>.</p>
<p>Décrivons l&#39;exemple général que nous utiliserons pour la description des stratégies d&#39;évaluation suivantes. Cette procédure abstraite accepte deux arguments : la valeur d&#39;un objet ainsi qu&#39;un booléen, qu&#39;il soit nécessaire de modifier complètement la valeur de l&#39;objet (ré-affectation de valeur), ou juste qu&#39;il soit nécessaire de changer seulement les propriétés de l&#39;objet (muter l&#39;objet).</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">procedure theTransportedMan(gerald, isFullChange):

  if isFullChange:
    gerald = { z: 1, q: 2 }
    exit
  end

  gerald.x = 100
  gerald.y = 200

end
</code></pre>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code>// définition de `theTransportedMan` ci-dessus

alfred = {
  x: 10,
  y: 20
}

theTransportedMan(alfred)

// avec un appel de stratégie par valeur,
// l&#39;objet extérieur n&#39;a pas changé.
print(alfred) // `{ x: 10, y: 20 }`

// c&#39;est la même chose pour le changement complet.
// (affectation d&#39;une nouvelle valeur)
theTransportedMan(alfred, true)

// aussi, aucun changements n&#39;ont été fait
print(alfred) // `{ x: 10, y: 20 }`, et non pas `{ z: 1, q: 2 }`
</code></pre><h3 id="appel-par-référence">Appel par référence</h3>
<p>C&#39;est au tour de la stratégie d&#39;évaluation <em>par référence</em> (qui est également bien connue) qui ne reçoit <em>pas une copie de la valeur</em>, mais une <em>référence à l&#39;objet</em>, c.-à-d. l&#39;adresse mémoire directement en relation avec l&#39;objet depuis l&#39;extérieur. Tous les changements des arguments à l&#39;intérieur de la fonction (affectation ou mutation) <em>affecte l&#39;objet à l&#39;extérieur</em> car l&#39;adresse exacte de cet objet est lié à un paramètre formel, c.-à-d. un argument qui fait office d&#39;<em>alias</em> pour l&#39;objet depuis l&#39;extérieur.</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">// même définition de `theTransportedMan` que précédemment

// avec le même objet
alfred = {
  x: 10,
  y: 20
}

// les résultats de la procédure `theTransportedMan`
// avec un appel par référence
// sont les suivants :

theTransportedMan(alfred)

// les valeurs de propriétés de l&#39;objet ont changées
print(alfred) // `{ x: 100, y: 200 }`

// l&#39;assignation d&#39;une nouvelle valeur affecte
// également l&#39;objet
theTransportedMan(alfred, true)

// `alfred` fait maintenant référence au nouvel objet
print(alfred) // `{ z: 1, q: 2 }`
</code></pre>
<p>Cette stratégie permet de passer plus efficacement des objets complexes, par ex. des grosses structures avec une quantité considérable de propriétés.</p>
<h3 id="appel-par-partage">Appel par partage</h3>
<p>Alors que les deux premières stratégies d&#39;évaluation sont connues de la majorité des développeurs, cette stratégie (et pour être plus exact, ce <em>terme</em>) n&#39;est pas très répandue. Mais comme nous allons le voir rapidement, elle joue un rôle essentielle dans le passage des paramètres en JavaScript.</p>
<p>Des noms alternatifs pour cette stratégie sont « appel par objet » ou « appel par partage d&#39;objet ».</p>
<p>La stratégie « par partage » a été nommée en premier par <a href="http://en.wikipedia.org/wiki/Barbara_Liskov">Barbara Liskov</a> pour le langage de programmation <a href="http://en.wikipedia.org/wiki/CLU_programming_language">CLU</a> en 1974.</p>
<p>Le point principal de cette stratégie est que la fonction reçoit une <em>copie de la référence</em> de l&#39;objet. Cette copie de référence est associée à un paramètre formel et est sa valeur.</p>
<p>Même si le concept de <em>référence</em> dans ce cas semble apparaître, cette stratégie <em>ne devrait pas être traitée comme un appel par référence</em> (et donc dans ce cas, la majorité font l&#39;erreur), car la valeur de l&#39;argument <em>n&#39;est pas directement l&#39;alias</em>, mais une <em>copie de l&#39;adresse mémoire</em>.</p>
<p>La différence principale vient du fait que <em>l&#39;affectation d&#39;une nouvelle valeur à l&#39;argument à l&#39;intérieur de la fonction n&#39;affecte pas l&#39;objet à l&#39;extérieur</em> (ce qui aurait été le cas d&#39;un <em>appel par référence</em>). Cependant, parce que c&#39;est un paramètre formel, qu&#39;il a une copie de l&#39;adresse mémoire ; il a accès au même objet qu&#39;à l&#39;extérieur (c.-à-d. que l&#39;objet à l&#39;extérieur <em>n&#39;est pas copié</em> comme ça aurait été le cas d&#39;un <em>appel par valeur</em>) et les changements des propriétés de l&#39;argument local (les mutations) affecte l&#39;objet à l&#39;extérieur.</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">// même définition de `theTransportedMan` que précédemment

// encore avec le même objet
alfred = {
  x: 10,
  y: 20
}

// l&#39;appel par partage
// affecte l&#39;objet
// de la manière suivante

theTransportedMan(alfred)

// les valeurs de propriétés d&#39;objet ont changées
print(alfred) // `{ x: 100, y: 200 }`

// mais avec un changement d&#39;objet
// il n&#39;y a pas de changement
theTransportedMan(alfred, true)

// c&#39;est donc la même chose que l&#39;appel précédent.
print(alfred) // `{ x: 100, y: 200 }`
</code></pre>
<p>Cette stratégie prend en compte le fait que le langage opère en majorité avec des <em>objets</em>, au lieu de <em>valeurs primitives</em>.</p>
<h4 id="par-partage--un-cas-spécial-de-par-valeur">Par partage : un cas spécial de par valeur</h4>
<p>La stratégie <em>par partage</em> est utilisé dans divers langages : Java, JavaScript, Python, Ruby, Visual Basic, etc.</p>
<p>Cependant, c&#39;est dans la communauté Python que le terme <em>par partage</em> est utilisé. Car dans les autres langages, il y a des termes alternatifs utilisés qui peuvent préter à confusion car il sont le contraire de stratégies avec le même nom dans d&#39;autres langages.</p>
<p>Dans la plupart des cas, par exemple, en Java, JavaScript ou Visual Basic, cette stratégie est aussi nommée par <em>valeur</em>, signifiant, <em>valeur spécifique</em> / <em>copie de référence</em>.</p>
<p>D&#39;un côté, c&#39;est vrai, affecter à un argument dans une fonction va seulement lier son nom avec une <em>nouvelle valeur</em> (nouvelle adresse mémoire) et ne va pas influancer l&#39;objet extérieur.</p>
<p>D&#39;un autre côté, ce terme n&#39;est pas totalement correct si on examine la question en profondeur.</p>
<p>La théorie générale a un <em>cas spéciale d&#39;appel par valeur</em> avec comme valeur spécifique, la copie par adresse. Par conséquent, ces technologies ne rompent pas les règles terminologiques.</p>
<p>En Ruby, cette stratégie est nommée <em>par référence</em>. Encore, d&#39;un côté on ne passe pas réellement la copie d&#39;une grosse structure (c.-à-d., pas <em>par valeur</em>), mais d&#39;un autre côté, nous ne jouons pas avec la référence originale de l&#39;objet, et on ne peut donc pas le changer. Encore une fois, ce mélange de terme prête à confusion.</p>
<p>La théorie générale ne décrit aucun <em>cas spéciale d&#39;appel par référence</em> comme c&#39;est le cas pour <em>un appel par valeur</em>.</p>
<p>Il est nécessaire de bien comprendre que toutes ces appellations mentionnés dans divers langages (Java, JavaScript, Python, Ruby, etc.) ont un nom revisité. Dans la théorie générale ils font référence en réalité à <em>l&#39;appel par partage</em>.</p>
<h4 id="par-partage-et-pointeurs">Par partage et pointeurs</h4>
<p>Par rapport au C / C++, cette stratégie de passage est idéologiquement similaire au passage de valeur <em>par pointeur</em>, mais avec <em>une différence importante</em> ; il est possible de <em>déréférencer le pointeur et ne pas changer complètement l&#39;objet</em>. Mais en général, l&#39;affectation d&#39;une valeur (adresse) au pointeur la lie avec le nouveau bloc de mémoire (c.-à-d. que le bloc de mémoire auquel le pointeur était référencé avant reste intact) ; et les changements de propriétés des objets référencés via le pointeur influent sur l&#39;objet externe.</p>
<p>Par conséquent, en faisant une analogie avec les pointeurs, nous pouvons voir en passant <em>par valeur de l&#39;adresse</em>, ce qu&#39;est exactement un pointeur. Dans ce cas, <em>par partage</em> est une sorte de « sucre syntaxique » qui a l&#39;affectation se comporte comme un pointeur (mais qu&#39;il est impossible de déférencer), et dans le cas de changement de propriété, comme une <em>référence</em> (qui ne requière pas d&#39;opération de déréférencement). Parfois, cela peut être nommé un « <em>pointeur sécurisé</em> ».</p>
<p>Cependant, C / C++ ont également un « sucre » pour référencer des propriétés d&#39;objets sans déréférencer les pointeurs :</p>
<p><em>Code C / C++</em></p>
<pre class="prettyprint linenums"><code>obj-&gt;x
// au lieu de
(*obj).x
</code></pre><p>Le comportement le plus proche du passage <em>par partage</em> en C++ peut être associé aux implémentations de « <em>pointeurs intelligent</em> », par exemple avec <samp>boost::shared_ptr</samp>qui <em>surcharge l&#39;opérateur d&#39;affectation</em> et <em>copie le constructeur</em> à ces fins et ainsi utilise un <em>comptage de référence</em> d&#39;objets, supprimant les objets par GC. Ce type de donnée à même un nom similaire <em>shared</em><em>ptr (« pointeur</em><em>partagé</em> »).</p>
<h2 id="implémentation-javascript">Implémentation JavaScript</h2>
<p>Maintenant nous connaissons la stratégie d&#39;évaluation pour le passage de paramètres qui est utilisée en JavaScript. L&#39;<em>appel par partage</em> : la mutation des propriétés de l&#39;argument influence l&#39;objet externe mais l&#39;affectation d&#39;une nouvelle valeur à l&#39;argument n&#39;influence pas l&#39;objet externe.</p>
<p>Un terme lourd utilisable pour la stratégie de passage utilisée pourrait donc être « appel par valeur où la valeur est une copie de référence ».</p>
<p>L&#39;inventeur du JavaScript, Brendan Eich a également <a href="http://groups.google.com/group/netscape.public.mozilla.jseng/msg/7f95f5eef93c1734">metionné</a> que c&#39;est une copie de référence (copie par adresse) qui est passée.</p>
<p>Plus précisément, ce comportement peut être compris et considéré comme une <em>simple affectation</em> où il y a deux <em>objets différents</em>, mais avec <em>une valeur identique</em> (la copie d&#39;adresse).</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var robertAngier = { x: 10, y: 20 };
var theRealTransportedMan = robertAngier;

alert(theRealTransportedMan === robertAngier); // `true`

theRealTransportedMan.x = 100;
theRealTransportedMan.y = 200;

alert([robertAngier.x, robertAngier.y]); // `[100, 200]`
</code></pre>
<p>C.-à-d. que deux identifiants (liaison de nom) sont liés au même objet en mémoire, <em>partageant</em> cet objet :</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">robertAngierValue: addr(0xFF) /* ----&gt; `{ x: 100, y: 200 }` address 0xFF &lt;----  */ theRealTransportedManValue: addr(0xFF)
</code></pre>
<p>Et l&#39;affectation lie seulement un identifiant à un <em>nouvel objet</em> (avec la nouvelle adresse) mais n’influence pas l&#39;objet précédemment lié_ comme cela aurait été le cas avec une référence :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">theRealTransportedMan = { z: 1, q: 2 };

alert([robertAngier.x, robertAngier.y]); // `[100, 200]` Rien n&#39;a changé
alert([theRealTransportedMan.z, theRealTransportedMan.q]); // `[1, 2]` cependant `theRealTransportedMan` fait maintenant référence au nouvel objet.
</code></pre>
<p>C.-à-d. que maintenant <em>robertAngier</em> et <em>theRealTransportedMan</em> ont une valeur différente, à des adresses différentes</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">robertAngierValue: addr(0xFF) /* ----&gt; `{ x: 100, y: 200 }`, address 0xFF */
theRealTransportedManValue: addr(0xFA) /* ----&gt; `{ z: 1, q: 2 }`, address 0xFA */
</code></pre>
<p>Encore une fois, tout est lié au fait que les valeurs de variable dans le cas d&#39;un type objet <em>sont adressée</em>, mais <em>ne sont pas la structure de l&#39;objet en elle-même</em>. L&#39;affectation d&#39;une variable dans une autre <em>copie</em> sa valeur de référence, et donc les deux variables référence le même emplacement mémoire. La prochaine affectation d&#39;une nouvelle valeur (la nouvelle adresse) va <em>délier</em> le nom de l&#39;ancienne adresse et le <em>lié</em> à la nouvelle. C&#39;est la principale différence avec une stratégie <em>par référence</em>.</p>
<p>Si vous ne considérez que le <em>niveau d&#39;abstraction fournit par de standard ECMA-262</em>, vous ne verrez que le concept de « valeur » dans tous les algorithmes. L&#39;implémention du passage de cette « valeur » (et de ses variantes ; primitives ou objet) n&#39;est pas mise en avant. De ce point de vu, en s’appuyant sur l&#39;abstraction ECMASCript, il est possible de dire précisément et exactement qu&#39;il n&#39;y a que la « valeur » et, en s&#39;accordant au nommage utilisé, <em>seulement des appels par valeurs</em>.</p>
<p>Pour éviter des malentendus (pourquoi les propriétés d&#39;un objet externe peuvent être changés depuis une fonction), il est nécessaire de considérer en détail le <em>niveau d&#39;implémentation</em> qui est l&#39;<em>appel par partage</em>, ou plus lourdement « par pointeur sécurisé qu&#39;il est impossible de déréférencer et d&#39;en changer complètement l&#39;objet, mais dont il est possible de changer les propriétés ».</p>
<h3 id="versions-de-terme">Versions de terme</h3>
<p>Ce peut être « appel par valeur », en spécifiant que c&#39;est <em>le cas spéciale par valeur qui signifie</em> quand la valeur est <em>une copie d&#39;adresse mémoire</em>. De ce point de vu il est possible de dire que  <em>tous les objets sans exception en JavaScript sont passés par valeur</em>, c&#39;est ce qui est actuellement expliqué dans l&#39;abstraction ECMAScript.</p>
<p>Ce peut aussi être « appel par partage », qui permet de mettre en évidence la différence avec l&#39;<em>appel classique par valeur</em> ou l&#39;<em>appel par référence</em>. Dans ce cas il est possible de diviser les types passés : <em>les valeurs primitives sont passées par valeur et les objets par partage</em>.</p>
<p>L&#39;affirmation « les objets sont passés au fonction par référence » formulé ainsi <em>n&#39;est pas vrai en JavaScript</em> et est incorrecte.</p>
<h2 id="conclusion">Conclusion</h2>
<p>J&#39;espère que cet article vous aura aider à comprendre plus en détail l&#39;évaluation de stratégie dans son ensemble et plus particulièrement dans le cas du JavaScript. Ceci met fin à notre petit parcours ES3. Je vous dis à bientôt pour quelques articles ES5 !</p>
<blockquote>
<div>[&lt; Chapitre 8](https://blog.lesieur.name/les-constructeurs-et-les-prototypes/)</div><div style="text-align: right"></div>
</blockquote>
<p><strong>Références</strong></p>
<p>Lectures additionnelles :</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Evaluation_strategy">Evaluation strategy</a>,</li>
<li><a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_value">Call by value</a>,</li>
<li><a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_reference">Call by reference</a>,</li>
<li><a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing">Call by sharing</a>.</li>
</ul>
<p>Ce texte est une libre adaptation française d&#39;une partie de l&#39;excellent billet <a href="http://dmitrysoshnikov.com/ecmascript/ru-chapter-8-evaluation-strategy/">Тонкости ECMA-262-3. Часть 8. Стратегия передачи параметров в функцию.</a> de <a href="http://dmitrysoshnikov.com/">Dmitry Soshnikov</a>.</p>
]]></description>
            <link>http://localhost:7776/la-strategie-d-evaluation/</link>
            <guid isPermaLink="false">59ad5b1f0f44c42f439ea549</guid>
            <category><![CDATA[Concept]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Spécifications]]></category>
            <category><![CDATA[ECMAScript]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Tue, 05 Sep 2017 11:54:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[ES3, Chap 8. — Les constructeurs et les prototypes en JavaScript]]></title>
            <description><![CDATA[<p>Ce billet fait partie de la collection <em>ES3 dans le détail</em> et en constitue le Chapitre 8.</p>
<figure>
    <a href="media/images/upload/prototypes.jpg"><img class="openable" src="media/images/upload/prototypes-mini.png" alt="Chaque couche est reliée à la précédente si bien que chaque entité obtient les caractéristiques de la précédente." width="658" height="500" style="width: 100%;height: auto;"></a>
    <figcaption>Chaque couche est reliée à la précédente si bien que chaque entité obtient les caractéristiques de la précédente.</figcaption>
</figure>

<p>Cet article va traiter de deux points importants de l&#39;implémentation de la programmation orientée objet du point de vue de JavaScript, les fonctions constructeurs et la chaîne des prototypes.</p>
<blockquote>
<div style="float: left;">[&lt; Chapitre 7](https://blog.lesieur.name/les-types/)</div><div style="text-align: right">[Chapitre 9 &gt;](https://blog.lesieur.name/la-strategie-d-evaluation/)</div>
</blockquote>
<h2 id="introduction">Introduction</h2>
<p>Le JavaScript est un langage de programation <em>orienté objet</em> supportant <em>l&#39;héritage par délégation</em> basé sur <em>les prototypes</em>. À ce titre donc, il existe des fonctions constructeurs en rapport avec l&#39;utilisation du mot clé <samp>new</samp> pour la création d&#39;objet d&#39;une part, et il existe d&#39;autre par un mécanisme appelé chaîne des prototypes s&#39;occupant de gérer l&#39;héritage. Nous allons étudier ces deux aspects dans cet article. En complément nous en profiterons pour étudier les méthodes d&#39;accès à un objet qui font appel à la chaîne des prototypes et d&#39;où la notion d&#39;héritage découle.</p>
<h2 id="constructeur">Constructeur</h2>
<p>Les objets en JavaScript sont créés à l&#39;aide de ce que l&#39;on appel : les <em>constructeurs</em>.</p>
<p>Un <em>constructeur</em> est une fonction qui crée et initialise l&#39;objet nouvellement créé.</p>
<p>Pour la <em>création (allocation de mémoire)</em> de l&#39;objet, une méthode interne <samp>[[Construct]]</samp> est utilisée. Le comportement de cette méthode interne est défini par l&#39;implémentation. Tous les constructeurs de fonctions utilisent cette méthode pour allouer de la mémoire aux nouveaux objets.</p>
<p>Pour l&#39;<em>initialisation</em>  de l&#39;objet, c&#39;est cette fois la méthode interne <samp>[[Call]]</samp> qui s&#39;en occupe en appelant une fonction dédiée dans le contexte de l&#39;objet nouvellement créé.</p>
<p>Notez que d&#39;un point de vu utilisateur, seule la phase d&#39;<em>initialisation</em> est accessible et programmable. Cette objet nouvellement créé est accessible dans cette fonction d&#39;<em>initialisation</em> via <samp>this</samp>. C&#39;est cet objet <samp>this</samp> qui sera implicitement retourné. Nous pouvons, puisque nous avons la main sur cette phase d&#39;initialisation, retourner autre chose que cet objet nouvellement créé si l&#39;envie nous en prend avec <samp>return</samp> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// Cette fonction est un counstructeur...
function Character() {
    // mettre à jour l&#39;objet nouvellement créé
    this.level = 10;
    // mais retourner un objet différent
    return [1, 2, 3];
}

// ...si elle est appelée avec le mot-clé `new`
var tiz = new Character();
console.log(tiz.level, tiz); `undefined`, `[1, 2, 3]`
</code></pre>
<p>En faisant référence à l&#39;<a href="https://blog.lesieur.name/les-fonctions/#algorithme-de-cr-ation-de-fonction">algorithme de création de fonction</a> dont nous avons discuté dans le <a href="https://blog.lesieur.name/les-fonctions/">chapitre 5</a>, nous voyons que cette fonction est un objet natif se trouvant parmi d&#39;autres propriétés internes comme <samp>[[Construct]]</samp> et <samp>[[Call]]</samp> ou propriétés explicites comme <samp>prototype</samp>, la référence au prototype des futurs objets.</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">F = new NativeObject() // objet natif innacessible

F.[[Class]] = &quot;Function&quot;

.... // autres propriétés

F.[[Call]] = &lt;réference à la fonction&gt; // la fonction elle-même

F.[[Construct]] = internalConstructor // constructeur interne général pour l&#39;allocation mémoire

.... // autres propriétés

// prototype de l&#39;object crée par le constructeur de F
__objectPrototype = new Object()
__objectPrototype.constructor = F // `{DontEnum}`
F.prototype = __objectPrototype
</code></pre>
<p>Ainsi, un objet qui peut être activé par l&#39;appel des parenthèses <samp>(</samp> et <samp>)</samp> est appelé une <em>fonction</em>, et possède donc cette propriété <samp>[[Call]]</samp>. Il y a également la propriété <samp>[[Class]]</samp> qui est responsable de la distinction entre un objet simple et un objet activable puisque, dans le cas d&#39;une fonction, celui-ci vaut <samp>&quot;Function&quot;</samp>. L&#39;opérateur <samp>typeof</samp>, sur ces objets retourne la valeur <samp>function</samp>. Cependant, ceci est vrai pour des <em>objets natifs</em>. Dans le cas d&#39;<em>objets hôtes activables</em>, l&#39;opérateur <samp>typeof</samp> peut retourner d&#39;autres valeurs. Exemple avec <samp>window.console.log(...)</samp> dans IE :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// dans IE : &quot;Object&quot;, &quot;object&quot;, dans d&#39;autres : &quot;Function&quot;, &quot;function&quot;
console.log(Object.prototype.toString.call(window.console.log));
console.log(typeof window.console.log); // &quot;Object&quot;
</code></pre>
<p>La méthode interne <samp>[[Construct]]</samp> est activée avec l&#39;opérateur <samp>new</samp> appliqué à la fonction dites constructeur. Comme nous l&#39;avons vu, c&#39;est cette méthode qui est responsable de l&#39;allocation mémoire et de la création des objets. S&#39;il n&#39;y a aucun arguments, l&#39;appel entre parenthèse peut être omis :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Character(level) { // constructeur `Character`
    this.level = level || 10;
}

// sans arguments, l&#39;appel
// avec les parenthèse peut être omis
var agnes = new Character; // ou `new Character()`;
console.log(agnes.level); // `10`

// passage explicite
// de la valeur de l&#39;argument `level`
var edea = new Character(20);
console.log(edea.level); // `20`
</code></pre>
<p>Et comme nous le savons également <a href="https://blog.lesieur.name/la-valeur-de-this/">la valeur de this</a> à l&#39;intérieur du constructeur (lors de la phase d&#39;initialisation) est affectée d&#39;un nouvel objet.</p>
<h3 id="algorithme-de-création-dobjet">Algorithme de création d&#39;objet</h3>
<p>Le comportement de la méthode <samp>[[Construct]]</samp> peut être décrit ainsi :</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">O = new NativeObject()

// la propriété `[[Class]]` est mise à `&quot;Object&quot;`,
// c.-à-d. représente un simple objet
O.[[Class]] = &quot;Object&quot;

// Prend comme référence de prototype
// la valeur de `F.prototype` de la fonction
var __objectPrototype = F.prototype

// on associe le prototype `O.[[Prototype]]` de l&#39;objet créé
if (isAnObject(__objectPrototype)) {
    O.[[Prototype]] = __objectPrototype
} else {
    O.[[Prototype]] = Object.prototype
}

// initialisation du nouvel objet créé
// utilisation de `F.[[Call]]`;
// affectiation à la valeur de `this` de l&#39;objet `O`
// `initialParameters` sont les arguments passé au constructeur
R = F.[[Call]].apply(O, initialParameters)

if (isAnObject(R)) {
    // on retourne ce que l&#39;utilisateur demande avec `return`
    return R
} else {
    // sinon on retourne l&#39;objet nouvellement créé
    return O
}
</code></pre>
<p>Notez deux fonctionnalités majeures :</p>
<p>Premièrement, le <samp>[[Prototype]]</samp> de l&#39;objet créé est défini à partir de la propriété <samp>prototype</samp> d&#39;une fonction au moment <em>courant</em> (cela siginifie que le prototype de deux objets créés depuis un même constructeur peut varier si la propriété prototype de la fonction change ensuite).</p>
<p>Deuxièmement, comme nous l&#39;avons mentionné plus haut, si lors de l&#39;initialisation de l&#39;objet, <samp>[[Call]]</samp> retourne un <em>objet</em>, c&#39;est cet objet qui sera utilisé comme le <em>résulat</em> de l&#39;expression avec mot clé <samp>new</samp> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Character() {}
Character.prototype.level = 10;

var ringabel = new Character();
console.log(a.level); // `10` par délégation, depuis le prototype

// affectons a la propriété `prototype` un nouvel objet
// qui va explicitement définir la propriété `constructeur`
Character.prototype = {
    constructor: Character,
    hp: 100
};

var yew = new Character();
// object `yew` a un nouveau prototype
console.log(yew.level); // `undefined`
console.log(yew.hp); // `100` par délégation, depuis le prototype

// cependant, le prototype de l&#39;objet `ringabel`
// est toujours l&#39;ancien (nous allons voir pourquoi plus bas)
console.log(ringabel.level); // `10` par délégation, depuis le prototype

function Asterisk() {
    this.power = 10;
    return new Array();
}

// si le constructeur de `Asterisk` n&#39;a pas de `return`
// (ou retourne `this`), et bien l&#39;objet `this`
// sera utilisé, sinon ça sera le tableau
var knight = new Asterisk();
console.log(knight.power); // `undefined`
console.log(Object.prototype.toString.call(knight)); // `[object Array]`
</code></pre>
<h3 id="résumons">Résumons</h3>
<p>Tout objet activable (appelable ou executable) est une fonction. Les fonctions activées avec le mot clé <samp>new</samp> sont dites des fonctions constructeurs (toute fonction est donc possiblement un constructeur dès lors qu&#39;elle ne retourne rien, ou qu&#39;elle retourne <samp>this</samp>). C&#39;est ce mécanisme qui créé de nouveaux objets en mémoire basés sur un prototype.</p>
<p>Regardons maintenant ce prototype plus en détail.</p>
<h2 id="prototype">Prototype</h2>
<p>Tous les objets ont un prototype (exceptions faites de certains objets systèmes). La communication avec le prototype est organisée via la propriété <em>interne</em>, <em>implicite</em> et <em>inaccessible <samp>[[Prototype]]</samp>. Un prototype peut être aussi bien un _objet</em> ou la valeur <samp>null</samp>.</p>
<h3 id="propriété-constructor">Propriété <samp>constructor</samp></h3>
<p>Dans l&#39;exemple ci-dessus il y a deux points importants. Le premier concerne la propriété <samp>constructor</samp> de la propriété <samp>prototype</samp>.</p>
<p>Comme nous l&#39;avons vu dans l&#39;algorithme de la fonction de création d&#39;objets, la propriété <samp>constructor</samp> est affectée à la propriété <samp>prototype</samp> lors de la phase de <em>création</em> de la fonction. La valeur de cette propriété est une <em>référence circulaire</em> à la fonction <em>elle-même</em> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Character() {}
var magnolia = new Character();
console.log(magnolia.constructor); // `function Character() {}` par délégation
console.log(magnolia.constructor === Character); // `true`
</code></pre>
<p>Souvant dans ce cas il y a un malentendu. La propriété <samp>constructor</samp> est <em>incorrectement</em> traitée comme une propriété appartenant à l&#39;objet créé. Alors que, comme nous venons de le voir, cette propriété appartient au <em>prototype</em> de la fonction constructeur (ici <samp>Character</samp>) et est accessible par <em>héritage</em>.</p>
<p>Via la propriété <samp>constructor</samp> héritée, les objets créés peuvent <em>indirectement</em> obtenir une référence sur l&#39;objet prototype du constructeur :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Character() {}
Character.prototype.level = new Number(10);

var janne = new Character();
console.log(janne.constructor.prototype); // `[object Object]`

console.log(janne.level); // `10`, par délegation
// la même chose que `janne.[[Prototype]].level`
console.log(janne.constructor.prototype.level); // `10`

console.log(janne.constructor.prototype.level === janne.level); // `true`
</code></pre>
<p>Notez que les propriétés <samp>constuctor</samp> et <samp>prototype</samp> peuvent être <em>redéfinie</em> après que l&#39;objet soit créé. Dans ce cas l&#39;objet perd la référence mise en place par le mécanisme ci-dessus.</p>
<p>Cependant, si nous <em>changeons</em> la propriété <samp>prototype</samp> de la fonction <em>complètement</em> (en <em>assignant</em> un nouvel objet), la référence au constructeur <em>original</em> (ainsi que le prototype original) <em>sont perdu</em>.</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Character() {}
Character.prototype = {
    level: 10
};

var nikolai = new Character();
console.log(nikolai.level); // `10`
console.log(nikolai.constructor === Character); // `false` !
</code></pre>
<p>Et donc c&#39;est pourquoi il est intéressant de restaurer la référence manuellement :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Character() {}
Character.prototype = {
    constructor: Character,
    level: 10
};

var nikolai = new Character();
console.log(nikolai.x); // `10`
console.log(nikolai.constructor === Character); // `true`
</code></pre>
<p>Notons cependant que la propriété <samp>constructor</samp> <em>manuellement restaurée</em>, par contraste avec <em>l&#39;originale perdue</em>, n&#39;a pas d&#39;attribut <samp>{DontEnum}</samp> et, par conséquent, est énumérable dans une boucle <samp>for..in</samp> sur le <samp>Character.prototype</samp>.</p>
<blockquote>
<p>ES5 introduit la possibilité de contrôler l&#39;état de l&#39;énumération des propriétés avec l&#39;attribut <samp>[[Enumerable]]</samp>.</p>
</blockquote>
<blockquote>
<p><em>Code JavaScript</em></p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">var airy = { level: 10 };
</code></pre>
</blockquote>
<blockquote>
<p>Object.defineProperty(airy, &quot;advice&quot;, {
    value: 20,
    enumerable: false // aka <samp>{DontEnum} = true</samp>
});</p>
</blockquote>
<blockquote>
<p>console.log(airy.level, airy.advice); // <samp>10</samp>, <samp>20</samp></p>
</blockquote>
<blockquote>
<p>for (var k in airy) {
    console.log(k); // only <samp>level</samp>
}</p>
</blockquote>
<blockquote>
<p>var levelDesc = Object.getOwnPropertyDescriptor(airy, &quot;level&quot;);
var adviceDesc = Object.getOwnPropertyDescriptor(airy, &quot;advice&quot;);</p>
</blockquote>
<blockquote>
<p>console.log(
    levelDesc.enumerable, // <samp>true</samp>
    adviceDesc.enumerable  // <samp>false</samp>
);</p>
<pre class="prettyprint linenums"><code>
</code></pre></blockquote>
<h3 id="propriétés-explicites-prototype-vs-propriétés-implicite-prototype">Propriétés explicites <samp>prototype</samp> vs. propriétés implicite <samp>[[Prototype]]</samp></h3>
<p>Souvent, le prototype <samp>[[Prototype]]</samp> d&#39;un objet, qui est interne à l&#39;objet et inaccessible est incorrectement confondu avec la référence explicite <samp>prototype</samp> de la fonction constructeur à ce prototype. Oui, effectivement, ils font référence au <em>même objet</em>, mais ce sont deux propriétés différentes :</p>
<p><strong>Code JavaScript</strong></p>
<pre class="prettyprint linenums"><code class="language-js">a.[[Prototype]] ----&gt; Prototype &lt;---- A.prototype
</code></pre>
<p>De plus, le <samp>[[Prototype]]</samp> d&#39;un objet créé par un constructeur donne la valeur que possédait la propriété <samp>prototype</samp> du constructeur lors de la phase de création de l&#39;objet.</p>
<p>Cependant, remplacer la propriété <samp>prototype</samp> du constructeur <em>n&#39;affecte pas</em> la référence <samp>[[Prototype]]</samp> des <em>objets déjà créés</em>. Ce sera <em>uniquement</em> la propriété <samp>prototype</samp> du constructeur qui changera ! Cela siginifie que des <em>nouveaux objets</em> auront ce <em>nouveau prototype</em>, mais les <em>objets déjà créés</em> (avant que la propriété <samp>prototype</samp> ne change), auront une référence vers le <em>vieux prototype</em>. Cette référence <em>ne pourra plus être changée</em> :</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">// Création de `anne`
anne = new Character

// État avant le changement de `A.prototype`
anne.[[Prototype]] // ----&gt; Prototype
Character.prototype // ----&gt; Prototype

// Changement de prototype
Character.prototype = newPrototype

// Création de `airy`
airy = new Character

// État après changement
Character.prototype ----&gt; newPrototype
anne.[[Prototype]] ----&gt; Prototype // les objets déjà créés ont une référence à l&#39;ancien prototype
airy.prototype ----&gt; newPrototype // les nouveaux objets auront une référence au nouveau prototype
</code></pre>
<p>Par exemple :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Character() {}
Character.prototype.level = 10;

var tiz = new Character();
console.log(tiz.level); // `10`

Character.prototype = {
    constructor: Character,
    level: 20,
    hp: 30
};

// l&#39;objet `tiz` utilise l&#39;ancien
// prototype via sa référence
// implicite `[[Prototype]]`
console.log(tiz.level); // `10`
console.log(tiz.hp) // `undefined`

var yew = new Character();

// mais les nouveaux objets, à la création,
// ont bien une référence au nouveau prototype
console.log(yew.level); // `20`
console.log(yew.hp); // `30`
</code></pre>
<p>Parfois on peut lire des articles sur le JavaScript disant que <em>« le changement dynamique de l&#39;objet du prototype va affecter tous les objets qui auront ce nouveau prototype »</em> ; cela est incorrect. Un nouveau prototype ré-affecté sera utilisé <em>uniquement</em> sur les <em>nouveaux</em> objets créés après le changement.</p>
<p>La règle principale ici c&#39;est : le prototype d&#39;un objet est assigné au moment de la <em>création</em> et ne <em>peut pas être ré-assigné</em> par celui que les nouveaux objets auront. En utilisant la référence explicite <samp>prototype</samp> depuis le constructeur, il est <em>uniquement</em> possible de muter l&#39;objet, c.-à-d. d&#39;<em>ajouter</em>, de <em>modifier</em> ou de <em>supprimer</em> des propriétés existantes dans le prototype de l&#39;objet afin de répercuter les changements dans les objets déjà créés.</p>
<h3 id="la-propriété-non-standard-__proto__">La propriété non-standard <samp>__proto__</samp></h3>
<p>Cependant, certaines implémentations, comme par exepmle, SpiderMonkey, fournissent une référence <em>explicite</em> vers l&#39;objet du prototype via la propriété non standard <samp>__proto__</samp> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Character() {}
Character.prototype.level = 10;

var agnes = new Character();
console.log(agnes.level); // `10`

var __newPrototype = {
    constructor: Character,
    level: 20,
    hp: 30
};

// référence au nouvel objet
Character.prototype = __newPrototype;

var ringabel = new Character();
console.log(ringabel.level); // `20`
console.log(ringabel.hp); // `30`

// `agnes` utilise toujours une référence
// sur l&#39;ancien objet
console.log(agnes.level); // `10`
console.log(agnes.hp); // `undefined`

// changeons explicitement le prototype de `agnes`
agnes.__proto__ = __newPrototype;

// maintenant `agnes` fait également
// référence au nouvel objet
console.log(agnes.level); // `20`
console.log(agnes.hp); // `30`
</code></pre>
<blockquote>
<p>Notez que ES5 a introduit la méthode <samp>Object.getPrototypeOf</samp> qui retourne directement la valeur de la propriété <samp>[[Prototype]]</samp> d&#39;un objet, le prototype original de l&#39;instance. Cependant, à la différence de <samp>__proto__</samp>, cela ne fournit qu&#39;<em>un accesseur</em>, et ne perment en aucun cas de changer le prototype.</p>
</blockquote>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var luxendarc = {};
Object.getPrototypeOf(luxendarc) == Object.prototype; // `true`
</code></pre>
<h3 id="lobjet-est-indépendant-de-son-constructeur">L&#39;objet est indépendant de son constructeur</h3>
<p>Comme le prototype de l&#39;objet créé est indépendant du constructeur et de la propriété <samp>prototype</samp> du constructeur, cela permet la chose suivante : l&#39;objet du prototype de la phase de <em>création</em> peut être <em>supprimé</em>. Le prototype de l&#39;objet créé va continuer d&#39;exister, toujours référencé par la propriété <samp>[[Prototype]]</samp> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Asterisk() {}
Asterisk.prototype.power = 10;

var whiteMage = new Asterisk();
console.log(whiteMage.power); // `10`

// mise explicite de la référence
// du constructeur `Asterisk` à `null`
Asterisk = null;

// mais, il est toujours possible de créer
// des objets via la référence indirecte
// depuis les autres objets si
// la propriété `constructor` n&#39;a pas été changée
var blackMage = new whiteMage.constructor();
console.log(blackMage.power); // `10`

// suppression de la référence implicite,
// après ça, `whiteMage.constructor` ainsi que `blackMage.constructor`
// feront référence à la fonction `Object`
// par défaut, mais plus à `Asterisk`
delete whiteMage.constructor.prototype.constructor;

// il ne sera plus possible de créer des objets
// du constructeur `Asterisk`
// mais ces deux objets auront toujours
// une référence à leur prototype dans `[[Prototype]]`
console.log(whiteMage.power); // `10`
console.log(blackMage.power); // `10`
</code></pre>
<h3 id="lopérateur-instanceof">L&#39;opérateur <samp>instanceof</samp></h3>
<p>Il y a un lien entre la référence explicite au prototype, via la propriété <samp>prototype</samp> du constructeur et l&#39;opérateur <samp>instanceof</samp>.</p>
<p>Cet opérateur fonctionne de pair avec la <em>chaîne des prototypes</em> d&#39;un objet et pas uniquement avec son constructeur lui-même. Prennez ça en compte, car il y a souvent des incompréhensions à ce niveau. Quand on fait cette vérification :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">if (tiz instanceof Character) {
    /* ... */
}
</code></pre>
<p>cela <em>ne veut pas dire</em> que l&#39;objet <samp>tiz</samp> a <em>été créé</em> par le constructeur <samp>Character</samp> !</p>
<p>Tous ce que fait l&#39;opérateur <samp>instanceof</samp> c&#39;est de prendre la valeur de <samp>Character.prototype</samp> et vérifier sa <em>présence</em> dans la <em>chaîne des prototypes</em> de <samp>tiz</samp>, en commençant par <samp>tiz.[[Prototype]]</samp>. L&#39;opérateur <samp>instanceof</samp> est activé par la méthode interne <samp>[[HasInstance]]</samp> du constructeur.</p>
<p>Regardons un exemple :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Character() {}
Character.prototype.level = 10;

var magnolia = new Character();
console.log(magnolia.level); // `10`

console.log(level instanceof Character); // `true`

// Si maintenant on met `Character.prototype`
// à `null`...
Character.prototype = null;

// ...et bien l&#39;objet `magnolia` a
// toujours accès à son
// prototype, via `magnolia.[[Prototype]]`
console.log(magnolia.level); // `10`

// cependant, l&#39;opérateur `instanceof`
// ne pourra plus fonctionner, car
// il commence son examination depuis la
// propriété `prototype` du constructeur.
console.log(magnolia instanceof Character); // `Character.prototype` n&#39;est pas défini`
</code></pre>
<p>Il est également possible de créer soit même le constructeur d&#39;un objet, et <samp>instanceof</samp> retournera <samp>true</samp> en vérifiant l&#39;instance d&#39;un autre objet. Tout ce qu&#39;il faut faire c&#39;est définir soit même la propriété d&#39;objet <samp>[[Prototype]]</samp> et la propriété <samp>prototype</samp> du constructeur avec le <em>même objet</em> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Asterisk() {}
var thief = new Asterisk();

console.log(thief instanceof Asterisk); // `true`

function Weapon() {}

var __proto = {
    constructor: Weapon
};

Weapon.prototype = __proto;
thief.__proto__ = __proto;

console.log(thief instanceof Weapon); // `true`
console.log(thief instanceof Asterisk); // `false`
</code></pre>
<h3 id="stockage-via-prototype-pour-partager-des-méthodes-et-propriétés">Stockage via prototype pour partager des méthodes et propriétés</h3>
<p>L&#39;application la plus utile des prototypes en JavaScript est le stockage des <em>méthodes</em>, des <em>états par défaut</em> et des <em>propriétés partagées</em> des objets.</p>
<p>En effet, les objets peuvent avoir leur propre <em>état</em>, mais les méthodes sont habituellement les mêmes. C&#39;est pourquoi, pour une optimisation de la mémoire, les méthodes sont habituellement définies dans le prototype. Cela signifie que tous les objets créés par un constructeur, <em>partagent</em> toujours les <em>mêmes</em> méthodes.</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Character(stat) {
    this.stat = stat || 100;
}

Character.prototype = (function () {

    // initialisation du contexte,
    // utilisation d&#39;un objet additionnel

    var sharedStat = 500;

    function helper() {
        console.log(&#39;stat partagée : &#39; + sharedStat);
    }

    function attack() {
        console.log(&#39;attaque : &#39; + this.stat);
    }

    function defence() {
        console.log(&#39;défense : &#39; + this.stat);
        helper();
    }

    // le prototype lui-même.
    return {
        constructor: Character,
        attack: attack,
        defence: defence
    };

})();

var tiz = new Character(10);
var agnes = new Character(20);

tiz.attack(); // `attaque : 10`
tiz.defence(); // `défense : 10`, `stat partagée : 500`

agnes.attack(); // `attaque : 20`
agnes.defence(); // `défense : 20`, `stat partagée : 500`

// les deux objets utilisent
// la même méthode
// le même prototype
console.log(tiz.attack === agnes.attack); // `true`
console.log(tiz.defence === agnes.defence); // `true`
</code></pre>
<h2 id="lire-et-écrire-des-propriétés">Lire et écrire des propriétés</h2>
<p>Comme nous l&#39;avons déjà mentionné, lire et écrire des propriétés se fait grâce à l&#39;aide des méthodes internes <samp>[[Get]]</samp> et <samp>[[Put]]</samp>. La méthode est activée grâce à l&#39;<em>accesseur de propriété</em> que ce soit via la notation par point ou par crochet droit :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// écrire
yew.level = 10; // `[[Put]]` est appelée

console.log(yew.level); // `10`, `[[Get]]` est appelée
console.log(yew[&#39;level&#39;]); // la même chose
</code></pre>
<h3 id="la-méthode-get">La méthode <samp>[[Get]]</samp></h3>
<p>La méthode <samp>[[Get]]</samp> considère les propriétés venant <em>de la chaîne des prototypes</em> comme des objets aussi. Ainsi, les propriétés d&#39;un prototype sont accessibles depuis l&#39;objet lui-même. Ainsi pour <samp>O.[[Get]](P)</samp> avec <samp>O</samp> comme objet et <samp>P</samp> comme propriété réclamée, nous avons le mécanisme suivant :</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">// si c&#39;est sa propre propriété,
// on la retourne
if (O.hasOwnProperty(P)) {
    return O.P
}

// sinon, on analyse le prototype
var __proto = O.[[Prototype]]

// s&#39;il n&#39;y a pas de prototype (cela est possible dans le dernier maillons de la chaîne pour `Object.prototype.[[Prototype]]`,
// qui est égale à `null`),
// on retourne `undefined`
if (__proto === null) {
    return undefined
}

// sinon, on appel la méthode `[[Get]]` récurssivement
// maintenant pour le prochain prototype; c.-à-d.
// que l&#39;on traverse la chaîne des prototypes : et on essaye de trouver
// la propriété, puis ensuiste dans le prototype de prototype
// et ainsi de suite jusqu&#39;à ce que le prototype soit égal à `null`
return __proto.[[Get]](P)
</code></pre>
<p>Notez que, puisque la méthode <samp>[[Get]]</samp> dans un des cas retourne <samp>undefined</samp>, il est possible de vérifier la présence d&#39;une variable comme ceci :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">if (window.someObject) {
    /* ... */
}
</code></pre>
<p>Ici, la propriété <samp>someObject</samp> n&#39;est pas trouvée dans <samp>window</samp>, ni dans le prototype, ni dans le prototype du prototype, et l&#39;algorithme retourne alors <samp>undefined</samp>.</p>
<p>Notez que c&#39;est <em>exactement</em> le <em>test de présence</em> dont est responsable l&#39;opérateur <samp>in</samp>. Il va également fouiller dans la chaîne des prototypes :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">if (&#39;someObject&#39; in window) {
    /* ... */
}
</code></pre>
<p>Cela aide a éviter les cas où, par exemple, <samp>someObject</samp> serait égale à <samp>false</samp> et ou le première vérification aurait échouée malgré l&#39;existance de la propriété.</p>
<h3 id="la-méthode-put">La méthode <samp>[[Put]]</samp></h3>
<p>La méthode <samp>[[Put]]</samp> quand a elle met à jour sa <em>propre</em> propriété d&#39;objet et <em>masque</em> les propriétés du même nom venant d&#39;un prototype plus haut. Voyons cela avec l&#39;algorithme de <samp>O.[[Put]](P, V)</samp> ou <samp>O</samp> est l&#39;objet, <samp>P</samp> la propriété et <samp>V</samp> la valeur.</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">O.[[Put]](P, V):

// s&#39;il n&#39;est pas possible d&#39;écrire
// dans cette propriété
// alors on ne fait rien.
if (!O.[[CanPut]](P)) {
    return
}

// si l&#39;objet ne possède pas cette propriété,
// alors on la crée; tous les attributs
// de propriété étant placés à `false`.
if (!O.hasOwnProperty(P)) {
    createNewProperty(O, P, attributes: {
        ReadOnly: false,
        DontEnum: false,
        DontDelete: false,
        Internal: false
    })
}

// changer la valeur.
// si la propriété existait déjà, ses
// attributs restent inchangés, seule la valeur
// change
O.P = V

return
</code></pre>
<p>Par exemple :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">Object.prototype.level = 100;

var edea = {};
console.log(edea.level); // `100`, hérité

edea.level = 10; // `[[Put]]`
console.log(edea.level); // `10`, possédé

delete edea.level;
console.log(edea.level); // again `100`, hérité
</code></pre>
<p>Notez qu&#39;il <em>n&#39;</em> est <em>pas</em> possible de <em>masquer des propriétés héritées en lecture seule</em>. Le résultat de l&#39;affectation est simplement ignoré. Ceci est controllé par la méthode interne <samp>[[CanPut]]</samp>.</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// Par exemple, la propriété `length`
// de l&#39;objet `String` est en lecture seule ; faisons de
// `String` le prototype de notre objet et essayons
// de masquer la propriété `length`

function SuperString() {
    /* rien */
}

SuperString.prototype = new String(&quot;abc&quot;);

var luxendarc = new SuperString();

console.log(luxendarc.length); // `3`, la longeur de `abc`

// essayons de la masquer
luxendarc.length = 5;
console.log(luxendarc.length); // toujours `3`
</code></pre>
<p>En mode strict de ES5, tenter de modifier une propriété en lecture seule lève l&#39;erreur <samp>TypeError</samp>.</p>
<h3 id="accesseurs-de-propriété">Accesseurs de propriété</h3>
<p>Comme expliqué, les méthodes internes <samp>[[Get]]</samp> et <samp>[[Put]]</samp> sont activées par <em>les accesseurs de propriété</em> disponiblent dans JavaScript via la <em>notation avec point</em> ou la <em>notation avec _crochet droit</em>. La notation avec point est utilisée quand le nom de propriété est un identifieur valide ou connu à l&#39;avance alors que la notation avec crochet droit permet l&#39;utilisation de noms invalides ou dynamiques.</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var rpg = { testProperty: 10 };

console.log(rpg.testProperty); // `10`, notation avec point
console.log(rpg[&#39;testProperty&#39;]); // `10`, notation avec crochet droit

var propertyName = &#39;Propriété&#39;;
console.log(rpg[&#39;test&#39; + propertyName]); // `10`, notation dynamique avec crochet
</code></pre>
<p>Il y a encore une fonctionnalité importante : les accesseurs appellent toujours la conversion <samp>ToObject</samp> pour les objets placés sur la partie gauche de la propriété accession. Et du fait de cette conversion implicite, il est <em>possible de dire</em> « <em>tout en JavaScript est un objet</em> » (cependant comme nous le savons déjà, bien entendu, tout n&#39;est pas objets, il y a également des valeurs primitives).</p>
<p>Si nous utilisons des accesseurs de propriété sur <em>des valeurs primitives</em>, nous créons juste un <em>objet encadrant immédiat</em> correspondant à cette valeur. Une fois le travail terminé, cet objet encadrant est <em>supprimé</em>.</p>
<p>Exemple :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var level = 10; // valeur primitive

// mais si on le demande, il y aura
// accès à la méthode, comme si c&#39;était un objet.
console.log(level.toString()); // `&quot;10&quot;`

// nous pouvons également
// (tenter de) créer une nouvelle
// propriété dans la primitive `level` en appelant `[[Put]]`
level.test = 100; // et cela semble fonctionner.

// mais, `[[Get]]` ne retourne
// pas la valeur de cette propriété, et
// l&#39;algorithme retourne `undefined`
console.log(level.test); // `undefined`
</code></pre>
<p>Alors, pourquoi dans cet exemple la valeur « primitive » de <samp>level</samp> à accès à la méthode <samp>toString</samp> mais, n&#39;a pas accès à la propriété nouvellement crée <samp>test</samp> ?</p>
<p>La réponse est simple :</p>
<p>En premier lieu, comme déjà dit, après que l&#39;accesseur de propriété ai été appliqué, on ne manipule <em>pas une primitive</em>, mais un <em>objet intermédiaire</em>. Dans ce cas, <samp>new Number(level)</samp> est utilisé, et par délégation la méthode <samp>toString</samp> de la chaîne du prototype :</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">// Algorithme d&#39;évaluation de `level.toString()`

// 1.
wrapper = new Number(level)
// 2.
wrapper.toString() // `&quot;10&quot;`
// 3.
delete wrapper
</code></pre>
<p>Maintenant, la méthode <samp>[[Put]]</samp> crée également son <em>propre objet intermédiaire englobant</em> quand la propriété <samp>test</samp> est évaluée :</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">// Algorithme d&#39;évaluation de `level.test = 100`

// 1.
wrapper = new Number(level)
// 2.
wrapper.test = 100
// 3.
delete wrapper
</code></pre>
<p>Nous voyons à l&#39;étape 3 que l&#39;objet encadrant est <em>supprimé</em> et que la propriété <samp>test</samp> <em>nouvellement créée</em> a été supprimée elle aussi à la suppression de l&#39;objet lui-même.</p>
<p>Quand <samp>[[Get]]</samp> est utilisé de nouveau sur l&#39;accesseur de propriété créé, il crée encore une fois un nouvel objet encadrant qui lui, <em>ne sait rien</em> à propos d&#39;une quelconque propriété <samp>test</samp> :</p>
<p><em>Pseudo-code</em></p>
<pre class="prettyprint linenums"><code class="language-js">// Algorithme d&#39;évaluation de `level.test`

// 1.
wrapper = new Number(level)
// 2.
wrapper.test // `undefined`
// 3.
delete wrapper
</code></pre>
<p>Donc faire référence à une propriété ou méthode depuis une valeur <em>primitive</em> n&#39;a de sens que pour la <em>lecture</em> de propriétés. Aussi, quand une valeur primitive accède souvent à des propriétés, pour économiser du temps de ressources, cela peut avoir du sens de directement la remplacer par sa représentation objet. Et, au contraire, si la valeur n&#39;est utilisée que pour de petits calculs qui ne dépendent d&#39;aucunes propriétés d&#39;accès, il sera plus performant d&#39;utiliser une valeur primitive à la place.</p>
<h2 id="héritage">Héritage</h2>
<p>Comme nous le savons, le JavaScript utilise <em>l&#39;héritage par délégation basé sur les prototypes</em>.</p>
<p>Chaînage et prototype sont également souvent mentionnés en tant que <em>chaîne de prototype</em>.</p>
<p>En fait, l&#39;intégralité de l&#39;implémentation et l&#39;analyse de la délégation se réduit au travail effectué par <samp>[[Get]]</samp> et déjà mentionné préceddement.</p>
<p>Si vous comprennez intégralement ce simple algorithme de la méthode <samp>[[Get]]</samp>, la question de l&#39;héritage en JavaScript disparait d&#39;elle-même et la réponse devient clair.</p>
<p>Souvent sur les forums, quand les discussions se tournent vers l&#39;héritage en JavaScript, je montre, en tant qu&#39;exemple, seulement une ligne de code JavaScript qui représente exactement la définition d&#39;une structure d&#39;objet du langage et montre la délégation basée sur l&#39;héritage. La ligne de code est vraiment simple :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">console.log(1..toString()); // `&quot;1&quot;`
</code></pre>
<p>Maintenant, comme nous connaissons l&#39;algorithme de la méthode <samp>[[Get]]</samp> et les accesseurs de propriétés, nous pouvons voir ce qu&#39;il se passe ici :</p>
<ol>
<li><p>Depuis la valeur primitive <samp>1</samp>, un <em>objet encadrant</em> équivalent à <samp>new Number(1)</samp> est créé.</p>
</li>
<li><p>La méthode <samp>toString</samp> héritée est appelée depuis cet <em>objet encadrant</em>.</p>
</li>
</ol>
<p>Pourquoi héritée ? Car les objets JavaScript peuvent avoir leurs <em>propres</em> propriétés, et que l&#39;objet encadrant créé dans ce cas, n&#39;a pas sa propre méthode <samp>toString</samp>. Cependant, il en <em>hérite</em> par délégation via son prototype, c.-à-d. utilise <samp>Number.prototype</samp>.</p>
<blockquote>
<p>Notez la subtilité de la syntaxe. Deux points dans l&#39;exemple précédent n&#39;est pas <em>une erreur</em>. Le premier point est utilisé pour <em>la partie fractionnée du nombre</em>, et le second point est quand à lui <em>l&#39;accesseur de propriété</em> :</p>
</blockquote>
<blockquote>
<p><em>Code JavaScript</em></p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">1.toString(); // `SyntaxError` !
</code></pre>
</blockquote>
<blockquote>
<p>(1).toString(); // OK</p>
</blockquote>
<blockquote>
<p>1 .toString(); // OK (espace après 1)</p>
</blockquote>
<blockquote>
<p>1..toString(); // OK</p>
</blockquote>
<blockquote>
<p>1<a href="">&#39;toString&#39;</a>; // OK</p>
<pre class="prettyprint linenums"><code>
</code></pre></blockquote>
<h3 id="chaîne-de-prototype">Chaîne de prototype</h3>
<p>Montrons comment créer cette chaîne avec des objets définis par les utilisateurs. C&#39;est très simple :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Monster() {
    console.log(&#39;Monster.[[Call]] activé&#39;);
    this.attack = 10;
}
Monster.prototype.power = 20;

var monster = new Monster();
console.log([monster.attack, monster.power]); // `10` (possédé), `20` (délégué)

function Humanoid() {}

// la variante la plus simple du chaînage de prototype
// est de chaîner la valeur d&#39;un enfant prototype
// a un nouvel objet créé,
// avec le constructeur du parent.
Humanoid.prototype = new Monster();

// fixons la propriété `constructor`, sinon elle vaudra `Monster`
Humanoid.prototype.constructor = Humanoid;

var goblin = new Humanoid();
console.log([goblin.attack, goblin.power]); // `10`, `20`, les deux sont délégués

// `[[Get]] goblin.attack` :
// `goblin.attack` (pas trouvé) --&gt;
// `goblin.[[Prototype]].attack` (trouvé) - `10`

// `[[Get]] goblin.power` :
// `goblin.power` (pas trouvé) --&gt;
// `goblin.[[Prototype]].power` (pas trouvé) --&gt;
// `goblin.[[Prototype]].[[Prototype]].power` (trouvé) - `20`

// où `goblin.[[Prototype]] === Humanoid.prototype`,
// et `goblin.[[Prototype]].[[Prototype]] === Monster.prototype`
</code></pre>
<p>Cette approche a deux fonctionnalités.</p>
<p>La première, <samp>Humanoid.prototype</samp> va contenir la propriété <samp>attack</samp>. Mais cela n&#39;est pas correcte puisque la propriété <samp>attack</samp> est définie dans <samp>Monster</samp> lui-<em>même</em> et que même s&#39;il pourrait être attendu que le constructeur <samp>Humanoid</samp> le possède aussi, ce n&#39;est pas le cas.</p>
<p>Dans le cas d&#39;une traversée d&#39;héritage prototypal normal, jusqu&#39;à l&#39;objet descendant, personne ne possède sa propre propriété déléguée d&#39;un prototype. L&#39;idée derrière ça c&#39;est que , les objets créés par le constructeur <samp>Humanoid</samp> <em>n&#39;_ont _pas</em> besoin de la propriété <samp>attack</samp>. Ce qui n&#39;est pas le cas des modèles basés sur les classes, où toute propriété est <em>copiée</em> dans la classe descendante.</p>
<p>Cependant, s&#39;il est nécessaire que la propriété <samp>attack</samp> soit propre aux objets créés par le constructeur <samp>Humanoid</samp>, il existe certaines techniques pour cela (émulation d&#39;une approche basée sur la classe), dont nous allons parler ci-dessous.</p>
<p>La seconde n&#39;est pas vraiment une fonctionnalité mais <em>un désaventage</em>. Le code du constructeur est aussi exécuté quand le descendant du prototype est créé. Nous pouvons voir ça grâce au message <samp>&quot;Monster.[[Call]] activé&quot;</samp> qui apparaît <em>deux fois</em>, quand l&#39;objet est créé par le constructeur <samp>Monster</samp> qui est utilisé par <samp>Humanoid.prototype</samp> et lors de la création de l&#39;objet <samp>monster</samp> lui-même !</p>
<p>Un exemple plus critique est une exception lancée dans le constructeur parent : peut être que pour un objet <em>réellement</em> créé par ce constructeur, une vérification est nécessaire mais le même cas est totalement inacceptable avec l&#39;utilisation de cet objet comme prototype parent :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Monster(param) {
    if (!param) {
        throw &#39;Paramètre requis&#39;;
    }
    this.param = param;
}
Monster.prototype.attack = 10;

var monster = new Monster(20);
console.log([monster.attack, monster.param]); // `10`, `20`

function Humanoid() {}
Humanoid.prototype = new Monster(); // `Erreur`
</code></pre>
<p>En outre, des calculs lourds dans le constructeur parent peuvent également être considérés comme un désavantage avec cette approche.</p>
<p>Pour résoudre le problème de cette « fonctionnalité », les programmeurs actuels utilisent un motif standard pour chaîner les prototypes, comme nous allons le voir plus bas. Le principal objectif de cette astruce consiste à créer un <em>objet constructeur encadrant intermédiaire</em> qui chaînes les prototypes souhaités.</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Monster() {
    console.log(&#39;Monster.[[Call]] activé&#39;);
    this.attack = 10;
}
Monster.prototype.defence = 20;

var monster = new Monster();
console.log([monster.attack, monster.defence]); // `10` (possédé), `20` (hérité)

function Humanoid() {
    // Ou simplement `Monster.apply(this, arguments)`
    Humanoid.superproto.constructor.apply(this, arguments);
}

// héritage : chaînage de prototypes
// en créant un constructeur intermédiaire vide.
var F = function () {};
F.prototype = Monster.prototype; // référence
Humanoid.prototype = new F();
Humanoid.superproto = Monster.prototype; // référence explicite au prototype ancètre, « sucre »

// fixons la propriété `constructor`, sinon elle vaudra `Monster`
Humanoid.prototype.constructor = Humanoid;

var goblin = new Humanoid();
console.log([goblin.attack, goblin.defence]); // `10` (propre), `20` (hérité)
</code></pre>
<p>Notez comment nous créons notre propre propriété <samp>attack</samp> sur l&#39;instance de <samp>defence</samp> : nous appelons la référence au constructeur parent via <samp>Humanoid.superproto.constructor</samp> dans le contexte nouvellement créé.</p>
<p>Nous fixons également le probrème vis à vis de la non nécessité d&#39;appeler le constructeur parent pour créer le prototype desendant. Mantenant le message <samp>&quot;Monster.[[Call]] activé&quot;</samp> n&#39;est affiché que si nécéssaire.</p>
<p>Et pour ne pas avoir à répéter chaque fois les mêmes actions lors du chaînage de prototype (création d&#39;un objet constructeur intermédière, créer un sucre <samp>superproto</samp>, restaurer la propriété <samp>constructor</samp> originale, etc), ce modèle peut être encapsulé dans une fonction utilitaire, dont le but est de chaîner les prototypes indépendemment du nom concret de leurs constructeurs :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function inherit(child, parent) {
    var F = function () {};
    F.prototype = parent.prototype
    child.prototype = new F();
    child.prototype.constructor = child;
    child.superproto = parent.prototype;
    return child;
}
</code></pre>
<p>Et l&#39;héritage pourra se faire ainsi :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Monster() {}
Monster.prototype.attack = 10;

function Humanoid() {}
inherit(Humanoid, Monster); // chaînage de prototype

var goblin = new Humanoid();
console.log(goblin.attack); // `10`, trouver dans le `Monster.prototype`
</code></pre>
<p>Il y a beaucoup de variation de cet objet encadrant (au regard de la syntaxe), cependant, elles se résument toutes à effectuer les actions ci-dessus.</p>
<p>Par exemple, nous pouvons optimiser l&#39;objet encadrant précédent en mettant l&#39;objet encadrant intermédiaire à l&#39;extérieur du constructeur (comme cela, seulement une fonction sera créée), pour ensuite la ré-utiliser :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var inherit = (function(){
    function F() {}
    return function (child, parent) {
        F.prototype = parent.prototype;
        child.prototype = new F;
        child.prototype.constructor = child;
        child.superproto = parent.prototype;
        return child;
    };
})();
</code></pre>
<p>Et puisque le vrai prototype d&#39;un objet est la propriété <samp>[[Prototype]]</samp>, cela signifie que <samp>F.prototype</samp> peut facilement être changé et réutilisé, car <samp>child.prototype</samp>, qui a été créé via <samp>new F</samp>, va être dans <samp>[[Prototype]]</samp> comme la valeur <em>courante</em> de <samp>child.prototype</samp> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">function Monster() {}
Monster.prototype.attack = 10;

function Humanoid() {}
inherit(Humanoid, Monster);

Humanoid.prototype.y = 20;

Humanoid.prototype.name = function () {
    console.log(&quot;Humanoid#name&quot;);
};

var goblin = new Humanoid();
console.log(goblin.attack); // `10`, est trouvé dans le `Monster.prototype`

function Goblin() {}
inherit(Goblin, Humanoid);

// en utilisant notre sucre « superproto »
// nous pouvons appeler la méthode parente avec le même nom.

Goblin.prototype.name = function () {
    Goblin.superproto.name.call(this);
    console.log(&quot;Goblin#name&quot;);
};

var goblinSlasher = new Goblin();
console.log([goblinSlasher.attack, goblinSlasher.defence]); // `10`, `20`

goblinSlasher.foo(); // `&quot;Humanoid#foo&quot;`, `&quot;Goblin#foo&quot;`
</code></pre>
<blockquote>
<p>Notez qu&#39;en ES5 cette fonctionnalité a été standardisé pour des meilleurs chaînage de prototype. C&#39;est la méthode <samp>Object.create</samp>.</p>
</blockquote>
<blockquote>
<p>Une version simplifié en tant que fonction de substitution ES3 s&#39;implémenterait de cette manière :</p>
</blockquote>
<blockquote>
<p><em>Code JavaScript</em></p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">Object.create ||
Object.create = function (parent, properties) {
    function F() {}
    F.prototype = parent;
    var child = new F;
    for (var k in properties) {
        child[k] = properties[k].value;
    }
    return child;
}
</code></pre>
</blockquote>
<blockquote>
<p>Pour être utilisé ainsi :</p>
</blockquote>
<blockquote>
<p><em>Code JavaScript</em></p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">var monster = { attack: 10 };
var kobold = Object.create(monster, { defence: { value: 20 } });
console.log(kobold.attack, kobold.attack); // `10`, `20`
</code></pre>
</blockquote>
<blockquote>
<p>Pour plus de détail, voir <a href="https://blog.lesieur.name/les-proprietes-et-les-descripteurs-de-proprietes/">ce chapitre</a>.</p>
</blockquote>
<p>De manière générale, toutes les limitations de « l&#39;héritage classique en JavaScript » est basé sur ce principe. Maintenant, nous voyons qu&#39;en fait même si ça ressemble à « une imitation des classes basés sur l&#39;héritage », c&#39;est surtout <em>une manière simple de ré-utiliser du code pour le chaînage de prototypes</em>.</p>
<blockquote>
<p>Notez qu&#39;en ES6, le concept de « class » a été standardisé, et son implémentation est exactement un « sucre syntaxique » par dessus les fonctions constructeurs décrites plus haut. De ce point de vu, le chaînage de prototype devient un détail d&#39;implémentation de l&#39;héritage basé sur les classes :</p>
</blockquote>
<blockquote>
<p><em>Code JavaScript</em></p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">// ES6
class Monster {
    constructor(name) {
       this._name = name;
    }
</code></pre>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code>getName() {
    return this._name;
}
</code></pre><p>}</p>
</blockquote>
<blockquote>
<p>class Humanoid extends Monster {
    getName() {
        return super.getName() + &#39; Archer&#39;;
    }
}</p>
</blockquote>
<blockquote>
<p>var goblin = new Humanoid(&#39;Goblin&#39;);
console.log(goblin.getName()); // <samp>&quot;Goblin Archer&quot;</samp></p>
<pre class="prettyprint linenums"><code>
</code></pre></blockquote>
<h2 id="conclusion">Conclusion</h2>
<p>Cet article n&#39;a pas été havar de détails. Il pourra vous servir de référence global pour lister la majorité des mécanismes JavaScript et retrouver rapidement des détails de fonctionnement.</p>
<blockquote>
<div style="float: left;">[&lt; Chapitre 7](https://blog.lesieur.name/les-types/)</div><div style="text-align: right">[Chapitre 9 &gt;](https://blog.lesieur.name/la-strategie-d-evaluation/)</div>
</blockquote>
<p><strong>Références</strong></p>
<p>Section correspondante de la spécification ECMA-262-3 :</p>
<ul>
<li><a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">11.1.4 — Array Initialiser</a>,</li>
<li><a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">11.1.5 — Object Initialiser</a>,</li>
<li><a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">11.2.2 — The new Operator</a>,</li>
<li>[13.2.1 — [[Call]]](<a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf</a>),</li>
<li>[13.2.2 — [[Construct]]](<a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf</a>),</li>
<li><a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">15 — Native ECMAScript Objects</a>.</li>
</ul>
<p>Ce texte est une libre adaptation française d&#39;une partie de l&#39;excellent billet <a href="http://dmitrysoshnikov.com/ecmascript/ru-chapter-7-2-oop-ecmascript-implementation/">Тонкости ECMA-262-3. Часть 7.2. ООП: Реализация в ECMAScript.</a> de <a href="http://dmitrysoshnikov.com/">Dmitry Soshnikov</a>.</p>
]]></description>
            <link>http://localhost:7776/les-constructeurs-et-les-prototypes/</link>
            <guid isPermaLink="false">59528ff8a9b5f0251d9baa21</guid>
            <category><![CDATA[ECMAScript]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Concept]]></category>
            <category><![CDATA[Spécifications]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Sat, 12 Aug 2017 17:03:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Comment faire du routage strict avec Vue Router et Vue Server Renderer ?]]></title>
            <description><![CDATA[<p>L&#39;URL <samp>www.example.com/foo</samp> <strong>n&#39;</strong>est <strong>pas</strong> la même URL que <samp>www.example.com/foo/</samp>. Or, si cela n&#39;est pas gênant dans une application monopage (plus loin SPA pour « Single Page Application »), cela devient critique pour de l&#39;optimisation de moteur de recherche (plus loin SEO pour « Search Engine Optimization ») dès lors que le contenu est généré côté serveur.</p>
<p>Côté serveur, les routeurs comme celui d&#39;<a href="http://expressjs.com/">Express</a> possèdent un mode strict pour que l&#39;adresse <samp>/foo</samp> ne soit pas la même que l&#39;adresse <samp>/foo/</samp>. Mais qu&#39;en est t-il de <a href="https://router.vuejs.org/fr/">Vue Router</a> ? Et surtout, comment faire concorder le routage client et le routage serveur pour que l&#39;hydratation (la prise en main côté client d&#39;un rendu côté serveur) concorde ?</p>
<p><a href="https://blog.lesieur.name/media/images/upload/vue-router.jpg"><img src="https://blog.lesieur.name/media/images/upload/vue-router.png" width="628" style="max-width: 100%;height: auto"></a></p>
<p>Je vous le donne en mille : de base, là où <a href="http://expressjs.com/">Express</a> en mode strict vous renverra une page 200 pour <samp>/foo/</samp> et une page 404 pour <samp>/foo</samp>, <a href="https://router.vuejs.org/fr/">Vue Router</a> lui, en mode strict, <a href="http://jsfiddle.net/0evuj9fs/5/">vous renverra exactement l&#39;inverse</a> !</p>
<p>Comment dans ce cas utiliser <a href="https://router.vuejs.org/fr/">Vue Router</a> et <a href="https://ssr.vuejs.org/fr/">Vue Server Renderer</a> pour du routage strict dont les moteurs de recherche sont si friand pour une SEO à toute épreuve ? <a href="./routage-strict-avec-vue-router-et-ssr/#vuerouter-ssr-probl-me-de-contenu-dupliqu-">La réponse à la fin !</a></p>
<blockquote>
<p>Cependant, afin que ce billet soit utile également pour ceux n&#39;ayant pas (encore) ce problème et qui souhaitent découvrir par l&#39;exemple comment fonctionne du SSR avec Vue (et de facto, qu&#39;est-ce que c&#39;est réellement), je vais élaborer un code pour vous accompagner dans cette compréhension, pas à pas. Seulement ensuite <a href="./routage-strict-avec-vue-router-et-ssr/#probl-me">nous mettrons en évidence notre problème</a> avant de <a href="./routage-strict-avec-vue-router-et-ssr/#solution">le résoudre</a>.</p>
</blockquote>
<h2 id="pourquoi-a-t-on-besoin-dun-rendu-côté-serveur-ssr-">Pourquoi a t-on besoin d&#39;un rendu côté serveur (SSR) ?</h2>
<p>Ce terme de SSR (pour « Server-Side Rendering ») ne vous dit peut-être rien. C&#39;est vrai, « du rendu côté serveur », vous faites ça depuis toujours avec PHP, C#, etc. non ? En réalité, quand on parle de SSR vis à vis de Vue, React and co., c&#39;est pour parler du fait de faire le rendu de la page telle que ces outils le permettent dans un navigateur, mais du côté serveur. Bien entendu, cela signifie que votre serveur va devoir interpréter le <a href="https://www.javascript.com/">JavaScript</a> (puisque ces outils clients sont en <a href="https://www.javascript.com/">JavaScript</a>) avant de renvoyer le résultat au client. C&#39;est cela que permet <a href="https://nodejs.org/en/">Node.js</a>.</p>
<p>Bien. Pour répondre a cette question dans le détail, nous allons utiliser</p>
<ul>
<li>le framework <a href="https://node-atlas.js.org/">NodeAtlas</a> qui fera office de serveur web évolutif <a href="https://nodejs.org/en/">Node.js</a> pour faire du SSR sans peine (puisque la partie qui nous intéresse est surtout <a href="https://fr.vuejs.org/">Vue</a>). Nous allons également utiliser</li>
<li>la bibliothèque <a href="https://fr.vuejs.org/">Vue</a> qui fera office de moteur de template réactif, son extension <a href="https://router.vuejs.org/fr/">Vue Router</a> qui fera office de routeur client ainsi que <a href="https://ssr.vuejs.org/fr/">Vue Server Renderer</a> qui fera le pont entre <a href="https://fr.vuejs.org/">Vue</a> et <a href="https://nodejs.org/en/">Node.js</a>.</li>
</ul>
<blockquote>
<p>Cet article contient tout le code utile à sa compréhension. Cependant, vous pouvez tester le code chez vous, pas à pas, pour améliorer votre compréhension, en suivant les instructions. Pour ce faire vous devez installer <a href="https://nodejs.org/en/">Node.js</a>. Une fois celui-ci installé, lancez la commande <samp>npm install -g node-atlas</samp> pour utiliser l&#39;outil côté serveur <a href="https://node-atlas.js.org/">NodeAtlas</a> utilisé dans cet article. <a href="https://node-atlas.js.org/">NodeAtlas</a> est ce qui fait actuellement tourner le blog sur lequel vous lisez cet article. Vous pouvez cependant adapter le code pour votre framework serveur préféré !</p>
</blockquote>
<h3 id="créer-du-simple-contenu-en-réponse-serveur">Créer du simple contenu en réponse serveur</h3>
<p>Dans un contexte simple, nous allons créer une page d&#39;accueil qui nous mènera à <samp>/foo/</samp> qui sera une page existante. Elle nous mènera également à <samp>/foo</samp> qui retournera une page 404 (non existante pour le serveur). Ceci n&#39;a rien de bien différent de l&#39;utilisation d&#39;un code serveur classique PHP couplé à Apache par exemple. Ici on utilisera <a href="https://node-atlas.js.org/">NodeAtlas</a>.</p>
<p>Créons nous donc un <samp>webconfig-www.json</samp> pour <a href="https://node-atlas.js.org/">NodeAtlas</a> comme suit.</p>
<p><em>webconfig-<a href="http://www.json">www.json</a></em></p>
<pre class="prettyprint linenums"><code class="language-json">{
    &quot;httpPort&quot;: 7778,
    &quot;view&quot;: &quot;layout.htm&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: &quot;index.htm&quot;,
        &quot;/foo/&quot;: &quot;exist.htm&quot;,
        &quot;/*&quot;: {
            &quot;view&quot;: &quot;error.htm&quot;,
            &quot;statusCode&quot;: 404
        }
    }
}
</code></pre>
<blockquote>
<p><a href="https://node-atlas.js.org/">NodeAtlas</a> se configure progressivement en fonction du besoin. Aussi, ici, nous allons faire tourner un site en localhost sur le port 7778 de <samp>httpPort</samp>. Nous allons utiliser une page maître <samp>layout.htm</samp> (qui sera identique autour de la zone réelle de contenu autour de chaque page). Et nous allons rendre accessible le contenu de <samp>views/index.htm</samp> à l&#39;adresse <samp>http://localhost/</samp>, le contenu de <samp>views/exist.htm</samp> à l&#39;adresse <samp>http://localhost/foo/</samp> et le contenu de <samp>views/error.htm</samp> (avec un <samp>statusCode</samp> d&#39;erreur 404) pour toutes les autres pages (<samp>/*</samp>).</p>
</blockquote>
<p>Notre jeu de fichiers est donc le suivant (par défaut <a href="https://node-atlas.js.org/">NodeAtlas</a> va checher les <samp>view</samp> dans le dossier <samp>views</samp>).</p>
<pre class="prettyprint linenums"><code class="language-bash">├─ views/
│  ├─ error.htm
│  ├─ exist.htm
│  ├─ index.htm
│  └─ layout.htm
└─ webconfig-www.json
</code></pre>
<p>Et les contenus pour chacun des fichiers les suivants.</p>
<p><em>views/layout.htm</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;Vue Router + Vue Server Renderer = Problème&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- La zone si dessous contiendra les contenus
             `views/index.htm` pour `/`,
             `views/exist.htm` pour `/foo/` et
             `views/error.htm` pour les autres pages
             grâce à `include`. --&gt;

        &lt;?- include(routeParameters.view) ?&gt;

        &lt;!-- `routeParameters` représente, par exemple,
             pour la page `/existe-pas` l&#39;objet
             `{ &quot;view&quot;: &quot;error.htm&quot;, &quot;statusCode&quot;: 404 }`
             du webconfig. Donc `.view` retourne `&quot;error.htm&quot;`.
             Quand la valeur est une chaine de caractères
             comme pour `/foo/`, celle-ci est transformée en
             objet et la valeur est placée dans `.view` --&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><em>views/index.htm</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/foo/&quot;&gt;`/foo/` existe&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/foo&quot;&gt;`/foo` n&#39;existe pas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p><em>views/exist.htm</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;div&gt;
    &lt;p&gt;&lt;a href=&quot;/&quot;&gt;Retour&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;&lt;strong&gt;200 : J&#39;existe !&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p><em>views/error.htm</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;div&gt;
    &lt;p&gt;&lt;a href=&quot;/&quot;&gt;Retour&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;404 : Je n&#39;existe pas...&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<h4 id="test-site">Test site</h4>
<p>Pour faire lire le webconfig à <a href="https://node-atlas.js.org/">NodeAtlas</a>, on lance alors la commande <samp>node-atlas --webconfig webconfig-www.json --browse</samp> depuis le dossier contenant <samp>webconfig-www.json</samp> et notre navigateur s&#39;ouvre automatiquement (option <samp>--browse</samp>) à :</p>
<ul>
<li>addresse : <samp>http://localhost:7778/</samp></li>
<li>status : 200</li>
<li>réponse :<pre class="prettyprint linenums"><code class="language-htm">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;Vue Router + Vue Server Renderer = Problème&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;ul&gt;
            &lt;li&gt;&lt;a href=&quot;/foo/&quot;&gt;/foo/ existe&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;/foo&quot;&gt;/foo n&#39;existe pas&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<blockquote>
<p>Note : les commentaires ont volontairement été omis.</p>
</blockquote>
</li>
</ul>
<p>Naviguez en cliquant sur <samp>/foo n&#39;existe pas</samp>. Cela nous enverra droit sur une page inexistante (ce qui est le cas pour n&#39;importe quels autres URL que <samp>/</samp> et <samp>/foo/</samp>) :</p>
<ul>
<li>addresse : <samp>http://localhost:7778/foo</samp></li>
<li>status : 404</li>
<li>réponse :<pre class="prettyprint linenums"><code class="language-htm">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;Vue Router + Vue Server Renderer = Problème&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;
            &lt;p&gt;&lt;a href=&quot;/&quot;&gt;Retour&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt;404 : Je n&#39;existe pas...&lt;/p&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
</ul>
<p>Retournez à l&#39;accueil en cliquant sur <samp>Retour</samp> puis cliquez sur <samp>/foo/ existe</samp>. Cela nous affichera le contenu souhaité pour cette page.</p>
<ul>
<li>addresse : <samp>http://localhost:7778/foo/</samp></li>
<li>status : 200</li>
<li>réponse :<pre class="prettyprint linenums"><code class="language-htm">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;Vue Router + Vue Server Renderer = Problème&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;
            &lt;p&gt;&lt;a href=&quot;/&quot;&gt;Retour&lt;/a&gt;&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;200 : J&#39;existe !&lt;/strong&gt;&lt;/p&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
</ul>
<p>Tout ceci est donc parfait pour créer des sites indexables. Un défaut est que le site n&#39;est pas réactif. De plus chaque changement de page rechargera le navigateur. Tous ces soucis pourraient être adressés à la main côté client mais, de la même manière que nous n&#39;utilisons pas directement l&#39;API HTTP de <a href="https://nodejs.org/en/">Node.js</a> côté serveur, nous n&#39;allons pas non plus utiliser directement l&#39;API History des navigateurs côté client. Nous allons utiliser <a href="https://fr.vuejs.org/">Vue</a>.</p>
<h3 id="créer-une-application-monopage-ou-spa">Créer une application monopage ou SPA</h3>
<p>Pour créer notre application, nous allons devoir jouer</p>
<ul>
<li>avec <a href="https://fr.vuejs.org/">Vue</a> qui s&#39;occupera de la réactivité et jouer</li>
<li>avec <a href="https://router.vuejs.org/fr/">Vue Router</a> qui s&#39;occupera du changement de contenu sans recharger la page (mais en changeant bien l&#39;URL !).</li>
</ul>
<p>Pour cela, il nous suffit de toujours servir la même page côté client, et donc de créer un <samp>webconfig-spa.json</samp> comme suit :</p>
<p><em>webconfig-spa.json</em></p>
<pre class="prettyprint linenums"><code class="language-json">{
    &quot;httpPort&quot;: 7776,
    &quot;routes&quot;: {
        &quot;/*&quot;: &quot;spa.htm&quot;
    }
}
</code></pre>
<p>et de créer le nouveau fichier <samp>views/spa.htm</samp></p>
<pre class="prettyprint linenums"><code class="language-bash">├─ views/
│  ├─ ...
│  ├─ spa.htm
│  ├─ ...
├─ ...
├─ webconfig-spa.json
├─ ...
</code></pre>
<p>contenant le code suivant.</p>
<p><em>views/spa.htm</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;Vue Router + Vue Server Renderer = Problème&lt;/title&gt;
        &lt;style&gt;
            /* On crée des règles pour la
               balise `&lt;transition&gt;` de Vue
               afin de bien voir que le changement
               de page ne recharge pas la page. */

            .fade-enter,
            .fade-leave-to {
                opacity: 0;
            }
            .fade-leave-active,
            .fade-enter-active {
                transition: opacity 1s;
            }
            .fade-enter-to,
            .fade-leave {
                opacity: 1;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- Voici le contenu qui va être pris en
             main par Vue. Il peut donc contenir des balises
             et attributs HTML non standard mais syntaxiquement
             valide qui seront interprétées par Vue. --&gt;
        &lt;div class=&quot;app&quot;&gt;
            &lt;transition name=&quot;fade&quot;&gt;
                &lt;router-view&gt;&lt;/router-view&gt;
            &lt;/transition&gt;
        &lt;/div&gt;

        &lt;!-- Chargement des bibliothèques de Vue pour la réactivité
             (`vue.js`) et le routage (`vue-router.js`). --&gt;
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.4.1/vue.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue-router/2.7.0/vue-router.js&quot;&gt;&lt;/script&gt;

        &lt;!-- Utilisation des bibliothèque de Vue. --&gt;
        &lt;script&gt;
            /* Pour commencer, nous créons 3 composants `Index`,
               `Err` et `Exist`. Chaque composant contient un template
               de page similaire à ceux de notre exemple plécédent avec
               l&#39;utilisation unique de NodeAtlas.
               Notez également que les balises `&lt;a&gt;` sont remplacées
               par les balise `&lt;router-link&gt;` qui vont prendre en
               charge les changements de page. */
            var Index = { template: `&lt;ul&gt;
                    &lt;li&gt;&lt;router-link to=&quot;/foo/&quot;&gt;/foo/ existe&lt;/router-link&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;router-link to=&quot;/foo&quot;&gt;/foo existe aussi car pas strict&lt;/router-link&gt;&lt;/li&gt;
                &lt;/ul&gt;` },
                Exist = { template: `&lt;div&gt;
                    &lt;p&gt;&lt;router-link to=&quot;/&quot;&gt;Retour&lt;/router-link&gt;&lt;/p&gt;
                    &lt;p&gt;&lt;strong&gt;200 : J&#39;existe !&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;` },
                Err = { template: `&lt;div&gt;
                    &lt;p&gt;&lt;router-link to=&quot;/&quot;&gt;Retour&lt;/router-link&gt;&lt;/p&gt;
                    &lt;p&gt;404 : Je n&#39;existe pas...&lt;/p&gt;
                &lt;/div&gt;` },

            /* Nous utilisons `vue-router.js` pour définir nos
               routes, et les composants à utiliser derrière
               chacune d&#39;entre elle. Le `path` représente là
               route et le `component` le composant à charger. */
            router = new VueRouter({
                mode: &#39;history&#39;,
                routes: [
                    { path: &#39;/&#39;, component: Index },
                    { path: &#39;/foo/&#39;, component: Exist },
                    { path: &#39;/*&#39;, component: Err }
                ]
            });

            /* Enfin nous utilisons `vue.js` pour assigner
               le routeur et monter l&#39;application sur la zone
               du DOM sous la balise de classe `app`. */
            new Vue({
                router: router,
                el: &#39;.app&#39;
            });
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h4 id="test-spa">Test SPA</h4>
<p>Exécutons alors la commande <samp>node-atlas --webconfig webconfig-spa.json --browse</samp> depuis le dossier contenant <samp>webconfig-spa.json</samp> et notre navigateur s&#39;ouvre à :</p>
<ul>
<li><p>addresse : <samp>http://localhost:7776/</samp></p>
</li>
<li><p>status : 200</p>
</li>
<li><p>réponse :</p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;Vue Router + Vue Server Renderer = Problème&lt;/title&gt;
        &lt;style&gt;
            .fade-enter,
            .fade-leave-to {
                opacity: 0;
            }
            .fade-leave-active,
            .fade-enter-active {
                transition: opacity 1s;
            }
            .fade-enter-to,
            .fade-leave {
                opacity: 1;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;app&quot;&gt;
            &lt;transition name=&quot;fade&quot;&gt;
                &lt;router-view&gt;&lt;/router-view&gt;
            &lt;/transition&gt;
        &lt;/div&gt;
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.4.1/vue.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue-router/2.7.0/vue-router.js&quot;&gt;&lt;/script&gt;
        &lt;script&gt;
            var Index = { template: `&lt;ul&gt;
                    &lt;li&gt;&lt;router-link to=&quot;/foo/&quot;&gt;/foo/ existe&lt;/router-link&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;router-link to=&quot;/foo&quot;&gt;/foo existe aussi car pas strict&lt;/router-link&gt;&lt;/li&gt;
                &lt;/ul&gt;` },
                Exist = { template: `&lt;div&gt;
                    &lt;p&gt;&lt;router-link to=&quot;/&quot;&gt;Retour&lt;/router-link&gt;&lt;/p&gt;
                    &lt;p&gt;&lt;strong&gt;200 : J&#39;existe !&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;` },
                Err = { template: `&lt;div&gt;
                    &lt;p&gt;&lt;router-link to=&quot;/&quot;&gt;Retour&lt;/router-link&gt;&lt;/p&gt;
                    &lt;p&gt;404 : Je n&#39;existe pas...&lt;/p&gt;
                &lt;/div&gt;` },

          router = new VueRouter({
              mode: &#39;history&#39;,
              routes: [
                  { path: &#39;/&#39;, component: Index },
                  { path: &#39;/foo/&#39;, component: Exist },
                  { path: &#39;/*&#39;, component: Err }
              ]
          });

            new Vue({
                router: router,
                el: &#39;.app&#39;
            });
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<blockquote>
<p>Note : les commentaires ont volontairement été omis.</p>
</blockquote>
</li>
</ul>
<p>Naviguez en cliquant sur <samp>/foo/ existe</samp>. Cela nous affichera le contenu existant <samp>200 : J&#39;existe !</samp> et nous fera changer d&#39;adresse sans rechargement de page (vous constaterez d&#39;ailleurs que celle-ci est animée grâce à la balise <samp>&lt;transition&gt;</samp>).</p>
<ul>
<li>addresse : <samp>http://localhost:7776/foo/</samp></li>
<li>status : — (pas de rechargement de page)</li>
<li>réponse : — (pas de rechargement de page)</li>
</ul>
<p>Retournez à l&#39;accueil en cliquant sur <samp>Retour</samp> puis cliquez sur <samp>/foo existe aussi car pas strict</samp>. Cela aura exactement le même effet, c.-à-d. affichera <samp>200 : J&#39;existe !</samp> alors que vous n&#39;avez pas spécifiquement indiqué au routeur que <samp>/foo</samp> était une route valide. C&#39;est parce que le routeur de <a href="https://fr.vuejs.org/">Vue</a> n&#39;est pas strict.</p>
<ul>
<li>addresse : <samp>http://localhost:7776/foo</samp></li>
<li>status : — (pas de rechargement de page)</li>
<li>réponse : — (pas de rechargement de page)</li>
</ul>
<p>Cependant, si vous tapez dans votre bar d&#39;adresse <samp>/bar/</samp>. Il y aura un rechargement de page qui renverra une réponse identique au page existante et même... un code 200 !</p>
<ul>
<li><p>addresse : <samp>http://localhost:7776/bar/</samp></p>
</li>
<li><p>status : 200</p>
</li>
<li><p>réponse :</p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;Vue Router + Vue Server Renderer = Problème&lt;/title&gt;
        &lt;style&gt;
            .fade-enter,
            .fade-leave-to {
                opacity: 0;
            }
            .fade-leave-active,
            .fade-enter-active {
                transition: opacity 1s;
            }
            .fade-enter-to,
            .fade-leave {
                opacity: 1;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div class=&quot;app&quot;&gt;
            &lt;transition name=&quot;fade&quot;&gt;
                &lt;router-view&gt;&lt;/router-view&gt;
            &lt;/transition&gt;
        &lt;/div&gt;
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.4.1/vue.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue-router/2.7.0/vue-router.js&quot;&gt;&lt;/script&gt;
        &lt;script&gt;
            var Index = { template: `&lt;ul&gt;
                    &lt;li&gt;&lt;router-link to=&quot;/foo/&quot;&gt;/foo/ existe&lt;/router-link&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;router-link to=&quot;/foo&quot;&gt;/foo existe aussi car pas strict&lt;/router-link&gt;&lt;/li&gt;
                &lt;/ul&gt;` },
                Exist = { template: `&lt;div&gt;
                    &lt;p&gt;&lt;router-link to=&quot;/&quot;&gt;Retour&lt;/router-link&gt;&lt;/p&gt;
                    &lt;p&gt;&lt;strong&gt;200 : J&#39;existe !&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;` },
                Err = { template: `&lt;div&gt;
                    &lt;p&gt;&lt;router-link to=&quot;/&quot;&gt;Retour&lt;/router-link&gt;&lt;/p&gt;
                    &lt;p&gt;404 : Je n&#39;existe pas...&lt;/p&gt;
                &lt;/div&gt;` },

          router = new VueRouter({
              mode: &#39;history&#39;,
              routes: [
                  { path: &#39;/&#39;, component: Index },
                  { path: &#39;/foo/&#39;, component: Exist },
                  { path: &#39;/*&#39;, component: Err }
              ]
          });

            new Vue({
                router: router,
                el: &#39;.app&#39;
            });
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
</ul>
<p>Pourtant, visuellement, vous constaterez que le message affiché est cette fois <samp>404 : Je n&#39;existe pas...</samp> et que c&#39;est bien le composant <samp>Err</samp> qui cette fois aura été chargé. Cliquez ensuite sur <samp>Retour</samp> pour constater que le routeur côté client a bien repris la main puisque vous retournez à l&#39;accueil avec une animation et sans rechargement de page.</p>
<ul>
<li>addresse : <samp>http://localhost:7776/</samp></li>
<li>status : — (pas de rechargement de page)</li>
<li>réponse : — (pas de rechargement de page)</li>
</ul>
<p>Cela nous montre exactement les limitations de <a href="https://fr.vuejs.org/">Vue</a> pour du routage côté client (qui sont les mêmes limitations que Angular, React, <em>le framework MVVM de votre choix</em>). Puisque toutes les pages de votre serveur renvoi votre SPA et que c&#39;est le côté client qui la gère.</p>
<p>Dans le cas ou votre SPA doit être référencée, ce comportement est problématique car :</p>
<ul>
<li>les moteurs d&#39;indexation prendront les pages inexistantes pour du contenu existant (car renvoi d&#39;un status 200),</li>
<li>les moteurs d&#39;indexation indexeront toujours la même page illisible car le contenu est dans du <a href="https://www.javascript.com/">JavaScript</a>,</li>
<li>l&#39;indexation de cette page ne sera pas garantie puisque la page n&#39;est pas du HTML valide (balise <samp>&lt;transition&gt;</samp> et <samp>&lt;router-view&gt;</samp>).
Autant vous dire qu&#39;en réalité, si vous n&#39;avez pas un site frontal envoyant votre utilisateur vers votre SPA, celle-ci ne sera pas facilement référencée (même si les moteurs font de gros efforts pour les pages à forts trafiques).</li>
</ul>
<h3 id="le-server-side-rendering-est-la-solution">Le Server-Side Rendering est la solution</h3>
<p>Le rendu côté serveur ou SSR est le rassemblement des deux premières parties pour tirer profit d&#39;un site réactif et sans rechargement de page qui soit également indexable. Cela est possible car le contenu renvoyé est toujours différent et valide en source de chaque page. C&#39;est ensuite l&#39;application <a href="https://fr.vuejs.org/">Vue</a> qui prend la main côté client une fois la page chargée. Voyons cela dès à présent !</p>
<h2 id="vue-router--ssr--nodeatlas">Vue Router + SSR + NodeAtlas</h2>
<p>Nous allons de ce pas fusionner les deux approches précédentes. Nous allons montrer comment créer une application capable de faire du SSR et de produire une partie cliente réactive avec <a href="https://fr.vuejs.org/">Vue</a> et <a href="https://node-atlas.js.org/">NodeAtlas</a>. Nous résoudrons ensuite le conflit de fonctionnement des serveurs stricts qui font la différence entre <samp>/foo/</samp> et <samp>/foo</samp> et <a href="https://router.vuejs.org/fr/">Vue Router</a> qui ne la fait pas : ce qui mène a une hydratation ratée ! Nous verrons d&#39;ailleurs par l&#39;exemple ce qu&#39;est exactement l&#39;hydratation.</p>
<h3 id="partie-serveur">Partie serveur</h3>
<p>Créons à présent un fichier <samp>webconfig.json</samp> original correspondant à notre application finale :</p>
<p><em>webconfig.json</em></p>
<pre class="prettyprint linenums"><code class="language-json">{
    &quot;httpPort&quot;: 7777,
    &quot;view&quot;: &quot;common.htm&quot;,
    &quot;controller&quot;: &quot;common.js&quot;,
    &quot;routes&quot;: &quot;routes.json&quot;
}
</code></pre>
<blockquote>
<p>Dans ce webconfig, nous avons décidez d&#39;ajouter un contrôleur commun à toutes les pages, comme c&#39;était le cas de <samp>view</samp>. <a href="https://node-atlas.js.org/">NodeAtlas</a> ira donc lire ce contrôleur dans <samp>controllers/common.js</samp> avant d&#39;effectuer le rendu de chaque page. Nous avons également décidé de placer les routes dans un fichier séparé <samp>routes.json</samp>, ce qui nous permettra plus loin de fournir la liste des routes à la partie cliente sans donner le reste du webconfig.</p>
</blockquote>
<p>Nous allons affecter au fichier de routes externes <samp>routes.json</samp>, basé sur les routes de notre premier exemple, les routes suivantes.</p>
<p><em>routes.json</em></p>
<pre class="prettyprint linenums"><code class="language-json">{
    &quot;index&quot;: {
        &quot;url&quot;: &quot;/&quot;,
        &quot;view&quot;: &quot;index&quot;
    },
    &quot;exist&quot;: {
        &quot;url&quot;: &quot;/foo/&quot;,
        &quot;view&quot;: &quot;exist&quot;
    },
    &quot;error&quot;: {
        &quot;url&quot;: &quot;/*&quot;,
        &quot;view&quot;: &quot;error&quot;,
        &quot;statusCode&quot;: 404
    }
}
</code></pre>
<blockquote>
<p>Notez que nous ne précisons cette fois pas d&#39;extension dans la <samp>view</samp> de chaque route, ce qui va nous permettre de charger au choix un fichier <samp>.htm</samp> ou <samp>.js</samp>. Nous allons voir cela plus loin.</p>
</blockquote>
<p>Nous allons utiliser <a href="https://fr.vuejs.org/">Vue</a> et <a href="https://router.vuejs.org/fr/">Vue Router</a> côté serveur. Nous allons donc avoir besoin de <a href="https://ssr.vuejs.org/fr/">Vue Server Renderer</a> qui s&#39;occupera d’exécuter le moteur de template de <a href="https://fr.vuejs.org/">Vue</a> en mode serveur. Pour ce faire nous allons les ajouter en tant que dépendances de notre projet <a href="https://node-atlas.js.org/">NodeAtlas</a> dans un fichier <samp>package.json</samp>.</p>
<p><em>package.json</em></p>
<pre class="prettyprint linenums"><code class="language-json">{
  &quot;dependencies&quot;: {
    &quot;vue&quot;: &quot;2.3.x&quot;,
    &quot;vue-router&quot;: &quot;2.7.x&quot;,
    &quot;vue-server-renderer&quot;: &quot;2.3.x&quot;
  }
}
</code></pre>
<p>Cela va nous donner l&#39;architecture suivante.</p>
<pre class="prettyprint linenums"><code class="language-bash">├─ controllers/
│  └─ common.js
├─ views/
│  ├─ ...
├─ ...
├─ package.json
├─ routes.json
└─ webconfig.json
</code></pre>
<p>Puis nous allons installer ces dépendances avec la commande <samp>npm install</samp> depuis le dossier ou est placé le fichier <samp>package.json</samp>.</p>
<p>Nous allons à présent prendre la main sur le cycle de création d&#39;une page de <a href="https://node-atlas.js.org/">NodeAtlas</a>. Pour cela nous allons nous placer dans le point d&#39;ancrage <samp>changeDom</samp> afin d&#39;utiliser notre propre moteur de rendu qui sera <a href="https://ssr.vuejs.org/fr/">Vue Server Renderer</a>. Nous allons pour cela utiliser le contrôleur global <samp>common.js</samp> dans le nouveau dossier <samp>controllers</samp> dont le contenu est le suivant.</p>
<p><em>controllers/common.js</em></p>
<pre class="prettyprint linenums"><code class="language-js">/* `changeDom` permet a NodeAtlas de manipuler le DOM virtuel
    complètement rendu côté serveur avec, au besoin, les informations
    de la requête qui a demandé la page dans `request` ainsi que des
    informations complémentaires (comme le `DOM` généré) dans `local`.
    Nous pourrions faire nos modifications puis appeler `next` pour
    renvoyer le DOM modifié. Nous n&#39;allons cependant pas faire cela.
    Nous allons nous même renvoyé ce DOM en utilisant l&#39;objet `response`.
    Le DOM virtuel NodeAtlas servira alors de page maître au Vue Server Renderer,
    qui se chargera d&#39;injecter les contenus correcte en fonction de la page.
 */
exports.changeDom = function (next, locals, request, response) {
    /* Nous récupérons tous les outils fournis par NodeAtlas. */
    var NA = this,

        /* Nous récupérons de quoi lire un fichier sur l&#39;OS
           courant et de quoi « merger » des fragments d&#39;adresse
           de fichier. */
        readFile = NA.modules.fs.readFile,
        join = NA.modules.path.join,

        /* Nous chargeons les dépendances installés grâce à notre
           `package.json`. */
        Vue = require(&quot;vue&quot;),
        VueRouter = require(&quot;vue-router&quot;),
        VueServerRenderer = require(&quot;vue-server-renderer&quot;),

        /* Nous générons le chemin depuis la racine de l&#39;OS
           jusqu&#39;aux fichiers du dossier `views`. */
        path = join(NA.serverPath, NA.webconfig.viewsRelativePath),

        /* Puis nous utilisons ce chemin pour créer le chemin complet
           des fichiers de vue et modèle pour l&#39;application complète,
           ainsi que celui du composant utile pour la page actuellement
           demandée. */
        view = join(path, locals.routeParameters.view + &quot;.htm&quot;),
        model = join(path, locals.routeParameters.view + &quot;.js&quot;),
        appModel = join(path, &quot;app.js&quot;),
        appView = join(path, &quot;app.htm&quot;),

        /* Nous générons notre application Vue côté serveur.
           Celle-ci sera injecté dans le DOM déjà crée par
           NodeAtlas au niveau de la balise `&lt;!--vue-ssr-outlet--&gt;`
           (voir dans `views/common.htm` plus loin). */
        renderer = VueServerRenderer.createRenderer({
            template: locals.dom
        });

    /* On ajoute le plugin `VueRouter` à `Vue` (ce qui est automatiquement fait
       côté client si les bibliothèques sont chargé via une balise `&lt;script&gt;`). */
    Vue.use(VueRouter);

    /* On ouvre la vue du composant de la page courante. Si par exemple
       on demande l&#39;URL `http://localhost:7777/foo/`, alors la variable `view`
       vaudra `{chemin_depuis_la_racine_de_l_OS}/views/exist.htm`. */
    readFile(view, &quot;utf-8&quot;, function (error, template) {
        /* On charge le composant en question en lui donnant comme nom
           (en premier paramètre) la valeur de l&#39;option `view` de l&#39;objet,
           par exemple, `{ &quot;url&quot;: &quot;/foo/&quot;, &quot;view&quot;: &quot;exist&quot; }`
           pour l&#39;adresse `http://localhost:7777/foo/` et en second
           paramètre le fichier modèle `{chemin_depuis_la_racine_de_l_OS}/views/exist.js`. */
        var component = Vue.component(locals.routeParameters.view, require(model)(template));

        /* On ouvre la vue de la page maître. */
        readFile(appView, &quot;utf-8&quot;, function (error, template) {
            /* On fournit au routeur l&#39;unique composant utile pour la
               page courante, à savoir celui de `exist`. */
            var router = new VueRouter({
                    routes: [{
                        /* En fournissant la route... */
                        path: locals.routeParameters.url,
                        /* et le composant */
                        component: component
                    }]
                }),
                /* On permet à l&#39;application d&#39;avoir connaissance de la liste
                   complète des routes. */
                webconfig = {
                    routes: NA.webconfig.routes
                },
                /* On génère la réponse sous forme de flux. Cela signifie que
                   les fragments de la réponse seront retournés au client dès que
                   Vue Server Renderer les aura compilés avec Vue. */
                stream = renderer.renderToStream(new Vue(require(appModel)(template, router, webconfig)));

            /* On explique au serveur que le composant à rendre est
               celui qui correspond à la route courante. */
            router.push(locals.routeParameters.url);

            /* On envoit les fragments aussitôt qu&#39;ils sont disponibles. */
            stream.on(&#39;data&#39;, function (chunk) {
                response.write(chunk);
            });

            /* On confirme au client que la réponse est terminée. */
            stream.on(&#39;end&#39;, function () {
                response.end();
            });
        });
    });
};
</code></pre>
<p>Nous allons ensuite créer nos paires de fichier vue / modèle dans le dossier <samp>views</samp> pour chaque composant de route, créer une paire de fichier d&#39;application, et créer une page globale <samp>views/common.htm</samp> :</p>
<pre class="prettyprint linenums"><code class="language-bash">├─ controllers/
│  └─ ...
├─ views/
│  ├─ app.htm
│  ├─ app.js
│  ├─ common.htm
│  ├─ ...
│  ├─ error.js
│  ├─ ...
│  ├─ exist.js
│  ├─ ...
│  ├─ index.js
│  ├─ ...
├─ ...
</code></pre>
<p>On explique dans le fichier <samp>common.htm</samp> a quel endroit notre application se trouve avec <samp>&lt;!--vue-ssr-outlet--&gt;</samp> pour permettre l&#39;injection côté serveur, et l&#39;hydratation côté client.</p>
<p><em>views/common.htm</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;Vue Router + Vue Server Renderer = Problème&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!--vue-ssr-outlet--&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Ensuite nous créons l&#39;application principale qui va être injectée sur toutes les pages à la place de <samp>&lt;!--vue-ssr-outlet--&gt;</samp> :</p>
<p><em>views/app.htm</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;div class=&quot;app&quot;&gt;
    &lt;transition name=&quot;fade&quot;&gt;
        &lt;router-view&gt;&lt;/router-view&gt;
    &lt;/transition&gt;
&lt;/div&gt;
</code></pre>
<p><em>views/app.js</em></p>
<pre class="prettyprint linenums"><code class="language-js">/* Nous retournons un objet avec `return` lorsque la fonction
   `function (template, router, webconfig)` sera exécutée.
   Cette fonction est exécuté depuis `controllers/common.js` vu plus
   haut lors de cet appel `new Vue(require(appModel)(template, router, webconfig))`,
   les paramètres envoyé dans la `new Vue` étant ceux disponible dans le code
   ci-dessous. C&#39;est le même principe pour chaque futur composant. */
module.exports = function (template, router, webconfig) {
    return {
        name: &#39;app&#39;,
        /* `template` contient le contenu de `views/app.htm` */
        template: template,
        router: router,
        data: {
            webconfig: webconfig
        }
    };
};
</code></pre>
<p>Puis on affecte a chaque vue déjà existante un modèle :</p>
<p><em>views/index.js</em></p>
<pre class="prettyprint linenums"><code class="language-js">/* Cette fonction `function (template)` est exécutée quand
   `Vue.component(locals.routeParameters.view, require(model)(template))`
   est exécuté depuis `controllers/common.js` vu plus
   haut si la route en question est `/`. */
module.exports = function (template) {
    return {
        name: &#39;index&#39;,
        /* `template` contient le contenu de `views/index.htm` */
        template: template,
        data: function () {
            return {};
        }
    };
};
</code></pre>
<p><em>views/exist.js</em></p>
<pre class="prettyprint linenums"><code class="language-js">module.exports = function (template) {
    return {
        name: &#39;exist&#39;,
        /* `template` contient le contenu de `views/exist.htm` */
        template: template,
        data: function () {
            return {};
        }
    };
};
</code></pre>
<p><em>views/error.js</em></p>
<pre class="prettyprint linenums"><code class="language-js">module.exports = function (template) {
    return {
        name: &#39;error&#39;,
        /* `template` contient le contenu de `views/error.htm` */
        template: template,
        data: function () {
            return {};
        }
    };
};
</code></pre>
<h4 id="test-serveur">Test serveur</h4>
<p>Testons ce code côté serveur avec la commande <samp>node-atlas --browse</samp> (car l&#39;option <samp>--webconfig</samp> n&#39;est pas utile si le webconfig s&#39;appel <samp>webconfig.json</samp>). Nous remarquerons alors que notre application se comporte comme dans le cas de notre premier exemple avec <samp>webconfig-www.json</samp>. Vous pouvez effectuer les mêmes actions, vous obtiendrez les mêmes résultat sauf que nous n&#39;utilisons plus le moteur initial <a href="http://ejs.co/">EJS</a> fourni par <a href="https://node-atlas.js.org/">NodeAtlas</a> mais nous utilisons celui de <a href="https://ssr.vuejs.org/fr/">Vue Server Renderer</a> qui utilise <a href="https://fr.vuejs.org/">Vue</a>. Voyons la différence avec <samp>http://localhost:7777/</samp>.</p>
<ul>
<li>addresse : <samp>http://localhost:7777/</samp></li>
<li>status : 200</li>
<li>réponse :<pre class="prettyprint linenums"><code class="language-htm">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;Vue Router + Vue Server Renderer = Problème&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div data-server-rendered=&quot;true&quot; class=&quot;app&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;/foo/&quot;&gt;/foo/ existe&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/foo&quot;&gt;/foo n&amp;#x27;existe pas&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
</ul>
<p>Vous remarquerez la balise <samp>&lt;div data-server-rendered=&quot;true&quot; class=&quot;app&quot;&gt;</samp> qui indiquera à <a href="https://fr.vuejs.org/">Vue</a> côté client où commencer son hydratation pour prendre la relève. Nous allons voir cela dès maintenant dans la suite car actuellement, <a href="https://fr.vuejs.org/">Vue</a> n&#39;est pas utilisé côté client.</p>
<h3 id="partie-cliente">Partie cliente</h3>
<p>Maintenant que notre site est généré avec <a href="https://fr.vuejs.org/">Vue</a> côté serveur, nous allons faire des modifications pour que la partie cliente prenne ensuite la main. Quand une page est affichée depuis le serveur, et que la partie cliente prend la main, les futures pages visitées seront générées côté client. Votre serveur se contentera tout au plus d&#39;envoyer seulement les petits fragments manquants nécessaires pour le rendu de la page.</p>
<blockquote>
<p>À partir d&#39;ici l&#39;exemple utilisant <samp>webconfig-www.json</samp> risque de ne plus fonctionner car nous allons modifier les fichiers <samp>index.htm</samp>, <samp>exist.htm</samp> et <samp>error.htm</samp> qui sont également utilisés par celui-ci. Si vous le souhaitez, vous pouvez les renommer en <samp>index-www.htm</samp>, <samp>exist-www.htm</samp> et <samp>error-www.htm</samp> et changer les noms dans le <samp>webconfig-www.json</samp> :</p>
<pre class="prettyprint linenums"><code class="language-json">{
    &quot;httpPort&quot;: 7778,
    &quot;view&quot;: &quot;layout.htm&quot;,
    &quot;routes&quot;: {
        &quot;/&quot;: &quot;index-www.htm&quot;,
        &quot;/foo/&quot;: &quot;exist-www.htm&quot;,
        &quot;/*&quot;: {
            &quot;view&quot;: &quot;error-www.htm&quot;,
            &quot;statusCode&quot;: 404
        }
    }
}
</code></pre>
<p>afin que l&#39;exemple marche toujours.</p>
</blockquote>
<p>Nous allons donc changer les liens standards par des liens d&#39;utilisation du routeur de <a href="https://fr.vuejs.org/">Vue</a> :</p>
<p><em>views/index.htm</em></p>
<pre class="prettyprint linenums"><code class="language-js">&lt;ul&gt;
    &lt;li&gt;&lt;router-link to=&quot;/foo/&quot;&gt;/foo/ existe&lt;/router-link&gt;&lt;/li&gt;
    &lt;li&gt;&lt;router-link to=&quot;/foo&quot;&gt;/foo n&#39;existe pas&lt;/router-link&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p><em>views/exist.htm</em></p>
<pre class="prettyprint linenums"><code class="language-js">&lt;div&gt;
    &lt;p&gt;&lt;router-link to=&quot;/&quot;&gt;Retour&lt;/router-link&gt;&lt;/p&gt;
    &lt;p&gt;&lt;strong&gt;200 : J&#39;existe !&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p><em>views/error.htm</em></p>
<pre class="prettyprint linenums"><code class="language-js">&lt;div&gt;
    &lt;p&gt;&lt;router-link to=&quot;/&quot;&gt;Retour&lt;/router-link&gt;&lt;/p&gt;
    &lt;p&gt;404 : Je n&#39;existe pas...&lt;/p&gt;
&lt;/div&gt;
</code></pre>
<p>À ce niveau là, si vous naviguez par exemple en cliquant sur <samp>/foo/ existe</samp>, vous constaterez que, même si vous avez remplacez les balises <samp>&lt;a&gt;</samp> par des balises <samp>&lt;router-link&gt;</samp>, votre source renvoyée en réponse par le serveur est valide W3C et une crème pour la SEO :</p>
<ul>
<li>addresse : <samp>http://localhost:7777/foo/</samp></li>
<li>status : 200</li>
<li>réponse :<pre class="prettyprint linenums"><code class="language-htm">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;Vue Router + Vue Server Renderer = Problème&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div data-server-rendered=&quot;true&quot; class=&quot;app&quot;&gt;&lt;div&gt;&lt;p&gt;&lt;a href=&quot;/&quot; class=&quot;router-link-active&quot;&gt;Retour&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;200 : J&amp;#x27;existe !&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
</ul>
<p>Ajoutons à présent à notre modèle de page global les animations CSS nécessaires au changement de page ainsi que le code client permettant à <a href="https://fr.vuejs.org/">Vue</a> d&#39;hydrater la page courante en allant chercher les bons fichiers.</p>
<p><em>views/common.htm</em></p>
<pre class="prettyprint linenums"><code class="language-htm">&lt;html lang=&quot;fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;Vue Router + Vue Server Renderer = Problème&lt;/title&gt;
        &lt;style&gt;
            .fade-enter, .fade-leave-to { opacity: 0; }
            .fade-leave-active, .fade-enter-active { transition: opacity 1s; }
            .fade-enter-to, .fade-leave { opacity: 1; }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!--vue-ssr-outlet--&gt;
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.4.1/vue.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue-router/2.7.0/vue-router.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;&lt;?- urlBasePath ?&gt;/javascript/common.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>Nous allons aménager notre code servi par le client en permettant à nos fichiers dans <samp>views</samp> d&#39;être accessibles côté client grâce à l&#39;ajout de fichiers statiques dans <samp>webconfig.json</samp> :</p>
<p><em>webconfig.json</em></p>
<pre class="prettyprint linenums"><code class="language-json">{
    &quot;httpPort&quot;: 7777,
    &quot;view&quot;: &quot;common.htm&quot;,
    &quot;controller&quot;: &quot;common.js&quot;,
    &quot;routes&quot;: &quot;routes.json&quot;,
    &quot;statics&quot;: {
        &quot;/views-models&quot;: &quot;views/&quot;,
        &quot;/routes.json&quot;: &quot;routes.json&quot;
    }
}
</code></pre>
<blockquote>
<p>Nous avons donc décidez, en plus des routes existantes dans <samp>routes.json</samp>, de fournir côté client le contenu du dossier <samp>views</samp> derririère les URL <samp>http//localhost:7777/views-models/</samp>. Ainsi demander, par exemple, <samp>http//localhost:7777/views-models/index.htm</samp> nous retournera le contenu, côté client, du fichier <samp>views/index.htm</samp>. Nous avons également mis à disposition derrière l&#39;adresse <samp>http//localhost:7777/routes.json</samp> le contenu du fichier <samp>routes.json</samp>, ce qui va nous permettre d&#39;alimenter les routes de <a href="https://router.vuejs.org/fr/">Vue Router</a> avec les mêmes informations que notre serveur <a href="https://node-atlas.js.org/">NodeAtlas</a>.</p>
</blockquote>
<p>Nous allons maintenant rendre disponible un fichier <samp>http//localhost:7777/javascript/common.js</samp> côté client en ajoutant un fichier statique dans le dossier <samp>assets</samp> de <a href="https://node-atlas.js.org/">NodeAtlas</a> qui est prévu pour cela.</p>
<pre class="prettyprint linenums"><code class="language-bash">├─ assets/
│  └─ javascript/
│     └─ common.js
├─ controllers/
│  └─ ...
├─ views/
│  ├─ ...
├─ ...
</code></pre>
<p>Nous aurons alors, côté client, accès au contenu de <samp>assets/javascript/common.js</samp> qui contient tout le code nécessaire pour hydrater le site :</p>
<p><em>assets/javascript/common.js</em></p>
<pre class="prettyprint linenums"><code class="language-js">/* Nous créons à la main une fonction pour aller chercher en AJAX
   des fichiers à des adresses données. Cette fonction utilise les promesses,
   aussi vous ne pourrez tester ce code que dans les navigateurs les supportants.
   http://caniuse.com/#feat=promises */
window.module = {};
function xhr(url) {
  return new Promise(function (resolve, reject) {
    var request = new XMLHttpRequest(),
        type = url.match(/\.(js(on)?|html?)$/g, &#39;$0&#39;)[0];

    request.addEventListener(&quot;load&quot;, function () {
      if (request.status &lt; 200 &amp;&amp; request.status &gt;= 400) {
        reject(new Error(&quot;We reached our target server, but it returned an error.&quot;));
      }

      if (type === &#39;.js&#39;) {
        resolve(eval(request.responseText));
      } else if (type === &#39;.json&#39;) {
        resolve(JSON.parse(request.responseText));
      } else {
        resolve(request.responseText);
      }

    });

    request.addEventListener(&quot;error&quot;, function () {
      reject(new Error(&quot;There was a connection error of some sort.&quot;));
    });

    request.open(&quot;GET&quot;, location.origin + &#39;/&#39; + url, true);
    request.send();
  });
}

/* Le code qui nous intéresse commence ici.
   Nous commençons par charger la vue et le modèle
   de l&#39;application en elle même, ainsi que les routes
   qu&#39;il va falloir donner au routeur client. */
Promise.all([
    xhr(&quot;views-models/app.js&quot;),
    xhr(&quot;views-models/app.htm&quot;),
    xhr(&quot;routes.json&quot;)
]).then(function (files) {
    /* `files` contient le contenu de ces 3 fichiers. */
    var vm,
        routes = [],
        router,
        model = files[0],
        template = files[1],
        webconfig = {
            routes: files[2]
        },
        /* Nous créons un objet basé sur toutes les routes
           que nous allons parcourir pour alimeter le routeur. */
        keys = Object.keys(webconfig.routes);

    /* Pour chaque route de `routes.json`... */
    keys.forEach(function (key) {
        var route = {},
            name = webconfig.routes[key].view,
            model,
            template;

        /* ...nous associons un nom,... */
        route.name = name;
        /* ...nous associons un chemin de route et... */
        route.path = webconfig.routes[key].url;

        /* ...nous associons un composant. */
        route.component = function (resolve) {
            /* Nous chargeons alors la vue et le modèle
               du composant de la route en question. */
            Promise.all([
                xhr(&quot;views-models/&quot; + name + &quot;.js&quot;, &quot;js&quot;),
                xhr(&quot;views-models/&quot; + name + &quot;.htm&quot;, &quot;htm&quot;),
            ]).then(function (files) {
                model = files[0];
                template = files[1];

                /* Puis ceux-ci seront récupérés UNIQUEMENT
                   si la page est demandée. Cela permet de
                   ne demandé que le composant courant à la
                   page pour l&#39;hydratation. */
                resolve(model(template));
            });
        };

        /* Nous créons notre objet de
           routes pour Vue Router. */
        routes.push(route);
    });

    /* Nous créons à présent notre routeur. */
    router = new VueRouter({
        mode: &#39;history&#39;,
        fallback: false,
        base: &#39;/&#39;,
        routes: routes
    });

    /* Puis nous attribuons le routeur `router`, le `webconfig`
       et la vue `template` à notre modèle `model`. */
    vm = new Vue(model(template, router, webconfig));

    /* Quand le routeur a tout ce qui lui faut pour
       la page courante... */
    router.onReady(function () {
        /* Vue monte l&#39;application sur le DOM en dessous
           de la balise avec la classe `app`. Comme cette
           balise contient l&#39;attribut `data-server-rendered=&quot;true&quot;`
           Vue ne recompile pas tout le contenu mais hydrate celui déjà
           en place. Dans notre cas, cela ce résume à ne rien faire
           puisque le rendu demandé côté client est identique à celui côté
           serveur (pas de variables qui diffèrent). */
        vm.$mount(&#39;.app&#39;);
    });
});
</code></pre>
<h4 id="test-client">Test client</h4>
<p>Puisque vous avez modifié le <samp>webconfig.json</samp>, vous devez quitter <a href="https://node-atlas.js.org/">NodeAtlas</a> en utilisant « ctrl + c » et relancer le site avec la commande <samp>node-atlas --browse</samp>.</p>
<p>Vous accéderez à :</p>
<ul>
<li>addresse : <samp>http://localhost:7777/</samp></li>
<li>status : 200</li>
<li>réponse :<pre class="prettyprint linenums"><code class="language-htm">&lt;html lang=&quot;fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;Vue Router + Vue Server Renderer = Problème&lt;/title&gt;
        &lt;style&gt;
            .fade-enter, .fade-leave-to { opacity: 0; }
            .fade-leave-active, .fade-enter-active { transition: opacity 1s; }
            .fade-enter-to, .fade-leave { opacity: 1; }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div data-server-rendered=&quot;true&quot; class=&quot;app&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;/foo/&quot;&gt;/foo/ existe&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/foo&quot;&gt;/foo n&amp;#x27;existe pas&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.4.1/vue.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue-router/2.7.0/vue-router.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;http://localhost:7777/javascript/common.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
</ul>
<p>Puis <a href="https://fr.vuejs.org/">Vue</a> prendra la main en hydratant le code côté client ! Aussi en cliquant sur <samp>/foo/ existe</samp> vous n&#39;enclencherez pas de nouvelles réponses HTTP, vous récupérerez seulement les fragments <samp>http://localhost:7777/views-models/exist.htm</samp> et <samp>http://localhost:7777/views-models/exist.js</samp> nécessaires à l&#39;affichage de la nouvelle page !</p>
<ul>
<li>addresse : <samp>http://localhost:7777/foo/</samp></li>
<li>status : — (pas de rechargement de page)</li>
<li>réponse : — (pas de rechargement de page)</li>
</ul>
<p>Par contre, si vous actualisez la page avec le bouton actualiser, alors vous obtiendrez votre rendu courant depuis le serveur :</p>
<ul>
<li>addresse : <samp>http://localhost:7777/foo/</samp></li>
<li>status : 200</li>
<li>réponse :<pre class="prettyprint linenums"><code class="language-htm">&lt;html lang=&quot;fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;Vue Router + Vue Server Renderer = Problème&lt;/title&gt;
        &lt;style&gt;
            .fade-enter, .fade-leave-to { opacity: 0; }
            .fade-leave-active, .fade-enter-active { transition: opacity 1s; }
            .fade-enter-to, .fade-leave { opacity: 1; }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div data-server-rendered=&quot;true&quot; class=&quot;app&quot;&gt;&lt;div&gt;&lt;p&gt;&lt;a href=&quot;/&quot; class=&quot;router-link-active&quot;&gt;Retour&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;200 : J&amp;#x27;existe !&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.4.1/vue.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue-router/2.7.0/vue-router.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;http://localhost:7777/javascript/common.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
</ul>
<p>Mais en cliquant sur <samp>Retour</samp>, vous naviguerez de nouveau depuis l&#39;hydratation cliente en récupérant les fragments <samp>http://localhost:7777/views-models/index.htm</samp> et <samp>http://localhost:7777/views-models/index.js</samp> nécessaires à votre navigation :</p>
<ul>
<li>addresse : <samp>http://localhost:7777/</samp></li>
<li>status : — (pas de rechargement de page)</li>
<li>réponse : — (pas de rechargement de page)</li>
</ul>
<h2 id="vuerouter--ssr--problème-de-contenu-dupliqué">VueRouter + SSR = Problème de contenu dupliqué</h2>
<p>Bien, nous voici arrivé au réel problème de cet article.</p>
<h3 id="problème">Problème</h3>
<p>Avec le site que nous avons monté de toute pièce, voici ce qu&#39;il va se passer si nous affichons la page <samp>https://localhost:7777/foo</samp> :</p>
<ul>
<li>addresse : <samp>http://localhost:7777/foo</samp></li>
<li>status : 404</li>
<li>réponse :<pre class="prettyprint linenums"><code class="language-htm">&lt;html lang=&quot;fr&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;Vue Router + Vue Server Renderer = Problème&lt;/title&gt;
        &lt;style&gt;
            .fade-enter, .fade-leave-to { opacity: 0; }
            .fade-leave-active, .fade-enter-active { transition: opacity 1s; }
            .fade-enter-to, .fade-leave { opacity: 1; }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div data-server-rendered=&quot;true&quot; class=&quot;app&quot;&gt;&lt;div&gt;&lt;p&gt;&lt;a href=&quot;/&quot; class=&quot;router-link-active&quot;&gt;Retour&lt;/a&gt;&lt;/p&gt; &lt;p&gt;404 : Je n&amp;#x27;existe pas...&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.4.1/vue.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/vue-router/2.7.0/vue-router.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;http://localhost:7777/javascript/common.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
</li>
</ul>
<p>Notre serveur renvoi une page 404 (avec un code d&#39;erreur 404) généré avec <a href="https://fr.vuejs.org/">Vue</a> côté serveur en suivant les ordres de routage stricte de <a href="https://node-atlas.js.org/">NodeAtlas</a>. La page ainsi affichée avant que le <a href="https://www.javascript.com/">JavaScript</a> client ne s&#39;exécute, et que <a href="https://fr.vuejs.org/">Vue</a> hydrate la page est donc générée depuis <samp>views/error.htm</samp> et <samp>views/error.js</samp>.</p>
<p>Cependant, une fois la main reprise côté client par le <a href="https://router.vuejs.org/fr/">Vue Router</a>, cette fois se sont les fragments <samp>http//localhost:7777/views-models/exist.htm</samp> et <samp>http//localhost:7777/views-models/exist.js</samp> qui sont appelés ! La page ne s&#39;hydrate pas, mais voit son contenu changer ! Normalement, se sont les fichiers <samp>http//localhost:7777/views-models/error.htm</samp> et <samp>http//localhost:7777/views-models/error.js</samp> qui auraient dû être chargés, et la page aurait alors simplement été hydratée au lieu que le DOM complet de la partie applicative ne soit changé.</p>
<p><strong>Ce problème est dû au fait que <a href="https://router.vuejs.org/fr/">Vue Router</a> ne possède pas de routage strict car initialement, il est plus pratique qu&#39;une application rende la même page derrière <samp>http//localhost:7777/views-models/foo/</samp> et ``http//localhost:7777/foo` puisqu&#39;il n&#39;y a pas à se soucier du référencement.</strong></p>
<p>Dans notre cas c&#39;est critique, et même l&#39;options strict de <a href="https://router.vuejs.org/fr/">Vue Router</a> n&#39;y change rien (actuellement).</p>
<h3 id="solution">Solution</h3>
<p>En attendant que <a href="https://router.vuejs.org/fr/">Vue Router</a> puisse <a href="https://github.com/vuejs/vue-router/issues/1443">prendre en compte cette possibilité</a> sans <a href="https://github.com/vuejs/vue-router/pull/1557">effets secondaires</a>, un moyen de contournement simple est de manuellement rediriger l&#39;utilisateur sur la page avec <samp>/</samp> s&#39;il atterrit sur la page sans : c.-à-d. par exemple aller de <samp>/foo</samp> à <samp>/foo/</samp>. Ainsi, le fichier <samp>assets/javascript/common.js</samp> pourrait simplement être modifié de la sorte :</p>
<p><em>assets/javascript/common.js</em></p>
<pre class="prettyprint linenums"><code class="language-js">if (window.location.pathname.slice(-1) !== &#39;/&#39;) {
    window.location = window.location.pathname + &#39;/&#39;;
}

window.module = {};
function xhr(url) {
    return new Promise(function (resolve, reject) {
/* ... reste du fichier ... */
</code></pre>
<p>De cette manière, <a href="https://fr.vuejs.org/">Vue</a> n&#39;est même pas chargé côté client, et le navigateur redirige l&#39;utilisateur sur la bonne page. De cette page, tout le processus reprend : Le serveur renvoi une page en 200, et <a href="https://fr.vuejs.org/">Vue</a> hydrate la page avec le bon composant.</p>
<p>Bien entendu, il reste à votre charge de ne pas fournir de lien vers <samp>/foo</samp> dans vos <samp>&lt;router-link&gt;</samp> car ça ne gènera pas votre application d&#39;y emmener l&#39;utilisateur.</p>
<h2 id="et-maintenant-">Et maintenant ?</h2>
<p>J&#39;espère que cet article vous aura permis de comprendre et/ou d&#39;expérimenter le SSR ! Vous avez maintenant une meilleure compréhension de la différence entre <samp>/foo/</samp> et <samp>/foo</samp> et pouvez solutionner le problème de routage non strict de <a href="https://router.vuejs.org/fr/">Vue Router</a>.</p>
<blockquote>
<p>Vous pouvez tester ce code chez vous <a href="./media/scripts/upload/vue_ssr.zip">en téléchargeant cette archive</a> qui contient déjà la solution. Pour mettre en évidence le problème, commentez les 3 premières lignes du fichier <samp>assets/javascript/common.js</samp>. Pour lancer l&#39;application, exécutez d&#39;abord <samp>npm install</samp> dans le dossier, puis installez <a href="https://node-atlas.js.org/">NodeAtlas</a> <samp>npm install -g node-atlas</samp> et enfin faites tourner le projet avec la commande <samp>node-atlas --browse</samp>. Les deux autres exemples sont également fournis avec les commandes respectives <samp>node-atlas --browse --webconfig webconfig-www.json</samp> et <samp>node-atlas --browse --webconfig webconfig-spa.json</samp>.</p>
</blockquote>
<p>Vous pouvez également remplacer <a href="https://node-atlas.js.org/">NodeAtlas</a> par le framework serveur de votre choix comme <a href="http://expressjs.com/">Express</a> ou même du <a href="https://nodejs.org/en/">Node.js</a> natif si vous trouvez que l&#39;abstraction offerte par <a href="https://node-atlas.js.org/">NodeAtlas</a> est trop simple. Pour ma part, je vous conseillerais de l&#39;adopter car il répondra simplement à la quasis totalité de vos besoins de création de site web et application web. <a href="https//node-atlas.js.org/">Le site officiel se trouve ici</a>, mais n&#39;hésitez pas à venir sur le <a href="https://gitter.im/NodeAtlas/Aide">chat</a> pour une information rapide ou même de l&#39;aide sur cet article ci par exemple.</p>
]]></description>
            <link>http://localhost:7776/routage-strict-avec-vue-router-et-ssr/</link>
            <guid isPermaLink="false">596cc72e2605c321ce70880d</guid>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[NodeAtlas]]></category>
            <category><![CDATA[SEO]]></category>
            <category><![CDATA[W3C]]></category>
            <category><![CDATA[Vue.js]]></category>
            <category><![CDATA[Node.js]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Fri, 21 Jul 2017 10:18:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Pourquoi vous ne comprenez rien au JavaScript ?]]></title>
            <description><![CDATA[<p>Vous avez un pied dans le monde du numérique depuis quelques années, ou vous côtoyez les métiers du web de près ou de loin, et pourtant vous ne comprenez pas totalement encore les problématiques des développeurs Front-end, ou même maintenant des développeurs Full-stack.</p>
<p>Pourquoi finalement ne peut t-il pas « simplement » y avoir un développeur web comme au bon vieux temps. Quelle est là réelle différence avec un intégrateur HTML/CSS ? Pourquoi le web client n&#39;est t-il plus si abordable pour les développeurs ? Pourquoi coûte t-il si cher à présent ?</p>
<p><a href="https://blog.lesieur.name/media/images/upload/understand-js.png"><img src="https://blog.lesieur.name/media/images/upload/understand-js-min.jpg" style="max-width: 100%; height: auto;"></a></p>
<p>Je vous propose, à partir d&#39;une petite discussion fictive entre, un acteur du numérique qui n&#39;a plus l’œil partout, et un développeur Full-stack sur le feu, de mettre en lumière en quoi le web d&#39;aujourd&#39;hui est « compliqué ».</p>
<blockquote>
<p>Cet article est inspiré et adapté en français de l&#39;article « How it feels to learn JavaScript in 2016 », lui-même inspiré par « It&#39;s The Future » que j&#39;ai modifié pour y apporter ma propre expérience. Vous pouvez lire les articles originaux respectivement <a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f">ici</a> et <a href="https://circleci.com/blog/its-the-future/">ici</a>.</p>
</blockquote>
<blockquote>
<p>Cet extrait n&#39;est qu&#39;une mise en situation, et tout comme n&#39;importe quelle bibliothèque JavaScript, il ne devrait pas être pris trop au sérieux !</p>
</blockquote>
<p>En espérant que vous y apprendrez des choses !</p>
<h2 id="m-numérique-et-m-javascript-discutent">M. Numérique et M. JavaScript discutent</h2>
<p>Hé ! J&#39;ai ce nouveau projet web à faire, mais pour être totalement honnête, je n&#39;ai pas fait de développement web client depuis quelques années et j&#39;ai entendu que ça avait pas mal bougé ses dernières temps. Tu es as jour sur toutes ces choses là pas vrai ?</p>
<ul>
<li><em>Le terme actuel est développement Front-end, mais oui, je suis ton homme. Visualisations temps réel, musique en ligne, drônes qui font du café, demande ! Je reviens justement de <a href="http://jsconf.com/" title="JSConf">JSConf</a> et <a href="https://conf.vuejs.org/" title="VueConf">VueConf</a>, du coup, je suis à la page sur les dernières technologies pour créer des applications webs.</em></li>
</ul>
<h3 id="juste-des-données">Juste des données</h3>
<p>Cool. J&#39;ai besoin de créer une page pour afficher les dernières activités de mes utilisateurs, donc, j&#39;ai juste besoin de récupérer des informations depuis une source <a href="https://fr.wikipedia.org/wiki/Representational_state_transfer" title="REST">REST</a> et de les afficher dans un tableau filtrable que je mettrais à jour à chaque changement côté serveur. Je pensais utiliser quelque chose comme <a href="https://jquery.com/" title="jQuery">jQuery</a> pour récupérer les données à afficher ?</p>
<ul>
<li><em>Oh là, non ! Plus personne utilise <a href="https://jquery.com/" title="jQuery">jQuery</a> maintenant. On se contente de <a href="https://blog.lesieur.name/vanilla-js-france/" title="Vanilla.js">Vanilla.js</a> si on souhaite faire simplement du <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a>.</em></li>
</ul>
<p>Ha ? C&#39;est quoi ça <a href="https://blog.lesieur.name/vanilla-js-france/" title="Vanilla.js">Vanilla.js</a> ?</p>
<ul>
<li><em>C&#39;est juste du <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a>. C&#39;est un petit nom sympa donné aux nouvelles fonctionnalités de l&#39;API des navigateurs pour manipuler le <a href="https://fr.wikipedia.org/wiki/Document_Object_Model" title="DOM">DOM</a>. Et comme c&#39;est implémenté dans les navigateurs, il n&#39;y a plus besoin d&#39;inclure de bibliothèque maintenant.</em></li>
</ul>
<h3 id="les-mvvm">Les MVVM</h3>
<p>Du coup on a abandonné les frameworks <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> ? Tout est plus simple !</p>
<ul>
<li><em>Non. Pas du tout. Il y en a d&#39;autres des frameworks maintenant.</em></li>
</ul>
<p>C&#39;est ce qui me semblait. J&#39;avais entendu parler de <a href="https://facebook.github.io/react/" title="React">React</a> ou <a href="https://facebook.github.io/react/" title="Angular">Angular</a> au lieu de <a href="https://jquery.com/" title="jQuery">jQuery</a> ?</p>
<ul>
<li><em>Tu devrais utiliser <a href="https://facebook.github.io/react/" title="React">React</a> oui, c&#39;était la superstar de 2016 en concurrence avec <a href="https://facebook.github.io/react/" title="Angular">Angular</a> ou encore <a href="https://vuejs.org/" title="Vue">Vue</a>, mon chouchou. React est une bibliothèque <a href="https://fr.wikipedia.org/wiki/Mod%C3%A8le-vue-vue_mod%C3%A8le" title="MVVM">MVVM</a>.</em></li>
</ul>
<p>React est une bibliothèque <a href="https://fr.wikipedia.org/wiki/Mod%C3%A8le-vue-vue_mod%C3%A8le" title="MVVM">MVVM</a> ?</p>
<ul>
<li><em>C&#39;est une bibliothèque super cool faites par des gars de chez Facebook. Ça t&#39;apporte un réel contrôle et des grandes performances sur tes applications en te permettant de gérer tes changements de vue vraiment facilement.</em></li>
</ul>
<p>Ça a l&#39;air pas mal. Je peux utiliser <a href="https://facebook.github.io/react/" title="React">React</a> pour afficher mes données alors ?</p>
<ul>
<li><em>Oui, mais d&#39;abord, tu vas devoir ajouter <a href="https://facebook.github.io/react/" title="React">React</a> et <a href="https://facebook.github.io/react/docs/react-dom.html" title="ReactDOM">ReactDOM</a> comme bibliothèque dans ta page web.</em></li>
</ul>
<p>Attend, pourquoi deux bibliothèques ?</p>
<ul>
<li><em>Et bien, il y en a une qui est la bibliothèque en elle-même, et une seconde pour manipuler le <a href="https://fr.wikipedia.org/wiki/Document_Object_Model" title="DOM">DOM</a>, que tu vas maintenant pouvoir décrire en <a href="https://jsx.github.io/" title="JSX">JSX</a>.</em></li>
</ul>
<p><a href="https://jsx.github.io/" title="JSX">JSX</a> ? C&#39;est quoi <a href="https://jsx.github.io/" title="JSX">JSX</a> ?</p>
<ul>
<li>*<a href="https://jsx.github.io/" title="JSX">JSX</a> c&#39;est juste une extension de la syntaxe <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> qui est aussi cool que du XML. C&#39;est une autre façon de décrire le <a href="https://fr.wikipedia.org/wiki/Document_Object_Model" title="DOM">DOM</a>. Voit le comme du HTML++.*</li>
</ul>
<p>Qu&#39;est-ce qui ne va pas avec le <a href="https://fr.wikipedia.org/wiki/HTML5" title="HTML">HTML</a> ?</p>
<ul>
<li><em>En 2017, personne ne code plus en <a href="https://fr.wikipedia.org/wiki/HTML5" title="HTML">HTML</a> directement voyons.</em></li>
</ul>
<h3 id="es6-et-plus">ES6 et plus</h3>
<p>Bien. Pourquoi pas. Si j&#39;ajoute ces deux bibliothèques, ensuite je vais pouvoir utiliser <a href="https://facebook.github.io/react/" title="React">React</a> ?</p>
<ul>
<li><em>Non, pas encore. Tu vas avoir besoin de <a href="https://babeljs.io/" title="Babel">Babel</a>, et ensuite tu pourras utiliser <a href="https://facebook.github.io/react/" title="React">React</a>.</em></li>
</ul>
<p>Une autre bibliothèque ? Qu&#39;est-ce que c&#39;est <a href="https://babeljs.io/" title="Babel">Babel</a> ?</p>
<ul>
<li><em>Oh, <a href="https://babeljs.io/" title="Babel">Babel</a> est un transpileur, tout comme <a href="https://github.com/google/traceur-compiler" title="Traceur">Traceur</a>. Il te permet de choisir une version de <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> à produire en sortie sur tes sites alors que tu codes avec une autre version de <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a>. Tu n&#39;as pas besoin d&#39;inclure <a href="https://babeljs.io/" title="Babel">Babel</a> obligatoirement pour utiliser <a href="https://facebook.github.io/react/" title="React">React</a>, mais sans lui, tu vas rester bloquer avec une utilisation de <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> en <a href="https://blog.lesieur.name/apprendre-et-comprendre-javascript-version-es6/" title="ES5">ES5</a>, et, soyons réaliste, en 2017, tu dois au moins coder en <a href="http://kangax.github.io/compat-table/es2016plus/" title="ES2016+">ES2016+</a> comme le reste des mecs cools.</em></li>
</ul>
<p><a href="https://blog.lesieur.name/apprendre-et-comprendre-javascript-version-es6/" title="ES5">ES5</a> ? <a href="http://kangax.github.io/compat-table/es2016plus/" title="ES2016+">ES2016+</a> ? Je suis un peu perdu. Qu&#39;est-ce que c&#39;est <a href="https://blog.lesieur.name/apprendre-et-comprendre-javascript-version-es6/" title="ES5">ES5</a> et <a href="http://kangax.github.io/compat-table/es2016plus/" title="ES2016+">ES2016+</a> ?</p>
<ul>
<li>*<a href="https://blog.lesieur.name/apprendre-et-comprendre-javascript-version-es6/" title="ES5">ES5</a> signifie <a href="https://fr.wikipedia.org/wiki/ECMAScript" title="ECMAScript">ECMAScript</a> 5. C&#39;est l&#39;édition que la plupart des personnes utilisent car elle est implémentée dans la plupart des navigateurs de nos jours.*</li>
</ul>
<p><a href="https://fr.wikipedia.org/wiki/ECMAScript" title="ECMAScript">ECMAScript</a> ?</p>
<ul>
<li><em>Oui, tu sais, le langage de script <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> s&#39;est basé dessus en 1999 après sa création initiale en 1995. À l&#39;époque le <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> était le LiveScript et tournait uniquement dans le navigateur Netscape. C&#39;était un peu brouillon, mais maintenant heureusement c&#39;est plus clair grâce à ses 7 éditions d&#39;implémentation.</em></li>
</ul>
<p>7 éditions. Vraiment ? Et <a href="https://blog.lesieur.name/apprendre-et-comprendre-javascript-version-es6/" title="ES5">ES5</a> et <a href="http://kangax.github.io/compat-table/es2016plus/" title="ES2016+">ES2016+</a> en sont donc ?</p>
<ul>
<li><em>La cinquième et la septième édition respectivement.</em></li>
</ul>
<p>Attends, qu&#39;est-ce qui est arrivé à la sixième ?</p>
<ul>
<li><em>Tu parles de <a href="http://kangax.github.io/compat-table/es6/" title="ES6">ES6</a> ? En fait, chaque édition est une version supérieur de la précédente. Donc si tu utilises <a href="http://kangax.github.io/compat-table/es2016plus/" title="ES2016+">ES2016+</a>, tu utilises toutes les fonctionnalités des versions précédentes.</em></li>
</ul>
<p>Ok. Et pourquoi plus la <a href="http://kangax.github.io/compat-table/es2016plus/" title="ES2016+">ES2016+</a> que la <a href="http://kangax.github.io/compat-table/es6/" title="ES6">ES6</a> exactement ?</p>
<ul>
<li><em>Et bien, tu peux utiliser <a href="http://kangax.github.io/compat-table/es6/" title="ES6">ES6</a>, mais tu ne pourras pas utiliser des fonctionnalités au top comme <a href="https://tc39.github.io/ecmascript-asyncawait/" title="async">async</a> ou <a href="https://tc39.github.io/ecmascript-asyncawait/" title="await">await</a>. Pour ça, tu as besoin de <a href="http://kangax.github.io/compat-table/es2016plus/" title="ES2016+">ES2016+</a>. Sinon, tu vas te limité avec des générateurs <a href="http://kangax.github.io/compat-table/es6/" title="ES6">ES6</a> histoire de bloquer les appels asynchrones pour un contrôle de flux plus facile.</em></li>
</ul>
<h3 id="gestionnaire-de-modules">Gestionnaire de modules</h3>
<p>Ok. J&#39;ai pas tout compris. C&#39;est un peu déroutant, mais bon. Écoute, je veux juste charger un groupe de données depuis un serveur. Pour ça j&#39;ai juste besoin d&#39;inclure <a href="https://jquery.com/" title="jQuery">jQuery</a> depuis un <a href="https://fr.wikipedia.org/wiki/Content_delivery_network" title="CDN">CDN</a> et de récupérer mes données avec des appels <a href="https://fr.wikipedia.org/wiki/Ajax_(informatique)" title="AJAX">AJAX</a>, pourquoi ne pas simplement faire ça ?</p>
<ul>
<li><em>C&#39;est 2017 mec, plus personne utilise <a href="https://jquery.com/" title="jQuery">jQuery</a> maintenant, ça fini toujours en un gros tas de code spaghetti immonde. Tout le monde sait ça.</em></li>
</ul>
<p>Compris. Donc mon alternative est de charger ces trois bibliothèques pour récupérer mes données et afficher cela dans un tableau <a href="https://fr.wikipedia.org/wiki/HTML5" title="HTML">HTML</a>.</p>
<ul>
<li><em>Oui, mais pour inclure ces trois bibliothèques, tu peux les empaqueter avec un gestionnaire de modules pour ne charger qu&#39;un seul fichier.</em></li>
</ul>
<p>Je vois. Et c&#39;est quoi exactement un gestionnaire de modules ?</p>
<ul>
<li><em>La définition dépend de ton environnement, mais dans le monde du web, cela signifie habituellement de supporter les modules <a href="http://requirejs.org/docs/whyamd.html" title="AMD">AMD</a> et <a href="http://requirejs.org/docs/commonjs.html" title="CommonJS">CommonJS</a>.</em></li>
</ul>
<p>Okkayy... et les modules <a href="http://requirejs.org/docs/whyamd.html" title="AMD">AMD</a> et modules <a href="http://requirejs.org/docs/commonjs.html" title="CommonJS">CommonJS</a>, c&#39;est quoi ?</p>
<ul>
<li><em>Pour faire court : il y a plusieurs manières pour définir comment les bibliothèques <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> et les classes devraient intéragir. Tu sais, exports et require ? Tu peux écrire différents fichiers <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> définissant des API <a href="http://requirejs.org/docs/whyamd.html" title="AMD">AMD</a> ou <a href="http://requirejs.org/docs/commonjs.html" title="CommonJS">CommonJS</a> et tu peux les utiliser avec quelque chose comme <a href="http://browserify.org/" title="Browserify">Browserify</a> pour les empaqueter ensemble</em>.</li>
</ul>
<p>Ok. Ça semble logique... je crois. C&#39;est quoi <a href="http://browserify.org/" title="Browserify">Browserify</a> ?</p>
<ul>
<li><em>C&#39;est un outil cool pour te permettre d&#39;empaqueter ensemble des descriptions de dépendance de fichier <a href="http://requirejs.org/docs/commonjs.html" title="CommonJS">CommonJS</a> pour les faire tourner dans un navigateur. Ça a été créé car beaucoup de gens publiaient des dépendances dans le registre <a href="https://www.npmjs.com/" title="npm">npm</a>.</em></li>
</ul>
<p>Le registre <a href="https://www.npmjs.com/" title="npm">npm</a> ?</p>
<ul>
<li><em>C&#39;est un dépôt public vraiment énorme ou les gens malins placent leurs codes dans des modules.</em></li>
</ul>
<p>Comme <a href="https://fr.wikipedia.org/wiki/Content_delivery_network" title="CDN">CDN</a> ?</p>
<ul>
<li><em>Pas vraiment. C&#39;est plutôt une base de données centralisée ou chacun peut publier son code ou le télécharger. Mais effectivement, tu peux aussi le publier sur <a href="https://fr.wikipedia.org/wiki/Content_delivery_network" title="CDN">CDN</a> ensuite si tu veux.</em></li>
</ul>
<p>Plus comme <a href="https://github.com/" title="GitHub">GitHub</a> alors ?</p>
<ul>
<li><em>Non, car <a href="https://github.com/" title="GitHub">GitHub</a> c&#39;est plutôt pour la collaboration, la maintenance de code, la relecture de code et le partage de code. Même si on peut s&#39;en servir comme gestionnaire de module avec des équivalents comme <a href="http://jspm.io/" title="jspm">jspm</a> ?</em></li>
</ul>
<p>Oh, je vois, comme <a href="https://bower.io/" title="Bower">Bower</a> ?</p>
<ul>
<li><em>Oui. Mais on est en 2017 maintenant, plus personne utilise <a href="https://bower.io/" title="Bower">Bower</a>.</em></li>
</ul>
<p>Ah, d&#39;accord. Donc j&#39;ai besoin de télécharger mes bibliothèques depuis <a href="https://www.npmjs.com/" title="npm">npm</a> donc ?</p>
<ul>
<li><em>Oui. Donc pour le moment, si tu veux utiliser <a href="https://facebook.github.io/react/" title="React">React</a>, tu peux télécharger le module <a href="https://facebook.github.io/react/" title="React">React</a> et l&#39;importer dans ton code. Tu peux faire ça avec toutes les bibliothèques <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> populaires.</em></li>
</ul>
<p>Oh, comme <a href="https://angularjs.org/" title="AngularJS">AngularJS</a> !</p>
<ul>
<li>*<a href="https://angularjs.org/" title="AngularJS">AngularJS</a> c&#39;est trop 2015, mais oui. <a href="https://facebook.github.io/react/" title="Angular">Angular</a> a pris la relève, sans le JS, c&#39;est pas la même chose. Tu veux en savoir plus à ce propos ?*</li>
</ul>
<p>Non. C&#39;est déjà assez avec <a href="https://facebook.github.io/react/" title="React">React</a>, j&#39;ai déjà appris trop de chose là. Donc, si je dois utiliser <a href="https://facebook.github.io/react/" title="React">React</a>, je le récupère depuis <a href="https://www.npmjs.com/" title="npm">npm</a>, puis je le raffine avec <a href="http://browserify.org/" title="Browserify">Browserify</a>, c&#39;est ça ?</p>
<ul>
<li><em>Oui.</em></li>
</ul>
<h3 id="gestionnaire-de-tâches">Gestionnaire de tâches</h3>
<p>Bon, ça semble quand même pas mal compliqué de prendre diverses dépendances pour les assembler ensemble.</p>
<ul>
<li><em>Ça l&#39;est. C&#39;est pourquoi on utilise des gestionnaires de tâches comme <a href="https://gruntjs.com/" title="Grunt">Grunt</a>, <a href="http://gulpjs.com/" title="gulp">gulp</a> ou <a href="http://broccolijs.com/" title="Broccoli">Broccoli</a> pour automatiser les transformations avec <a href="http://browserify.org/" title="Browserify">Browserify</a>. Et tu peux même utiliser <a href="http://mimosa.io/" title="Mimosa">Mimosa</a>.</em></li>
</ul>
<p><a href="https://gruntjs.com/" title="Grunt">Grunt</a> ? <a href="http://gulpjs.com/" title="gulp">gulp</a> ? <a href="http://broccolijs.com/" title="Broccoli">Broccoli</a> ? <a href="http://mimosa.io/" title="Mimosa">Mimosa</a> ? Mais de quoi on parle là ?</p>
<ul>
<li><em>Des gestionnaires de tâches. Mais ils ne sont plus vraiment cool maintenant. On les utilisait en 2015, maintenant on se la joue plutôt Makefiles, et on encapsule tout ça avec <a href="https://webpack.js.org/" title="webpack">webpack</a>.</em></li>
</ul>
<p>Makefiles ? C&#39;est des trucs utilisés en C ou C++ ça ?</p>
<ul>
<li><em>Ouais, mais nous aussi maintenant dans le web on aime faire compliqué et revenir aux bases. On fait ça tous les ans, et attend un peu, mais on devrait faire des assembly dans un an ou deux. Faut bien qu&#39;on comprenne qu&#39;on est des vrais développeurs.</em></li>
</ul>
<p><em>Soupir</em>. Tu mentionnais un truc nommé <a href="https://webpack.js.org/" title="webpack">webpack</a> ?</p>
<ul>
<li><em>C&#39;est un autre gestionnaire de module pour les navigateurs qui est en même temps une sorte de gestionnaire de tâches. C&#39;est comme une meilleure version de <a href="http://browserify.org/" title="Browserify">Browserify</a></em>.</li>
</ul>
<p>Oh ! Pourquoi il est meilleur ?</p>
<ul>
<li><em>Et bien, peut-être pas meilleur, mais il est plus opiniâtre sur la manière dont les dépendances doivent être attachées. <a href="https://webpack.js.org/" title="webpack">webpack</a> te permet d&#39;utiliser différents gestionnaires de modules et pas seulement des formats <a href="http://requirejs.org/docs/commonjs.html" title="CommonJS">CommonJS</a>. Il supporte même des modules au format natifs <a href="http://kangax.github.io/compat-table/es6/" title="ES6">ES6</a>.</em></li>
</ul>
<p>Là je suis complètement paumé avec toutes tes histoires de <a href="http://requirejs.org/docs/commonjs.html" title="CommonJS">CommonJS</a> et <a href="http://kangax.github.io/compat-table/es6/" title="ES6">ES6</a>.</p>
<ul>
<li><em>Tout le monde l&#39;est, mais tu ne devrais plus l&#39;être avec <a href="https://github.com/systemjs/systemjs" title="SystemJS">SystemJS</a>.</em></li>
</ul>
<p>Encore un nom en « js »... bien, et c&#39;est quoi <a href="https://github.com/systemjs/systemjs" title="SystemJS">SystemJS</a>.</p>
<ul>
<li><em>Et bien contrairement à <a href="http://browserify.org/" title="Browserify">Browserify</a> et <a href="https://webpack.js.org/" title="webpack">webpack</a> (dans ses débuts), <a href="https://github.com/systemjs/systemjs" title="SystemJS">SystemJS</a> utilise des chargeurs de modules dynamiques pour attacher des modules en plusieurs fichiers plutôt que de les empaqueter en un seul gros fichier.</em></li>
</ul>
<p>Attend, je croyais qu&#39;on voulait empaqueter tous les fichiers en un seul gros fichier justement !</p>
<ul>
<li><em>Oui, mais grâce à <a href="https://fr.wikipedia.org/wiki/Hypertext_Transfer_Protocol/2" title="HTTP/2">HTTP/2</a>, maintenant les requêtes HTTP multiples sont préférables.</em></li>
</ul>
<p>Donc, on pourrait pas juste ajouter les 3 bibliothèques originales pour utiliser <a href="https://facebook.github.io/react/" title="React">React</a> ?</p>
<ul>
<li><em>Pas vraiment. Je veux dire, tu pourrais inclure ses trois scripts depuis un <a href="https://fr.wikipedia.org/wiki/Content_delivery_network" title="CDN">CDN</a>, mais tu voudrais toujours utiliser <a href="https://babeljs.io/" title="Babel">Babel</a> ensuite.</em></li>
</ul>
<p><em>Soupir</em>. Et sans <a href="https://babeljs.io/" title="Babel">Babel</a> pas d&#39;<a href="http://kangax.github.io/compat-table/es6/" title="ES6">ES6</a> ?</p>
<ul>
<li><em>Oui, et inclure une version <a href="https://fr.wikipedia.org/wiki/Content_delivery_network" title="CDN">CDN</a> de <a href="https://babeljs.io/" title="Babel">Babel</a> en entier ne serait pas une bonne idée pour la production. En production, tu dois minifier ton propre jeu de fichiers personnels, tu dois minifier tes ressources, rendre plus performant ton JS (et le rendre illisible), mettre du CSS critique directement dans le HTML en amont de tes fichiers, déferrer tes scripts, etc.</em></li>
</ul>
<h3 id="typage-fort">Typage fort</h3>
<p>C&#39;est bon, c&#39;est bon. Alors si je ne veux pas inclure mes bibliothèques directement depuis des <a href="https://fr.wikipedia.org/wiki/Content_delivery_network" title="CDN">CDN</a>, qu&#39;est ce que je voudrais faire ?</p>
<ul>
<li><em>Tu voudrais les transpiler depuis <a href="https://www.typescriptlang.org/" title="TypeScript">TypeScript</a> en utilisant <a href="https://webpack.js.org/" title="webpack">webpack</a> + <a href="https://github.com/systemjs/systemjs" title="SystemJS">SystemJS</a> + <a href="https://babeljs.io/" title="Babel">Babel</a>.</em></li>
</ul>
<p><a href="https://www.typescriptlang.org/" title="TypeScript">TypeScript</a> ? Je croyais qu&#39;on codait en <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> !</p>
<ul>
<li>*<a href="https://www.typescriptlang.org/" title="TypeScript">TypeScript</a> est du <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a>, ou plutôt, une surcouche de <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a>, plus précisément de JavaScript en version <a href="http://kangax.github.io/compat-table/es6/" title="ES6">ES6</a>. Tu sais, les six versions dont nous avons parlées tout à l&#39;heure ?*</li>
</ul>
<p>Mais je croyais que <a href="http://kangax.github.io/compat-table/es2016plus/" title="ES2016+">ES2016+</a> était déjà une surcouche de <a href="http://kangax.github.io/compat-table/es6/" title="ES6">ES6</a> ! Pourquoi on aurait besoin de faire appel à <a href="https://www.typescriptlang.org/" title="TypeScript">TypeScript</a> ?</p>
<ul>
<li><em>Oh, parce qu&#39;il nous permet d&#39;utiliser le <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> comme un langage fortement typé, et réduit les erreurs à l&#39;exécution. C&#39;est 2017, tu dois ajouter différents types à ton code <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a>.</em></li>
</ul>
<p>Et <a href="https://www.typescriptlang.org/" title="TypeScript">TypeScript</a> fait ça, évidemment.</p>
<ul>
<li><em>Oui, mais contrairement à <a href="https://flow.org/" title="Flow">Flow</a>, <a href="https://www.typescriptlang.org/" title="TypeScript">TypeScript</a> est une surcouche de <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> qui a besoin d&#39;être compilée.</em></li>
</ul>
<p><em>Soupir</em>... et <a href="https://flow.org/" title="Flow">Flow</a> c&#39;est ?</p>
<ul>
<li><em>Un vérificateur de types statiques fait par des gars de Facebook. Il l&#39;on codé en OCaml, car c&#39;est un langage de programmation fonctionnelle fantastique !</em></li>
</ul>
<p>OCaml ? Programmation fonctionnelle ?</p>
<ul>
<li><em>C&#39;est ce que les mecs cools utilisent de nos jours, mecs, tu sais, c&#39;est 2017 ! La programmation fonctionnelle ? Les fonctions d&#39;ordre supérieur ? Curryfication ? Fonctions pures ?</em></li>
</ul>
<p>J&#39;ai aucune idée de se dont tu parles.</p>
<ul>
<li><em>Personne ne comprend au début. Écoute, tu as juste besoin de savoir que la programmation fonctionnelle est mieux que la programmation orientée objet et c&#39;est ce qui devrait être utilisé maintenant en 2017.</em></li>
</ul>
<p>Attends, j&#39;ai appris la POO à l&#39;école, je croyais que c&#39;était bien ?</p>
<ul>
<li><em>C&#39;est parce que c&#39;est ce que faisait Java avant d&#39;être récupéré par Oracle. Je veux dire, la POO était bonne avant, et est toujours utile de nos jours, mais tout le monde a réalisé que modifier des états était pas top, donc maintenant tout le monde passe du côté des objets immuables et de la programmation fonctionnelle. Les gars utilisant <a href="https://fr.wikipedia.org/wiki/Haskell">Haskell</a> en parlent depuis des années sans parler des gars de <a href="https://fr.wikipedia.org/wiki/Elm">Elm</a>. Heureusement dans le web d&#39;aujourd&#39;hui on a des bibliothèques comme <a href="http://ramdajs.com/" title="Ramda">Ramda</a> qui permettent de la programmation fonctionnelle en <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a>.</em></li>
</ul>
<p>Est-ce que tu chies juste un tas de nom pour faire joli ? C&#39;est quoi ça, Ranma ?</p>
<ul>
<li><em>Non. <a href="http://ramdajs.com/" title="Ramda">Ramda</a>. Comme Lambda. Tu sais la bibliothèque de David Chambers ?</em></li>
</ul>
<p>David qui ?</p>
<ul>
<li><em>David Chambers. Un mec cool. Un des contributeurs de <a href="http://ramdajs.com/" title="Ramda">Ramda</a>. Tu devrais aussi t&#39;intéresser à...</em></li>
</ul>
<h3 id="les-promesses">Les Promesses</h3>
<p>Attends, je vais t&#39;arrêter là. Tout ça est peut-être cool, mais je pense que tout ç&#39;est trop compliqué et inutile pour simplement faire de la récupération de données et les afficher. Je suis sûr que j&#39;ai pas besoin de connaître ce David pour savoir créer des tableaux avec des données dynamiques. Revenons en à <a href="https://facebook.github.io/react/" title="React">React</a>. Comment je peux récupérer les données depuis le serveur avec <a href="https://facebook.github.io/react/" title="React">React</a> ?</p>
<ul>
<li><em>Et bien en fait, tu ne peux pas récupérer les données avec <a href="https://facebook.github.io/react/" title="React">React</a>, tu peux juste afficher les données avec <a href="https://facebook.github.io/react/" title="React">React</a>.</em></li>
</ul>
<p>T&#39;es sérieux là ! Tout ça pour ça ? Alors on utilise quoi pour récupérer les données ?</p>
<ul>
<li><em>Tu utilises <a href="https://developer.mozilla.org/fr/docs/Web/API/Fetch_API/Using_Fetch" title="Fetch">Fetch</a> pour récupérer les données du serveur. C&#39;est le nom de l&#39;implémentation native pour faire du XMLHttpRequests sur un serveur.</em></li>
</ul>
<p>Ah, tu veux dire <a href="https://fr.wikipedia.org/wiki/Ajax_(informatique)" title="AJAX">AJAX</a>.</p>
<ul>
<li>*<a href="https://fr.wikipedia.org/wiki/Ajax_(informatique)" title="AJAX">AJAX</a> est juste l&#39;utilisation de XMLHttpRequests. Mais oui. <a href="https://developer.mozilla.org/fr/docs/Web/API/Fetch_API/Using_Fetch" title="Fetch">Fetch</a> te permet de faire de l&#39;<a href="https://fr.wikipedia.org/wiki/Ajax_(informatique)" title="AJAX">AJAX</a> en te basant sur des <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Promise" title="Promesses">Promesses</a>, que tu peux utiliser pour éviter les cascades de fonctions de rappel.*</li>
</ul>
<p>Cascades de fonctions de rappel ?</p>
<ul>
<li><em>Oui. À chaque fois que tu fais une requête asynchrone au serveur, tu dois attendre la réponse, tu utilises donc une fonction dans une fonction, c&#39;est ce qu&#39;on appelle une fonction de rappel. Si tu as plusieurs appel, ça forme une cascade.</em></li>
</ul>
<p>Ah, et les <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Promise" title="Promesses">Promesses</a> ça empêche ça ?</p>
<ul>
<li><em>En effet. En manipulant tes fonctions de rappel dans des <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Promise" title="Promesses">Promesses</a>, tu peux lire ton code plus facilement et mieux le comprendre. Tu peux le simuler et le tester, avec des requêtes simultanées en attendant qu&#39;elles soient toutes arrivées avant de continuer.</em></li>
</ul>
<p>Et ça peut être fait avec <a href="https://developer.mozilla.org/fr/docs/Web/API/Fetch_API/Using_Fetch" title="Fetch">Fetch</a> ?</p>
<ul>
<li><em>Oui, mais seulement si tes utilisateurs utilisent des navigateurs compatibles, sinon tu auras besoin d&#39;un polyfill pour <a href="https://developer.mozilla.org/fr/docs/Web/API/Fetch_API/Using_Fetch" title="Fetch">Fetch</a> ou d&#39;utiliser <a href="https://github.com/request/request" title="Request">Request</a>, <a href="http://bluebirdjs.com/docs/getting-started.html" title="bluebird">bluebird</a> ou <a href="https://github.com/mzabriskie/axios" title="axios">axios</a>.</em></li>
</ul>
<p>Mais combien de bibliothèques je dois connaître bon sang !?</p>
<ul>
<li><em>Ça, c&#39;est l&#39;écosystème <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> de <a href="https://www.npmjs.com/" title="npm">npm</a>. Il y a des milliers de bibliothèques qui font toutes la même chose. Les sources des bibliothèques sont à disposition, et nous avons les meilleures !</em></li>
</ul>
<p>C&#39;est quoi ça alors <a href="https://github.com/request/request" title="Request">Request</a>, <a href="http://bluebirdjs.com/docs/getting-started.html" title="bluebird">bluebird</a> et <a href="https://github.com/mzabriskie/axios" title="axios">axios</a> ?</p>
<ul>
<li><em>Ce sont toutes des bibliothèques pour faire du XMLHttpRequests avec des <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Promise" title="Promesses">Promesses</a>.</em></li>
</ul>
<p>Et les méthodes <a href="https://fr.wikipedia.org/wiki/Ajax_(informatique)" title="AJAX">AJAX</a> de <a href="https://jquery.com/" title="jQuery">jQuery</a> ne peuvent pas retourner des <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Promise" title="Promesses">Promesses</a> aussi ?</p>
<ul>
<li><em>On n&#39;utilise plus la lettre « j » en 2017. Utilise juste <a href="https://developer.mozilla.org/fr/docs/Web/API/Fetch_API/Using_Fetch" title="Fetch">Fetch</a>, et les polyfill quand le navigateur ne l&#39;a pas ou alors <a href="https://github.com/request/request" title="Request">Request</a>, <a href="http://bluebirdjs.com/docs/getting-started.html" title="bluebird">bluebird</a> et <a href="https://github.com/mzabriskie/axios" title="axios">axios</a> à la place. Ensuite gères tes <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Promise" title="Promesses">Promesses</a> avec les fonctions <a href="https://tc39.github.io/ecmascript-asyncawait/" title="await">await</a> et <a href="https://tc39.github.io/ecmascript-asyncawait/" title="async">async</a> et boom, tu as le contrôle de flux parfait.</em></li>
</ul>
<p>C&#39;est la deuxième fois que tu me parles de <a href="https://tc39.github.io/ecmascript-asyncawait/" title="await">await</a> mais je sais pas trop ce que c&#39;est.</p>
<ul>
<li>*<a href="https://tc39.github.io/ecmascript-asyncawait/" title="await">await</a> permet de bloquer les appels asynchrones, te permettant d&#39;avoir un meilleur contrôle sur « quand » les données vont être récupérées et en améliore la lisibilité du code. C&#39;est génial, tu as juste besoin se t&#39;assurer d&#39;avoir la surcouche <samp>stage-3</samp> avec <a href="https://babeljs.io/" title="Babel">Babel</a>, ou d&#39;utiliser la <samp>syntax-async-functions</samp> et le plugin <samp>transform-async-to-generator</samp>.*</li>
</ul>
<p>C&#39;est imbitable.</p>
<ul>
<li><em>Non, imbitable c&#39;est le fait de devoir pré-compiler du code <a href="https://www.typescriptlang.org/" title="TypeScript">TypeScript</a> et le transpiler avec <a href="https://babeljs.io/" title="Babel">Babel</a> pour pouvoir utiliser des fonctionnalités qui ne sont pas encore supportées par <a href="https://www.typescriptlang.org/" title="TypeScript">TypeScript</a>.</em></li>
</ul>
<p>Je sais pas trop quoi dire à ce stade.</p>
<ul>
<li><em>C&#39;est très simple. Tu codes tout en <a href="https://www.typescriptlang.org/" title="TypeScript">TypeScript</a>. Tous les modules sont récupérés avec <a href="https://developer.mozilla.org/fr/docs/Web/API/Fetch_API/Using_Fetch" title="Fetch">Fetch</a> et compilés en <a href="http://kangax.github.io/compat-table/es6/" title="ES6">ES6</a></em>. Tu les transpiles avec <a href="https://babeljs.io/" title="Babel">Babel</a> et la surcouche <samp>stage-3</samp>, et tu charges ça avec <a href="https://github.com/systemjs/systemjs" title="SystemJS">SystemJS</a>. Si tu n&#39;as pas <a href="https://developer.mozilla.org/fr/docs/Web/API/Fetch_API/Using_Fetch" title="Fetch">Fetch</a>, utilise un polyfill ou utilise <a href="https://github.com/mzabriskie/axios" title="axios">axios</a>, et gère toutes tes <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Promise" title="Promesses">Promesses</a> avec <a href="https://tc39.github.io/ecmascript-asyncawait/" title="await">await</a>.</li>
</ul>
<h3 id="gestionnaire-détats">Gestionnaire d&#39;états</h3>
<p>On a pas la même définition de « très simple ». Donc avec ce rituel je vais finalement pouvoir récupérer mes données et les afficher avec <a href="https://facebook.github.io/react/" title="React">React</a> pas vrai ?</p>
<ul>
<li><em>Et ton application ne devait pas gérer les changements d&#39;états ?</em></li>
</ul>
<p>Non ça va aller, on va juste ré-afficher les données à chaque fois.</p>
<ul>
<li><em>Bon d&#39;accord. Parce que sinon j&#39;aurais dû t&#39;expliquer ce qu&#39;était <a href="https://github.com/facebook/flux">Flux</a>, et ses implémentations comme dans <a href="https://github.com/acdlite/flummox">Flummox</a>, <a href="http://alt.js.org/">Alt</a> ou <a href="https://github.com/yahoo/fluxible">Fluxible</a>. Mais pour être honnête, tu devrais utiliser <a href="http://redux.js.org/" title="Redux">Redux</a>.</em></li>
</ul>
<h3 id="moteur-de-template">Moteur de template</h3>
<p>Je crois que je m&#39;en tape un peu de tous ses noms, je veux juste afficher des données.</p>
<ul>
<li><em>Oh, si tu veux vraiment juste afficher des données, tu n&#39;as peut être pas besoin de <a href="https://facebook.github.io/react/" title="React">React</a> pour commencer. Tu devrais plutôt utiliser un moteur de template.</em></li>
</ul>
<p>Tu te fou de moi ? T&#39;es encore sérieux là ? C&#39;est comme ça que tu donnes des conseils ?</p>
<ul>
<li><em>Je vais juste t&#39;expliquer ce que tu pourrais utiliser.</em></li>
</ul>
<p>Non arrête. Juste arrête.</p>
<ul>
<li><em>Je veux dire, même si tu utilises un moteur de template, tu pourras toujours utiliser <a href="https://www.typescriptlang.org/" title="TypeScript">TypeScript</a> + <a href="https://github.com/systemjs/systemjs" title="SystemJS">SystemJS</a> + <a href="https://babeljs.io/" title="Babel">Babel</a> si tu veux, donc tout ça n&#39;est pas perdu.</em></li>
</ul>
<p>J&#39;ai besoin d&#39;afficher des données sur une page. Pas d&#39;exécuter une Fatality Sub-Zero dans Mortal Kombat. Dit moi juste quel moteur de template utilisé à partir de maintenant.</p>
<ul>
<li><em>Il y en a un paquet. Attends, je vais essayer d&#39;être plus attentif à ton parcours et d&#39;être moins réduit qu&#39;un simple <a href="https://facebook.github.io/react/" title="React">React</a>. Y a t-il, donc, un moteur de template avec lequel tu es plus familier ?</em></li>
</ul>
<p>Et bien. Ça me parle un peu, ça, les templates, mais je n&#39;arrive pas à me rappeler d&#39;un nom. J&#39;avais juste utilisé ça par curiosité.</p>
<ul>
<li>*<a href="http://jtemplates.tpython.com/">jTemplates</a> ? <a href="https://github.com/aefxx/jQote2">jQote</a> ? <a href="https://beebole.com/pure/">pure</a> ?*</li>
</ul>
<p>Ça ne me dit rien. Un autre ?</p>
<ul>
<li>*<a href="https://github.com/leonidas/transparency">Transparency</a> ? <a href="https://github.com/BorisMoore/jsrender">JsRender</a> ? <a href="https://github.com/adammark/Markup.js/">Markup.js</a> ? <a href="http://knockoutjs.com/">Knockout</a> ? Ce dernier permet la liaison de donnée bidirectionnelle.*</li>
</ul>
<p>Non, d&#39;autres ?</p>
<ul>
<li>*<a href="https://github.com/flatiron/plates">Plates</a> ? <a href="https://github.com/BorisMoore/jquery-tmpl">jQuery Templates plugin</a> ? <a href="http://handlebarsjs.com/">Handlebars</a> ?*</li>
</ul>
<p>Ah... peut-être quelque chose comme le dernier ?</p>
<ul>
<li>*<a href="https://mustache.github.io/">Mustache</a> ? <a href="http://underscorejs.org/#template">Underscore.js</a> ? Je pense aussi à <a href="https://www.npmjs.com/package/lodash.template">lodash-template</a> mais c&#39;est assez 2014 quand même.*</li>
</ul>
<p>Ah... peut-être pas ça finalement.</p>
<ul>
<li>*<a href="https://pugjs.org/" title="Pug">Jade</a> ? <a href="http://www.dustjs.com/">Dust</a> ?*</li>
</ul>
<p>Non.</p>
<ul>
<li>*<a href="http://olado.github.io/doT/index.html">dotJS</a> ? <a href="http://ejs.co/" title="EJS">EJS</a> ?*</li>
</ul>
<p>Non...</p>
<ul>
<li>*<a href="https://mozilla.github.io/nunjucks/">Nunjucks</a>* ? <a href="http://ectjs.com/">ECT</a> ?*</li>
</ul>
<p>..., non...</p>
<ul>
<li><em>Hum... rien comme une syntaxe à la <a href="http://coffeescript.org/">CoffeeScript</a> alors. <a href="https://pugjs.org/" title="Pug">Jade</a> ?</em></li>
</ul>
<p>Non, tu l&#39;as déjà dit <a href="https://pugjs.org/" title="Pug">Jade</a>.</p>
<ul>
<li><em>Je veux dire <a href="https://pugjs.org/" title="Pug">Pug</a>. Je veux dire <a href="https://pugjs.org/" title="Pug">Jade</a>. Je veux dire, <a href="https://pugjs.org/" title="Pug">Jade</a> c&#39;est maintenant <a href="https://pugjs.org/" title="Pug">Pug</a>.</em></li>
</ul>
<p><em>Soupir</em>. Non... je me rappel de rien. Lequel tu utilises ?</p>
<ul>
<li><em>J&#39;utilise <a href="https://vuejs.org/" title="Vue">Vue</a> en tant que moteur de template, mais aussi à la place de <a href="https://facebook.github.io/react/" title="React">React</a> en tant que <a href="https://fr.wikipedia.org/wiki/Mod%C3%A8le-vue-vue_mod%C3%A8le" title="MVVM">MVVM</a> ! Ça me permet de faire les deux, et c&#39;est bien plus performant. Mais c&#39;est plutôt tendance 2017 ça.</em></li>
</ul>
<h3 id="résumons">Résumons</h3>
<p>Et il n&#39;y a plus moyen de rien faire sans toutes ses bibliothèques ?</p>
<ul>
<li><em>Il y a aussi les chaînes de caractères ES6 permettant le templating maintenant.</em></li>
</ul>
<p>Laisse moi deviner, et ça requiert <a href="http://kangax.github.io/compat-table/es6/" title="ES6">ES6</a>.</p>
<ul>
<li><em>Correct</em>.</li>
</ul>
<p>Et en fonction du navigateur utilisé, j&#39;ai besoin de <a href="https://babeljs.io/" title="Babel">Babel</a>.</p>
<ul>
<li><em>Correct</em>.</li>
</ul>
<p>Et si je ne veux pas inclure l&#39;entièreté de la bibliothèque, j&#39;ai besoin de les charger par module depuis <a href="https://www.npmjs.com/" title="npm">npm</a>.</p>
<ul>
<li><em>Correct</em>.</li>
</ul>
<p>Et pour cela j&#39;ai besoin de choses comme <a href="http://browserify.org/" title="Browserify">Browserify</a>, ou <a href="https://webpack.js.org/" title="webpack">webpack</a>, ou d&#39;autres alternatives comme <a href="https://github.com/systemjs/systemjs" title="SystemJS">SystemJS</a>.</p>
<ul>
<li><em>Correct</em>.</li>
</ul>
<p>Et sans <a href="https://webpack.js.org/" title="webpack">webpack</a>, idéalement il faudrait utiliser un gestionnaire de tâches.</p>
<ul>
<li><em>Correct</em>.</li>
</ul>
<p>Mais, si je souhaite utiliser de la programmation fonctionnelle et du typage fort j&#39;ai d&#39;abord besoin de <a href="https://www.typescriptlang.org/" title="TypeScript">TypeScript</a> ou de choses comme <a href="https://flow.org/" title="Flow">Flow</a>.</p>
<ul>
<li><em>Correct</em>.</li>
</ul>
<p>Et je peux également utiliser, <a href="https://developer.mozilla.org/fr/docs/Web/API/Fetch_API/Using_Fetch" title="Fetch">Fetch</a>, les <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Promise" title="Promesses">Promesses</a> et le contrôle de flux et tout ce qui est magique.</p>
<ul>
<li><em>Correct.</em></li>
</ul>
<p>Et pour quelque chose de non réactif, je peux simplement utiliser des moteurs de template comme <a href="http://ejs.co/" title="EJS">EJS</a> ou <a href="https://pugjs.org/" title="Pug">Pug</a>.</p>
<ul>
<li><em>Correct.</em></li>
</ul>
<p>Tu sais quoi. Je crois que j&#39;en ai fini avec le web client, je crois que j&#39;en peux plus du JavaScript.</p>
<ul>
<li><em>D&#39;ici quelques années nous coderons peut-être en Elm ou en WebAssembly.</em></li>
</ul>
<h3 id="nodejs">Node.js</h3>
<p>Je pense que je vais juste repasser côté Back-end, loin du JavaScript...</p>
<ul>
<li><em>Ah. Mais le <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> est également passé du côté Back-end avec <a href="https://nodejs.org/en/" title="Node.js">Node.js</a> ! C&#39;est même de la que vient <a href="https://www.npmjs.com/" title="npm">npm</a>. Tu as des tas de modules bas niveaux comme <a href="http://expressjs.com/fr/">Express</a> ou <a href="https://socket.io/">Socket.io</a> ou des choses plus conséquentes avec des frameworks comme <a href="https://node-atlas.js.org/" title="NodeAtlas">NodeAtlas</a>, <a href="http://sailsjs.com/">Sails.js</a> ou même des applications par dessus <a href="https://nodejs.org/en/" title="Node.js">Node.js</a> comme <a href="https://www.meteor.com/">Meteor</a>. Et pour reparler de <a href="https://facebook.github.io/react/" title="React">React</a> ou <a href="https://vuejs.org/" title="Vue">Vue</a>, ils sont aussi utilisables côté serveur grâce à leur <a href="https://fr.wikipedia.org/wiki/Document_Object_Model" title="DOM">DOM</a> virtuel pour faire du <a href="https://fr.vuejs.org/v2/guide/ssr.html" title="SSR">SSR</a>. Essaie <a href="https://nuxtjs.org/">Nuxt.js</a> à l&#39;occasion.</em></li>
</ul>
<p>Du JavaScript côté serveur ?</p>
<ul>
<li><em>Oui, et beaucoup de développeurs Front-end qui faisaient également du Back-end ont migré sur cette technologie. C&#39;est ce qu&#39;on appelle maintenant les développeurs Full-stack JavaScript.</em></li>
</ul>
<p>Comme toi ?</p>
<ul>
<li><em>Oui.</em></li>
</ul>
<h3 id="mobile">Mobile</h3>
<p>Bon. Alors j&#39;arrête les programmes pour ordinateurs. Je vais aller voir du côté mobile, <em>blague</em>.</p>
<ul>
<li><em>Hola ! Tu vas mettre les pieds dans un autre domaine de complexité ! Et si c&#39;est pour échapper au <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a>, sache qu&#39;avec <a href="https://cordova.apache.org/">Cordova</a>, tu peux aussi faire des applications mobiles en JavaScript, multi-support. Tu retrouveras de nouveau <a href="https://facebook.github.io/react/" title="React">React</a> avec <a href="https://facebook.github.io/react-native/">React Native</a> ou encore <a href="https://vuejs.org/" title="Vue">Vue</a> avec <a href="https://github.com/alibaba/weex">Weex</a> !</em></li>
</ul>
<h3 id="le-javascript-cest-si-compliqué-">Le JavaScript, c&#39;est si compliqué ?</h3>
<p>Et bien, développeur JavaScript, ça doit pas être facile et très marrant tout les jours...</p>
<ul>
<li><em>Ça dépend pour qui ! Pour ma part, toute cette complexité je m&#39;en passe au quotidien grâce à <a href="https://vuejs.org/" title="Vue">Vue</a> et <a href="https://node-atlas.js.org/" title="NodeAtlas">NodeAtlas</a>, et ça pourrait te réconcilier avec JavaScript !</em></li>
</ul>
<p>Sérieux ? Résume ?</p>
<ul>
<li><em>Oublie <a href="https://www.typescriptlang.org/" title="TypeScript">TypeScript</a>, <a href="https://blog.lesieur.name/media/images/upload/javascript-vs-typescript.png">c&#39;est pour les développeurs qui n&#39;ont pas compris JavaScript</a>. Pour afficher tes données finalement tu n&#39;as besoin que de <a href="https://node-atlas.js.org/" title="NodeAtlas">NodeAtlas</a> : il te permet <a href="https://www.lesieur.name/api/">de faire ton API REST</a> si tu n&#39;en as pas déjà une, et te permet d&#39;afficher tes données avec zéro configuration, en te fournissant en moteur de template EJS ou Pug. Tu peux en changer à volonté bien sûr.</em></li>
</ul>
<p>C&#39;est donc pour les trucs non réactif. Mais comment je remplace <a href="https://jquery.com/" title="jQuery">jQuery</a> côté client ?</p>
<ul>
<li><em>Et bien utilise simplement <a href="https://vuejs.org/" title="Vue">Vue</a> pour manipuler le DOM, une seule et unique librairie, servable par <a href="https://fr.wikipedia.org/wiki/Content_delivery_network" title="CDN">CDN</a>, plus légère que <a href="https://facebook.github.io/react/" title="React">React</a>, plus performante que <a href="https://facebook.github.io/react/" title="React">React</a>, plus simple que <a href="https://jquery.com/" title="jQuery">jQuery</a>.</em></li>
</ul>
<p>Ok. Et je change ça pour quoi si je veux des sites réactifs ?</p>
<ul>
<li><em>Et bien pour les sites réactifs, ou qui ne le sont pas mais qui pourrait le devenir, dans ce cas utilise toujours <a href="https://vuejs.org/" title="Vue">Vue</a> mais passe à la vitesse supérieur avec tout l&#39;écosystème <a href="https://vuejs.org/" title="Vue">Vue</a>. Tu peux même faire du <a href="https://fr.vuejs.org/v2/guide/ssr.html" title="SSR">SSR</a> en couplant <a href="https://vuejs.org/" title="Vue">Vue</a> avec <a href="https://node-atlas.js.org/" title="NodeAtlas">NodeAtlas</a>.</em></li>
</ul>
<p>Ça me semble plus sensé ton histoire. <a href="https://vuejs.org/" title="Vue">Vue</a> aussi simple que <a href="https://jquery.com/" title="jQuery">jQuery</a> ? Enfin quelque chose qui me parle, pour le reste, on verra quand j&#39;en aurait besoin.</p>
<ul>
<li><em>Oui. L&#39;idée c&#39;est d&#39;utiliser tout ça aussi simplement que l&#39;utilisation de <a href="https://jquery.com/" title="jQuery">jQuery</a>, <strong>et si besoin</strong>, d&#39;utiliser le reste. Ça ne sert à rien de monter un chantier naval pour faire une barque.</em></li>
</ul>
<p>Bien d&#39;accord. Mais pour ces histoires de production ?</p>
<ul>
<li>*<a href="https://node-atlas.js.org/" title="NodeAtlas">NodeAtlas</a> embarque tout ça pour toi, oublie <a href="https://webpack.js.org/" title="webpack">webpack</a>, <a href="http://gulpjs.com/" title="gulp">gulp</a> et compagnie au quotidien. Réserve les pour les très rares cas où ils seraient <strong>réellement</strong> utiles.*</li>
</ul>
<p>Ça me rassure.</p>
<ul>
<li><em><strong>C&#39;est ça, un framework évolutif ! Adapté pour les débutants, puissant pour les experts !</strong></em></li>
</ul>
<h2 id="de-lévolutivité-de-la-versatilité-et-de-lutilisation-progressive">De l&#39;évolutivité, de la versatilité et de l&#39;utilisation progressive</h2>
<blockquote>
<p><strong><samp>Vue et NodeAtlas</samp></strong> Si vous êtes développeur Front-end ou Back-end, essayez le combo <a href="https://vuejs.org/" title="Vue">Vue</a> + <a href="https://node-atlas.js.org/" title="NodeAtlas">NodeAtlas</a> pour du tout <a href="https://www.javascript.com/" title="JavaScript">JavaScript</a> qui vous accompagnera dans votre monté en puissance.</p>
</blockquote>
<blockquote>
<ul>
<li>Découvrez <a href="https://fr.vuejs.org/">Vue, le Framework
JavaScript Évolutif</a> coté client. Trouvez de l&#39;aide sur le <a href="https://gitter.im/vuejs-fr/vue">Chat d&#39;aide français</a>.</li>
<li>Découvrez <a href="https://node-atlas.js.org/">NodeAtlas, le Framework
JavaScript Évolutif</a> coté serveur. Trouvez de l&#39;aide sur le <a href="https://gitter.im/NodeAtlas/Aide">Chat d&#39;aide français</a>.</li>
</ul>
</blockquote>
<h2 id="remerciements">Remerciements</h2>
<p>Merci à <a href="http://pierre.ammeloot.fr/">Pierre Ammeloot</a> ainsi que <a href="https://github.com/Pierstoval">Pierstoval</a> pour leur relecture.</p>
]]></description>
            <link>http://localhost:7776/pourquoi-vous-ne-comprenez-rien-au-javascript/</link>
            <guid isPermaLink="false">595a1b0a0e5058378da64274</guid>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Node.js]]></category>
            <category><![CDATA[Angular]]></category>
            <category><![CDATA[AngularJS]]></category>
            <category><![CDATA[Front-end]]></category>
            <category><![CDATA[Vue.js]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[jQuery]]></category>
            <category><![CDATA[Traduction]]></category>
            <category><![CDATA[ECMAScript]]></category>
            <category><![CDATA[Vanilla JS]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[React]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Mon, 03 Jul 2017 10:23:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Enfin apprendre et comprendre le JavaScript !]]></title>
            <description><![CDATA[<p>ES7 est déjà dans nos chaumières et, en plus d&#39;être « à peu près au point » avec ES5, vous n&#39;avez toujours pas digéré ES6 !</p>
<figure>
    <a href="https://blog.lesieur.name/media/images/upload/javascript-vs-typescript.png"><img class="openable" src="https://blog.lesieur.name/media/images/upload/javascript-vs-typescript.jpg" alt="Quelle est concrètement la différence entre TypeScript et JavaScript ?" width="1306" height="436" style="max-width: 100%;height: auto;"></a>
    <figcaption>Quelle est concrètement la différence entre TypeScript et JavaScript ?</figcaption>
</figure>

<p>Il va être temps de nous y pencher de plus près sur ce blog pour aborder la suite de l&#39;aventure JavaScript sereinement. Cet article à pour but, de vous en apprendre plus sur les versions ES3 et ES5 de JavaScript dites « Vanilla JavaScript » tout en les comparant à des équivalences ES6 dites « Harmony JavaScript ». Cela nous permettra de comprendre en quoi ces améliorations peuvent nous aider au quotidien.</p>
<p>Nous allons éplucher les fonctionnalités dans un ordre logique d&#39;apprentissage et explorer les mécaniques sous-jacentes. Nous allons même nous permettre, en amont, de réviser un peu les bases. Ça risque d&#39;être long alors, de la même manière que cet article va être publié en plusieurs mise à jour, n&#39;hésitez pas à le lire en plusieurs fois !</p>
<h2 id="a-curious-javascript-story">A <em>curious</em> JavaScript Story</h2>
<p>C&#39;est l&#39;histoire d&#39;un gars, <em>Netscape</em>, qui se dit : « ok, quand on va écrire des lignes dans un fichier, et qu&#39;on va faire lire ce fichier à un programme, celui-ci va faire les trucs cool que les lignes lui disent de faire. » ; idée <em>presque</em> révolutionnaire puisque c&#39;est déjà ce que fait n&#39;importe quel programme concurrent. « Certe, mais mon code, il sera pas transformé en charabia pour machine à l&#39;avance ; il sera lu et pris en compte directement ! ».</p>
<p>Notre <em>Nets</em> l&#39;invente pas pour rien ce programme (ou langage comme est appelé cette idée par ceux qui y ont pensé avant lui). Son idée à lui, c&#39;est de le placer dans son navigateur, qui permet de surfer sur Internet, pour faire des trucs cool dedans, comme interagir avec le contenu d&#39;une page ; ce qu&#39;il fait. Le gars sait pas trop comment appeler ça et fini par l&#39;appeler <em>JavaScript</em> car à l&#39;époque, ça lui permet de se faire un peu de publicité sur le dos de son collègue <em>Java</em> (ou inversement proportionnel).</p>
<p>L&#39;idée du gars est tellement cool que <em>Microsoft</em> se dit qu&#39;il va faire pareil, et appelle ça du <em>JScript</em> (histoire de se faire de la pub aussi quoi), et de le placer dans son navigateur fétiche à lui, appelé <em>Internet Explorer</em>. Mais <em>Nets</em> a autant les boules qu&#39;il est sympa. Il décide, pour éviter que d&#39;autres gars comme <em>Mic</em> fassent n&#39;importe quoi avec son <em>JavaScript</em>, de demander à son pote <em>Ecma International</em> (de son petit nom <em>Ecma</em>) d&#39;expliquer et d&#39;user de son réseau pour faire savoir que le <em>JavaScript</em> « ça marche comme ça, et pas autrement », chose que <em>Ecma</em> fait et consigne dans un papier sobrement intitulé : <em>Standard ECMA-262</em>. Dans ce papier naît alors le nouveau standard <em>ECMAScript</em>. Grâce à ça, des mecs peuvent inventer des trucs sympa comme le <em>Flash</em> et les gens comme <em>Mic</em> peuvent arrêter de faire n&#39;importe quoi.</p>
<p><em>Nets</em> était fier de son <em>JavaScript</em> car il avait inventé « un modèle objet orienté prototype, à typage faible mais dynamique et a portée statique » méga performant pour du langage de script (comprenez ici « non compilé »). Après moult rebondissements cela s&#39;est soldé par une version <em>ECMASript 3</em>. Appelons là, <em>ES3</em> pour faire plus intime. Cependant, des proches de <em>Ecma</em>, la Team4, qui avaient pas trop pigé le coup du prototypage, décida de faire évoluer la spécification pour que ça ressemble plus à de l&#39;objet fondé sur les classes comme ces bons langages compilés (<em>miam !</em>) et d&#39;en faire à terme <em>ES4</em>.</p>
<p>Mais holà ! Les puristes se sont levés, la Team5. La Team5 a dit « l&#39;ES, c&#39;est avant tout du prototypage ! De diou ! » Ce qui l&#39;amena à écrire en parallèle la même chose, mais en pas pareil. Cela donna naissance à <em>ES5</em> que nous avons tous connu et qui vit dans <em>Chrome</em>, <em>Firefox</em>, <em>Safari</em>, <em>Opera</em>, et feu (en fait pas encore) Internet Explorer.</p>
<p>Notre <em>Mic</em> a beau dire qu&#39;il « a compris qu&#39;il faut suivre les spécifications de <em>Ecma</em> », il galère quand même pas mal en se traînant ses versions antérieures incrustées à la cloueuse. <em>Mic</em>, <em>ES4</em>, <em>ES5</em>, etc. : ils ont perdu tout le monde. Les gens inventent des abstractions en <em>JavaScript</em> pour faire du <em>JavaScript</em> qui marche chez tout le monde. Les gars « nous, on aime les prototypes » se sont mis à chier des bibliothèques comme <em>Prototype</em> (qu&#39;on comprenne bien qu&#39;ils aiment les prototypes) tandis que les gars « nous, on aime les classes et le typage fort » se sont mis à chier des transpileurs et truc à la TypeScript parce que selon eux, quand tu croises un type faible mais dynamique, : on se dit que « le gars est louche ». Du coup, maintenant <em><strong>Le gars qui passait par là</strong></em> jette un œil à tout ce beau monde et se dit : « et bah putain... quel merdier ».</p>
<p>ES6 est alors en marche et réconcilie gentiment les gars des prototypes et des classes en prenant le parti suivant : « on va dire que ça marche par prototype, ok ? Mais on va faire en sorte de planquer ça sous de la classe... Malin ! Hein ? ».</p>
<p>Par dessus ça, y a un mec, <em>Joyent</em>, qui se dit que même si JavaScript a besoin d&#39;un hôte pour fonctionner, pourquoi ça serait forcément un navigateur ; l&#39;hôte ? « Et si j&#39;invitais ce bon vieux <em>JavaScript</em> à travailler... sur mon OS ? Que dis-je sur tous les OS ! ». Hop là ! Ni une, ni deux... un peu de HTTP par ci, un peu de lecture/écriture de fichier par là, le tout à la sauce V8 de chez Google et plop : <em>Node.js</em> est né. Du <em>JavaScript</em> côté serveur. À ce niveau, je vous parle pas de <em><strong>Le gars qui passait par là</strong></em> qui, lui, à surement abandonné l&#39;affaire...</p>
<p>En tout cas <em>Joy</em> se laisse pas abattre et met à jour <em>Node.js</em> en intégrant les nouveautés ES6 et plus du moteur V8. Le gars il s&#39;en fout ; il est tout seul (genre le mec, même pas effrayé par <em>IO.js</em> avec lequel il fusionne à « la Dragon Ball Z »). Le gars il fait ce qu&#39;il veut et surtout : il suit scrupuleusement les bons conseils d&#39;<em>Ecma</em> contrairement à un certain <em>Mic</em>. <em>Mic</em>, qui clame haut et fort à présent que « si, si. dans mon <em>Edge</em>, maintenant, je fais tout bien » ; mais sans succès.</p>
<p>Résultat des courses ? La norme <em>HTML5</em> propulse <em>JavaScript</em>, le code serveur <em>Node.js</em> propulse <em>JavaScript</em>, les nouveautés <em>ES6</em> propulsent <em>JavaScript</em>, les technos concurrentes utilisant <em>npm</em> propulsent <em>JavaScript</em>, des trucs boiteux comme <em>TypeScript</em> propulsent <em>JavaScript</em>, des trucs swag comme <em>React</em> propulsent <em>JavaScript</em> et des super-héros comme <em>Vue</em> propulsent <em>JavaScript</em> ! Bref, le train roule sacrément vite...</p>
<p>Il est peut-être venu le temps d&#39;essayer de rattraper les wagons si vous êtes restés sur le quai !</p>
<h2 id="quelles-différences-entre-es3-et-es5--">Quelles différences entre ES3 et ES5  ?</h2>
<p>Avant de continuer plus en avant avec des fonctionnalités ES6 (voir ES7), je vous invite, si vous le souhaitez, à vous attarder sur divers articles mettant en avant les grands concepts du JavaScript pour « enfin » le comprendre et savoir en quoi il différe des autres langages.</p>
<h3 id="des-fondamentaux-à-es3">Des fondamentaux à ES3</h3>
<p>C&#39;est pourquoi je vous invite à commencer par comprendre les bases ES3. Tout d&#39;abord, je vous invite à comprendre comment s&#39;exécute un programme grâce <a href="https://blog.lesieur.name/les-contextes-d-execution/">aux contextes d&#39;exécutions</a>. Une fois cela clairement établi, nous entrerons dans le détail en décrivant les éléments qui composent un contexte comme <a href="https://blog.lesieur.name/l-objet-des-variables/">l&#39;objet des variables</a>, <a href="https://blog.lesieur.name/la-valeur-de-this/">la valeur de this</a> ou encore <a href="https://blog.lesieur.name/la-chaine-des-portees/">la chaîne des portées</a>. Avec ces nouvelles connaissances, vous serez armé pour bien comprendre <a href="https://blog.lesieur.name/les-fonctions/">tous les types de fonctions</a> et en quoi <a href="https://blog.lesieur.name/les-fermetures/">elles sont toutes des fermetures</a>. Il ne vous restera plus qu&#39;à, pour boucler les fondamentaux ES3, dévorer les vrais tenant et aboutissant d&#39;<a href="https://blog.lesieur.name/les-types/">un langage à typage faible</a> et aux <a href="https://blog.lesieur.name/les-constructeurs-et-les-prototypes/">objets basés sur des prototypes</a>. Pour finir, nous lèverons une idée reçu selon laquelle le JavaScript passe ses paramètres par référence en étudiant <a href="https://blog.lesieur.name/la-strategie-d-evaluation/">la stratégie d&#39;évaluation en JavaScript</a>.</p>
<h3 id="les-ajouts-es5">Les ajouts ES5</h3>
<p>Pour compléter les révisions (ou la découverte) des bases, vous pourrez achever votre remise en ordre ES5 en étudiant <a href="https://blog.lesieur.name/les-proprietes-et-descripteurs-de-proprietes/">la capacité de décrire les propriétés d&#39;objet</a> ainsi que <em>les nouveautés du mode strict (prochainement)</em>. Nous finirons les révisions avec le <em>nouveau concept d&#39;environnement lexical (prochainement)</em>.</p>
<h2 id="liste-des-fonctionnalités-es6">Liste des fonctionnalités ES6+</h2>
<p>Le schéma sera le suivant : on tente d&#39;expliquer ce qu&#39;on aurait pu faire en ES3-ES5, on le fait en ES6 et supérieur en constatant les différences et en pointant du doigt la valeur ajoutée.</p>
<h3 id="constantes-const">Constantes <samp>const</samp></h3>
<p><strong>Constants &gt; Constants</strong></p>
<p>ES6 ajoute un support pour les variables immuables. Sous ce jolie nom se cache simplement le concept de constante : une variable à laquelle aucun nouveau contenu ne peut être assigné après sa déclaration (en utilisant l&#39;opérateur d&#39;affectation à gauche <samp>=</samp>). À noter que c&#39;est le conteneur et non le contenu qui est immuable, cela signifie qu&#39;un objet qui serait affecté à une variable immuable ne peut pas être remplacé (sa référence ne peut pas être changée), mais son contenu, lui, peut bouger (ajout, modification et suppression de propriétés). Un petit rappel entre, <a href="./difference-entre-type-null-et-type-undefined-en-javascript/">les objets qui sont stockés par référence et les primitives qui sont directement stockées, se trouve ici</a>.</p>
<blockquote>
<p><em><samp>En</samp></em> <strong>ES5</strong> : D&#39;après cette description, un des moyens de créer une constante avec ES5 est d&#39;utiliser la fonction <samp>Object.defineProperty()</samp>. Cette fonction permet d&#39;attribuer à des propriétés d&#39;objet un comportement immuable. Créons ainsi la constante <samp>PI</samp>.</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /**
    * `PI` en tant que variable locale ou
    * `window.PI` en tant que variable globale n&#39;existe pas.
    */
   PI;
&lt;· « Uncaught ReferenceError: PI is not defined »
</code></pre>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /**
    * On va créer une propriété se comportant « comme » une constante.
    * p1 : Affectation de la propriété à l&#39;objet global `window` (navigateur)
    *      ou à l&#39;objet global `global` (node.js).
    * p2 : Définition de la clé de la propriété en tant que l&#39;opérande `&quot;PI&quot;`.
    * p3 : Options attribuant sa valeur avec l&#39;opérande `3.141593`,
    *      expliquant qu&#39;il apparaît lors de l&#39;utilisation d&#39;une boucle et surtout
    *      qu&#39;aucun opérande ne peut-être affecté après sa définition
    */
   Object.defineProperty(window ? window : global, &quot;PI&quot;, {
       value:        3.141593,
       enumerable:   true,
       writable:     false
   });
&lt;· Window {…}
</code></pre>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /* `PI` est maintenant défini et vaut `3.141593`. */
   PI;
&lt;· 3.141593
</code></pre>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /**
    * Affecter `PI` va effectivement renvoyer
    * l&#39;opérande que vous avez choisi d&#39;affecter.
    */
   PI = &quot;Nombre PI&quot;;
&lt;· &quot;Nombre PI&quot;
</code></pre>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /* Cependant la valeur `PI` n&#39;aura pas bougé d&#39;un iota. */
   PI;
&lt;· 3.141593
</code></pre>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /**
    * Ce qu&#39;il faut bien comprendre dans notre cas de figure
    * c&#39;est que PI est une variable globale (ou propriété de l&#39;objet global).
    */
   PI === window.PI;
&lt;· true
</code></pre>
</blockquote>
<hr>
<blockquote>
<p><strong><samp>En</samp></strong> <strong>ES6</strong> : Le moyen de réellement créer une constante est d&#39;utiliser l&#39;opérateur <samp>const</samp>.</p>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /**
    * `PI` en tant que variable locale ou
    * `window.PI` en tant que variable globale n&#39;existe pas.
    */
   PI;
&lt;· « Uncaught ReferenceError: PI is not defined »
</code></pre>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /**
    * On va créer une constante `PI` avec la valeur `3.141593`.
    */
   const PI = 3.141593;
&lt;· undefined
</code></pre>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /* `PI` est maintenant défini et vaut `3.141593`. */
   PI;
&lt;· 3.141593
</code></pre>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /**
    * Affecter `PI` va cette fois lancer une exception.
    */
   PI = &quot;Nombre PI&quot;;
&lt;· « Uncaught TypeError: Assignment to constant variable. »
</code></pre>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /**
    * Cependant, ce n&#39;est ici pas l&#39;équivalence de notre exemple ES5 car ici
    * `PI` est une variable locale immuable (constante) et
    * non une propriété de l&#39;objet global.
    */
   PI === window.PI;
&lt;· false
</code></pre>
</blockquote>
<p>En conclusion l&#39;opérateur <samp>const</samp> qui crée une constante (une variable locale immuable) n&#39;est pas la même chose que la fonction <samp>Object.defineProperty()</samp> qui crée une propriété d&#39;objet immuable, une sorte de <em>propstante</em> !</p>
<h3 id="variable-à-portée-limitée-let">Variable à portée limitée <samp>let</samp></h3>
<p><strong>Scoping &gt; Block-Scoped Variables</strong></p>
<p>Contrairement à beaucoup de langage, en JavaScript ES5, la portée des variables déclarées avec l&#39;opérateur <samp>var</samp> n&#39;est pas limitée à un bloc d&#39;accolade. Ainsi, si je défini une variable à l&#39;intérieur d&#39;une structure de contrôle de flux comme <samp>if</samp>, ma variable sera également disponible à l&#39;extérieur. Cela n&#39;est plus le cas si ma variable est déclarée avec <samp>let</samp> (et également avec <samp>const</samp>). Cela signifie qu&#39;une variable déclarée dans l&#39;instruction <samp>if</samp> ou <samp>for</samp> n&#39;existe pas en dehors.</p>
<blockquote>
<p><em><samp>En</samp></em> <strong>ES5</strong> : Voici le comportement induit par les variables déclarées avec l&#39;opérateur <samp>var</samp> que ce soit entre les accolades mais également dans les boucles.</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  if (&quot;1&quot; == 1) {
       /* Bien qu&#39;elle soit créée dans un bloc... */
       var str = &quot;Hello World&quot;;
   }
   /* ...la variable `str` est accessible en dehors de ce bloc. */
   str;
&lt;· &quot;Hello World&quot;
</code></pre>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  if (&quot;1&quot; == 1) {
       /* Seules les fonctions enferment la portée des variables... */
       (function () {
           var str = &quot;Hello World&quot;;
       }());
   }
   /* ...et les empêches d&#39;être accessibles de l&#39;extérieur `str`. */
   str;
&lt;· « Uncaught ReferenceError: str is not defined »
</code></pre>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /**
    * Le fait que les variables ne soient pas limitées aux accolades empêche
    * cette liste de fonction de fonctionner comme on le souhaiterait.
    */
   var callbacks = [];
   for (var i = 0; i &lt; 3; i++) {
       /**
        * Ainsi le problème est que à l&#39;instant ou chaque fonction
        * est assignée dans le tableau `callbacks` à l&#39;indice `i`,
        * `i` vaut la valeur actuelle de la boucle.
        */
       callbacks[i] = function() { return i * 2; };
   }
   /**
    * Cependant, lorsque `callbacks[0]()`, `callbacks[1]()` et `callbacks[2]()` sont exécutées
    * la valeur de `i` est de `3`, ce qui donne pour l&#39;exemple courant au lieu de `0 2 4`...
    */
   callbacks[0]() + &quot; &quot; + callbacks[1]() + &quot; &quot;  + callbacks[2]();
&lt;· 6 6 6
</code></pre>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /**
    * Pour solutionner le problème il faut faire un instantané
    * de la valeur de `i` en passant `i` en paramètre d&#39;une fonction,
    * ce qui copie sa valeur et la conserve pour la suite puisque
    * `i` est une primitive et que les primitives sont assignées par copie.
    */
   var callbacks = [];
   for (var i = 0; i &lt; 3; i++) {
       (function (i) {
           /* Ainsi le paramètre `i` est figé à sa valeur lors de son assignation. */
           callbacks[i] = function() { return i * 2; };
       }(i));
   }
   /* Et le résultat est cette fois bien celui attendu. */
   callbacks[0]() + &quot; &quot; + callbacks[1]() + &quot; &quot;  + callbacks[2]();
&lt;· 0 2 4
</code></pre>
</blockquote>
<hr>
<blockquote>
<p><strong><samp>En</samp></strong> <strong>ES6</strong> : Tous nos problèmes sont résolus ici par ce fameux <samp>let</samp>. Non seulement celui-ci nous permet de vraiment cloisonner une variable dans un bloc, mais également de créer des boucles sans gérer nous même le cloisonnement de la variable d&#39;itération.</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  if (&quot;1&quot; == 1) {
      /* Cette fois ci une variable créée dans un bloc... */
      let str = &quot;Hello World&quot;;
   }
   str;
   /* ...n&#39;est pas accessible en dehors de ce bloc. */
&lt;· « Uncaught ReferenceError: str is not defined »
</code></pre>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /**
    * Et le fait que les variables soient cette fois limitées aux accolades, et donc
    * à un seul tour de boucle permet à notre liste de fonctionner comme prévue.
    */
   var callbacks = [];
   for (let i = 0; i &lt; 3; i++) {
       /* Grâce à `let`, `i` est un instantané à chaque tour de boucle. */
       callbacks[i] = function() { return i * 2; };
   }
   /* Cela permet à nos fonctions de fonctionner comme souhaité. */
   callbacks[0]() + &quot; &quot; + callbacks[1]() + &quot; &quot;  + callbacks[2]();
&lt;· 0 2 4
</code></pre>
</blockquote>
<p>En conclusion l&#39;opérateur <samp>let</samp> est parfait pour permettre des variables locales à un bloc d&#39;être consommées sans impacter le reste du champ lexical. Il permet également de créer des instantanés à chaque tour de boucle pour éviter le cloisonnement.</p>
<h3 id="fonction-à-portée-limitée-">Fonction à portée limitée <samp>{}</samp></h3>
<p><strong>Scoping &gt; Block-Scoped Functions</strong></p>
<p>De la même manière qu&#39;il est possible de limiter une variable à un bloc en ES6, il est également possible de limiter une fonction à un bloc. Cela grâce à l&#39;ajout des accolades <samp>{</samp> et <samp>}</samp> autour de la zone dont les fonctions doivent être à portée limitée.</p>
<blockquote>
<p><em><samp>En</samp></em> <strong>ES5</strong> : Voici le comportement d&#39;une fonction définie puis redéfinie dans un bloc.</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /* Si je définie une variable dans le flux... */
   function test() { return &quot;external&quot;; }
   /* ...puis que je la redéfinie ensuite dans un block... */
   {
       function test() { return &quot;internal&quot;; }
   }
   /**
    * ... `test()` va retourner `&quot;internal&quot;` puisqu&#39;en JavaScript
    * les blocs ne cloisonnent pas les variables et fonctions.
    */
   test();
&lt;· &quot;internal&quot;
</code></pre>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  function test() { return &quot;external&quot;; }
   /**
    * Il faut faire appel à une fonction anonyme auto-exécutée
    * pour induire un nouveau champ lexical et cloisonner
    * la valeur.
    */
   (function () {
       function test() { return &quot;internal&quot;; }
   }());
   test();
&lt;· &quot;external&quot;
</code></pre>
</blockquote>
<hr>
<blockquote>
<p><strong><samp>En</samp></strong> <strong>ES6</strong> : Cependant avec ES6, il est possible de limiter la portée des fonctions déclarées à un bloc et non à une fonction en entourant le tout avec des accolades <samp>{</samp> <em>et</em> <samp>}</samp>.</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /* Si j&#39;englobe les fonctions avec des accolades... */
   {
       function test() { return &quot;external&quot;; }
       /* ...les futures accolades internes seront cloisonnante... */
       {
           function test() { return &quot;internal&quot;; }
       }
       /**
        * ... et ainsi la fonction redéfinie dans un sous bloc
        * ne sera pas prise en compte dans le bloc du dessus.
        */
       test();
   }
&lt;· &quot;external&quot;
</code></pre>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /**
    * Il faut bien comprendre que ce comportement ne fonctionne qu&#39;avec
    * le mot-clé `function` aussi pour les variables, il faut utiliser `let`
    */
   {
       var withVar = &quot;var external&quot;;
       let withLet = &quot;let external&quot;;
       {
           var withVar = &quot;var internal&quot;;
           let withLet = &quot;let internal&quot;;
       }
       withVar + &quot; | &quot; + withLet;
   }
&lt;· &quot;var internal | let external&quot;
</code></pre>
</blockquote>
<p>En conclusion les fonctions cloisonnées permettent de limiter l&#39;utilisation d&#39;une fonction à un bloc sans créer de nouveau champ lexical. Le fait que ce mécanisme soit limité au mot clé <samp>function</samp> le rend difficilement appréhendable tout de même.</p>
<h3 id="valeurs-de-paramètre-par-défaut">Valeurs de paramètre par défaut</h3>
<p>** Extended Parameter Handling &gt; Default Parameter Values**</p>
<p>Quand on déclare une fonction en JavaScript, on indique les paramètres qu&#39;on lui passe entre ses parenthèses et... c&#39;est tout. On ne précise pas le type attendu, on ne précise pas de valeur par défaut. Si on souhaite faire cela afin d&#39;indiquer de quel type est une variable ou d&#39;attribuer une valeur autre que <samp>undefined</samp> en cas de non passage de paramètre, il faut le faire à la main !</p>
<p>Ça c&#39;était avant, car ES6 implémente les paramètres auxquelles ont peut passer des valeurs par défaut en cas d&#39;absence lors de l&#39;appel.</p>
<blockquote>
<p><em><samp>En</samp></em> <strong>ES5</strong> : Par défaut, une valeur non passée s&#39;attribut la valeur de type Undefined : <samp>undefined</samp>.</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  function fn(str, nbr, bool, obj) {
       return {
           str:  str,
           nbr:  nbr,
           bool: bool,
           obj:  obj
       };
   };
   fn(&quot;Hello World&quot;);
&lt;· Object {str: &quot;Hello World&quot;, nbr: undefined, bool: undefined, obj: undefined}
</code></pre>
</blockquote>
<blockquote>
<p>Pour donner plus d&#39;indication sur les valeurs à passer, ou affecter une valeur différente de <samp>undefined</samp> aux paramètres non passés on fait donc ainsi :</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  function fn(str, nbr, bool, obj) {
       return {
           str:  str || &quot;&quot;,
           nbr:  nbr || NaN, // (nbr === 0 || nbr === -0) ? nbr : (nbr || NaN),
           bool: bool || false,
           obj:  obj || null
       };
   };
   fn(&quot;Hello World&quot;);
&lt;· Object {str: &quot;Hello World&quot;, nbr: NaN, bool: false, obj: null}
</code></pre>
</blockquote>
<hr>
<blockquote>
<p><strong><samp>En</samp></strong> <strong>ES6</strong> : Cependant avec ES6, il est directement possible d&#39;affecter ses valeurs lors de la déclaration des paramètres.</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  function fn(str = &quot;&quot;, nbr = NaN, bool = false, obj = null) {
       return {
           str:  str,
           nbr:  nbr,
           bool: bool,
           obj:  obj
       };
   };
   fn(&quot;Hello World&quot;);
&lt;· Object {str: &quot;Hello World&quot;, nbr: NaN, bool: false, obj: null}
</code></pre>
</blockquote>
<h3 id="portée-de-fonction-étendue-">Portée de fonction étendue <samp>=&gt;</samp></h3>
<p><strong>Arrow Functions &gt; Lexical this</strong></p>
<p>L&#39;utilisation de <samp>this</samp> est un très vaste chapitre. Nous l&#39;avons déjà traité sur ce blog dans <a href="https://blog.lesieur.name/la-valeur-de-this/">la valeur de this</a>. Ici nous allons étudier son comportement lorsqu&#39;il est utilisé dans un contexte qui le redéfini.</p>
<blockquote>
<p><em><samp>En</samp></em> <strong>ES5</strong> : Voici le comportement standard des propriétés associées à <samp>this</samp> après l&#39;utilisation de fonction utilisant leur propre valeur de <samp>this</samp>, ce qui est par exemple le cas de <samp>setTimeout</samp>.</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  /* Nous allons créer une fonction que nous allons utiliser comme constructeur */
   var Character = function (name) {
           /* À sa création, l&#39;objet prendra un nom dans sa propriété `name` */
           this.name = name;
           this.displayNameTwice = function () {
               /* Si bien que lors de l&#39;utilisation de `this.name` */
               /* c&#39;est ce nom qui s&#39;affichera. */
               console.log(&quot;0s&quot;, this.name);
               /* Mais... */
               setTimeout(function () {
                   /* il ne s&#39;affichera pas... */
                   console.log(&quot;1s&quot;, this.name);
               /* une seconde plus tard. */
               }, 1000);
           };
       },
       /* Initialisation d&#39;un objet `Character` */
       cloud = new Character(&quot;Cloud Strife&quot;);
</code></pre>
</blockquote>
<blockquote>
<blockquote>
<p> /* Appel de la méthode */
   cloud.displayNameTwice();
&lt;· undefined</p>
<pre class="prettyprint linenums"><code>
</code></pre></blockquote>
</blockquote>
<blockquote>
<p>avec en sortie de console imédiate</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">   0s Cloud Strife
</code></pre>
</blockquote>
<blockquote>
<p>et une seconde plus tard</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">   1s
</code></pre>
</blockquote>
<blockquote>
<p>Nous nous apercevons que <samp>this.name</samp> n&#39;a rien retourné dans le <samp>setTimeout</samp> car <samp>setTimeout</samp> possède son propre objet <samp>this</samp>. Les deux moyens les plus courant pour contourner <strong>se comportement normal</strong> de JavaScript est</p>
</blockquote>
<blockquote>
<ol>
<li>de créer une variable contenant la référence au bon <samp>this</samp> (ES3) :<pre class="prettyprint linenums"><code class="language-js">/* ... */
this.displayNameTwice = function () {
    /* On crée une variable contenant la
    référence vers le `this` souhaité... */
    var self = this;
    console.log(&quot;0s&quot;, this.name);
    setTimeout(function () {
        /* ...et on utilise cette variable. */
        console.log(&quot;1s&quot;, self.name);
    }, 1000);
};
/* ... */
</code></pre>
ou</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>de lier la valeur qui devra servir de <samp>this</samp> avec <samp>bind</samp> (ES5) :<pre class="prettyprint linenums"><code class="language-js">/* ... */
this.displayNameTwice = function () {
    console.log(&quot;0s&quot;, this.name);
    setTimeout(function () {
        console.log(&quot;1s&quot;, this.name);
    /* On lie lors de la définition de la fonction
    la valeur de `this` qu&#39;elle devra utiliser. */
    }.bind(this), 1000);
};
/* ... */
</code></pre>
</li>
</ol>
</blockquote>
<hr>
<blockquote>
<p><strong><samp>En</samp></strong> <strong>ES6</strong> : Grâce à la nouvelle fonction fléchée <samp>=&gt;</samp>, il est maintenant possible de conserver le <samp>this</samp> de la portée appelante quelque soit le cas de figure. La fonction fléchée est donc votre meilleure alliée pour tout ce qui va être de l&#39;ordre de l&#39;utilisation de fonction de rappel (« callback »).</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  var Character = function (name) {
           this.name = name;
           this.displayNameTwice = function () {
               console.log(&quot;0s&quot;, this.name);
               /* utilisation d&#39;une fonction fléchée
               avec `=&gt;` */
               setTimeout(() =&gt; {
                   console.log(&quot;1s&quot;, this.name);
               }, 1000);
           };
       },
       cloud = new Character(&quot;Cloud Strife&quot;);
</code></pre>
</blockquote>
<blockquote>
<blockquote>
<p> cloud.displayNameTwice();
&lt;· undefined</p>
<pre class="prettyprint linenums"><code>
</code></pre></blockquote>
</blockquote>
<blockquote>
<p>avec en sortie de console imédiate</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">   0s Cloud Strife
</code></pre>
</blockquote>
<blockquote>
<p>et une seconde plus tard</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">   1s Cloud Strife
</code></pre>
</blockquote>
<blockquote>
<p>Parfait !</p>
</blockquote>
<h3 id="abréviation-dexpression-de-fonction-">Abréviation d&#39;expression de fonction <samp>=&gt;</samp></h3>
<p><strong>Arrow Functions &gt; Expression and statement bodies</strong></p>
<p>Partout ou une expression de fonction est utilisable, c&#39;est-à-dire dans toutes expressions valides, une fonction fléchée peut-être utilisée à la place afin d&#39;écrire de manière plus condensé quelque chose de très verbeux. Voici des exemples ES5 transformé en ES6.</p>
<blockquote>
<p><em><samp>En</samp></em> <strong>ES5</strong> : Voici ce que l&#39;on pourrait écrire en ES5 :</p>
</blockquote>
<blockquote>
<p>Trier un tableau ou <samp>a</samp> est l&#39;entrée courante et <samp>b</samp> la suivante. En fonction du retour négatif ou positif du résultat, les éléments vont être interverti ou non.</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  [7, 0, 8, 3].sort(function (a, b) {
       return a - b;
   });
&lt;· [0, 3, 7, 8]
</code></pre>
</blockquote>
<blockquote>
<p>Filtrer l&#39;élément courant <samp>c</samp> du tableau. Si la fonction renvoi <samp>true</samp> ou garde l&#39;éntrée dans le résultat, sinon, on l&#39;exclue.</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  [7, 0, 8, 3].filter(function (c) {
       if (c % 2 === 0) {
           return true;
       } else {
           return false;
       }
   });
&lt;· [0, 8]
</code></pre>
</blockquote>
<blockquote>
<p>Associer un résultat de corps vide à chaque élément du tableau.</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  [7, 0, 8, 3].map(function () {});
&lt;· [undefined, undefined, undefined, undefined]
</code></pre>
</blockquote>
<blockquote>
<p>Associer un nouvel objet <samp>{}</samp> à chaque élément du tableau.</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  [7, 0, 8, 3].map(function () {
       return {};
   });
&lt;· [Object, Object, Object, Object]
</code></pre>
</blockquote>
<hr>
<blockquote>
<p><strong><samp>En</samp></strong> <strong>ES6</strong> : Et la même chose en ES6 avec la fonction fléchée.</p>
</blockquote>
<blockquote>
<p>S&#39;il n&#39;y a qu&#39;une ligne dans le corps de la fonction (<samp>return a - b</samp>), le mot clé <samp>return</samp> doit être omis, ainsi que les accolades <samp>{</samp>, <samp>}</samp> après <samp>=&gt;</samp> (ou le tout conservé, mais l&#39;un ne va pas sans l&#39;autre).</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  [7, 0, 8, 3].sort((a, b) =&gt; a - b);
&lt;· [0, 3, 7, 8]
</code></pre>
</blockquote>
<blockquote>
<p>S&#39;il y a un seul paramètre, les parenthèses <samp>(</samp> et <samp>)</samp> peuvent être omises avant la <samp>=&gt;</samp>. Si le corps de la fonction contient plus d&#39;une ligne, les accolades <samp>{</samp> et <samp>}</samp> restent et le corps de la fonction reste non changé.</p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  [7, 0, 8, 3].filter(c =&gt; {
       if (c % 2 === 0) {
           return true;
       } else {
           return false;
       }
   });
&lt;· [0, 8]
</code></pre>
</blockquote>
<blockquote>
<p>S&#39;il n&#39;y a pas d&#39;arguments pour la fonction, les parenthèses <samp>(</samp> et <samp>)</samp> sont obligatoires à gauche de <samp>=&gt;</samp>. Si le corps de fonction est vide, les accolades <samp>{</samp> et <samp>}</samp> sont obligatoire à droite de <samp>=&gt;</samp></p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  [7, 0, 8, 3].map(() =&gt; {});
&lt;· [undefined, undefined, undefined, undefined]
</code></pre>
</blockquote>
<blockquote>
<p>Pour retourner l&#39;objet <samp>{}</samp> (ou <samp>{ test: &quot;test&quot; }</samp> par exemple) et qu&#39;il ne soit pas confondu avec un corp de fonction vide, il faut des parenthèses <samp>(</samp> et <samp>)</samp> à droite de <samp>=&gt;</samp></p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">&gt;  [7, 0, 8, 3].map(() =&gt; ({}));
&lt;· [Object, Object, Object, Object]
</code></pre>
</blockquote>
<h2 id="en-cours-de-rédaction">En cours de rédaction...</h2>
]]></description>
            <link>http://localhost:7776/apprendre-et-comprendre-javascript-version-es6/</link>
            <guid isPermaLink="false">5889c6e10b30ed1cc1db02ed</guid>
            <category><![CDATA[ECMAScript]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Spécifications]]></category>
            <category><![CDATA[Développement Web]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Thu, 29 Jun 2017 06:52:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[ES3, Chap 7. — Les types en JavaScript]]></title>
            <description><![CDATA[<p>Ce billet fait partie de la collection <em>ES3 dans le détail</em> et en constitue le Chapitre 7.</p>
<figure>
    <a href="media/images/upload/types.jpg"><img class="openable" src="media/images/upload/types-mini.png" alt="Tout n'est pas que SOLDAT à la Shinra, il y en a différent types." width="658" height="500" style="width: 100%;height: auto;"></a>
    <figcaption>Tout n'est pas que SOLDAT à la Shinra, il y en a différent types.</figcaption>
</figure>

<p>Cet article va traiter des six types existants en JavaScript dans sa version ES3.</p>
<blockquote>
<div style="float: left;">[&lt; Chapitre 6](https://blog.lesieur.name/les-fermetures/)</div><div style="text-align: right">[Chapitre 8 &gt;](https://blog.lesieur.name/les-constructeurs-et-les-prototypes/)</div>
</blockquote>
<h2 id="introduction">Introduction</h2>
<p>Nous allons ici prendre en considération les types de données existants. Il est en premier lieu nécessaire de noter que le JavaScript distingue les entités à <em>valeurs primitives</em> des <em>objets</em>. Malgré la phrase « en JavaScript, tout est objet » qu&#39;il est possible de croiser au détour d&#39;un article, il n&#39;en est rien, où plutôt ; cela est partiellement correcte. Les valeurs primitives sont en rapport avec les <em>types de données</em>. Nous allons en discuter plus en détail.</p>
<h2 id="types-de-données">Types de données</h2>
<p>Même si le JavaScript est un langage faiblement typé il n&#39;en reste pas moins un langage typé. C&#39;est même un langage avec objet dynamique et dont la conversion de type est piloté par les opérandes utilisés : elle est automatique et implicite, on appel cela de la coercion de type.</p>
<p>Le standard ES3 définit 9 types dont seulement 6 sont directement accessibles depuis un programme JavaScript :</p>
<ul>
<li>Undefined</li>
<li>Null</li>
<li>Boolean</li>
<li>String</li>
<li>Number</li>
<li>Object</li>
</ul>
<p>Les 3 autres types sont accessibles uniquement au niveau de l&#39;implémentation (aucun objet en JavaScript ne possède ces types) et sont utilisés par la spécification pour expliquer le comportement de diverses opérations (comme le stockage de valeurs intermédiaires). Ce sont les trois types suivants :</p>
<ul>
<li>Reference</li>
<li>List</li>
<li>Completion</li>
</ul>
<p>Pour faire court, <samp>Reference</samp> est le type utilisé pour expliquer le fonctionnement des opérateurs <samp>delete</samp>, <samp>typeof</samp>, <samp>this</samp> et bien d&#39;autres. Il est constitué d&#39;un <em>objet base</em> et d&#39;un <em>nom de propriété</em>. Le type <samp>List</samp> décrit le comportement des listes d&#39;arguments (lors de l&#39;utilisation de l&#39;opérateur <samp>new</samp> dans une expression ou dans les appels de fonctions). Le type <samp>Completion</samp> est quand à lui utilisé pour expliquer les comportements de <samp>break</samp>, <samp>continue</samp>, <samp>return</samp> et <samp>throw</samp>.</p>
<h3 id="les-valeurs-primitives">Les valeurs primitives</h3>
<p>Revenons en à nos six types utilisés dans les programmes JavaScript. Cinq d&#39;entre eux sont des valeurs primitives : <strong>Undefined</strong>, <strong>Null</strong>, <strong>Boolean</strong>, <strong>String</strong> et <strong>Number</strong>.</p>
<p>En voici des exemples</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var sephiroth = undefined;
var youfie = null;
var zack = true;
var cloud = &#39;test&#39;;
var xiii = 13;
</code></pre>
<p>Ces valeurs sont implémentées à un très bas niveau. Ce <em>ne</em> sont <em>pas</em> des objets, elles n&#39;ont ni constructeurs, ni prototypes.</p>
<p>L&#39;opérateur <samp>typeof</samp> peut être contre intuitif s&#39;il n&#39;est pas proprement compris. L&#39;un des meilleurs exemples est celui de la valeur <samp>null</samp>. Quand <samp>null</samp> est fourni à l&#39;opérateur <samp>typeof</samp>, le résultat est <samp>&quot;object&quot;</samp>, indépendamment du fait que la spécification indique que <samp>null</samp> est de type Null.</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">console.log(typeof null); // `&quot;object&quot;`
</code></pre>
<p>La raison en est très simple. L&#39;opérateur <samp>typeof</samp> retourne simplement une valeur lue depuis un tableau standard disant simplement : « pour la valeur <samp>null</samp>, la chaîne de caractère <samp>&quot;object&quot;</samp> doit être retournée ».</p>
<p>Cependant, la spécification ne clarifiant pas ce point, <em>Brendan Eich</em>, l&#39;inventeur du JavaScript expliquera que <a href="https://blog.lesieur.name/difference-entre-type-null-et-type-undefined-en-javascript/">la différence entre <samp>undefined</samp> et <samp>null</samp></a> s&#39;explique justement avec le type Object, c.-à-d. qu&#39;il est intimement lié aux objets. Le fait est qu&#39;une référence « vide » pour un objet peut être matérialisée par le type Null. Ce détail n&#39;a pas été reporté dans la spécification ECMA-262-3 et actuellement le type Null est bien un type à part entier.</p>
<h3 id="le-type-object">Le type Object</h3>
<p>C&#39;est au tour du type Object d&#39;être parcouru (à ne pas confondre avec le constructeur <samp>Object</samp> dont nous ne parlerons pas dans cet article). C&#39;est le seul type JavaScript qui représente des objets.</p>
<p>Un type Object est une collection non ordonnée de paire de clé-valeur.</p>
<p>Les clés d&#39;un objet sont appelées des <em>propriétés</em>. Les propriétés sont des conteneurs pour des valeurs primitives ou d&#39;autres objets. Si une propriété contient une fonction en tant que valeur (une fonction étant un type Object) on appelle alors cette propriété <em>une méthode</em>.</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var team = { // objet `team` avec trois propriétés : `xiii`, `cloud` et `sephiroth`
    xiii: 13, // valeur primitive de type Number
    cloud: { hp: 302 }, // objet `cloud` avec la propriété `hp`
    sephiroth: function () { // méthode `sephiroth` (fonction objet)
        console.log(&quot;Je suis un glitch&quot;);
    }
};

console.log(team.xiii); // `13`
console.log(team.cloud); // `{ hp: 302 }`
console.log(team.cloud.hp); // `302`
team.sephiroth(); // `&quot;Je suis un glitch&quot;`
</code></pre>
<h4 id="nature-dynamique">Nature dynamique</h4>
<p>Les objets en JavaScript sont entièrement <em>dynamiques</em>. Cela signifie que nous pouvons ajouter, modifier ou supprimer les propriétés d&#39;un objet à n&#39;importe quel moment lors de l&#39;exécution d&#39;un programme.</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var cloud = { hp: 302 };

// ajouter une nouvelle propriété
cloud.mp = 54;
console.log(cloud); // `{ hp: 302, mp: 54 }`

// changer la valeur d&#39;une propriété en fonction
cloud.hp = function () {
    console.log(&quot;Ce sont les points de vie&quot;);
};

cloud.hp(); // `&quot;Ce sont les points de vie&quot;`

// supprimer une propriété
delete cloud.hp;
console.log(cloud); // `{ mp: 54 }`
</code></pre>
<p>Plusieurs propriétés ne peuvent pas être modifiées (<em>read-only</em>) ou supprimées (<em>non-configurable</em>). Nous en parlerons dans la sections consacrées aux attributs de propriétés.</p>
<blockquote>
<p>Notons que ES5 standardise les objets statiques ne pouvant pas être étendus avec de nouvelles propriétés, modifiés ou supprimés. Ils sont appelés objets <em>gelés</em> (« frozen ») et peuvent être gelés avec la méthode <samp>Object.freeze</samp>.</p>
</blockquote>
<blockquote>
<p><em>Code JavaScript</em></p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">var cloud = { hp: 302 };
</code></pre>
</blockquote>
<blockquote>
<p>// geler l&#39;objet
Object.freeze(cloud);
console.log(Object.isFrozen(cloud)); // <samp>true</samp></p>
</blockquote>
<blockquote>
<p>// il n&#39;est ni modifiable
cloud.hp = 0;</p>
</blockquote>
<blockquote>
<p>// ni extensible
cloud.mp = 54;</p>
</blockquote>
<blockquote>
<p>// ni supprimable
delete cloud.hp;
console.log(cloud); // <samp>{ hp: 302 }</samp></p>
<pre class="prettyprint linenums"><code>
</code></pre></blockquote>
<blockquote>
<p>Il est également possible de seulement empêcher l&#39;extension en utilisant la méthode <samp>Object.preventExtensions</samp> ou de contrôler spécifiquement les attributs avec la méthode <samp>Object.defineProperty</samp> :</p>
</blockquote>
<blockquote>
<p><em>Code JavaScript</em></p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">var cloud = { hp : 302 };
</code></pre>
</blockquote>
<blockquote>
<p>Object.defineProperty(cloud, &quot;mp&quot;, {
    value: 54,
    writable: false, // lecture seule
    configurable: false // non configurable
});</p>
</blockquote>
<blockquote>
<p>// ne peut être modifié
cloud.mp = 0;</p>
</blockquote>
<blockquote>
<p>// ne peut être supprimé
delete cloud.mp; // <samp>false</samp></p>
</blockquote>
<blockquote>
<p>// empécher l&#39;extension
Object.preventExtensions(cloud);
console.log(Object.isExtensible(cloud)); // <samp>false</samp></p>
</blockquote>
<blockquote>
<p>// on ne peut plus ajouter de nouvelles propriétés
cloud.level = 1;</p>
</blockquote>
<blockquote>
<p>console.log(cloud); <samp>{ hp: 302, mp: 54 }</samp></p>
<pre class="prettyprint linenums"><code>
</code></pre></blockquote>
<blockquote>
<p>Plus de détail dans <a href="https://blog.lesieur.name/les-proprietes-et-les-descripteurs/">ce chapitre</a>.</p>
</blockquote>
<h4 id="objets-pré-conçus-natifs-et-hôtes">Objets pré-conçus, natifs et hôtes</h4>
<p>Il est nécessaire que la spécification distingue les objets <em>natifs</em>, des objets <em>pré-conçus</em> et des objets <em>hôtes</em>.</p>
<p>Les objets <em>pré-conçus</em> et <em>natifs</em> sont définis par la spécification ECMAScript. La différence exacte entre les deux est minime : les objets <em>natifs</em> sont ceux fournis par l&#39;implémentation du JavaScript. Certains d&#39;entres eux sont pré-conçus et d&#39;autres sont créés <em>pendant</em> l&#39;exécution du programme (comme les objets définis par l&#39;utilisateur).</p>
<p>Ainsi les objets pré-conçus en amont sont un sous type des objets <em>natifs</em>. Ils sont créés par JavaScript <em>en début</em> de programme (par exemple <samp>parseInt</samp>, <samp>Math</samp>, etc.).</p>
<p>Tous les objets <em>hôtes</em> sont des objets fournis par l&#39;environnement hôte. On aura donc dans un navigateur, par exemple, <samp>window</samp>, <samp>console.log</samp>, etc.</p>
<p>Notez que ces objets <em>hôtes</em> peuvent être implémentés en utilisant intégralement la sémantique de la spécification ECMAScript. Ils sont en quelque sorte des objets « hôtes-natifs » (terme non utilisé dans la spécification).</p>
<h4 id="les-objets-boolean-string-et-number">Les objets <samp>Boolean</samp>, <samp>String</samp> et <samp>Number</samp></h4>
<p>En plus des trois primitives du même nom, la spécification définie des objets englobants spéciaux. Ce sont les trois objets suivants :</p>
<ul>
<li>L&#39;objet <samp>Boolean</samp></li>
<li>L&#39;objet <samp>String</samp></li>
<li>L&#39;objet <samp>Number</samp></li>
</ul>
<p>Chaque objet peut être créé avec son constructeur interne et contient dans l&#39;une de ses propriétés internes la valeur primitive correspondante. Ainsi la représentation des objets peut être fournie en valeurs primitives et inversement.</p>
<p>Exemple de valeurs d&#39;objets correspondants aux types primitifs :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code>var zack = new Boolean(true);
var cloud = new String(&#39;test&#39;);
var xiii = new Number(13);

// conversion en primitive
// utilisation de `ToPrimitive`
// il faut pour cela appliquer
// la fonction sans utiliser l&#39;opérateur `new`
zack = Boolean(zack);
cloud = String(cloud);
xiii = Number(xiii);

// revenir à l&#39;objet
// utilisation de `ToObject`
zack = Object(zack);
cloud = Object(cloud);
xiii = Object(xiii);
</code></pre><p>De plus, il y a aussi des objets créés par des constructeurs pré-conçus spéciaux comme <samp>Function</samp> (l&#39;objet constructeur des fonctions), <samp>Array</samp> (l&#39;objet constructeur des tableaux), <samp>RexExp</samp> (l&#39;objet constructeur des expressions régulières), <samp>Math</samp> (le module de mathématique), <samp>Date</samp> (l&#39;objet constructeur des dates), etc. Ces objets sont aussi du type Object et la distinction entre les uns et les autres est géré par des propriétés internes dont nous allons discuter plus tard.</p>
<h4 id="notations-littérales">Notations littérales</h4>
<p>Pour trois valeurs d&#39;objets : <samp>Object</samp>, <samp>Array</samp> et <samp>RegExp</samp>, il existe une notation courte qui appelle respectivement un <em>initialiseur d&#39;objet</em>, un <em>initialiseur de tableau</em> et un <em>initialiseur d&#39;expression régulière</em> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// équivalent de `var reactors = new Array(1, 5);`
/* ou `var reactors = new Array();
       reactors[0] = 1;
       reactors[1] = 5;` */
var reactors = [1, 5];

// équivalent de
/* `var location = new Object();
    location.north = &#39;Midgar&#39;;
    location.west = &#39;Junon&#39;;
    location.south = &#39;Fort Condor&#39;;` */
var location = { north: &#39;Midgar&#39;, west: &#39;Junon&#39;, south: &#39;Fort Condor&#39; };

// équivalent de `var ffvii = new RegExp(&quot;^\\d+$&quot;, &quot;g&quot;);`
var ffvii = /^\d+$/g;
</code></pre>
<p>Notons que dans le cas où nous ré-affectons la liaison entre <samp>Object</samp>, <samp>Array</samp> ou <samp>RegExp</samp> a d&#39;autres objets, le résultat de la notation littérale qui en découle peut varier d&#39;une implémentation à l&#39;autre. Par exemple, avec une implémentation, Rhino ou une vieille implémentation SpiderMonkey, les notations littérales vont créées un objet correspondant à la nouvelle valeur du nom de constructeur :</p>
<pre class="prettyprint linenums"><code class="language-js">var getClass = Object.prototype.toString;

// Avec le nom Object
Object = Number;

var busterSword = new Object;
console.log([busterSword, getClass.call(busterSword)]); // `0`, `&quot;[object Number]&quot;`

var ultimaWeapon = {};

// dans Rhino ou SpiderMonkey 1.7 : `0`, `&quot;[object Number]&quot;`
// pour les autres : toujours `&quot;[object Object]&quot;`, `&quot;[object Object]&quot;`
console.log([ultimaWeapon, getClass.call(ultimaWeapon)]);

// la même chose avec l&#39;objet Array
Array = Number;

var limits = new Array;
console.log([limits, getClass.call(limits)]); // `0`, `&quot;[object Number]&quot;`

var materias = [];

// dans Rhino ou SpiderMonkey 1.7 : `0`, `&quot;[object Number]&quot;`
// dans les autres : toujours `&quot;&quot;`, `&quot;[object Object]&quot;`
console.log([materias, getClass.call(materias)]);

// mais pour `RegExp`, la sémantique litérale
// reste inchangée dans toutes les implémentations
RegExp = Number;

ffvii = new RegExp;
console.log([ffvii, getClass.call(ffvii)]); // `0`, `&quot;[object Number]&quot;`

ff7 = /(?!)/g;
console.log([ff7, getClass.call(ff7)]); // `/(?!)/g`, `&quot;[object RegExp]&quot;`
</code></pre>
<h4 id="lobjet-regexp-et-lexpression-régulière-litérale">L&#39;objet <samp>RegExp</samp> et l&#39;expression régulière litérale</h4>
<p>Notons également qu&#39;en ES3, les deux derniers cas avec les expressions régulières sont identiques dans ce qu&#39;ils accomplissent, néanmoins ils diffèrent sur un point. L&#39;<em>expression régulière littérale</em> existe <em>uniquement dans une instance</em> et est créé pendant la phase d&#39;exécution du code, alors que le constructeur <samp>RegExp</samp> créé toujours un <em>nouvel objet</em>. Cela peut causer quelques problèmes, comme par exemple avec la propriété <samp>lastIndex</samp> des objets <samp>RegExp</samp> :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">for (var k = 0; k &lt; 4; k++) {
    var ffvii = /FF/g;
    console.log(ffvii.lastIndex); // `0`, `2`, `0`, `2`
    console.log(ffvii.test(&quot;FF7&quot;)); // `true`, `false`, `true`, `false`
}

// par constrate avec

for (var k = 0; k &lt; 4; k++) {
    var ffvii = new RegExp(&quot;ecma&quot;, &quot;g&quot;);
    console.log(ffvii.lastIndex); // `0`, `0`, `0`, `0`
    console.log(ffvii.test(&quot;FF7&quot;)); // `true`, `true`, `true`, `true`
}
</code></pre>
<blockquote>
<p>Notons qu&#39;en ES5 cette particularité a été résolue et ainsi toutes les expressions régulières littérales retournent toujours de nouveaux objets.</p>
</blockquote>
<h4 id="tableaux-associatifs-">Tableaux associatifs ?</h4>
<p>Souvent dans divers articles et discussions, les objets JavaScript (et plus particulièrement ceux créés via la forme littérale (ou déclarative) avec l&#39;initialiser <samp>{}</samp>) sont appelées des <em>tableaux de hachages (« hash-tables »)</em> ou simplement des <em>hashs</em> en Ruby ou Perl, <em>tableaux associatifs (« associative array »)</em> en PHP, <em>dictionnaires</em> en Python, etc.</p>
<p>L&#39;utilisation de ces terminologies est une habitude de nommage venant de ces technologies. Le concept est très similaire à celui d&#39;un objet et respecte le même principe de paire « clé-valeur ». Ils correspondent ainsi à la description théorique des structures de données que sont les <em>tableaux associatifs</em> ou les <em>tableaux de hachages</em>. Cependant, un type de donnée « tableau de hachage » est <em>habituellement</em> utilisé à un niveau implémentation.</p>
<p>Donc, même si cette terminologie est utilisée pour décrire conceptuellement ce mécanisme, il n&#39;est pas techniquement juste en JavaScript de l&#39;utiliser pour parler d&#39;un objet. Comme il a déjà été mentionné plus haut, le JavaScript ne possède qu&#39;un seul type d&#39;objet et tous ses « sous-types » respectent l&#39;approche de stockage de paire « clé-valeur ». Cela n&#39;est jamais différent d&#39;un « sous-type » à l&#39;autre. Il n&#39;y a donc pas de terme spécifique pour décrire un objet en terme de « hash ». N&#39;importe quel objet, indépendamment de ses propriétés internes peut stocker des paires :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var cloud = { hp: 302 };
cloud[&#39;mp&#39;] = 54;
cloud.level = 1;

var xiii = new Number(12);
xiii.hp = 564;
xiii.mp = 98;
xiii[&#39;level&#39;] = 5;

var jenova = new Function(&#39;&#39;);
jenova.hp = 400;
jenova.mp = 110;
jenova[&#39;level&#39;] = 25;

// etc. avec n&#39;importe quel « sous-type » d&#39;objet.
</code></pre>
<p>De plus, les objets en JavaScript ne sont jamais uniquement une paire de clé-valeur non vide, le terme « hash » est donc mal choisi :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">Object.prototype.world = 7;

var game = {}; // créer un « hash » vide

console.log(game[&quot;world&quot;]); // `7`, qui n&#39;est pourtant pas vide
console.log(game.toString); // `function`

game[&quot;type&quot;] = &#39;RPG&#39;; // ajouter une nouvelle paire au « hash »
console.log(game[&quot;type&quot;]); // `&#39;RPG&#39;`

Object.prototype.type = &#39;RPG&#39;; // la propriété se retrouvera dans le prototype

delete game[&quot;type&quot;]; // supprimé `type`
console.log(game[&quot;type&quot;]); // `&#39;RPG&#39;`, mais la clé et la valeur sont toujours là
</code></pre>
<p>Notons qu&#39;avec ES5, la possibilité de créer des objets vierges <em>sans prototype</em> (c&#39;est à dire que leur prototype est mis à <samp>null</samp>) a été ajouté. On peut faire cela en utilisant la méthode <samp>Object.create(null)</samp>. De ce point de vu, un objet peut être interprété comme un simple hash :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var aHashTable = Object.create(null);
console.log(aHashTable.toString); // `undefined`
</code></pre>
<p>Un autre point a noté est que certaines propriétés peuvent avoir uniquement un accesseur ou un mutateur, ce qui rend le tout confus :</p>
<pre class="prettyprint linenums"><code class="language-js">var name = new String(&quot;ff7&quot;);
name[&#39;length&#39;] = 10;
console.log(name[&#39;length&#39;]); // `3`
</code></pre>
<p>Et même si l&#39;on considère qu&#39;un hash peut avoir un « prototype » (comme par exemple en Ruby ou Python), en JavaScript cette terminologie est aussi non conforme car <em>il n&#39;y a aucune distinction entre les types d&#39;accesseur de propriété (c.-à-d. entre le point ou les crochets droits)</em>.</p>
<p>Ainsi le concept de « propriété » en JavaScript n&#39;est pas différencié du principe de « clé », d&#39;« index de tableau », de « méthode » ou de « propriété ». Ce sont tous des <em>propriétés</em> qui obéissent à la loi commune d&#39;un algorithme de lecture/écriture en examinant la chaîne de prototype.</p>
<p>Dans l&#39;exemple suivant, en Ruby, on voit bien cette distinction sémantique :</p>
<p><em>Code Ruby</em></p>
<pre class="prettyprint linenums"><code class="language-js">game = {}
game.class # Hash

game.length # `0`

# nouvelle paire de « clé-valeur »
game[&#39;length&#39;] = 7;

# mais la sémantique de la notation du point
# est différente et signifie accéder
# à la « propriété / méthode », mais pas à la « clé »

game.length # `1`

# et la notation crochet
# fournit un accès à la « clé » du hash

game[&#39;length&#39;] # `7`

# nous pouvons augmenter dynamiquement la classe Hash
# avec de nouvelle propriétés et méthodes et cette délégation
# sera disponible dans les objets déjà créés

class Hash
    def score
        100
    end
end

# nouvelle « propriété » disponible dans `game`

game.score # `100`

# mais pas la « clé »

a[&#39;score&#39;] # `nil`
</code></pre>
<p>Pour conclure le standard ECMA-262-3 <em>ne définit pas</em> de concept de « hash » (ou similaire). Cependant, puisque cette structure de données colle à la théorie, il est possible de nommer les objets ainsi.</p>
<h4 id="conversion-de-type">Conversion de type</h4>
<p>Pour convertir un objet en une valeur primitive, la méthode <samp>valueOf</samp> peut être utilisée. Comme nous l&#39;avons noté, l&#39;appel du constructeur (pour certains types) en tant que fonction (c.-à-d. sans l&#39;opérateur <samp>new</samp>) applique la conversion d&#39;un objet en son équivalent en valeur primitive. Pour cette conversion dite implicite, l&#39;appel de la méthode <samp>valueOf</samp> est effectué :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var game = new Number(7);
var primitiveGame = Number(game); // appel implicite de `valueOf`
var alsoPrimitiveGame = game.valueOf(); // appel explicite de `valueOf`

console.log([
    typeof game, // `&quot;object&quot;`
    typeof primitiveGame, // `&quot;number&quot;`
    typeof alsoPrimitiveGame // `&quot;number&quot;`
]);
</code></pre>
<p>Cela permet aux objets de participer à des opérations variées, par exemple aux additions :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var ps1 = new Number(7);
var ps3 = new Number(13);

console.log(ps1 + ps3); // `20`

// ou même ainsi

var playstation = {
    ps1: 7,
    ps2: 10,
    valueOf: function () {
        return this.ps1 + this.ps2;
    }
};

var squaresoft = {
    ps1: 7,
    ps2: 13,
    // affectation de la même fonctionnalité
    // `valueOf` que l&#39;objet `playstation`
    valueOf: playstation.valueOf
};

console.log(playstation + squaresoft); // `40`
</code></pre>
<p>La valeur de la méthode <samp>valueOf</samp> par défaut (si elle n&#39;est pas ré-écrite) peut varier en fonction du type d&#39;objet. Pour beaucoup d&#39;objets cela retourne la valeur de <samp>this</samp>. Par exemple :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var soldier = {};
console.log(soldier.valueOf() === soldier); // `true`, `valueOf` de `Object` retourne la valeur `this`

// mais pas pour `Date`

var jenovasFall = new Date();
console.log(jenovasFall.valueOf()); // le temps sous forme de Number
console.log(jenovasFall.valueOf() === jenovasFall.getTime()); // `true`
</code></pre>
<p>Il y a aussi une autre représentation primitive d&#39;un objet, une représentation sous forme de chaîne de caractère. Pour cela, c&#39;est la méthode <samp>toString</samp> qui est utilisée, et qui est automatiquement appelée pour certaines opérations :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var game = {
    valueOf: function () {
        return 13;
    },
    toString: function () {
        return &#39;ff&#39;;
    }
};

// dans cette opération
// la méthode `toString` est
// appelée automatiquement
console.log(game); // `&quot;ff&quot;`

// mais ici, c&#39;est la méthode `valueOf`
console.log(game + 7); // `20`

// mais s&#39;il n&#39;existe pas de méthode
// `valueOf` elle sera
// remplacée par
// la méthode `toString`
delete game.valueOf;
console.log(game + 7); // `&quot;ff7&quot;`
</code></pre>
<p>La méthode <samp>toString</samp> définie dans <samp>Object.prototype</samp> a une signification spéciale. Elle retourne la valeur de la propriété interne <samp>[[Class]]</samp> dont nous avons discuté plus haut.</p>
<p>De même qu&#39;il y a la conversion <samp>ToPrimitive</samp>, il y a la conversion <samp>ToObject</samp> qui à l&#39;inverse transforme une primitive en un type Object.</p>
<p>L&#39;une des manières explicites d&#39;appeler <samp>ToObject</samp> est d&#39;utiliser le constructeur de <samp>Object</samp> en tant que fonction (ou avec <samp>new</samp> dans certain cas).</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var xiii = Object(13); // `[object Number]`
var cloud = Object(&#39;test&#39;); // `[object String]`
var zack = Object(true); // `[object Boolean]`

// il est aussi possible pour certain type d&#39;appeler
// `Object` avec l&#39;opérateur `new`
var Zack = new Object(true); // `[object Boolean]`

// mais en l&#39;utilisant sans argument,
// `new Object()` crée un simple objet
var caitSith = new Object(); // `[object Object]`

// dans le cas ou l&#39;argument pour la fonction `Object`
// est déjà une valeur objet,
// l&#39;objet sera retourné en tant que tel
var reactors = [];
console.log(reactors === new Object(reactors)); // `true`
console.log(reactors === Object(reactors)); // `true`
</code></pre>
<p>L&#39;appel d&#39;un constructeur avec <samp>new</samp> ou sans <samp>new</samp> ne suit aucune règle générale particulière, cela dépend tout simplement du constructeur. Par exemple les constructeurs <samp>Array</samp> et <samp>Function</samp> retournent <em>le même</em> résultat quand leurs constructeurs sont appelés avec <samp>new</samp> ou en tant que simple fonction (sans <samp>new</samp>) :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var aerith = Array(1, 2, 3); // `[object Array]`
var ancient = new Array(1, 2, 3); // `[object Array]`
var flowergirl = [1, 2, 3]; // `[object Array]`

var calamity = Function(&#39;&#39;); // `[object Function]`
var jenova = new Function(&#39;&#39;); // `[object Function]`
</code></pre>
<p>Il y a aussi des conversions explicites et implicites quand certains opérateurs sont utilisés :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var xiii = 4;
var barret = 2;

// implicite
var legs = xiii + barret; // `6`, type Number
var meaningOfLife = &#39;&#39; + xiii + barret; // `&quot;42&quot;`, type String

// explicite
var game = &#39;7&#39;; // `&quot;7&quot;`, type String
var num = +game; // `7`, type Number
var numAgain = parseInt(game, 10); // `7`, type Number

// etc.
</code></pre>
<h4 id="attributs-de-propriété">Attributs de propriété</h4>
<p>Toutes les propriétés peuvent avoir un nombre d&#39;attributs comme suit :</p>
<ul>
<li><samp>{ReadOnly}</samp> —  toute tentative d&#39;écrire une valeur dans la propriété est ignorée ; cependant, la propriété de lecture seule peut-être changée par une action de l&#39;environnement hôte, ainsi lecture seule ne veut pas dire « valeur constante »,</li>
<li><samp>{DontEnum}</samp> — la propriété ne peut pas être énumérée dans une boucle <samp>for..in</samp>,</li>
<li><samp>{DontDelete}</samp> — l&#39;action de l&#39;opérateur <samp>delete</samp> appliquée est ignorée,</li>
<li><samp>{Internal}</samp> — la propriété est interne, elle n&#39;a pas de nom et est utilisée uniquement au niveau de l&#39;implémentation, aussi ces propriétés ne sont pas accessibles en JavaScript.</li>
</ul>
<blockquote>
<p>Notez qu&#39;en ES5 les propriétés <samp>{ReadOnly}</samp>, <samp>{DontEnum}</samp> et <samp>{DontDelete}</samp> on été renommé en <samp>[[Writable]]</samp>, <samp>[[Enumerable]]</samp> et <samp>[[Configurable]]</samp> et celle-ci peuvent être manuellement gérer via la méthode <samp>Object.defineProperty</samp> ou d&#39;autres méthodes similaires :</p>
</blockquote>
<blockquote>
<p><em>Code JavaScript</em></p>
</blockquote>
<blockquote>
<pre class="prettyprint linenums"><code class="language-js">var cloud = {};
</code></pre>
</blockquote>
<blockquote>
<p>Object.defineProperty(cloud, &quot;hp&quot;, {
    value: 302,
    writable: true, // aka <samp>{ReadOnly} = false</samp>
    enumerable: false, // aka <samp>{DontEnum} = true</samp>
    configurable: true // aka <samp>{DontDelete} = false</samp>
});</p>
</blockquote>
<blockquote>
<p>console.log(cloud.hp); // <samp>302</samp></p>
</blockquote>
<blockquote>
<p>// ce lot d&#39;attributs est appelé un descripteur
var desc = Object.getOwnPropertyDescriptor(cloud, &quot;hp&quot;);</p>
</blockquote>
<blockquote>
<p>console.log(desc.enumerable); // <samp>false</samp>
console.log(desc.writable); // <samp>true</samp>
// etc.</p>
<pre class="prettyprint linenums"><code>
</code></pre></blockquote>
<h4 id="propriétés-et-méthodes-internes">Propriétés et méthodes internes</h4>
<p>Les objets possèdent également un certain nombre de propriétés qui sont inaccessibles depuis un programme JavaScript directement (cependant comme nous allons le voir plus bas, certaines implémentations permettent d&#39;avoir accès à ses propriétés). Ces propriétés sont entourés des doubles crochets droits par convention : <samp>[[ ]]</samp>.</p>
<p>Nous allons nous intéresser à certaines d&#39;entres elles (qui sont obligatoires pour tous les objets) : la description d&#39;autres propriétés pouvant être trouvée dans la spécification.</p>
<p>Chaque object doit implémenter les propriétés et méthodes internes suivantes :</p>
<ul>
<li><samp>[[Prototype]]</samp> — le prototype de cet objet (il sera étudié plus en détail plus bas),</li>
<li><samp>[[Class]]</samp> — une représentation en chaîne de caractère du <em>type</em> (par exemple <samp>Object</samp>, <samp>Array</samp>, <samp>Function</samp>, etc.). Il est utilisé pour distinguer les objets,</li>
<li><samp>[[Get]]</samp> — une méthode pour donner la valeur de la propriété,</li>
<li><samp>[[Put]]</samp> — une méthode pour affecter la valeur de la propriété,</li>
<li><samp>[[CanPut]]</samp> — indique de quelle manière cette propriété peut être ré-écrite,</li>
<li><samp>[[HasProperty]]</samp> — indique si cette propriété appartient déjà à l&#39;objet,</li>
<li><samp>[[Delete]]</samp> — retire la propriété de l&#39;objet</li>
<li><samp>[[DefaultValue]]</samp> — retourne une valeur primitive correspondant à l&#39;objet (pour donner cette valeur la méthode <samp>valueOf</samp> est appelée, pour certain objet, l&#39;exception <samp>TypeError</samp> peut être levée).</li>
</ul>
<p>Pour obtenir la propriété <samp>[[Class]]</samp> d&#39;un programme JavaScript il est possible de la lire indirectement via la méthode <samp>Object.prototype.toString()</samp>. Cette méthode devrait retourner la chaîne de caractère suivante :  <samp>&quot;[object &quot; + [[Class]] + &quot;]&quot;</samp>. Par exemple :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">var getClass = Object.prototype.toString;

getClass.call({}); // `[object Object]`
getClass.call([]); // `[object Array]`
getClass.call(new Number(1)); // `[object Number]`

// etc.
</code></pre>
<p>Cette fonctionnalité est souvent utilisée pour vérifier le type de l&#39;objet, cependant, il est nécessaire de préciser que la spécification autorise n&#39;importe quelle chaîne de caractère valide et qu&#39;il n&#39;est pas sur que tous les retours respectent cette convention. Par exemple, la propriété <samp>[[Class]]</samp> de la méthode <samp>document.childNodes.item(...)</samp> retourne <samp>&quot;String&quot;</samp> dans des vieux IE (et dans d&#39;autres implémentations <samp>&quot;Function&quot;</samp> est retourné) :</p>
<p><em>Code JavaScript</em></p>
<pre class="prettyprint linenums"><code class="language-js">// dans de vieux IE : `&quot;String&quot;`, dans d&#39;autres `&quot;Function&quot;`
console.log(getClass.call(document.childNodes.item));
</code></pre>
<h2 id="conclusion">Conclusion</h2>
<p>Nous venons de voir que le typage en JavaScript était loin d&#39;être trivial. Les détails vus ici vont nous permettre de nous attaquer aux parties plus complexes du type Object, à savoir le constructeur et le prototype.</p>
<blockquote>
<div style="float: left;">[&lt; Chapitre 6](https://blog.lesieur.name/les-fermetures/)</div><div style="text-align: right">[Chapitre 8 &gt;](https://blog.lesieur.name/les-constructeurs-et-les-prototypes/)</div>
</blockquote>
<p><strong>Références</strong></p>
<p>Section correspondante de la spécification ECMA-262-3 :</p>
<ul>
<li><a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">4.2 — Language Overview</a>,</li>
<li><a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">4.3 — Definitions</a>,</li>
<li><a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">7.8.5 — Regular Expression Literals</a>,</li>
<li><a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">8 — Types</a>,</li>
<li><a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">9 — Type Conversion</a>,</li>
<li><a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">11.1.4 — Array Initialiser</a>,</li>
<li><a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">11.1.5 — Object Initialiser</a>.</li>
</ul>
<p>Ce texte est une libre adaptation française d&#39;une partie de l&#39;excellent billet <a href="http://dmitrysoshnikov.com/ecmascript/ru-chapter-7-2-oop-ecmascript-implementation/">Тонкости ECMA-262-3. Часть 7.2. ООП: Реализация в ECMAScript.</a> de <a href="http://dmitrysoshnikov.com/">Dmitry Soshnikov</a>.</p>
]]></description>
            <link>http://localhost:7776/les-types/</link>
            <guid isPermaLink="false">59528f58a9b5f0251d9baa20</guid>
            <category><![CDATA[ECMAScript]]></category>
            <category><![CDATA[Spécifications]]></category>
            <category><![CDATA[JavaScript]]></category>
            <category><![CDATA[Concept]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Wed, 28 Jun 2017 12:01:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Et si vous compreniez enfin Git et GitHub ?]]></title>
            <description><![CDATA[<p>Si Svn (Subversion) est la version « client-server » d&#39;un système de gestion de version, alors Git en est sans conteste la version « peer-to-peer ».</p>
<p>Si vous découvrez le système de gestion de version Git et que vous l&#39;utilisez seul et occasionnellement, il existe peut-être encore beaucoup de zones d&#39;ombre pour vous sur son utilisation ainsi que sur la totalité des possibilités offertes. D&#39;ailleurs, êtes-vous réellement sûr de comprendre la portée de ce système de gestion de version distant et distribué ?</p>
<figure>
    <a href="media/images/upload/networkDesign_xkl_com.jpg"><img class="openable" src="media/images/upload/networkDesign_xkl_com-mini.jpg" alt="Bien que le contexte de vie soit détruit, les zombis vivent toujours, enfermés, tel des variables dans une fermeture." width="658" height="500" style="max-width: 100%;height: auto;"></a>
    <figcaption>Réseau distribué : xkl.com</figcaption>
</figure>

<p>C&#39;était également mon cas. Tout le long de mon amélioration continue de l&#39;utilisation de Git, je vais maintenir cet aide-mémoire. Il abordera :</p>
<ul>
<li>la raison d&#39;être de Git par l&#39;exemple,</li>
<li>la description des actions de Git pour un travail sur une branche,</li>
<li>la description d&#39;une méthode de travail multi-branche avec Git et</li>
<li>le description de Git avec de multiples sources via GitHub.</li>
</ul>
<blockquote>
<p>Si vous ne connaissez vraiment pas grand chose à Git n&#39;hésitez pas à lire : <a href="https://git-scm.com/book/fr/v2/D%C3%A9marrage-rapide-%C3%80-propos-de-la-gestion-de-version">Démarrage rapide de GIT</a> et particulièrement :</p>
<ul>
<li><a href="https://git-scm.com/book/fr/v2/D%C3%A9marrage-rapide-%C3%80-propos-de-la-gestion-de-version">À propos de la gestion de version</a> et</li>
<li><a href="https://git-scm.com/book/fr/v2/D%C3%A9marrage-rapide-Rudiments-de-Git">Rudiments de Git</a></li>
</ul>
</blockquote>
<h2 id="git-comment-ça-marche-">Git, comment ça marche ?</h2>
<h3 id="créons-un-système-de-version-local">Créons un système de version local</h3>
<p>Imaginons que je crée un dossier <samp>website</samp> et que je décide d&#39;y créer divers fichiers destinés à être ouverts dans un navigateur. Actuellement je travail seul sur ce projet dans ma société et avec mon propre ordinateur.</p>
<p><img src="media/images/upload/git-1.png" alt="Git étape 1"></p>
<hr>
<p>S&#39;il me venait l&#39;envie de modifier le site, mais de toujours être capable de revenir à sa version antérieur, je peux adopter une approche d&#39;historisation dans un dossier annexe <samp>historique</samp>. Dans ce dossier, je placerais une copie du site appelé <samp>version-1</samp>. Ensuite je modifierais l&#39;original.</p>
<p><img src="media/images/upload/git-2.png" alt="Git étape 2"></p>
<hr>
<p>Pour permettre au site visionné dans le navigateur d&#39;être toujours dans le même dossier, nous pourrions également décider de créer un dossier <samp>courante</samp> qui représenterait toujours la version du site la plus récente. En faisant cela je pourrais mettre mon dossier <samp>website</samp> dans l&#39;état de la <samp>version-1</samp> et je sais que je pourrais revenir à l&#39;état de la version <samp>courante</samp> puisque j&#39;en ai une copie dans l&#39;historisation des versions.</p>
<p><img src="media/images/upload/git-3.png" alt="Git étape 3"></p>
<hr>
<p>Ainsi après plusieurs versions du site, mon dossier d&#39;historisation pourrait ressembler à celui ci-dessous. Mon dossier de travail serait sur la version courante.</p>
<p><img src="media/images/upload/git-4.png" alt="Git étape 4"></p>
<hr>
<p>Nous venons de créer un système de version rudimentaire !</p>
<h3 id="créons-un-système-de-version-centralisé">Créons un système de version centralisé</h3>
<p>Imaginons maintenant qu&#39;une seconde personne dans ma société rejoigne le développement du site. Pour travailler sur le même site que moi (Bruno), cette personne (Bob) copierait intégralement mon dossier <samp>website</samp>.</p>
<p><img src="media/images/upload/git-5.png" alt="Git étape 5"></p>
<hr>
<p>Bruno pourrait très bien créer une version du site soleil pendant que Bob continuerait une version du site lune. Les deux dossiers pourraient donc ressembler respectivement à l&#39;image ci-dessous. Bruno serait dans la version de travail <samp>courante</samp> et Bob serait revenu dans une version de travail <samp>version-lune</samp> pour une raison quelconque.</p>
<p><img src="media/images/upload/git-6.png" alt="Git étape 6"></p>
<hr>
<p>Si à présent nous souhaitions chacun pouvoir afficher l&#39;état du travail de l&#39;autre, nous devrions pouvoir différencier nos historiques de version, et chacun nous partager notre historique. Nous devrions alors adopter une structure comme celle ci-dessous. Nous pouvons d&#39;ailleurs voir que si nous souhaitions afficher la <samp>version-4</samp> nous pourrions la prendre depuis n&#39;importe quel historique puisque « les versions » <samp>version-4</samp> sont identiques.</p>
<p><img src="media/images/upload/git-7.png" alt="Git étape 7"></p>
<hr>
<p>Pour ne pas avoir à chaque fois à copier le projet d&#39;un ordinateur à l&#39;autre (en prévisions des autres ordinateurs qui pourraient nous rejoindre), nous décidons de copier nos deux historiques de projet sur un serveur distant qui servirait de référence. À présent nous pouvons supprimer ce que nous voulons sur nos machines, il suffira à chaque fois d&#39;aller récupérer l&#39;original sur le serveur. À chaque fois que nous ferrons des modifications sur les historiques, nous prendrons soin de les monter sur le serveur. Pour avoir nos historiques à jour, il nous faudra également le demander au serveur. Pour finir, le serveur n&#39;a pas d&#39;espace de travail, il ne contient en fait que les historiques. C&#39;est Bruno ou Bob qui choisissent ce qu&#39;ils vont souhaiter afficher sur leur PC.</p>
<p><img src="media/images/upload/git-8.png" alt="Git étape 8"></p>
<hr>
<p>Nous venons de créer Svn (Subversion), un système de version centralisé !</p>
<h3 id="créons-un-système-de-version-distribué">Créons un système de version distribué</h3>
<p>À présent un troisième développeur (Alice) veut également accéder au code du site pour le modifier. Alice ne fait pas partie de la société. La société ne souhaite pas qu&#39;Alice puisse ajouter son historique au sien. La société souhaite cependant qu&#39;elle puisse non seulement partir de son travail, mais aussi avoir accès à toutes les versions de celui-ci dans tous les historiques ! La société lui permet donc de copier l&#39;intégralité du serveur... chez elle ! Dans l&#39;exemple ci-dessous, Bruno ne travail par exemple plus sur la dernière version de son historique mais sur <samp>version-soleil</samp> et Alice travail sur la version <samp>courante</samp> de Bruno.</p>
<p><img src="media/images/upload/git-9.png" alt="Git étape 9"></p>
<hr>
<p>Comme Alice travail maintenant sur son propre serveur, elle peut aménager ses historiques comme elle le souhaite. Tout le travail effectué après la copie sera versionner comme elle l&#39;entend. Par exemple Alice pourra renommer l&#39;historique <samp>bruno</samp> en historique <samp>base</samp>. Elle pourra supprimer l&#39;historique de <samp>bob</samp> de son serveur ou encore copier l&#39;historique <samp>base</samp> en historique <samp>solune</samp> et continuer son travail dans cet historique !</p>
<p><img src="media/images/upload/git-10.png" alt="Git étape 10"></p>
<hr>
<p>Ajoutons à cela la possibilité</p>
<ul>
<li>de reverser le travail effectué par Alice sur le serveur copié dans le serveur source ou de synchroniser le serveur copié avec les nouveautés du serveur source,</li>
<li>de directement se connecter à d&#39;autres serveurs pour mettre à jour différents historiques ou encore</li>
<li>de fusionner le travail entre des historiques sur le même serveur ou même de serveur à serveur,</li>
</ul>
<p>et vous venez de créer Git !</p>
<p><img src="media/images/upload/networkDesign_xkl_com-mini.jpg" alt="Réseau distribué"></p>
<p>Imaginez qu&#39;il y a pleins de dépôts distants différents pour un même projet avec des tas de répliques et que sur chaque poste de travail on en trouve des clones avec une version de travail précise. Un poste de travail peut très bien avoir plusieurs dossiers provenant d&#39;un même dépôt distant et dans des états de version différents.</p>
<p>Pour finir, en réalité, sur vos postes machines, ce que vous voyez en réalité ce n&#39;est pas cela :</p>
<p><img src="media/images/upload/git-2.png" alt="Git étape 2"></p>
<p>mais cela :</p>
<p><img src="media/images/upload/git.png" alt="Git local"></p>
<p>car tout est optimisé et rangé de manière à ne pas avoir la copie de toutes les versions, mais de pouvoir en sortir n&#39;importe laquelle à partir des informations de « différence » d&#39;un instantané (révision) à l&#39;autre. On remarque d&#39;ailleurs qu&#39;une même révision peut exister dans deux branches différentes si celle-ci est une copie de l&#39;autre à un certain point. Cela signifie que les branches « n&#39;existe pas » mais sont une vue de Git pour présenter un groupement de révision. Il existe aussi des étiquettes (« tags ») qui permettent de réellement indiquer à partir de quel instantané on peut estimer qu&#39;on en est à la version <samp>vX.X.X</samp> d&#39;un dépôt ou utiliser des livrables (« release ») par exemple avec GitHub.</p>
<h2 id="gérer-son-projet-git-avec-une-branche">Gérer son projet Git avec une branche</h2>
<p>Avant de commencer, il me semble important de se rappeler que Git copie l&#39;intégralité d&#39;un dépôt (« repository ») distant (« remote ») en local et que la majorité des actions effectuées par l&#39;outil de commande reviendra en réalité à uniquement changer votre dépôt local. Ainsi recherche, changement de version, changement de branche, tout sera très rapide !</p>
<p>Voici un schéma interactif de toutes les interactions dans le système de gestion de version de Git, vous pourrez aisément constater les actions en local bien plus nombreuse que les autres. Cliquez sur un élément pour accéder à son descriptif ci-après.</p>
<div class="transport">
  <div class="commit-complete" data-id="commit-a">
    <span>commit -a</span>
  </div>
  <div class="add" data-id="add">
    <span>add</span>
  </div>
  <div class="commit" data-id="commit">
    <span>commit</span>
  </div>
  <div class="push" data-id="push">
    <span>push</span>
  </div>
  <div class="pull" data-id="pull-r-">
    <span>pull [-r]</span>
  </div>
  <div class="fetch" data-id="fetch">
    <span>fetch</span>
  </div>
  <div class="merge" data-id="merge-ou-rebase">
    <span>merge <em>or</em> rebase</span>
  </div>
  <div class="checkout-head" data-id="checkout">
    <span>checkout HEAD</span>
  </div>
  <div class="checkout" data-id="checkout">
    <span>checkout</span>
  </div>
  <div class="reset" data-id="reset">
    <span>reset</span>
  </div>
  <div class="reset-complete" data-id="reset">
    <span>reset</span>
  </div>
  <div class="diff-head" data-id="status-ou-diff">
    <span>diff HEAD</span>
  </div>
  <div class="diff" data-id="status-ou-diff">
    <span>diff</span>
  </div>
  <div class="before-workspace"></div>
  <div class="workspace">
    <div class="local">Local</div>
    <div class="workspace-box" data-id="workspace">
      <span>Workspace</span>
    </div>
  </div>
  <div class="index">
    <div class="index-box" data-id="index">
      <span>Index</span>
    </div>
  </div>
  <div class="local-repository">
    <div class="internet">Internet</div>
    <div class="local-box" data-id="local-repository">
      <span>Local Repository</span>
    </div>
  </div>
  <div class="remote-repository">
    <div class="remote-box" data-id="remote-repository">
      <span>Remote Repository</span>
    </div>
  </div>
</div>

<h3 id="workspace">Workspace</h3>
<p>Le <em>Workspace</em> ou <em>Working Tree</em> ou <em>Working Directory</em> est l&#39;<strong>espace de travail</strong>. C&#39;est une extraction unique d&#39;une version du projet à partir de laquelle vous pouvez travailler. Ce dossier est stocké sur votre machine. Les fichiers ici sont soit identiques à la dernière révision enregistrée dans le dépôt local soit à l&#39;état « Modifié ».</p>
<h3 id="index">Index</h3>
<p>L&#39;<strong>index</strong> ou <em>Staging Area</em> correspond à la liste complète des fichiers présents physiquement dans votre espace de travail qui ont été déclarés comme faisant partie de la prochaine révision que vous allez enregistrer. Il est donc possible qu&#39;un fichier présent dans l&#39;espace de travail ne soit pas présent dans l&#39;index si vous ne l&#39;avez pas ajouté. Les fichiers indexés sont dans un état « Indexé ».</p>
<h3 id="local-repository">Local Repository</h3>
<p>Le <em>Local Repository</em> est le <strong>dépôt local</strong>. C&#39;est le dossier <samp>.git</samp> stocké dans votre espace de travail. C&#39;est une réplique totale, sur votre machine, du dépôt distant. C&#39;est dans le dépôt local que vous aller stocker vos révisions du projet. Le couple « .git » et l&#39;espace de travail constitue ce que l&#39;on appel le clone du dépôt distant. Les fichiers ici sont dans un état « Validé ».</p>
<h3 id="remote-repository">Remote Repository</h3>
<p>Le <em>Remote Repository</em> est le <strong>dépôt distant</strong>. C&#39;est le dossier dans lequel est stocké le projet sur le serveur qui fait office de référant. Vous ne pouvez pas directement modifier ces fichiers. C&#39;est la référence lorsque vous clonez un projet sur votre environnement afin d&#39;en créer une réplique local et d&#39;en initialiser la révision la plus récente en tant qu&#39;état des fichiers de l&#39;espace de travail.</p>
<h3 id="add">add</h3>
<p>Utiliser <samp>add</samp> permet d&#39;ajouter des fichiers présent dans votre espace de travail vers l&#39;index en prévisions d&#39;une action futur vers un dépôt. Chaque fichier passe donc de l&#39;état « Modifié » à « Indexé ».</p>
<h3 id="reset">reset</h3>
<p>Utiliser <samp>reset</samp> permet de retirer des fichiers de l&#39;index ou annuler un instantané dans le dépôt local tout en conservant (ou non) les modifications faites. Pour annuler les modifications faites tout en laissant les index et dépôt local en place il faut utiliser <samp>revert</samp>.</p>
<h3 id="commit">commit</h3>
<p>Utiliser <samp>commit</samp> permet d&#39;acter l&#39;intégralité des fichiers de votre index dans le dépôt local en tant que nouvel révision. Chaque fichier passe donc d&#39;« Indexé » à « Validé ».</p>
<h3 id="commit--a">commit -a</h3>
<p>Utiliser <samp>commit -a</samp> pour ajouter automatiquement la totalité des nouveaux fichiers à l&#39;index puis les acter dans le dépôt local.</p>
<h3 id="push">push</h3>
<p>Utiliser <samp>push</samp> pour monter et aligner l&#39;intégralité des fichiers du dépôt local sur le dépôt distant.</p>
<h3 id="fetch">fetch</h3>
<p>Utiliser <samp>fetch</samp> pour descendre et aligner l&#39;intégralité des fichiers du dépôt local depuis votre dépôt distant.</p>
<h3 id="merge-ou-rebase">merge ou rebase</h3>
<p>Utiliser <samp>merge</samp> pour fusionner les modifications présentent entre les fichiers de votre dernière révision et ceux rapatrier du dépôt distant (pour plus d&#39;information sur la différence entre <samp>merge</samp> et <samp>rebase</samp> <a href="http://labs.excilys.com/2012/02/28/preparez-vous-a-reecrire-lhistoire-avec-git-rebase/">voir ici</a>).</p>
<h3 id="pull--r">pull [-r]</h3>
<p>Utiliser <samp>pull</samp> pour descendre et ré-aligner les modifications présentent entre l&#39;espace de travail, le dépôt local et le dépôt distant. En cas de conflit, l&#39;action <samp>fetch</samp> aura été effectuée et vous devrez résoudre les conflits et utiliser <samp>merge</samp> vous même.</p>
<h3 id="checkout">checkout</h3>
<p>Utiliser <samp>checkout</samp> permet d&#39;extraire un instantané (une révision) et d&#39;aligner l&#39;espace de travail avec cet instantané du dépôt local depuis : la branche courante, une autre branche ou l&#39;index.</p>
<h3 id="status-ou-diff">status ou diff</h3>
<p>Utiliser <samp>status</samp> ou <samp>diff</samp> permet de comparer vos fichiers de l&#39;espace de travail avec ceux de l&#39;index ou du dépôt local. Vous pouvez ainsi voir ce qui a changé dans un comparateur de version.</p>
<h3 id="stash">stash</h3>
<p>Utiliser <samp>stash</samp> pour remiser l&#39;état de votre espace de travail et de votre index dans la remise afin de ne pas perdre votre travail lors d&#39;une extraction. Cela vous permet de ne pas acter un travail à moitié fini.</p>
<blockquote>
<p>Pour en savoir plus, vous pouvez lire <a href="https://git-scm.com/book/fr/v2/Les-bases-de-Git-D%C3%A9marrer-un-d%C3%A9p%C3%B4t-Git">Les Bases de GIT</a> et plus particulièrement :</p>
<ul>
<li><a href="https://git-scm.com/book/fr/v2/Les-bases-de-Git-Enregistrer-des-modifications-dans-le-d%C3%A9p%C3%B4t">Enregistrer des modifications dans le dépôt</a> et</li>
<li><a href="https://git-scm.com/book/fr/v2/Les-bases-de-Git-Travailler-avec-des-d%C3%A9p%C3%B4ts-distants">Travailler avec des dépôts distants</a></li>
</ul>
</blockquote>
<h2 id="gérer-son-projet-git-sur-plusieurs-branches">Gérer son projet Git sur plusieurs branches</h2>
<p>Comme créer une branche ne revient qu&#39;à créer des aiguillages d&#39;instantanés, cette opération est très rapide. Il ne faut donc pas hésiter à le faire ! Je vous propose ici une structure de travail avec plusieurs branches pour un projet afin de vous organiser en équipe.</p>
<p>Il me semble que <a href="https://blogs.endjin.com/2015/01/using-smartgit-to-follow-the-gitflow-branching-and-workflow-model/">la structure proposée par SmartGit</a> est pertinente aussi vais-je la décrire juste après ce schéma.</p>
<p><img src="media/images/upload/GitFlowworkflow_thumb2.png" alt="Model à plusieurs Branches"></p>
<p>Le but d&#39;une branche et sa position dans l&#39;avancement du travail sur le projet depuis le développement jusqu&#39;aux livrables doit être indiqué dans son nom, c&#39;est pourquoi nous utiliserons les noms suivants :</p>
<ul>
<li><strong>release/{nom de branche}</strong> – chaque livrable est associé à une branche correspondant à une version final de l&#39;application.</li>
<li><strong>master</strong> – une branche permanente comme référence correspondant à la version définitive des modifications entre chaque version de l&#39;application. Elle correspond donc à chaque instant à la dernière version de l&#39;application.</li>
<li><strong>develop</strong> – une branche permanente contenant l&#39;avancement de l&#39;application dans son ensemble au file des versions, avec des branches de fonctionnalités créées à partir de cette version et reversées dedans.</li>
<li><strong>feature/{nom de branche}</strong> – chaque fonctionnalité correspond au travail sur un sujet particulier (ex: une correction de bug, une nouvelle fonctionnalité...).</li>
<li><strong>hotfix/{nom de branche}</strong> – des branches pour s&#39;occuper des fixes urgent à apporter qui seront prioritairement reversés dans le <samp>master</samp> puis reversés dans la <samp>develop</samp> en attendant de finir dans le prochain livrable.</li>
</ul>
<blockquote>
<p>Pour en savoir plus, vous pouvez lire <a href="https://git-scm.com/book/fr/v2/Les-branches-avec-Git-Les-branches-en-bref">Les Branches avec GIT</a>.
et plus particulièrement :</p>
<ul>
<li><a href="https://git-scm.com/book/fr/v2/Les-branches-avec-Git-Branches-et-fusions%C2%A0%3A-les-bases">Branches et fusions</a> et</li>
<li><a href="https://git-scm.com/book/fr/v2/Les-branches-avec-Git-Rebaser-Rebasing">Rebaser</a></li>
</ul>
</blockquote>
<h2 id="partagez-avec-le-monde--bienvenue-sur-github">Partagez avec le monde : bienvenue sur GitHub</h2>
<p>Parce que mettre en place des serveurs Git vous-même est fastidieux, vous pouvez utiliser le plus grand réseau distribué de projet au monde, GitHub. Pour utiliser Git et GitHub au mieux il va être nécessaire de bien associer le vocabulaire de Git avec les exemples que nous avons précédemment décrit.</p>
<p><img src="media/images/upload/git-10.png" alt="Git étape 10"></p>
<p>Faisons comme si tous les serveurs de notre exemple précédent était sur GitHub. Une société quelconque partage un projet sur GitHub et vous découvrez Git et GitHub en tant qu&#39;Alice pour travailler avec le projet de cette société.</p>
<p><img src="media/images/upload/github.png" alt="Réseau GitHub"></p>
<p>Voici ce que nous pouvons dire de l&#39;image ci-dessus avec le vocabulaire Git(Hub) :</p>
<ul>
<li>Nous sommes l&#39;utilisateur Alice.</li>
<li>Sur notre PC, notre dépôt local (« local repository ») dans le dossier <samp>website</samp> à un espace de travail (« workspace ») qui pointe sur la révision (« commit ») <samp>9696190</samp> de la branche (« branch ») <samp>solune</samp>.</li>
<li>La dernière révision de la branche <samp>solune</samp> est <samp>9696190</samp>, c&#39;est pourquoi on peut également dire que c&#39;est <samp>HEAD</samp>.</li>
<li>Comme le pointeur du dossier est sur <samp>HEAD</samp>, cela signifie que nous sommes sur la branche <samp>solune</samp> en elle-même (sa version la plus à jour).</li>
<li>Depuis le poste d&#39;Alice, la source (« remote ») depuis laquelle elle a fait un clone sur son poste est <samp>www.github.com/alice/website</samp>.</li>
<li>Un alias de <samp>www.github.com/alice/website</samp> pour le dépôt local d&#39;Alice est <samp>origin</samp>.</li>
<li>Alice a fait une réplique (« fork ») de <samp>www.github.com/society/website</samp> vers <samp>www.github.com/alice/website</samp></li>
<li>Le dépôt distant de Alice (aliasé « origin » pour son poste) possède les branches <samp>base</samp> et <samp>solune</samp>. Elle a donc ajouté/supprimé des branches après la réplication (sinon elle aurait les mêmes que celle de <samp>www.github.com/society/website</samp>).</li>
<li>Depuis le poste d&#39;Alice, le dépôt distant <samp>www.github.com/society/website</samp> a pour alias <samp>upstream</samp>.</li>
<li>Si Alice monte (« push ») les modifications actés (« commited ») en local, une nouvelle révision va s&#39;ajouter. Sa <samp>HEAD</samp> va être déplacée sur cette nouvelle révision.</li>
<li>Si Alice précise le serveur <samp>upstream</samp> comme destination de la monté, alors sa branche <samp>solune</samp> sera ajoutée aux branches sur le serveur <samp>www.github.com/society/website</samp> et pas sur <samp>www.github.com/alice/website</samp>.</li>
<li>Comme Bruno est sur une révision qui n&#39;est pas une <samp>HEAD</samp>, il n&#39;est pas sur une branche. Il est sur une branche détachée (« detached branch »). S&#39;il modifie des choses ici, il devra les acter dans une <samp>HEAD</samp> et donc créer une nouvelle branche pour avoir une nouvelle <samp>HEAD</samp>.</li>
<li>Si la branche <samp>bruno</samp> reçoit de nouvelles révisions, alors si Alice veut mettre à jour sa branche <samp>base</samp>, elle devra faire une récupération (« fetch ») puis une fusion sur sa <samp>HEAD</samp> pour créer une nouvelle révision. Il faudra ensuite acter cela sous un nouvelle révision (ce qui déplacera la <samp>HEAD</samp> dessus).</li>
<li>Si Alice veut proposer des changements de sa branche <samp>origin/base</samp> à ré-introduire dans la branche <samp>upstream/bruno</samp> elle peut faire une proposition de fusion (« pull request »). Bruno pourra ensuite décider d&#39;accepter ou refuser sa proposition, ou de lui demander des ajustements.</li>
</ul>
<p>Etc.</p>
<h3 id="index-de-termes">Index de termes</h3>
<p>Il existe encore énormément de cas de figure et voici un petit index pour mieux appréhender ceux-ci en fonction de la langue de votre interlocuteur.</p>
<ul>
<li><strong>dépôt</strong> (repository/<em>repo</em>) : ensemble de données constituant un projet et la totalité de ses historiques de modification.</li>
<li><strong>dépôt local</strong> (local repository) : ensemble des historiques (<samp>.git</samp>) et de l&#39;espace de travail sur une machine cliente.</li>
<li><strong>dépôt distant</strong> (remote repository) : ensemble des historiques sur une machine serveur.</li>
<li><strong>révision/instantané</strong> (commit) : entrée d&#39;historisation créant un instantané de l&#39;état du projet à un moment donné.</li>
<li><strong>acter</strong> (to commit/<em>commiter</em>) : action de créer un instantané.</li>
<li><strong>branche</strong> (branch) : ensemble de révisions formant un historique.</li>
<li><strong>branche principale</strong> (master branch) : nom donné à la branche par défaut lors de la création d&#39;un dépôt.</li>
<li><strong>réplique</strong> (fork) : copie d&#39;un dépôt distant à une autre adresse serveur. Cette copie pourra ensuite avoir des divergences avec l&#39;original et recouper des similitudes.</li>
<li><strong>répliquer</strong> (to fork/<em>forker</em>) : action de faire une réplique.</li>
<li><strong>clone</strong> : copie d&#39;un dépôt distant sur une machine en local. Créer le <samp>.git</samp> et l&#39;espace de travail sur la révision courante.</li>
<li><strong>cloner</strong> (to clone) : action de faire un clone.</li>
<li><strong>récupérer</strong> (to fetch) : action de descendre l&#39;état du dépôt distant dans le dépôt local <samp>.git</samp>.</li>
<li><strong>fusionner</strong> (to merge/<em>merger</em> — to rebase/<em>rebaser</em>) : action de fusionner deux branches (local ou distante) sur une machine cliente.</li>
<li><strong>descendre</strong> (to pull/<em>puller</em>) : action de récupérer l&#39;état du dépôt distant et de fusionner la branche de travail avec.</li>
<li><strong>monter</strong> (to push/<em>pusher</em>) : action d&#39;aligner les révisions du dépôt distant avec les derniers ajouts de révision de votre dépôt local.</li>
<li><strong>proposition de fusion</strong> (pull request/PR) : proposer la fusion de deux branches différentes (du même projet ou entre réplique).</li>
<li><strong>origine</strong> (origin) : alias attribué à la réplique depuis laquelle vous avez fait un clone.</li>
<li><strong>référent</strong> (upstream) : alias attribué à la réplique originale depuis laquelle la votre a été faites.</li>
<li><strong>HEAD</strong> : alias de la révision utilisé comme état courant d&#39;une branche.</li>
</ul>
<h2 id="avant-de-finir">Avant de finir</h2>
<p>Cette article étant également un aide mémoire, toute remarque pertinente que vous souhaiteriez y apporter peut-être discuté dans les commentaires ci-dessous ! N&#39;hésitez pas !</p>
]]></description>
            <link>http://localhost:7776/comprendre-et-utiliser-git-avec-vos-projets/</link>
            <guid isPermaLink="false">5819fd2a99480e4e24e3d0cd</guid>
            <category><![CDATA[Outils]]></category>
            <category><![CDATA[Techniques de Dev]]></category>
            <category><![CDATA[Ressources]]></category>
            <category><![CDATA[Git]]></category>
            <dc:creator><![CDATA[Bruno Lesieur]]></dc:creator>
            <pubDate>Tue, 30 May 2017 13:10:00 GMT</pubDate>
        </item>
    </channel>
</rss>